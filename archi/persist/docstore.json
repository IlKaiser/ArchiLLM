{"docstore/metadata": {"b38fb95f-4f4e-4e28-968e-5d016a3f8863": {"doc_hash": "227b3a40210ad1002cd3ff20d48ff6bf04d262ce1ac92c32d42b599cf164ab93"}, "281fff4b-ed73-4fff-947a-9fcbd5b7affe": {"doc_hash": "dec2e6c3c435d55261dac7764f214293cdd77c92a44a477a8ef04701b46ad2d2"}, "509cada2-1d54-4435-bfa7-a000d85f5cce": {"doc_hash": "87d3c6a4df88644354452a4180169ee4b5fab7dacc51baf7426e48d97dca6e08"}, "91d9c7eb-614f-499a-92b7-39a5d7ed784e": {"doc_hash": "d60ff65e0b9619b3766889bec4185339f77151afcc4daddebdfba95b80beefa1"}, "9ac245fb-f28c-4760-a4f1-806f9a2dd646": {"doc_hash": "6104ce5d00f7d36283b5c870957bf6b13c42a93a11320752dc85582530c66c2c"}, "f613fa76-7349-478d-960b-2b61c006889d": {"doc_hash": "529bcabf406b8e128bdfcd179c234ae8ff7778c955846862325cbdb2d7726f45"}, "85d2dca7-184a-4957-9de0-a17e23202a77": {"doc_hash": "c9bc72e9e9033bf04be2d3064f31a05be3811e6be7348ffa873ccc952748bfd7"}, "48d5f4d7-c4c0-4b59-8ef8-9ce6347b2f48": {"doc_hash": "7ba2c227b31f483df03b23596765d1c01c67266db487c3672997f3460d91f0e6"}, "8082f0aa-d82b-4049-9681-88118338d3b6": {"doc_hash": "c2502ef41ff69545969ca004a961b92d344f99db59094f7d53076265d8f0d898"}, "6e573fb6-111f-4f0b-b24b-07ab1c2a5868": {"doc_hash": "5c3715213ee1c0ee029a554fa2a9f23d2530009aff9c1e4ce66022ffe00de27e"}, "3b4fbc6f-73d3-4e8b-a92b-4208d641c613": {"doc_hash": "bdf8a225d6bf9f05dea3f062e1df546edff22f10ab4d313805f58392456295fb"}, "cb263716-aa7a-420d-8d88-5706d4529266": {"doc_hash": "b9c1f8242d04f9c9bdbf862b46c2f81903598e4d6cadee01de3a7ca5eb580fa4"}, "9742ce63-1419-4467-8403-3f6e7f4503f6": {"doc_hash": "12f1b13685a3390020a6e8f6297ba1b2127fafb72e83b04155cb99dfd8703f82"}, "211b935e-b817-4432-8e47-0a6bce4b7fff": {"doc_hash": "d46d4c7aa51ae82673e467613015b2bf82d5667e87fab748a0600836e3a0918f"}, "d5ae36d6-86fe-4244-9006-f3179ffb331e": {"doc_hash": "295afa60467a3f9aad35a9767ca32ae91c5e89d92ffbfd318d8fac5023586d14"}, "e40e73aa-5d66-48ce-a390-5b0e47e6d8b9": {"doc_hash": "5bba90e35db3646b6d72b70194c1152e21c73fbac9c18461140513fe7da53f01"}, "c25667ea-384b-4a00-b6a2-2f46c2db65c8": {"doc_hash": "5c5176d5191c4e8e1577bedc63f3f8acd1f261e377397328e908b80b0a209a42"}, "80d19c21-9be9-4d0c-b8f3-62cbe6675e1e": {"doc_hash": "c63c4fc9ace55bc782c31ac3638358bde0be53c47414690d08a1e090a1c57008"}, "c11300bf-c6c3-40b3-9c45-e8ae16824b21": {"doc_hash": "2a1fd6efe4a6846875aa6a17b44c15138ef164b50042498d7d9682ac83e57b7a"}, "f406b4ba-69fc-4d18-a90e-323cd44fcf22": {"doc_hash": "52381f2337a6bcbedf1dd5c5f8937188e19f9fc41e7ae4e4653f356db7a9610a"}, "8c13f683-b4a5-4e37-ac5f-0a8f5fb77759": {"doc_hash": "aac02d8fd1213d34435aa2effc3f5d98f7dce0b3b17e67b5eeea34c8e2156cc2"}, "1d033a5e-d562-4aa9-8a2f-c3a28b5f7f48": {"doc_hash": "0740ec16e56a1ae6af185c849cdddf7952ffd334f6b8793d7fd9516d25c6bcdc"}, "b113b4d6-96b4-4092-b449-efa92c67b7ed": {"doc_hash": "66cf110cb9ff7f12e1113d52965c209f1446c7c3cf5464207d38bd148360375f"}, "61b5aea3-5a4f-40a3-856c-3e818b1c7404": {"doc_hash": "71b2cecd22e7a809c6a880d9212b4dfad2ca32ccfbf4f1ac8ee852baadfc70a3"}, "e5a6a61c-1471-495b-8e63-0c74e5edf31e": {"doc_hash": "09a9d421fbe2a087cd0f24ef2ca5e4abcede84f4d1ddc0eb15891ef3f9a78418"}, "a3640d6a-cd9b-42dd-882a-ebfb52526070": {"doc_hash": "9014fd2fee4dfdccab176c7e83d7b72576b420501108fd17f7d94b48eabdb143"}, "85ab669d-a855-469c-b284-cf274c56982c": {"doc_hash": "bbec2701110191daf6f692e224c1b46241ac84a697094d7109db47da3eadfc9d"}, "1a1fdc35-ee15-41b1-b757-acbb71bef7c6": {"doc_hash": "a986563a55106ff242db8fe20ade5531e2624b3f75130fde487c1c0fc78dd897"}, "f763c37e-f749-49c6-8e6e-34d153a5bd13": {"doc_hash": "1eab1775c206585d73f98b1db49e8e53da9b2a76bc5cdfd4a31d2b943c302686"}, "84ba8a6b-f74c-4e2e-b3c5-faffc7378dea": {"doc_hash": "d951c82f741121087ab5022e88ce5765453b830a6e67d0160cde91bc50d7e0ba"}, "4f4a05e2-558c-4845-a041-f1acf38fa6ab": {"doc_hash": "fb284f4eee7da27527f5218818a6490c08b755cc9b7c3c55379ff739d170d820"}, "d0771fc6-64b4-4756-87ae-dc1362459759": {"doc_hash": "1c3531763017262a30bdc0de0c6f224af6ab5f466f072c3b14e00145505302ae"}, "71ec4650-0a6c-4e97-be94-898b09bfca94": {"doc_hash": "a026e66070c9e2629f70be2c3e0f5ebfabc03d52586fc7d49483611aea450490"}, "4a62ca56-208a-4fb8-8d98-e279704b4def": {"doc_hash": "34f4ee83b669afaa492c490fad0d7eb1edecd3edc207d6fd8033ecf764dc2737"}, "0b44a5a3-e90e-413d-8af2-adf4fd71260c": {"doc_hash": "14f6c3d63e91de545f73897e013a9434e2c665f2912485886c3ba43b8862813e"}, "3f3b4407-8de6-464a-b386-6aa25238ddab": {"doc_hash": "dae5303d61777b6b3c880064e2f9e69b8ce25ce9f2bf0af16b74477b85d56d4f"}, "f2ff25fd-95e4-49a6-b399-e315acf8f516": {"doc_hash": "4d7b51b02cfda69a6727c31d84008a10e7afd345efc7c1d105820ed111deafd5"}, "a77cbefa-6a4f-4f0f-a54f-26c319bad674": {"doc_hash": "2d29960d2c90a07d817c5be7110f3d209e3bccaef4c15c93f65895ff3a6560e8"}, "18177179-3a08-4e6c-ba9f-7681863d6a05": {"doc_hash": "995d376bdc68870501f038aba3dd5931d073b5231df9850ad66e62d462e7fb38"}, "4c21c889-ebba-4bc1-b453-0aea92e0373b": {"doc_hash": "32f6c9c517a266e68998cacabea41849ed5286625d76ca0c91ee57d1fc3ecd7e"}, "0857e15a-f7c6-4cff-be38-7afcb99e683c": {"doc_hash": "07c920842397a76e02e3cf845baf843d0eec4c0c7406612b4979da1af9b5a163"}, "72355989-d836-4d4e-a0b2-1304c7e6283d": {"doc_hash": "e3b49550c51b851d9ec6ba41eafbc61b118517e629d740a1665009cee5698cb0"}, "91881cc2-df85-47e3-9f35-196d50aa7ac9": {"doc_hash": "9306a5441af22f1c57c655667935b1dea72988218a32575d40058a4403e5f161"}, "dc1e9a60-63c8-4545-b595-458911499267": {"doc_hash": "be8873d6aeea9842099961ee5a03f923b9d1768ecce8fc042e1ae74e245e0b48"}, "463d6c70-df99-4f81-9733-c4b7424ff992": {"doc_hash": "78aa8f1540f462df664157af2f58f09ee5b05490a38c24ad39eaaceaacc44f79"}, "bae20534-8682-4b47-aa56-5e98d3482c71": {"doc_hash": "f932752e4d9fb7624f5986ea47ec8cee8ae893f67896c31037a1636546ec477f"}, "c58bd075-53cb-45a5-8166-f492fdd91add": {"doc_hash": "45af7ceee38f156762665d643ab0e401f4229440dc2e148cb32d89b16ebf2183"}, "d289173e-3ae4-4c94-b3f7-dde8a0a81a7a": {"doc_hash": "fe29dcc4e212943fc35f4f62f86a68754f55c63b0f4a2f81a45af3775dff90b7"}, "476b7ee1-50ad-47b2-b867-14ff502545ef": {"doc_hash": "7a6e0b8fda9c1cc1a23fb158075257d82af69bec1931cb5dd6811700606f7301"}, "efa1ff18-14ec-467f-ba6a-883f2ac3458a": {"doc_hash": "47a03bfb131cd53aeed3594288745847cd72b777d51c25a95af12b8fe1bd6aff"}, "fe5816be-8315-40bf-a380-8df9693624bc": {"doc_hash": "7e12005cf2afc166236269706e92dc21e2d098fb45a7ab1618934ceb1230733b"}, "a7cea9f3-f05b-449e-a27f-bf037f89f560": {"doc_hash": "21d5839a9a0c669a4031a948e9ea773cdad23c00ff801e3a14f59bb1135a7be5"}, "9ae8fc4a-588f-4d7a-bc7c-78c4e2538493": {"doc_hash": "8be0c93a56cd4d8a1349d6ece0b61c0994e9ac383207e0c0c592bf2026ddd6d0"}, "977404a6-1054-47d1-8a0f-bda9d766866c": {"doc_hash": "8166e47a8050c612fa4b0c92d5b612680050cca3ab97fec4c0414b73a6a793be"}, "3544440c-9dfe-41a9-ad36-dbcd59f253f1": {"doc_hash": "6bd040056fd91fd0045a211b6c42f83a5ca8e8b85da917e3d86ea6ce9009eb32"}, "b32c52fe-4dbe-419b-9db2-75e2b7b1e8b4": {"doc_hash": "faaed070a67b5249c6076ac2e996149cde2c6a578963893e48afa40b576bd4e4"}, "4d5f4e56-8537-4165-b55a-f15f9248e7b3": {"doc_hash": "1ce8d2094235b3ed6132d90641f149ffa1fcbb3e49480306ad85e6994b30fa35"}, "a0eab821-ff31-4d8c-aca3-525ea87e8c16": {"doc_hash": "13c4c135cb2963df755b00c631eb3e6d347d5261e975cb09e78cc0b03229f110"}, "d3be118a-fe20-47db-8061-c65ed81f6d4d": {"doc_hash": "07f03ca24b4bf1b1e8afeb6dc28fe50657bd600d4c74afb03e8d8525814b930f"}, "4a5ca02d-94cd-479e-ba1d-141203d20467": {"doc_hash": "d0d0fefbe6331a3317261f099f4faf0c1f392164eadcee5893e4020aa428b193"}, "6af6498e-9e26-4d69-a557-5c3631395575": {"doc_hash": "b29c65ee6c81c6c8d825f26a866af8111f3e0278e8d68083bdeea6d364a03ce3"}, "70141059-7dde-449b-973f-7a7161dec6be": {"doc_hash": "f8aaad4ee35af17863b569ac254970ca5bc171b41e2b12ec1a4832ab91e23976"}, "f8ed6d1f-6527-413a-a452-65745e48ebd7": {"doc_hash": "375c8841748f317c675055e590ba76f57212610d3b49544163b1bdc5d72713b0"}, "26261184-c5f1-4c6c-8549-7beb63516582": {"doc_hash": "48314d6e3aeef7d0e9704ff95300cb1435c3169518b0f672201ceb744c88c0c2"}, "ff5785ab-62e6-41b0-a34f-ec683b23e3be": {"doc_hash": "19619a66ce1fc23ef0a9c86f20a85d71cc3e3a0a0bd17a573492808c0327b5bb"}, "f39638e3-ec89-4c3e-8531-ab190bb3353a": {"doc_hash": "f6182bfded151776985e0ca61732f0b3a58596b3cdcc0e5f46a0776efccff4c5"}, "5936e643-64c6-477e-a707-2028255a883a": {"doc_hash": "8776cddcf1bb401043c42d74f7d601962849134414c51e7d1521a82b76b53a1b"}, "f1cebfd7-cc2d-4acd-8207-7356aeaf2504": {"doc_hash": "fb61cced8a872d0021ebe2441521c180cec1444b772339dda1155772dc8a3d13"}, "c895021b-81fa-4c98-bade-db10851ab346": {"doc_hash": "52da1bed792bafb36a4465a02a41d9e144f8c7875f5ddaf6b56697a867f219c7"}, "092379ba-d2af-453a-8c83-daf959050318": {"doc_hash": "2a03a3ce8e3ba7d3bf3a09ca1e825c9db003e4c9f47af444b3fee50835b82fd4"}, "d733d84e-a0d1-4383-b582-5bead2b43b00": {"doc_hash": "e6674f55add33ae95efe9d0b36e776df6c363bc219370ba2c02addfd53dfad0a"}, "869fb07e-7a5b-4d75-937c-1ecfeabb3774": {"doc_hash": "fe69d8b3cb85ba8726e1a2f224dd830102aff444922d2f3267a8dd7ada3e2175"}, "ff6b9955-eb0f-4f1e-868a-f90d025b2ea2": {"doc_hash": "4cc9228974d65e8c1c18b40008e4cab3f296dbc58f8eb40c3acf22611d8b916d"}, "c98230db-a3e3-491b-9de2-896f40695b0b": {"doc_hash": "7ce4ebc22a6e39adc2db4673387d64293c1ca37b1bb5f46e0bd2f735e8f83462"}, "5d680d7a-2aa4-4379-aee7-99ba422d0350": {"doc_hash": "f44d5dc4cef61fa46ad247fa889d1d2a80bcc50fa4890be3c46317def829f199"}, "ee2d9eeb-1703-4581-8dae-233f36fc54fe": {"doc_hash": "9f7a2b8e154b4302b71d64bf6cd28006de95a9eee1239019720a73d81165c8a7"}, "b6839f8b-ccde-44c5-8017-7668d7dc7c1d": {"doc_hash": "fe5682798110942bbba1c95c277f6bb7e54bedc02489b7a6f48462003c2c4315"}, "aefff421-bc29-4bab-94b2-9acc1342912b": {"doc_hash": "6d185788f22da808776eadb4fc78e16c87273b454f976e284b41c76d34f40974"}, "4fe846f9-9c02-42f7-91ff-13b8dbca54b6": {"doc_hash": "1c83e2aed69b9f15e149f1946cd7c1eb1bae3fe52fb49d203ddd061191c4cfce"}, "f3c590f9-7914-463c-9cd0-b535fd67e5e5": {"doc_hash": "80e8de002b425908740683e0e89fd3f140f3f799c38bbf4e33a952118a5b8597"}, "fa3318e9-992e-4afb-a3b1-5ba41e9652cb": {"doc_hash": "e60a9156283132da531dbe4844644c5bd6c08dfcfc7f45459888a81ed4f4533a"}, "b49deb62-dbce-48e0-b67b-9f3f1237c1b6": {"doc_hash": "a7366dfcc41a39e8bc0669c2e1feea8b17eae3228e8b6c03d42535e4ecbb6ed6"}, "547ea586-f8d5-4b13-80a5-256b16b8e00e": {"doc_hash": "348ee5cae501c08569afb6fe6352b82b42945e902ff486b989446fc81e0c43c9"}, "f907adbe-7bbf-4fec-b075-e3eb0a5a7987": {"doc_hash": "57f98622a2e80e3b6df0a85f725f45a3e0d1b6a89e390ca4ee4562dd3f1a7ac6"}, "6cd6b5e6-c7b6-4b33-85fd-be2fb5c50fde": {"doc_hash": "8b7a9b09f030c5c97acc86a09b0dc979bf703d488d442d83a69809b9b9236363"}, "ab6dbb42-a600-48b1-b2a8-6515863c1cc6": {"doc_hash": "3ff1ae7d1629cf14f1e484f873b084eadeb3cf31941d3c6c7fce98dcec813656"}, "913c20e0-a69a-4eb2-b52c-9f13eda40906": {"doc_hash": "ecd320371e49fc84031dbe13bcba784621865a53be41512fa0034918f5df2414"}, "b58aa14a-7243-43ad-8563-24112a760d44": {"doc_hash": "e39c2426c3e6e7a5c85189aaaecef3de7a77a775035fb887167e2c0c6debafed"}, "287dde2f-3b33-4de7-835c-45e583660864": {"doc_hash": "417234f13ec937775229d889d04658240bbc2a0a8c2731a1fd64e05fd4e66bfb"}, "087710e8-7a88-43b5-8792-38eb61eec1b3": {"doc_hash": "87ed5053515f3177b45aaa96cf3ee474a1f834d96603dadcee3ebceef5d2948e"}, "038ac4c7-07a2-4a88-b6de-3a04667acc2e": {"doc_hash": "103fcdc194978559b5ce9033342c046c1030b4cecf6ba7ef8f61e009f3087e76"}, "27319c0d-c6c3-4dbf-9d48-53d239f6a19e": {"doc_hash": "b3959ca3ee3f4361dbd988886fbfb439a28a6168d2507da8a8b314cb906f54fa"}, "c985e782-94a2-44d8-a3a6-0559b1965f64": {"doc_hash": "b1900a79d5148209da462a435ea1bd816876c0ce0aec47bda89a7ecce4fe6512"}, "87ad69ae-6995-4ec2-a5f6-f9930c6b3811": {"doc_hash": "dc2d7fdede76fad2f1be152bd7435da80682698cc2ab85e9ba19f35544e7d933"}, "cdeec5f3-52aa-4f43-9be2-0e5bfd8a65a1": {"doc_hash": "960b662bf2e325d1334660b820c723473125c3a4837ed888ba5ede2861d9f584"}, "52987080-6542-4b57-832c-67cd8b1a590d": {"doc_hash": "d5b8e82debc9b85ae61d1cb179f53836031dc33f9242e6582f7dc31f36225fa8"}, "84700511-722a-4727-927b-1a6b113394e1": {"doc_hash": "c02f4314f67b17f7071a661fd944ed87dd50431fc618073c0b4612f66ba4c700"}, "3efbff9e-dfdd-4472-8372-8bf431a48169": {"doc_hash": "fd2d820dfa0cad6c8e6b53a2aabda09014172546927139c065e78511ea87e8e9"}, "b542e02d-8146-4b62-9327-8bc2f7c4587c": {"doc_hash": "9dfe607dd2c62ba199f6102bf5c648751a8deee53f1707d340bcc4e12d0f8f11"}, "be535713-c8ef-4280-9c78-d2e2e720ff19": {"doc_hash": "77c5870598a19d50988e180f8b0d77972362615023bb8230283e0cf6a4a412b0"}, "47845812-fbc3-4a8b-a094-2f07bf4b7f6f": {"doc_hash": "46bf470d5005b95c06b307c60e89d3255aea4882eea735a654967d1e1875cc89"}, "779ed14c-2443-4a40-be6b-a9730723f25a": {"doc_hash": "28acf2e4416b3bbf5c811936e218117f821f3fe23faff815c4de76c59b2d8537"}, "e7e0fce0-de95-4f3e-b816-d23bab1672ed": {"doc_hash": "f190f4e59780b14cab8659d9fe9fdebb1e9e31f8611863e1260a3f519432316b"}, "128deab1-0a77-463b-b0cb-3f18bdad8eb6": {"doc_hash": "dbdc0a77f944bb2da58dc168d5316e35ce4cf04b33cd46864a407ade2d17cff0"}, "50e508f1-0fca-476d-9c93-4fed86689305": {"doc_hash": "afb42520ea75cbb54c4727190d11596354e14c67a9294ec7bf8c94324491b3c1"}, "ac9fb681-468f-4b2c-8154-8a733f3f561f": {"doc_hash": "cafe890897fbb52ad352503658691781b71ada27150104161605e93ccbb21182"}, "cff133aa-3843-4699-a15e-ecb2ebc1eea7": {"doc_hash": "4993794b84a1f0bd8e93abe9d5f9e25dbf23ff39bb59a4c5a13d969a67e2a462"}, "b019fa7b-d2c4-48cc-882f-6b539445bd02": {"doc_hash": "f204de4b077674e81976fe00b7378f7657262fce76fcd693283dad3df770996c"}, "7ee74cc8-21be-44b7-965b-14e4cf953b43": {"doc_hash": "6132914a6120a7b2ece82d025ac91946bf6b28778dd43b9f16749059ef879e6a"}, "d7721b23-53c4-4b7f-8e5e-4278ee03a5f0": {"doc_hash": "e822c7aefad9944f775a159077cd798e4520b5086ffc2a01b6f6fdf1ff75939d"}, "a242dd55-d696-485f-83df-fc3e614083e8": {"doc_hash": "374c3ed92df034989fdfa23b62f7556155fe07a203852ed7adb292d321c3cab7"}, "f54d7ba3-f556-46ff-a3ab-cd5f619f1b1b": {"doc_hash": "0949b41d3ea5754e7ae10d74b528e4ea25de9f1bb4b7f42c47306ae356d373d7"}, "8fde44c6-d210-4a83-9a32-0467516aed7e": {"doc_hash": "586be1005f2fea9f0f4bb41b583ab90649ce497461cceb9a9b6a2001a58d9c81"}, "2bec580f-f045-413e-88f0-fcb8917ca263": {"doc_hash": "61f2f5c469ec27d917aa7992464c0d1bb87bd25b00b7be4a1050bed1162e62f7"}, "3aa50719-4a89-45ff-b4f7-efc373863d9a": {"doc_hash": "60d1021a067c03fe4ec433960853be906ac1974949395863c0e75e8866bdc7c4"}, "9e7e35d0-f9a2-4668-9105-1ba735e4ebdf": {"doc_hash": "0b148d6fcb870e33e96e2c7386e3d81ceaa423d090153bfa389d1aa81c176f4e"}, "a23d09ce-4a73-4fdf-b330-f388c9fc96c4": {"doc_hash": "56d7821b2df394c8a9ad1c6c1d8f69be2cb41b2d98471f9a13ea140cb7e3751a"}, "bb3d1630-781b-45fd-865e-37b21fe53a95": {"doc_hash": "83374e698226fcdacb077c2a50754b1dd3aa68884fdd87514f3410306df150c8"}, "211aad95-fd45-4fc3-8bf7-d5ce4f6a786b": {"doc_hash": "d89aaa27a3bc236b07796162b1e1560cf102da4c37028fb7fad31a221485dfc7"}, "1f0ff3fa-9f68-4224-a929-b150c5cf4ba9": {"doc_hash": "e37d5ade77c1cd1b141f8ca366a8cf1d25e0364b51bb5878fc7b3ff884825dd6"}, "021c7e77-2dd4-40b2-95a5-b0a6a7dcd9ac": {"doc_hash": "5f60ed1ab784ed346359c9d833586163796f0b9f556932827a83eb7e6c76c93e"}, "c8433ed5-cb3c-462c-b7a0-145c4d450329": {"doc_hash": "3afee2e4ef07bf4c139b097ab70d1ea2df511b04835bf9aea1b9d100656b5237"}, "c4ba51fe-0905-443a-99b1-99a3b9fc5db7": {"doc_hash": "3039b861010d538defdab319c073a6a270aea17344fa25548c1bb5fdd167c3c1"}, "ca704ce1-cdc3-460e-8d0f-cbcfc66e5b2f": {"doc_hash": "eac98879df09a59dce973bf8a4ec1f61e87c73ed4b8a13f613200184663314aa"}, "49c88a0f-a9b9-48fc-b327-61c041a2105d": {"doc_hash": "feff027f964fbc67c5fa7c1cbedad3a365f91fa2ce1408476aaa9108ee539bb8"}, "4163bc87-2d68-473e-bde6-f530c956be93": {"doc_hash": "10cbc842ffb31a2a7920d5e296820dde561551c915d310aaf262a12433bef875"}, "74ba657b-c222-4ca0-a98d-761eab13596b": {"doc_hash": "13059762bff0d86b9dd329b5587537cebd56e4efd21d3ef099d04763ebb5f4a7"}, "52520531-3c4a-4baf-a77c-3d6ec1cb638d": {"doc_hash": "fa55a53d693753873b7c73b16046c32182a73eb1ebcbf3e01d6a7f6dc40fa3a7"}, "397ba1ef-f45f-464e-9537-6409762367c4": {"doc_hash": "d8262dff463964d53b6ba542ef0821cd5a0b5a0acacda442f66e7f1b467bd81f"}, "0c3c873f-ae6e-42d2-8f8f-18bcbfc00875": {"doc_hash": "44969d2085cf6f15f5345f5991eb1be494d71b6bf90f1148f85b34cef910448e"}, "b6a392b2-bcc6-42d0-a72d-ed81875af65a": {"doc_hash": "a6d9f0722cbcb4d62fa81fa4082c1d2435006615094d17656e692e03e7e088e5"}, "e6413e33-4a7c-4373-b8d4-429672129b66": {"doc_hash": "0da5ed1532f0ed60f6982d7ca7de8a7324c508eb7adf38f450d322c8531d9277"}, "5a83924d-7d0a-4448-af4d-f86dff8e5f11": {"doc_hash": "8fed24ba92feb568a8a7d476a5ee9ba2b8107ef768ef1489f726700f43f161b6"}, "c7386cb8-6dbb-44e6-bb49-c26db4f4816d": {"doc_hash": "4aaa6fd36a9a22c70289164ead30c62ecbf4377b89565742f788492c2fa5f50c"}, "6f1c6249-4061-490d-b196-3bd5882223b6": {"doc_hash": "0c3f1fed710e79d4172ceb43aa3355950ac7cdaf687895ae175a9a766938d71c"}, "b7049e14-f128-4c3b-bd23-12891487a547": {"doc_hash": "3aeabf5d8f0fa56175c8ff647d82895e77958c0b633e789cc0388546b21eaf31"}, "58cd8407-99eb-444d-ad58-c1305be12e0d": {"doc_hash": "48d922abb8e5f012eef4468d12d3a145f8cb69cf6dc049d99e0ffc05a90525b8"}, "79589276-87b2-43b5-8d31-5b23582cc573": {"doc_hash": "ea3986c2940b07c3dea3cdc590da50866f48ea280e85d752c03cee87eb982947"}, "b9ac9b14-d0a0-4951-97ff-a5ddf3cc0616": {"doc_hash": "e8ab34e895c72c981d420433fa7110bcc14f3a20ea16900cb1273cccfaa0436d"}, "89e4cd78-3995-4145-b39a-228330a023c5": {"doc_hash": "18f2d916f841410c5190de796e8a835d237e8eec06151f047b6b30b6f56e0210"}, "217e9b6c-cf1d-4f8b-a560-819bebee2df9": {"doc_hash": "0f233f8f9d1d41658c95bf978c3182791168598fb288b0a49c03621c763f6278"}, "b6afd8bf-b9ca-4f4f-a2d1-fc34290cb157": {"doc_hash": "6dfccffcf619958813bafe6b551382aa3348f4cb992d86884c8affbb711eb57a"}, "2adf6d9a-21fe-4d05-8103-02f3f4fd65e8": {"doc_hash": "c11244f16997dd2268bba101a6f48f65eb9945a01318d7cf47be5413ab155f8d"}, "7e9a631a-2bc4-4fa0-b970-6cb3e8611fcd": {"doc_hash": "a09c417dec99abb810ec6225647fe4000b827c7d04f6a5969b441471d70d2092"}, "431e80fa-41f0-46e0-9d9b-b0cc8a551426": {"doc_hash": "8576f687a0761025a65d885adaf322d512439a596cf354caa259516c5f958480"}, "67e79bcd-c546-4bc1-9048-81765b455dad": {"doc_hash": "8ae5acdb242caf9ff5bcab8461c0600980d0e0c0b19e79d10d9634d6cf67877b"}, "1b1860f2-ef2c-46c3-8e2f-48a2c65b2e6b": {"doc_hash": "17542c59cad63b9c940627e364662dfe15fc926d95d83b1f7cf5831bdf0e031e"}, "2a54db99-6b15-4df9-a2b7-034618c88018": {"doc_hash": "034d7421adf8a187354ca871a82ceded7f1f4d8e7ec442cc2bf61d9897e3d8e4"}, "f37144aa-3ced-4359-8cc6-6a64e0806b27": {"doc_hash": "7c4d456574f7eb7addbdca4c0ad2d77c5aeb2ac36341a8a745cea200ca201dce"}, "0ad85d98-0f5d-4a6f-bde4-40141f7631f8": {"doc_hash": "5dd6776fd4236409630085083601a357ee4809032e9baeac074f850c6f3eae10"}, "b960caa5-a7f1-4a76-a7a3-853f79ca0efa": {"doc_hash": "5b5cadc6af33a52eba72e55950bcfe036ec225412f41b092383284d92bdbf390"}, "dd38be3f-4f6b-41a1-9d43-0c3129b258e5": {"doc_hash": "f78995921355444a306ed7ca7f247a08dde9b6476c62e9c0d54b6b071808f7b0"}, "4a6c22e2-4b66-47fb-83b3-0b639c166f57": {"doc_hash": "65e5465032f2c253c6a59646ae33edebdfc6433f2188c215c5a771ccfab146f5"}, "2ec86096-ee3f-4003-ba4e-e86569859412": {"doc_hash": "46e0cffe97f438ccc3385dac80aa4f04fa15783c16eaa7ac05c821697498b02b"}, "14e56610-9479-44f7-a240-6e4e823d8726": {"doc_hash": "68d4f1448a1c33e9cc1320fde8ca871c3d1df6c2cf47914c2ba05e5d99388c26"}, "4ea10a54-a0fc-4c84-8243-a9fca6af0ac1": {"doc_hash": "4dde7fa6ad04cfb3aa4b54542a9343117cb6747cb60528f5b84b2322473f9033"}, "27911c6d-42dd-4c7c-985b-6eea07ab82e7": {"doc_hash": "44f365b3f5b03726bbb2dfdd607789c77e07bca4a3fde922da0c65898ccc938a"}, "026253c5-92e8-4236-9e23-5b46842bb608": {"doc_hash": "6dc73ca7463a10c5726dfb4caa7010af234977f235138b1c033dcb4ec8a2d3b5"}, "6df83b9c-39fc-4f5a-9d24-699b883d9943": {"doc_hash": "e8452a900c6631fc6b417332e62f3477f1bdde9ca9e17e1e508f5ec53a07e7a0"}, "95a0c38c-6d33-4a41-964b-2c3fd70da37d": {"doc_hash": "ecabc7a2a73c2e9bd88c8a219add937da97e0c7d16ec0c1019c5b3b5e3f8792e"}, "169306d0-9f5f-486b-91f1-182f7df1fc76": {"doc_hash": "71a3c80d1df0eadcd4d0197cde930256c814d782e3ec5ae931e5d085e775428a"}, "2b6c2aa3-2db3-4dca-9e56-1d803f414ea4": {"doc_hash": "6ed5155c98980d7d02be58a4226e32cf679027999c87fb99e4f362d1c9b067df"}, "81a15016-a368-4998-9127-894dcbacf33d": {"doc_hash": "2aaacf415f12fdf251a2d627db2054f879ac8b1f6764a0392e11494329b2b512"}, "203f4ced-483b-4e62-ba43-90d1992ef1a2": {"doc_hash": "fb146f3eb12dd1d5d174471c6639748aeb631c443be75248b3a2df99d0f3fa51"}, "84ff9427-ab7b-4ed8-9aae-d20f2c00f3fd": {"doc_hash": "7b489047870026094d92dfcb0325c451f9c7a5a3eee5080c59dbd100827b2433"}, "b6c11e9d-e0c1-4c19-8467-e54fe7e561ed": {"doc_hash": "3eba4a8713894d970a7179de8152bec6c2dd28bbf4c0d6f5c714ac56de3f8a5a"}, "020cfe55-eeb0-45b0-811e-aba74eb2f3d4": {"doc_hash": "70b12c736bc01ee6d614e123bf8d8d33dcfe86ab75cef91d8b7f3cfc20f5f288"}, "b2c71f0e-fd46-4a5d-900f-90aef7e5987b": {"doc_hash": "72104617cc965cb59b85818832fe978e5c6ca21a76365bb3ccb9288e674b4f6e"}, "089352ee-6054-4ce9-8d5c-37044a4725c6": {"doc_hash": "f64080a5eb6825eb1bc84a564b26d65c8dc2c92b378e92ee3663d297556bfaca"}, "8b18a1c4-ad18-4ab1-bcaa-1451991fbc7f": {"doc_hash": "e31b360c7322b664f0386b31d8d9621be4218dfdb91dd0944ed68e7c1912b83e"}, "1fdae6da-b05a-4f08-a347-7ce75d6f2988": {"doc_hash": "2598bf240f4b8a870de2523bb94423f1b4a1bf027af3b03a81102f9f076556dd"}, "a24561b3-e15a-4ef3-b834-2b25083d49ed": {"doc_hash": "f2d7cff319cc60a49bf7802a3470ccf159b15190ca3abd08828e1065aff7678d"}, "6473d621-09a3-4d8d-bff9-de7644800416": {"doc_hash": "72ccbcca20eefb38dfe40a8059dcdf0fef9f2e775cfb382d2d258518ac05366e"}, "079146f7-2d47-412f-afcd-c31f1434e6c8": {"doc_hash": "4a492df26c3c50fbf6e816957cc3967f813be0b6f5fa20089e3d00d0f5c98a35"}, "9c7c7663-3233-4041-b833-566fb60891ed": {"doc_hash": "9a3967fd531a90a4d1bc041a549dddd9ddd663abada166174f7a260cc7876b83"}, "03b3f4d0-afc1-4077-9cdb-d4f7046c5ac1": {"doc_hash": "8d8ef2f04b38f2d56384c40efa5bd22bb19ba067bcfad9f2307ab9d1d7a6dcb8"}, "973c7b0e-dc4c-4273-b9e1-6daed962c57c": {"doc_hash": "1eb39828b03da8eab0102c6032632328b7bb9c71bd58577e9b236919d652e2cc"}, "fa0557bd-72f2-45d3-ab41-2f50f76cb627": {"doc_hash": "1964f5d465d4a9b5256f7cf094ae6f34fd76bffc1cfa427c6cf183f2c9f44627"}, "f7db59a5-11a8-46e0-b89b-7e2029544ef0": {"doc_hash": "8e0b670eddc1be7b812988d93f35ac843c7ae55654e4b3bcc9a1e669dc6bb560"}, "16c69326-909f-4d43-bb66-8aaa483f8b20": {"doc_hash": "7114ec75a7702cdde0ed3a3ced6269d14d511c7c360b4f21b61c22f69d4abc1d"}, "aa5a35f6-0013-48e1-9714-5e1d15e28982": {"doc_hash": "74b7ff95c67f90547178a02f980ae9ba89cf1b2e17331b273125536660a76db3"}, "55ac7574-7e8c-43c6-b92f-b5956a1d3e27": {"doc_hash": "6d432c8611bf080733da2d95378acbacb568a2a3aadff4e13ee5ab4f6f6824ec"}, "50ab5b4d-84a7-45e5-af65-ea768a436253": {"doc_hash": "2e6b54ecb6372878b384b69e55cdcfe16a680238da878efb093d03732eee7060"}, "c1aafa4c-2a42-49f2-9169-5bc9e5cff21f": {"doc_hash": "e17619c901443a62599fb3b905fe0a06b503a78eb58fdd305536dd2978028011"}, "dfd769f4-bf33-44fc-ac63-6d96f285f20e": {"doc_hash": "3361350790ba99fe53891be89c0d638fa92228b25bbdfa8a07b0e3189654b2e3"}, "6787978f-f1c8-42dd-9b8b-53cc35e8fe4a": {"doc_hash": "0670984d8a24b7bc70c598f3f6d9a560ede4ea6f4e696486d781ce626af5fc9e"}, "29f6b9b5-d5dd-4e33-bb2c-2ed675045b8f": {"doc_hash": "761bfba5032d5f0504dc298118d36c9953a569ecf5391187e784bf47e4361d5a"}, "15b86020-9877-43ad-b3a6-fa925ee4ff59": {"doc_hash": "0cfa35f060475de20fde373e753177f84a8a1f7721d74f02d5022ca06dff0de4"}, "c4cc31b0-3f53-4465-b23a-ea6393447f6f": {"doc_hash": "31d82f810c97e8ce616222302ba821296a3b9a4f97489d7b963e06bce19a3fcb"}, "9784b06e-5e3d-4421-bb88-37a9122851a6": {"doc_hash": "de0aac5b9e5e43b2b9ad458be6432b3e073a95ffab04ded8af3a3c676a8be35d"}, "0075b5ce-9a5a-47ea-acb4-ff9c4f7bbbf3": {"doc_hash": "ead120a21632110ca1d73dc951b6f945e8321fd310df93de5adf793a69c376fe"}, "0d7040fd-03cc-4605-b0e5-e78bc84766d9": {"doc_hash": "85e447d96af144fc38778cecd533cfc2d7738858fb9d4c62df010b4a837666b2"}, "7ea93022-b9a9-478b-9649-12bdcd0c7afd": {"doc_hash": "805bddcfcf9cdba26ae07b56b6286625569cb89b35304269422acb04b2c91b4c"}, "5b20ac86-916d-45ac-8c95-ff0101369cd7": {"doc_hash": "4249df47b384380249e8f5c2a33032993898feedc4a21aeabf25301c23b6a24a"}, "1c17c0e7-f9c2-4ed4-9cb6-40bcaa5d13e7": {"doc_hash": "cd56ce932bf4dcb4a3b7f55a64e408a1ee0c1ee0bb85863dbb092be1db320140"}, "12cc785f-8d99-4437-a08a-fabdba957e3e": {"doc_hash": "af9c0c342ab3ae0be28c44557d658ed5e220f1b3f9878150886165c0a256d61f"}, "eb4961dd-98d0-4ad9-89f6-b8f3a0db486e": {"doc_hash": "c6201d815669d953bfe7c404adc1cc4d3b61df2d8c49ee66a185fa46976d0106"}, "b0dc8cad-be8a-45c4-9fe7-187dfe4ef9c2": {"doc_hash": "f84b6421b4f3225a8ef88cdd323142b44ada274ed174afe267d70f23e1dc016c"}, "059ffbea-c96a-4830-8bfd-77208657d06a": {"doc_hash": "41895e0363698a9cb8c69a250711ebc826db523a75d1adfc08ed5f852e596a49"}, "9159eb97-cc7d-48b5-8101-6e0d8f87a1ef": {"doc_hash": "6cc1f468a9ab2cda4c2ecc09f28fc512227a8fb4e9d5d7caf6116008f271b7aa"}, "8c343aec-c413-457a-bb2c-7ad70ccc06ba": {"doc_hash": "6edbd16a78f34673acaa2920070bd3d19eb7c2dd621fa3d2a5572e7bfcfd7d5c"}, "3f1e7b27-ae54-48b0-a038-2dd0a416090b": {"doc_hash": "126a68936136c60320c364c3254b68f005a4bae6c5829225bbadee171d0aec3d"}, "85ccbd40-cf03-45ab-ba64-813655718169": {"doc_hash": "db825761d673529c2d052975391d25cb8bd381f876fc05e0e4efad1fb377088e"}, "712d70c9-a0f1-43dd-95ec-15ed3e91af7b": {"doc_hash": "0e5a22dd2bd151b91cd8687b7053dc5e5b7c2a2a43760edbe5c311d705fe6ad5"}, "6fa49445-43b1-46aa-b7b5-765f1f6127e1": {"doc_hash": "f958bf5624ffdafb9cb48969e44e43904ec22140bff2cf446944051b2cbef805"}, "7cd045b0-7bd2-464e-8581-649c62634755": {"doc_hash": "2ef1d91b0f15a0c123ae2c34cb0baa5f888722a3b820a094240fc0976d7a4fe0"}, "061b00a4-ffa3-4457-8699-455df15ac8a9": {"doc_hash": "1e39c6b2e09206938f40027ffb01f9b74ec47beed43d3f46b9ea992bfa35972f"}, "10b048c2-392d-471f-87ac-df42a5eeb32b": {"doc_hash": "3e7b74a6082b7629748c30741570c7b39282394423c5139bfb55514757390845"}, "0ebe6a7c-60d5-4217-bce1-5417cffd9ed0": {"doc_hash": "45cfdc803e3234f16142b1db2017f852d9f3a49fcf634ea19af58d98e4063fb4"}, "94b6e2b5-b6cd-4077-a5fc-179f1ed63f0e": {"doc_hash": "47e607b4f3714442c36a5df01177ac05bfdc68f83aa0ac529f10357baea73c3a"}, "6c8cea40-fe56-46a0-873f-308b8ba08bca": {"doc_hash": "56daea3db728fbd02cd7a9bdb1971e3172b089bb27ca731257736d8778b50a64"}, "46fe67e1-4cfc-431c-92a1-72b63a81c31a": {"doc_hash": "f100afe06d1fdd549ee293df83eaa6f0ac7284b0b3f96afa8c93b865749c4e24"}, "0ee9d65c-b0b4-4f68-833f-9768807ceff3": {"doc_hash": "27bb7a167a4f129d0e504beb350c2080b1215819cd4bd6d7466ef2f0b831bce0"}, "72d9b5b2-2c2f-4274-9936-50799d67c548": {"doc_hash": "cae3e9efbc6d3fb401b7f8d314780784d8a319b0deef14405234a951406ad1bb"}, "4bf2f4ca-f81e-4723-8fa2-6a4f7fbd06b8": {"doc_hash": "2e6164ff88ccb78a46c3fe923590fc422dc3e5e6867efff5cbd29d3891056a46"}, "d652bf09-54b0-4168-acc7-f150bfd03c93": {"doc_hash": "69a016f794cf7264b9acf0f89d3462b60dc1feb05559b49d398e78ed8a24a03d"}, "b72b372f-9d68-48c3-980c-12136c316df3": {"doc_hash": "e4305ce01f0b5815334d2a685fb785dbfa84f379414c897c7d5e4ba6fe78dc2c"}, "7c5e91c0-9fe8-482a-a482-8bbc3dfbb485": {"doc_hash": "d598971d98c7c19475a774d67201d0fd3ddaa96ec702d5d1e7cfd5eadc3079e4"}, "42266558-3359-4a22-b4bf-24f94cc9c2b8": {"doc_hash": "253d394b629b1421a3fa8ef106019cc39d32e75d656099e6dd312d8ee73beff9"}, "d88a53fd-eeff-47d9-97bc-6c9a977e8f4b": {"doc_hash": "bbe84797e25073e9e12e77e4a681356583bb3aa92986640ac8039eb4f4947ccb"}, "75caf562-7a06-406b-8eb7-74c648fcc5ed": {"doc_hash": "b5ea930d1547f055c49cd3c4f8b11660feb0029e9342efd9211211a7856209b7"}, "68dbcd2c-8984-465d-b58d-67665b72d84a": {"doc_hash": "09dbc8087e2976e5ecce51b8ed7da78217d0fc703812cda4dd72ef6a25eeb557"}, "ac117449-6a55-41ee-987f-4d3f8d38b010": {"doc_hash": "0611cfbbfef0d684fe926ade4337ca58b9b54dbc7f2cf945c1f22419850c0f57"}, "04c82f54-7421-40d9-866a-b02704549018": {"doc_hash": "f94868690e148eebfe4dac29be8e25239079b30aa3eb8b719bf85fba4e04c926"}, "b8306ce8-0170-402f-aa7c-d99f02c0837e": {"doc_hash": "ac032da04b05b9091252a24189fd64e7003913d073bf866fa0a9032f307e7af3"}, "9c04a849-eec0-480d-92f3-18c5277771e7": {"doc_hash": "aa099f3259414154b5ef786daa2b08e02e5d1e7c6159b87100ba2fc0925ed6cd"}, "6151c1dc-5d49-469a-ad8b-aa401cd8d228": {"doc_hash": "2d38ae703071766e2f50ac232bac1d5341414eb2bf55a259a7bd8e4c8411480e"}, "c250d60a-7527-402b-a0e2-e07afec7298a": {"doc_hash": "42d0e0618f783db8eef412cc2033ce49595906bc082b9601d3c89e14e17c7092"}, "f374b933-4e08-4923-9145-0cdbccd4af0c": {"doc_hash": "f5c0acf7c345221ba17c3d70d9462c5ad46f9461d5d606d3a8a25144ebc597a6"}, "59d14189-8322-4925-a478-7fb3fb6d927b": {"doc_hash": "98258071e1527f41e502d1b0f9c22ec61cfcea0c799895f611bb474edcb749d0"}, "dc333974-748e-45e3-a3fe-ba03af452aea": {"doc_hash": "374d0e89c858d7661e982a9635b34053cc3caa62a630e1db40f5fa0badafc4d2"}, "fac16ab3-d7d7-4f5b-9484-235a70ebb130": {"doc_hash": "91e1b64a717742185f09151039bbba3faef03741e520cadd64ace61756604372"}, "151f3eef-958f-4743-aff5-05e2f0f20d79": {"doc_hash": "466f478b73a224ab957c46ccf8cb40b8de451f1c5cff467c26490c083e8a3d9b"}, "89fcabb5-793e-46a1-b481-129d4dff7a04": {"doc_hash": "117b7bc78264e5a79a52a11dcfabea95bc52dac85861642d4ce32db4a1c77554"}, "8b877567-5c89-4689-b9b8-fc09ee9a473f": {"doc_hash": "6b9a127eb93ab16de0076cacb0f6ce14c825741cfd0c9390c70e173cc9a2bd9a"}, "d6b778f2-9cac-4e54-8769-4a7e14931a9f": {"doc_hash": "f0ba4258449f6f0e01ad587e4d14cfb80fbdf81f2ed7ef621dfc38324baf7d5a"}, "590cf0b8-2bbb-4179-8f8c-5be02e6c1bac": {"doc_hash": "f2d1c3ab55c92cc9f61cbd851845f4bdbca6e4f660cd450b1fdc0273a04eb75d"}, "4dea44e2-8c5d-450e-ad71-9385d8654579": {"doc_hash": "a59e9f8e17e265fd75dd54d2f10047211ee810863a4157dd06a9c14e3eae8837"}, "8d24c5e3-1c57-491a-83a3-5500c239d127": {"doc_hash": "b81e6a1af6c9d4c7b68b72eec963507ee548d29408570d8739431ea33a166e9e"}, "9d6975c4-2c9c-40c4-97fe-9cbb5fd93189": {"doc_hash": "358ecc849a30569f303091c2b6b334118be81b997ba9d7e0e8ecd732b194b1b2"}, "1ff6b1fc-7851-4e55-8c39-8c7f9f713672": {"doc_hash": "40e87fffdb0d8296b3b628ed2ba72000e76757f3ce2c0e8613adf6a14d04eef6"}, "c035b569-264e-4d85-a576-42dd44888603": {"doc_hash": "9bd3ebe56b5962e015523e500368b66136ec72116285f670ad9c42318b541028"}, "fcdb71fc-e429-4122-b8bf-0f48921c6a9d": {"doc_hash": "df2a2b5f5d078d4319206e38b3373bff99a2e668b92b58fcabaf743595262fce"}, "6bfb181c-0675-4fa0-83f2-fae9ed92e2d5": {"doc_hash": "63d3ccc139441271bae8af69a7572ea4112cc3d34164b57f674ad7b87fd0203c"}, "725d07b5-6c10-45ce-bafa-f2b6b0fe95db": {"doc_hash": "c27d53d00a5348167475a6e07422a57d5f00ebd3a99fde668e7bb1bbf6622bc0"}, "0d7f683a-9add-4e37-8d16-20d973a73323": {"doc_hash": "e6d435d232018d7f32405685c06170a1fd3b53efc489586ad3f0c477445f4cbc"}, "94c00d46-45c8-464f-a552-ce428faeb428": {"doc_hash": "1c31eef4c6f893d733c7fc84d8230e76daa3811160eaa0bd90b8c8be82abb39b"}, "0edce43c-f25e-46ad-b947-500e558cff3f": {"doc_hash": "23b42689503de6db1c6571dd21c1048f305b32d7766e2004b31984340d4eb152"}, "6e6b14a2-90e4-4940-98b4-596a9d88a99e": {"doc_hash": "2020835a8c44d9b0ae35b88982615bd5f212ab345b5b441dd9f6c659de0e28dc"}, "9a5c2749-e80b-4262-81ee-c90b27d89962": {"doc_hash": "45b998002e9d13724244338c2e048a97cbbf657d1df33a5c13014e3c2b46228f"}, "3699394e-f649-485a-aea2-23d9178111bd": {"doc_hash": "12374de4027418f656bb8db6a3050a4a36fb3926589acab97c58bd3c1d8784da"}, "60da03a4-8b8e-4710-a2d8-e7828099eaa2": {"doc_hash": "967d83cea6b89ee1e6523a94b779ebde07de38a55add59cb17a265fcbb640675"}, "a5ea4df0-77f3-48ed-b2cd-cb019fb4776f": {"doc_hash": "ecd942f19db8d541371325495a0ca149751ea984fe9d2d97ec01029a22a2d56e"}, "ab201668-0b22-4535-bba9-493b14c2ec79": {"doc_hash": "1e989ee6b961fabb9ceebcfbbf827d641788f4ebe095cf6f4791a434b54d9ab4"}, "8bd236e0-d988-4f98-9ad4-4b8d14fe5028": {"doc_hash": "cf5f7e7d0d0e5f521e51e1b9e306e7bbc0eb349e7363f93453e64931c21f575e"}, "d9ee804f-a43f-4858-acb0-6b693df0d7e3": {"doc_hash": "cd78170d8729521debf15452b526f7dad2dc6c5d7c040d292237c0ea3eb26f37"}, "1812fb5b-940d-40a9-beb9-465156958cac": {"doc_hash": "a71ee67fa8df633821d01126d230226db87f171355656da11fb5e86c11c356f9"}, "4b9b8a77-62dd-42d5-9208-9b61ce0bf82e": {"doc_hash": "adf52d2eaa86b0f6784ac7b2648649319690b0f38b93216a7342755e58f88eb1"}, "e948e854-81c2-4be1-aade-a68e49b55938": {"doc_hash": "e770f23e1a40bd3aab098a0a5ed99e8eb5739a5658d5d2fa033b12e77ff1006b"}, "8cdcfcfe-f236-44cb-9507-76694093fbf6": {"doc_hash": "3095188aca94ba40ade787ec3c2947dbde2620d96de4f7bcb2ab3e9d34fc7a02"}, "05fde8a2-2ba9-4273-8832-1dffbfcbd4a1": {"doc_hash": "08f3a14396140b192cb684e2e95a76e5b23390ea7bcd6afbd7d86a29f242fb04"}, "48244bbc-a431-4c33-a0dc-07ec696c4d44": {"doc_hash": "0d4242167364374423ada840c83ce8a17d357b1dc0cdfc3ce6d18e99a3438acf"}, "5ee52932-00f2-4506-b7c7-250cbf369516": {"doc_hash": "7f9668cb36a4ebc8252afa562acaf83134e660a7f3d12547853c53843c6acb20"}, "a1d6aa73-65c7-4326-8147-89355bee576d": {"doc_hash": "7686bc79fc6f3f987f1988c0d896fcf2c82751cd0f8909bea9585bc0c66a2bdb"}, "ea7b3275-e693-4ab8-b090-acafbbf46373": {"doc_hash": "91cc8c22742aeae4211e2c85893d05e34f957f78e8b29290a0809891aa83970e"}, "80822233-0518-45c7-b001-19a22bb6406b": {"doc_hash": "81cf9b9589289d92d1a2c2e82cb476aa2e17b8d0506096b59508f7128023ecac"}, "ea35621d-23cc-457f-8de9-25f17e812f65": {"doc_hash": "647e4ea6c6142b423bdbc5d5a15a4117f1c67f545c597bbf769cb364c6680c4c"}, "17d7c8d2-b773-47f6-a60d-368236c917ad": {"doc_hash": "ba76a404b1c48875ae4bbc29a9b1d4fe5d1dfd6d8198dc42a4cfec82402dbc88"}, "cc178ceb-c948-4d25-ac3a-626e05114aa0": {"doc_hash": "be343b0d9a356f29c5e9b6ca2f14cd5910fa2a2eec9d3eb2c5ac0b1f7ed0bf16"}, "699dbb98-b401-44f1-a71a-fe3b2ef159f3": {"doc_hash": "fc0bdd20125212a742e6611b96f4ab51c56833725ef8ccc4d187cef842bf7e0a"}, "aeab86c6-0a5b-4f70-b34c-3291edfe367b": {"doc_hash": "9fc12381bfa64ca72ff2ca624f295946ab060aa32541a2b3d7add1fc2e25b514"}, "d7443e9f-451d-4b58-a2b4-c376be3e8574": {"doc_hash": "9839019c3011b8dcba4992c897faf4472994b7d0086d549d168358dd19b43c5c"}, "1ad65550-6cfc-4a40-a1cd-9045e9dcd038": {"doc_hash": "cc3b27ae320c13e31cf7eb06523d3a502403118089e588c73aa33db4a98dc78a"}, "4efd8eab-cd62-490d-9d0e-19ba35515141": {"doc_hash": "3bea509b3fdf075e2c839195bef6aa4e278042e6de7581e5a3108e6d300a5cbc"}, "a9852f67-533f-49e0-bcd1-7b3cc7585035": {"doc_hash": "b06051bcb6d85ac4b9e5d51dbc4a3ef03448712868786d16608e0eeadac4eb2a"}, "da997f14-6c82-455f-a84f-4efb0ffa99db": {"doc_hash": "a6c0834cea39963a201a0d263aefc25f24417a6edbd9578ba30e14ac10ee5cee"}, "89386a21-f946-4d07-ab33-ecceb0191b6f": {"doc_hash": "eea12eae6f1c4f911a3e7d4b051ac2d6cb6e5cc4570b6a3c31e4a610b036dd96"}, "5f5f442a-7fb4-45b0-8cb8-d741810c39b2": {"doc_hash": "b04e50863dc12a152f597cd1eed0955a1a6de1d9329586493bf1fb7bdc3942be"}, "79fe9496-a783-4294-af5c-94b27ca15f09": {"doc_hash": "e9b95ef17069af2c4d83588342f54474619242115a1845ace75b06058ffed4f5"}, "92e19db1-018a-4f48-bba8-4f1d42746bd7": {"doc_hash": "e1151540884728145c7a2e1efa84d787fbfca3241eeb80fe6ff6755bc014b03f"}, "8c37c6e0-3ac1-4650-8fab-02951c10e263": {"doc_hash": "4b6477eb4d570216e8d911b0f5654e311932beecd94390a79e6321d964dfd193"}, "be799452-a967-46df-94b0-71d51e1286f5": {"doc_hash": "e5733610b2a807107cb8425a03fa8a0705e3a2a4506ad278d3a8e7fa8a36f7a1"}, "83418a70-5bf7-4c19-930d-3570a4697309": {"doc_hash": "90b5e884401156f3b288fcac12618e328173026e9de56e317a9cab2a9ff70682"}, "beac1bea-406c-4c7f-815a-3735a68616a9": {"doc_hash": "34cebe6525e7dd9dd91d4c2d8f0f6738f34e4333212e7da38a861afd60aa015b"}, "e7a1f254-12f3-477d-af9e-a8593c39c2fa": {"doc_hash": "cf6aa46359e5abea5b7534d6aea98ab41ef9a4c9b7417a5ed926ab5fa86a24d8"}, "1dc91297-ec58-4838-a75e-c21c21111611": {"doc_hash": "7924d3a8db8f659029f545074adfcf841306430f71ea646008143532dfd50f8e"}, "97bda116-7396-4550-8359-ea1802ffc5a7": {"doc_hash": "c3f546965ab40cb739e3f5b3ce1c499ec804bc6615fe35a6869f9ae69f6c2903"}, "19b3556d-4ff1-4500-ab89-5c8632ab7092": {"doc_hash": "2f27fd381914ce1bd80e6beaeb881eafc82ff43f35ec39b36c7a1b2d51f0d9ff"}, "70b9571d-5c96-42a8-9b65-599824e8f775": {"doc_hash": "3da9883227a6978a306d0271edf1aaeb5c438f286c4ce2baa4363ca0f4b517b5"}, "b450ead9-0cbe-4a61-921a-73378d4cd43c": {"doc_hash": "de92876dc0840f8a7cd7cc54011fe76be9b611e0362f0b584d2fff8c10696326"}, "06729507-af8a-44b5-9f23-d696c42592b5": {"doc_hash": "28d0395caa1b067abfae66a1c6fb44f4c08e17a4e81d047e9de45141e811084b"}, "59a4189a-3f84-4d4f-b7d3-6c06db28fd5d": {"doc_hash": "c3564ba02d2014ffec2445640eb1255706fb945cedc958c212d26b308d47bcce"}, "d018b609-2554-43b9-bcac-9178fecb09de": {"doc_hash": "240ade2227a07054de7544f2cd86a9e8cf8ae36acb490a58aada97d114e3713e"}, "f7796632-84fb-48ed-8272-d09a7a2e44aa": {"doc_hash": "e05f81b824757f6ff315a6aaccc38ca8b244ca2462b8c064873ddbbb3c9bbf7b"}, "b3fdfb2a-7707-4bf6-a3bf-23e54125f144": {"doc_hash": "77155bb02c9309c7db7379b08d467ebef6352ba1cfbbdf7c92d4a775b46fce30"}, "be31afa2-5229-4470-aa1c-f23dec0b8329": {"doc_hash": "793bab9ccf44444e239439453620905974aa7e20c2b391628a125eb3e3b9ba43"}, "92181ebc-7264-4239-92ef-79d26ac19ef3": {"doc_hash": "12e8b9694d01adba166b4b517ff57495f5d743aefeb567aefc1635e1f7e57fe5"}, "b9ac76e2-0038-420c-ab71-76f78ece83a1": {"doc_hash": "93cfd5d17dd68fcaa7fe25a43124ae2a0470adff0fe4750a9ad893e379e68e71"}, "9ce2d099-0969-4a0c-9491-7a3167c3b030": {"doc_hash": "7a70e914a358aca455c89cb60a0dc0c46c691d9c701bbb22451ef3d01e60253e"}, "8c71c287-f5e4-48bb-a4b9-6548fceeb686": {"doc_hash": "3c2e387b886a5cd9fac52825bce98293023e4e0493524b88f6f419629b57d483"}, "939d140b-0359-4a80-9c0e-e55bc9db3012": {"doc_hash": "aa8ccd0cd631a73712c2594b82fb4c95d1747ba05e4ea39e20a721168eda39e5"}, "b055d66d-cb4c-4c3a-8d15-77909313226d": {"doc_hash": "e1d4b366cfdf4719ebc343de34508bb7ce089abfb0373fc1ee100b30e53c6c02"}, "ef6aa67b-51ab-4d8e-82b7-6120a33b6d9d": {"doc_hash": "01bb248e8069606c8c3d9fb1fcbda3d8340ea2f28e1638ec9c842a4e8bca93ac"}, "d234a2e9-7dd4-423d-a749-e2566192e5c7": {"doc_hash": "4c7860a830d2dcbc0ccfd1a30a5157cd0ca248fb9398986a50f90a0b0d8540ba"}, "8f226e51-35fd-48b8-a40a-25dcb683002a": {"doc_hash": "4ac6133d22530bb7b1a305078f7cd272500e1336d3768b1ab431b57c82977ae8"}, "bd92367b-bea8-4629-9aa8-a245b2ff9b05": {"doc_hash": "60217b5db48fff09b0b28a733cfa01130e666bc5405c1b4db6dcb0e22887f9a0"}, "28ea65f0-6e06-4ada-af97-c6a54e77da60": {"doc_hash": "90ab2909fb4446c0414e7c30ac3d8c30016306dad786f01523371136ad01eaec"}, "48c54cdd-2a86-4027-8a95-48647167686e": {"doc_hash": "3d524b6b76fb7b40174e4f23fef35510973a119efcf59c65875e2f995f1141de"}, "643e8a11-b1e2-47db-90fd-013db834636d": {"doc_hash": "b1aef1a214b35ee71f4f4436f771b4a6db17c41eefad79ad73ea0ecc41de74f4"}, "2cae1645-86ad-4caf-a08b-173f3dcb99ca": {"doc_hash": "b6f58a7fcbca6dc01bace5c77720efa7a52cd42f683619015edc9fb8324c9049"}, "7a16b931-3a53-43ad-8dbc-22b93775985a": {"doc_hash": "0979e7172f2c5fafd64f1daa520f1d8b9dadccc27688e741871ba5ba71f654ca"}, "1a2edc2c-d598-43ef-89a4-52780d1e55b6": {"doc_hash": "e60615b55809ebb4142c57e70355a9c01ff5ddcf20e0a5c0dfc1583e30930a2c"}, "2830745b-dfd0-41f0-a068-df96014859a2": {"doc_hash": "54d487d732dba89e6e785d14dc9952e9198027819c49abff9935c09668cca7af"}, "4a5af62f-370f-4a0e-9ad2-38ae4d579002": {"doc_hash": "36aaf88a144dc22c5953b53d7d7a86850495b341b235d6fec2c776ff02160ca9"}, "53228526-9a9b-4e69-953e-877ba8f92197": {"doc_hash": "3a6faa9db4ee1563fb4383f6a72d968ed3887f2d622b2b730f9c45b3daacf733"}, "2e0f4f6f-d700-4410-9cda-4f2b6e933431": {"doc_hash": "7d236471cbbdbcfd8140e4568ff9da882b96dc15c49826f569a2d9cb0f042cd9"}, "e20e775c-595b-4b99-9e72-5c00cbde6831": {"doc_hash": "f3694343f31eb9856437f2f6f4e683d8a8f6754fa1116a83872f7385c9e88cc1"}, "29a730c3-c612-4ab8-9376-93dc62a02b16": {"doc_hash": "ac7b92ef674ea74cfa3928c6b2b532456dca7fbb07835722d9dc20234a16d044"}, "e43e3eca-2c40-42e8-9303-83ad3fc3d57c": {"doc_hash": "869a1475f640829e265bc36fb15df1118c35cf1fb85ffc6de6b6d029b54cbd57"}, "f6344791-e611-4c3e-9c02-f32fc2471201": {"doc_hash": "9e03c9ca26f014250c3f014e08cc7e4f376fc53119dbd1512ab634d368243bc7"}, "4ccdbcfc-ed97-446d-97b1-8e0e134b6e5a": {"doc_hash": "1d046a80987cd10199619b9ff1bda4aa6eb80d6babab384aaa41aca10c8ee14b"}, "9294e7f2-5c97-42af-9777-6e297f1166ce": {"doc_hash": "23ed2454a9bf5bee03442025b493f1dc401f344c35d6b02346d8b43e5a331a60"}, "6ad8d495-7bed-49c8-9c61-e7cafb32d5e7": {"doc_hash": "9c9770adafe92027a073cbf687b5ce2eee2538b18441f35ad141ea33e48a2613"}, "a917301f-5b0b-4852-b44c-f9f10a3c0abd": {"doc_hash": "fdf7bd17e48fb31dfdedde75ef748675f1d9d9e107b0d50cd558830d1c2e68de"}, "86ba5176-d208-4cf5-9b71-d01164598342": {"doc_hash": "91a2bd32a32343f0d01c4534147cee5409000f40d72a42afd77c97066634985f"}, "d11f6155-a810-4285-99e2-35b49cfecaff": {"doc_hash": "1e858b36463fad3c646b3480c20e50b421edddc61e8d60a98308156316ca690d"}, "9cd9d415-54ba-42f2-932e-ed5ce3abc806": {"doc_hash": "4895f53a8e8c0201657b4cc75d1279eba4cf3105817fb7911a6a03e47c322373"}, "e7407748-41e9-4fc7-81d9-a33d7fa159fe": {"doc_hash": "b004d36c69e1d76bb075f16db6acd91e7b257d4cd3975ad18f77d46f9d2d3237"}, "c68e3d7f-d87e-477e-b4e0-6d8b343df819": {"doc_hash": "a43ade0ec900b14364e62fad37ce53db529c0a6db182ba6f10e81112e57b9ecf"}, "dcc53ec0-55bc-4583-92ae-9effbdfd9cf8": {"doc_hash": "13956c644ef3b4db16c90868bafea76a6f04d0013c06aaf7b6f0cb2ccff59a35"}, "b05161e4-ffaf-48d9-8698-e92587c730dd": {"doc_hash": "0f2b9d39ab165b4a8f9045dab58e860c3c1704950feabbd9ee0e2df263ff9c50"}, "e64f90f0-707d-4736-bb94-31c84170a58e": {"doc_hash": "803e40a6f78b752c5cf579d1bc26b1089c93602c4ceee9054e620372c3be0400"}, "3cb30127-fb39-4b12-850e-8400dd346fff": {"doc_hash": "cf9db45cab8af1807948ac1f956ae5dc108d7c742536d3603224774bd17f9d63"}, "fb01cb13-263b-4b9d-88b2-35435ebcdfa7": {"doc_hash": "4f4a063480ecd0c1f1e7f51c05f68e764afc4cb4cb18048cd7f4e1e1167b9716"}, "694d0cfe-3170-4bc4-afd5-98f9290a15fe": {"doc_hash": "c63938216ceb5af6fe9de426d0a5e53af02b41b79fb0f56b20a13f2d3cae9ca3"}, "9bf6445d-3ad4-4c10-9f55-264080c9663a": {"doc_hash": "d3ba23e05b310ca1a8a6f38b4ffcbce03acf1fb70e25f8f329d1327b5d522790"}, "3f8470f0-98d7-4937-adb6-e97fd218e007": {"doc_hash": "d413b064a9db7f604d04e79ecbbdef05c0c3cf92af4a14d713411145570a0cc7"}, "ef298f84-d704-471d-b77a-2bc3ff127838": {"doc_hash": "ce9126fe08d1d855f0ee9c4a211bcd78c16a0ebb20ee2e084e7f8ea0932264ab"}, "f826cc99-d876-4602-abbf-6fcdb1ee0a4d": {"doc_hash": "3dd73938b0906fb1069162c6abfe7775c5fd08fac8a264532521222dff6d86d0"}, "32675069-43d0-4244-a639-559f512a1471": {"doc_hash": "ad4047f872b7eb0bc7c4cef6690915e0f0e6d7bbe1fe49f2a983d2d0b1e0724b"}, "4d56f6d5-b8bb-42e7-9119-27c2c5840963": {"doc_hash": "813e9e8716433b1b5954b2028e9067a9c0c137038320cdfc54a8705e5504a77b"}, "3206fdbc-0ce4-4e93-a242-7e031572d3ed": {"doc_hash": "4f5e2ad2cf3d4b64793418e3f9e0bdd574ca6fac70acaa0253399c0fb2a56adc"}, "1aab4aae-0cbc-42e1-b14e-bde25cdbae3d": {"doc_hash": "fb637df12ddd7ee25e2088f78a5f26b56eb5eadc4dac7a6e3cfc41da7bf094b9"}, "f46a3057-5df1-4aa1-8613-aebbee04da65": {"doc_hash": "b48f46a07fff6bf4b2ad83ea7ba35e763f3e42cb36561ee45037e2df04c80278"}, "7ce2085c-8f89-4f34-8b35-b1c11c0698eb": {"doc_hash": "2f6bc893e27b4e113642f74e86c0f0a7d16f561c42b7de650916b6de7721ab42"}, "b0411985-37c7-40c3-b2b1-6f2cff2859b5": {"doc_hash": "1b2f15733b676112b986df9fb1bd4ecbacfee059eb4f4afcef222adcbed786b2"}, "1ebd2ec6-a3fc-4e15-a1f0-1d192b2a3b29": {"doc_hash": "28b20e941463b40cfa554008dac9769e6ad247a2e37d9cd851135437b3a5170d"}, "4894b82c-9359-4d00-b7fc-c1c522101a93": {"doc_hash": "b7c7b7ed51a725e1cc7492031f066c2a73cb6a07a1570a94590fa276c2e9ea66"}, "d173d9ef-d7b7-4238-8130-1f33767ceea3": {"doc_hash": "d6d569d308a3c5eec0fa41a6a369c61b7858a62cf7937fca45532fda77f1023f"}, "d43263ef-4507-404e-9321-3c59d5cfce92": {"doc_hash": "a3e1a817b34d1e7e3738cea0632e8fbbf648026ecbe06739ec11362b8369c233"}, "9e9b9338-a94f-4514-bdae-93e0cefa7f46": {"doc_hash": "957d79f10dec5624ac2f050e41323682d3e9227f4b8ac2236dc4ed5c1f5a7618"}, "7556c0f7-1e4d-4ef0-9d00-93e8174885e2": {"doc_hash": "14cb2af8399b9f33d3daceb05f37968b564acac0f60d3f720179daa15e99ca0e"}, "88f1132c-bf2c-4b59-be88-208e0f876cb1": {"doc_hash": "65ca909b687bacc4278e1e28167baecdb07a2e0c7f9cfdd0c52c53fbb0ccd748"}, "19bcf5cc-013a-4a36-95de-9203d8f3f71b": {"doc_hash": "9f633239ed5d5764d6d42c84525c4524d77fbe0240d960142177361e3cfcfef9"}, "6325fc46-227c-4193-acd3-5f4ee3db427f": {"doc_hash": "85aaf0aa0100fd368591623ac88a50de49c9f14cbbfecbe757fcc058b8ceb88a"}, "e80c9287-9e02-4043-987b-f7238695332a": {"doc_hash": "1e82d8a581d7f40937432350a983391a291aa590730f0569016389a6186bda4c"}, "d4d61893-1f34-4600-9600-5e57b33ac7fb": {"doc_hash": "d83b8f21f4b152b2a1f113d7875c393d8ce252675f0c0d1eb11518690603e74e"}, "458c3adf-e45c-4ba8-89f5-8cb714651a6d": {"doc_hash": "3e341ef3daeb8447ef6b3b22060656d6c5216b5f783ad1a1e80a35730f9e0f75"}, "2544ebd1-50b4-44de-9048-fde57b39f27e": {"doc_hash": "ac64339d50132b747eb127902939e2afdbb7254250d23139168a4641710f25ef"}, "b1d88691-51a9-4ffd-804d-08eccc6654f0": {"doc_hash": "7c36c7bb3cea58ceec59004feaa7191d058f4b31c60423c126bffb444812b0d9"}, "06c3714d-02b0-4187-b166-79f980c0cc5d": {"doc_hash": "e9ed63d250497a1ce5ded5d264160ee8fcc0e8d2894875bd60c56a6dd77c65bd"}, "3a65740a-f294-4ee8-8fa2-61edfaec1b9b": {"doc_hash": "a2eb3d81aae80970e9c1ff29fc5e594960bdfd3cc4d1a68f771b09c2b14c5c5b"}, "ad44bc5f-bede-40d0-a124-53538c24719a": {"doc_hash": "80f7460201fb7cbee35d158b58aed799e053d864814dfaec801e344e74330b55"}, "b53f45d6-487a-46b2-a982-084a694bbc05": {"doc_hash": "76c903c22b5685493e494f71ceefc184d6a74a9bc06ea54cf11be45522fad39c"}, "b7ff2ff0-9cee-4134-b7b3-553d02bc8eff": {"doc_hash": "32cde6ad71c4bd090641c7c910ed34a927e4547e50b4c16395d08789db0427b4"}, "a6346c7f-715e-4aff-ab52-5095f44eadf3": {"doc_hash": "7653201b866edf12e12d13869d9b88cb91eb6db398347f631d92200c9580f0b1"}, "10e528cb-e1ef-4589-b636-8ab6db0b2fa2": {"doc_hash": "56f53c4f975afce183ab1de466c657f2e8e0902bdafd7e105d8e9e0c049271db"}, "2afe7630-9f35-4350-b06d-5b0c7dedceed": {"doc_hash": "b8b11c281b67e0bd7e68fa3de64f2efada2a57af797a8b3ef91aeb1dfbaa7e2b"}, "ebddd389-d00d-4d3f-a1df-133b1ca365f6": {"doc_hash": "1272567d16f68670e0b40d429c4ddc58ddf01be6ad8438ba7d96cefce7f63987"}, "37029450-9cf9-4b59-a53d-03073efcdc0f": {"doc_hash": "ad52b4a4815df4fa12791508dc1269bfa3c051d69e18399a7e49ea3db9e6c409"}, "86e88310-d654-4de4-9639-7206f41cd392": {"doc_hash": "c680e68a3657415dda4e0b5419474c4d11365ed0c7cf0b14fd0df7ca9487cf42"}, "b4fcdb6f-d363-4723-ba9d-fb86af272416": {"doc_hash": "0e41f36448385efbeaa19e25d6e08c59c84db6b0111efb9a90f12e42da7ec1ab"}, "84fa0acb-733c-4dd6-a31d-ef520221af2b": {"doc_hash": "633a94de432da14c65ebebd17b1bb153af2037f644e5dbec520ebd363672c05e"}, "e277b692-ffc3-4907-8051-27669adfe81d": {"doc_hash": "81b2af2a5b25f7c3de3b415ce73c8034b9862ebf23311ff89615daf1d72e6f90"}, "e736685e-c12a-4228-abd4-781781ee81c4": {"doc_hash": "0c446b97f5d63c8111c801fb60d46facbfcd7eaea4d2d2bdf089a04ecf8314e1"}, "468c4424-db9a-4680-8bd7-cf779f75ac0a": {"doc_hash": "473f2f8b2f558dadb08dfd9ae2763f1d58cfd4f2762da2e602b66af29447d605"}, "e3ffd63d-69d2-4a83-9e5b-e69e67ab0d64": {"doc_hash": "092b72d4071392841686a83778c334a4701279fd9747afece32f91079469120c"}, "e8c56e58-48b8-401c-9048-a38384860fb0": {"doc_hash": "70b90b90afb84b3560bf71ea0547e8bb438096a8aae32c9c9ae2e503dd2047b3"}, "87de75c1-8298-4de5-bbb0-19df43d376af": {"doc_hash": "0f287346a5f7d8fee6fe2a09f1a649731dd69c01db7da10efd2870ab7e9a2223"}, "436c473a-d4cb-4af8-ab36-ea05b01e2657": {"doc_hash": "0861ae0a2ee4eccba7fbf7091b4d40d46484f38adc74b1a86f9407c461cc55da"}, "56d75f39-4020-43b5-8bcf-860a9aed42fd": {"doc_hash": "520faa58f310be0ee8f8a2ac7d651056a420bde9ed753cc9743185a72db2281e"}, "0c045498-f2d0-4fd6-9f06-ade4a1ad899a": {"doc_hash": "a801ba23e11245fad6dbe384ac4429467f73db2b24b55fc0178e64686433de8e"}, "ac99dbf0-0ad9-48ad-ba50-fc72b1e0c0bd": {"doc_hash": "21a268dce099b816880775048a853dcd718087f3cc9b6d1f35b0e126e10a48b1"}, "1d08869d-8e6e-4b2d-a67b-46294e326cd4": {"doc_hash": "37dbb1b391a9fb4721fc4c188edf737b37221e71aa29711010345baa85ff8ad7"}, "26b72d64-ce08-46b2-b3b6-3c4217bbdb05": {"doc_hash": "ec0c110856af41e7becb29e4097138b0ffc1573649980d62edc41c1925406668"}, "130285dc-0bc9-498d-bc29-5f5afccaf16f": {"doc_hash": "4dd01dcc9bd254f8ac88052e899fd43252c7d49ea5445982f13943b7790e2568"}, "5a747d33-f30b-434a-a3aa-05985b1799d5": {"doc_hash": "c77d942807725f4288366915716b0275daec0e1f459bbeea38b8f67bd616d06c"}, "4f7362a8-ae6c-4d72-8a7b-595020f0ad22": {"doc_hash": "acfa029925e30bdd39a7b1d6cf81bd4041c934e0561d5a67c865ab4732749013"}, "7a376874-9478-4e48-9f75-a06c17a07f05": {"doc_hash": "247da90e41d6010a61df54fe07ae41d537c1359d8eda3be3d485b49a88228ca3"}, "b6c0ba1f-d4d7-45d4-a645-70c79b5b8c6d": {"doc_hash": "ac77b2afc4e937381bfc53241096efbb0466f6c1b6c1c29f9e7a6992b8e7afe9"}, "c32bcd9e-8f82-4dd2-b041-c5739a3832f7": {"doc_hash": "a9aa3503ac3a9046f51a0ab07e8abac45575506edd1f3c2f3a3fb83335b8aa88"}, "628b1a3d-9748-46c9-b5a0-e9ce084ec7bb": {"doc_hash": "b32d76729e9ce8f404a241bc56e1d7ed8dc1d3757b2c6228a0904335f6736ee8"}, "fec73a45-1ce5-4787-849b-0909dbfa447c": {"doc_hash": "91f9e830636c53c48485edc5b0c7b603efc62d35787885ebce0e90b59b94d6ca"}, "fe887ef0-9717-4e51-a898-1280560b7b11": {"doc_hash": "f17a14fd0b1b41d87caf3aeff7bf5a61219366327db8417d5401b23e9391ef49"}, "db5903af-d9eb-4978-add5-3ce8cd5d9e61": {"doc_hash": "ed7e996bba40fa651e85c8ab2e840a4ef24f9697789f49d022e608d7c886f6ec"}, "43406a28-4625-4d84-8e6a-c56d40a09bbf": {"doc_hash": "6ba1033d9d88ed840676183c20ecd0e4484d2ceee0df9d3ac1736f9d4a9febbb"}, "301cf99c-8389-4622-a5b1-7c429527fba6": {"doc_hash": "8b8c96bccec9bc35e1d911e70ad220d6efa4c0fd63cf570108011427b312fdc7"}, "d0934e0e-d408-4094-9f81-44ef5d4d72ce": {"doc_hash": "88655b8f3cd00c5b9cc627f4275f6ccbe4c818aeeb314cff521bb95bc38379bc"}, "cd632bb8-53ef-4e2f-a92c-cb0d98d2f51a": {"doc_hash": "aae689ba4746fd4f8ca16ede22371d79a73cbf7ddd7eab1bd29336b821924214"}, "e4ebb428-0646-4b50-857c-78128c8fec82": {"doc_hash": "ead5f98f3d43c89b6e2129a184a8aacef04e0c9e4ba5dfbee37d431a293482df"}, "bff5035f-eee4-470b-9c5d-b6c63ea77821": {"doc_hash": "65d5bafc1c8711d458d08e18e56adf9f1bf974ce230b0a40f9b9a4da31cebb56"}, "ac450977-ce13-4b69-b8ad-6fe968f24625": {"doc_hash": "34f3fb74f2edf110a93003e39f1879486f1de1cd4528c508228f5f6117192c3b"}, "ff774a4c-532f-4ae2-a948-7d9027f5adb0": {"doc_hash": "a2feedf2917bbb39867286e6b59d62db06b08c754f2b068af916b840f6977e67"}, "1119cad2-5a4e-4142-b873-3f17794becf9": {"doc_hash": "07f41df24a6c77bad7761a5a724123adacaf565f968ac5bc7b8a7913ff580e0f"}, "aab9a64d-7fc3-4669-8371-4ec64af9646e": {"doc_hash": "d8b4ec18dd9d930bddbf8c2aea41d64bf1d0597ac21ea37f24615085fece5858"}, "0f8b454c-88a1-49ac-a710-0e5a93a9e919": {"doc_hash": "561638adee62801f36147008d00ccd601e2961349475aa42a2b510b52a497ac8"}, "72693c76-8058-4924-af00-6e0f309e49da": {"doc_hash": "edc79f25f68220c8f18d6e9f6bbff0a7d37b7b4bba990472398177a08b735838"}, "937deebe-d47c-401f-a879-5adf82368915": {"doc_hash": "849f223253e8e99c7dcb8c59d70bcd0c86004f9b0c757cca0dbedaa2c32002c0"}, "94c1ce8c-3802-489e-8b00-f87f6d62dc6a": {"doc_hash": "942c075b6181e690f463c11021b4b81b50abd2442621f60cdc4383698d57fcdf"}, "2958e6e0-2142-40e1-9606-22ddd40c9660": {"doc_hash": "ae8f8d82f7c803e354866bcb68c8f8450b477bba5cab96bd2852a3a31f18b490"}, "5510b9d5-addb-4198-8eaa-995e5e80d45b": {"doc_hash": "d1ff1f8fd65832a2c274aa2286acf8b375783d003f2f9e580ac10febb233e3ac"}, "3a1f68b9-27ff-4ad9-86b0-abc0f06938fa": {"doc_hash": "b72375e243c3e1268eabeadd257a6deb38ef6c5d3528387985934ea16a515cd3"}, "cba182f3-ff38-4066-a5cf-ea2fd8feb51b": {"doc_hash": "d8e960ccb7e7cb29d43a64960f679daf6ecdc6d59953294df3d0b5db327718dd"}, "d6f80db0-c230-4f45-96ad-bf680e3490a2": {"doc_hash": "065f36ba5d5cfcf02efb6f25dfdec56534af92307a000f826fdbee2ff971184c"}, "5c992dc5-0990-46c0-9384-299ec9403ead": {"doc_hash": "38f0ddded7539f9f38bc788b17b75b4844779de792e09572fd150cb2511737d7"}, "52e81e4a-dce5-4b7a-aa20-89eb102271bf": {"doc_hash": "9a8a21f9e1f0db9a5656db871cc6b61f03b77e3ed0e62d62a695b2b1f08ee10c"}, "1b3693ec-1de8-4072-8027-9cbf79713153": {"doc_hash": "e89d2845a90f90f5a94837dd2480db0c712f7d898b0c65978d5bf59c82068c93"}, "b49f49fb-69d5-4c57-a60c-d67fd91a4a61": {"doc_hash": "cc34b89b87331c0f02182c16354c7d167addb105006b921b429c93159b89c115"}, "0199680f-db76-4c51-b437-5d0f5500cba9": {"doc_hash": "df1e1ef1ceff8f1ee7c5ec1849c792528d56caa1dafd95d773616a1e47d616c9"}, "ae91df21-ae47-4199-81f3-a2fe71bc3dce": {"doc_hash": "fa2dd5256d9500ddf684ebbf85a1b040ba1524d0ab87c54e25ae762c1574dd06"}, "5b63ddaa-c29c-4be7-ba67-34deba098af2": {"doc_hash": "a0293035f63c4f6d1076a88ae51b61840dcb00640487fafd5bdbdf125a7e775e"}, "9aeb4493-cb74-4e76-8445-afad596967cd": {"doc_hash": "8d91634d0a1dec5703cd2611ac9be9ded46b606c7cb85953f06ec2236339f0ca"}, "90a11c50-c372-45d9-823f-7caf8a63fcd0": {"doc_hash": "898e71cf94bc6d69e6a1236124ff330b648ba6735ecf844212e3dbe72fa98c97"}, "5eff7c9a-c33c-414d-bc25-1f5e675b95fb": {"doc_hash": "612f38b6f8b3614962a78ace7bc8cf7f5ff82a2f0f4c54c598522c8284e6cde0"}, "fe9d13c0-5c2d-457d-88cc-3236648be547": {"doc_hash": "6a587cc9dbb4f966a2e6cd9102779b754ff6512bc8cc6586525e3df5e7a1fc8f"}, "22e8afdb-be9a-46a7-bf4a-a90de495aef3": {"doc_hash": "359e62ffc9761988bf7e20eeb421d8328d893f09a40815ba390a9f22714c9894"}, "d8f017dd-818c-4de0-99f7-29b33ec191e0": {"doc_hash": "0ad7c908e57a3f39606f920d664e9aef36833343105a5a0f1de64ea8147dcc42"}, "2eaaa18b-b17a-484d-99b1-5832726c7b68": {"doc_hash": "9e86383bf775239f5b1edd6de7d31c5f21b7474c937239da7e6574dbe6aed70a"}, "f9c6db17-b33e-4b28-9753-a3f17dd3c4ef": {"doc_hash": "22eca3b4504d8f7da5895f5d947af42f468b6ffc78d124943a88590b267120e0"}, "fdece252-d9e0-4056-a725-99f43e75a60e": {"doc_hash": "426c3dd0383c0e2b88c07466a2b533afa81e7b197def943ef45fb23d7e9d7c5d"}, "5df1b8e3-374a-45d5-9d81-b4983056aace": {"doc_hash": "fefbbb5c0fb30f2681823cdef88c6aa2277db268f9b39030d977d9822bb61455"}, "0ee05932-7ebf-44db-88ef-279c1bbe76da": {"doc_hash": "ee110e52a4521d64b1922d7c94ec5a901121ecd458ea25c03e30edaa588b7f44"}, "5c9bc197-ec46-4bba-8051-9e5f2344e1e2": {"doc_hash": "3b921f3aa3ae00a48d67888f58a21ab0c609c0c24ab0fb18f0a388aa936e515a"}, "455b72f8-cad0-44e5-8e6c-f5e3c96bca1e": {"doc_hash": "8e2df75e41d09123f07b1001b9a4a6584b321c9d4311f5b007184a0949d5150b"}, "b8a27f18-8c99-4aaf-98fe-1cf27c9d8f8c": {"doc_hash": "0d639b14ca650f75eae003bc905e7829f0eeccc16ddf5c05055e33f047cdc316"}, "78b599cc-f5cb-49cc-b6e6-f77918029864": {"doc_hash": "1f2b154a02f94e7a480a3cb076c7b6dbc7b9c14db167af62ccb713b9d8c0354c"}, "c9f17980-27df-403c-8b84-c8e3d7080145": {"doc_hash": "1b1f30779d93263d725f50fef6ae3601bd735b36c29363bef0e52246aaba5265"}, "1c0a37d0-a018-4b8d-ab93-e9be40a3866f": {"doc_hash": "e747112c0c734a47908c21a1486cec0f5fc6376ab0aa940eac631e6be046c91e"}, "98b8e276-0b3d-41da-b0cf-ec3227a06ac4": {"doc_hash": "58c2c5f369be6848b9507cedc66926779976f7bd5ac5b8013d3aadec15a520e7"}, "6b2af2e4-49a7-422f-818e-b1599b9aad00": {"doc_hash": "0fe9230e1df0336fa84ba001f82664f7ece8e7560ef589058255a7f834b2f9db"}, "aecae5a2-3704-4b43-a248-74fe1b8742df": {"doc_hash": "06e6bafabdf9f2aad40aab8f4ecd812acf747f073865ad1fabe2dacaf5c56a80"}, "8feca3d4-19e4-4c67-8b51-bd383bf613df": {"doc_hash": "35775a99384519a55a3ebac8bba53cecbd2ae010f3c6ecc8b2499a7dac94c6b7"}, "de5bfe81-fbd3-4a8a-9db8-193075045b53": {"doc_hash": "99c70651a00b0d152090374b9fb61588deb1e003ca12303f3685f77367fbf818"}, "279b815f-e930-4efb-bab5-49ae9ab53a2f": {"doc_hash": "ddc7bf8bbd04247395c9c87d5a08ac711d9a7bb86c24abe5630071c0156b4299"}, "0e05f165-c77a-4e09-9e78-6d05408f6aee": {"doc_hash": "87006b7cc66763287d186f41cf59206dd3504706fec63e94c15ebe9618b6ccb1"}, "423fb52e-4e40-4a28-8efe-e5c7bf64d8e6": {"doc_hash": "5d8eebbb04552349269ebaf0b6a6fba1d95d90d8121d576e0537fe6b077d218a"}, "f5c46abe-9bd6-419e-b4f9-dcc0674382b5": {"doc_hash": "fc143ce473de30ccad80b6b15e3b781c95828d38581931baa7385f07d4c241a4"}, "c08a64d3-8d6d-4c7d-9e42-1d1daf47445b": {"doc_hash": "b0c21a34c0379e936b09886b3ea5dc6ad795c770e7a848c74cc15d9ecdcb0628"}, "4af92f21-f822-4d76-8848-b8dd03b30fcf": {"doc_hash": "666f8ed69fe5758be1700a593bffb52024d1671d73a7ff86956982e43b93bba9"}, "82f248e7-b722-466c-9c09-ddd6a3d21d67": {"doc_hash": "60cb80313bd14661b07fb95f75d5d76058350f63e0dce48c40ff39868fd2a653"}, "266f6b83-88a5-4c53-a687-36afe3c3ac4c": {"doc_hash": "9e61f645b7f38fd9b919f3b925ea918c5ef2ad869cabb3dface8837e5f20552b"}, "47cf6c27-a891-48da-a2ea-78716870c1c9": {"doc_hash": "6f96afa3885f819d3f754f97d4033e3984cd5a5f0fd8e6311b34b48a19da4e76"}, "9940cffb-6fe0-4699-8443-a700f5fcf292": {"doc_hash": "2d18ecc7387f6238757c403312e63a124f01149c307b3212df0b59304dcbff87"}, "dcf7ee72-120a-443d-9086-cf8f0d0b0bb5": {"doc_hash": "1fc4e4ad23b7ecb4767d125dfaf3e5bd83e0d287d97970fd3648f3f4f9362f00"}, "0b1085fc-0265-4471-acfd-5b41c7c32d0e": {"doc_hash": "d4fa30c5724fb21f14b600cf6d06be9dd538a888dd68709ee55fb4f257e9016b"}, "e1b148a6-8f9f-4cd6-a110-cc95630f97e0": {"doc_hash": "161904e30862c9c04c968b4d4cd859d56d8950760d08cfc7eed0d875f630c559"}, "4931e09a-5305-4eee-832e-4117067424be": {"doc_hash": "7fbf5576f67de18e5ae8d1ca0eea753002c8a58f5ca9f24b795c81a9c8c9269a"}, "0c27e9b5-8f38-4817-a5e9-6d3e23dcafe9": {"doc_hash": "25d92300f2558f0b54c9b081deae6fe6b646db41aad64a606c2125d7bd204c72"}, "4c47c9d3-06aa-465a-8947-ff17015ead6e": {"doc_hash": "bb8ce6127275622639071c7fb2c4951a0d622ef45fd10f8116e1744f5cf0d1d0"}, "62ae3be8-a3ae-4572-8e9e-f598308437e9": {"doc_hash": "c43fe034d5d919d51e81ab552592c29036773f1e1c9ca75e1607bb5231243066"}, "cafadfdd-48ea-4d54-932b-c73a60bafa80": {"doc_hash": "90c83013b804ab389f14f667950019ba58f29e40acf7374ae8cc70fc5eff2b3b"}, "a7336271-cf7f-4195-b460-a26d78b78675": {"doc_hash": "63ae8b1f228f172b26d736713e77aacb681e6a51dff822b19969e6c7869b5b44"}, "1ca65241-1025-43a0-9494-4c65be65af9b": {"doc_hash": "af803412d5da612ad4936017838ca338d24cfb0921513acf7fce6bc768843656"}, "3bcc6aab-fcd7-4305-8940-5912e3b97fce": {"doc_hash": "337a40941ad4b0c7483cee059ad739a83df0772bcf6968660101f5e3c408ab7d"}, "3e32e2ee-c0f6-425c-beb7-19dbe0aadfea": {"doc_hash": "e7072203217156c563cbc9ce6078e2e4ec2cefdd6536d284d2c15d5cd2db2afe"}, "775796ac-6812-4f25-ad6d-88135de35fe4": {"doc_hash": "261eede4032264be92578b6304af62b025c1eeaa9afddad92b768795ece73e5c"}, "60ee0b31-b3b8-49b3-9ba5-0a5f2daa6381": {"doc_hash": "c61dabe9319e0aaa4533f94e0fb12e2d6753b7191c1ff1d33d9d7f805edfda54"}, "cfffde44-0ee5-486d-8dd0-daa28b762696": {"doc_hash": "210022121a7eff94a124509a42992078b697114d5e19bf0dde8037804127005d"}, "55a72620-cea3-4965-9643-8572132be2b8": {"doc_hash": "71e9fa4ee65219de2948eb23a22841ffb075bb3a3772dae3e6bbc059135cf661"}, "84541aba-10a4-493a-a7e7-3d532b689f13": {"doc_hash": "c2d93f7f157bdb0ca03df9d7d74f3bee0351c81ed9a5301039e8b1067291d3dd"}, "1eaf8799-0861-4876-a380-f5f582d6b08c": {"doc_hash": "a8b19362df2c018ae465e912a542cac2408679f43d315a3ec57c49cb2986e983"}, "873de52e-ca45-4319-95fd-7413208a9c8e": {"doc_hash": "cfba05a1db8425bae5b40da408b954ff9a47bf387b3958b2d0284bf4c49f1cdd"}, "fa00f74b-f098-417a-9194-12980b352d73": {"doc_hash": "e617672d3323d1f13d73f5d239c55cfc82804a3e1867863571a64bf7e69186b4"}, "a3a5ba13-f5fe-4014-b299-f735becfd809": {"doc_hash": "9f62dd9edbbe0372772fabbadee2761f5da2488cddbdb956f0a084ec390fb9d8"}, "9bec996f-4dcc-4172-9310-4be82a033488": {"doc_hash": "e6b14aa711d02e3b1c7d3e2451883799bb627b483638f83e2b6acd62cac20c38"}, "03b49dee-78be-496c-9940-22c1d98b4484": {"doc_hash": "5d170265f8a5850494a1bd1dda65383f4ce7d8be4b66b17b0689cd6a6db906f7"}, "92580ef5-653e-4fe3-8322-31f4e43614b3": {"doc_hash": "4eab1e727f39a0c59338241749dd6ada58ef47a6d4dfdd14257bef0c8fdb7c1b"}, "4145a2f6-99f3-4c0d-bcb0-04920f83d521": {"doc_hash": "5f25e0321aa84a898146a93a1e0408047d1fa1c803cc20e2acf1b2028e983a3a"}, "a505c314-64ef-47e2-bcfc-12280514c171": {"doc_hash": "b9fe8aadad025166abaf614c50a0bce5e375ce0e04a3a1d387fd37e1f8c0408d"}, "5ab0136c-56a6-47f7-b4b1-55d7da1bad65": {"doc_hash": "e21ef2583af193b08cd17b40d055351d86a88835beefda2e58c1ee25782cbb07"}, "3d683b20-670d-4238-a9f3-28febd393585": {"doc_hash": "3de16cca0cf1fedc17f86bbe1c2335b080995401d91554b6b6737110bdd0405a"}, "610e8761-1d00-4111-86c3-035b970331a1": {"doc_hash": "96d6ebe07e3c5c1d305d4c35e40b42d036a097ff708c52c364f5f49c6bdc51c4"}, "61cfb685-b919-44bc-a70b-03ad8cede8ca": {"doc_hash": "0e22bf7c95f91bfa93b24e8a5e393f4d9b9f78d63adf49e41be0c9c5deefd96f"}, "d86c554b-9223-4162-b4b7-292af92f236b": {"doc_hash": "7339e91d77c322edb46924c9a81c70c9278be0db6a12fe0e2c1b038f5b63014c"}, "351a7438-6977-4b35-9d43-c9cbce8721ef": {"doc_hash": "87ee502531fc17d9e6327f35bb1578041c85bbef29c78c2eadd7221a13d19de9"}, "88c832a7-06d8-4d47-9927-a6cc11109c1c": {"doc_hash": "390573696de7c88f932280a97029110386ab2fe7b69db5fdcb580355732a700c"}, "8828109d-af18-4733-84b5-0fbbdcdbd14e": {"doc_hash": "36431f5961446049fc95e90639dbd55b841a85fe93c2312d11e625e0e68d7bec"}, "20ee968f-da2d-4018-a5b7-2ffe43387c9c": {"doc_hash": "21e13a0d9a417da5203defb47cb760d670d4e9266247c6f3f89b6c1bfca64827"}, "4adb7ec9-e3a5-4365-9c45-84335d1d1bf9": {"doc_hash": "24decbcbcfedb1c751ec3e1a2914729166331c3dd7978e7cc149991d9566ba40"}, "cbc02846-0685-45d1-b076-880992c9aaf3": {"doc_hash": "46e731a2db7b3a0dfbd448e044f5544804dd70a554f30172c7430fb73100503e"}, "8e8b173d-b254-48ef-b105-c7856ccb139e": {"doc_hash": "438e842fca757046b46b4eebcf634deef8d25335cbab7e4a9a3d1abff27fbe48"}, "98e90777-563a-4e3d-bd31-841bb3c31e20": {"doc_hash": "80bae0fbea572329525e47dc147e728bba18ce23304c0ed4c1ec02dd90de5dda"}, "7d03b90c-f7c8-4cf6-a91f-244de49fd37b": {"doc_hash": "900dff1a945da0755fa2f29d59283f40b9f872112fbfb1834cf8bf7bc3ddd34b"}, "8b1d9adb-402a-460f-b02f-4ab0452c03f3": {"doc_hash": "c45a963f859d1d67b4137e8812f8efb1bd34d8b60321c02d53bfb7fd0764d0a3"}, "4ce13e7d-8f9b-41fd-98ea-eb85f56538e5": {"doc_hash": "064555c5f158ddbfda3985d0cd2f8d9fca98af8bda0acdaf02d1afc33636504e"}, "087a45d7-3b79-426a-8a4e-daebd2421271": {"doc_hash": "960fb28e2afb28bcbbc7f7f45cf08cd96eddb25e449e8dd15a50608510711aa3"}, "2c8f1ca2-429d-4174-afd8-4ac4915ae494": {"doc_hash": "ba7da0e9d1d15dc51f494f9009a891c55848f464728dca8657bafbe821e4c25a"}, "92e6de4c-b1f7-4e5e-a559-5ac0f4fa3ca0": {"doc_hash": "83eae96d233d7651572aab4af7c7d7c7368b50d611da7d25faf3892bc218e4ac"}, "faf50b3c-76d6-4fa0-a38f-7bd84b8f9859": {"doc_hash": "a192d09f58b3a24700ecbbfb75f83098a4aa5fe696048c23d33192308d96daaf"}, "f8896a29-9f67-4b72-9f1c-04b54179c16e": {"doc_hash": "2d992dac00204b7a633fec9a95e4c17efde7e0d882a20f597cec929cd4a37a14"}, "ca4955ce-ca9e-4f89-8fca-0abf48d6d3c6": {"doc_hash": "721e3042b240680dadd6f5fa106945b57282b7870f81f6f35a434dd0b60447fd"}, "4382acc0-85e6-4498-8cc5-76d3b7c86572": {"doc_hash": "73ca9bed427bfa52c7a54fd0ef3f3d0e3e7c1c3348a65a479345172a74987b1b"}, "e5a2fa32-172a-4ca2-bd0a-497147bc8f10": {"doc_hash": "d2b30c7e8925196dd48b89ac6460b404bd47b78a21fd345e8d6e1eb49692e192"}, "4def5dc3-5b13-432e-9e0e-eb8cb7233b36": {"doc_hash": "e969f473cdb81814ea0bf791b7f8461ae736e49a487f6316e738c01b0ae1d8b5"}, "ab3ffdee-67e8-4b3e-9235-b8403e21efd2": {"doc_hash": "f237212c4a4c17695a8ea0c33a1b149dc043310dfd43478a3736a65720cb5e31"}, "dbcdec27-0895-4167-a75e-ba88da43d804": {"doc_hash": "9fc226d06987d58fa115e7ff226603ebb770973fa51cbae53c9748c2a6e0d368"}, "88f4c355-a8be-4989-b23f-177670652c4b": {"doc_hash": "390a461d97e6819db43a2ca2e360ba754c66182f641dae7914279312e05d68c6"}, "1ef90fc1-2c70-4a3d-b6ac-7e2b17235ef9": {"doc_hash": "19a218f15b01e9f6d786c70cf70ed5f4b40ca6dee132c368de946c53ad34e950"}, "97c61370-209b-45f3-99ce-885421b06dca": {"doc_hash": "76efd7f59079b31d1268c8ea30ecd78a936227d35f07ea7c99acbfe49a3eaf6d"}, "4d3a55b3-f032-49bb-81db-f4d5c0ec5488": {"doc_hash": "78d77282180751517d10a3afc36d218a97ef44e7d9b26dde0f32aeb58bcb266f"}, "2d51f8ba-665a-43f3-885d-800f57c93517": {"doc_hash": "22d292545be1ae8f87f633e99f41d061dc586c4d58cb734f29c48c776634464e"}, "5a47d883-9901-4000-9e04-39172f58948d": {"doc_hash": "4ae39ca785e142a49ef17d25832df339f1887da785701ffaa2f50a7348daa29e"}, "8584dab7-eb53-4bc9-a9f1-3d5c6595a821": {"doc_hash": "56448cc671bec6d5ee781f51db9c7c4d4595bcffe3f86f70cf58c8f08095fe15"}, "68d22fda-75bf-41bb-b259-37d778e3ab0d": {"doc_hash": "cee8ef3becc47aeecc4e04740bbaaa84d23a6184b3c4e3e06227154007eee84b"}, "48e9773b-1dcd-4b60-a857-db32cc477b77": {"doc_hash": "46555bbb3a3a3113374f7080387521efccd101aabdd44dce7e383e99b3976e76"}, "e7264c60-f93c-4232-8a69-7563d7a60223": {"doc_hash": "b316d6fa50d05806a53f3db6e45306ba1c6be7b3b1c5e762f2a0c96e0a665c27"}, "90f29860-6702-4711-a3a3-aa7cfcacb050": {"doc_hash": "98886c4b5b504a1357a8ad6fe5fa8c8da4a787e38e72e817e0138b151f6f7d5c"}, "2dae169e-e13b-4428-902e-39c854ca8173": {"doc_hash": "9a30bc0fab53f993c3926bd638cf1d1d6e12235b3f7357e445fdc1c37ec5ca9e"}, "bdf1b317-bc7e-48fd-a7cc-60be63a4d67d": {"doc_hash": "e7573eeab7114af77383c71b680ef2cdfa8097ede300c655202be4057799759f"}, "2c614bde-3c71-449f-987a-0ed6c6d09fc8": {"doc_hash": "23f0f96719ef472975ec00c8d398793b23ddfd94f8bea4769e0f659ed1069ef6"}, "a56a22d3-a5eb-4c5d-a49e-503304b5cd22": {"doc_hash": "d0c9b9b55fb23614d380228f8c98a65245f57f55fe44297c48017c5863bb1e45"}, "b6777253-428f-4f0e-adba-49475bb275ed": {"doc_hash": "751a77661e98a40756435e801e6e2adf7d341571ec1008bddde9ff7770d44988"}, "52a61a2a-ced7-46fd-a528-2691b0501be5": {"doc_hash": "b6120d75469ebcd934c803f88a409524f8b9e0784a79160fc730b0847b432306", "ref_doc_id": "b38fb95f-4f4e-4e28-968e-5d016a3f8863"}, "41536b26-2123-4034-bc17-cd705ee279d2": {"doc_hash": "19b4dc64de9b0365a67ac426c9b7c6ff05636ce1e167f53e50e1f743bf00c3a4", "ref_doc_id": "281fff4b-ed73-4fff-947a-9fcbd5b7affe"}, "b094b148-67e8-4b16-bf93-04057b59e6c5": {"doc_hash": "a8f52030a06677e7443f9b46033cc5ad5237734ba074615974ce724f3bd54f8d", "ref_doc_id": "509cada2-1d54-4435-bfa7-a000d85f5cce"}, "3a0cfc9a-11ac-4b65-a83b-b05ef28192fc": {"doc_hash": "7cee90d9f8efacc896f2aed6c841bae75e6025e17f80cc10f39576a3c5c81697", "ref_doc_id": "9ac245fb-f28c-4760-a4f1-806f9a2dd646"}, "3cc42c19-ea5a-4b85-aeff-5ce0967c07f6": {"doc_hash": "d146e62b433c564cb28c68c5b828e355b457cbde9d3bddc55df75c3eed06cb89", "ref_doc_id": "f613fa76-7349-478d-960b-2b61c006889d"}, "4b2df9e5-3c93-49b7-ae49-810f192e7b0a": {"doc_hash": "13b9e0d3541540954327b5f67e2bc0e2c9a9a459f657b47309f832ac27911613", "ref_doc_id": "85d2dca7-184a-4957-9de0-a17e23202a77"}, "18454a97-2870-48e6-aec3-99c121248f50": {"doc_hash": "1149f0c1841c952f338935135a0657ad8f0ec04d8a34f9f83e7b93c5b6f64e9a", "ref_doc_id": "8082f0aa-d82b-4049-9681-88118338d3b6"}, "6d52565f-59cd-4adc-9810-15b98ead733e": {"doc_hash": "0bd8256104a23d255a7018bbc05f5928f557f031090e12c3520e99a19ed9a2d6", "ref_doc_id": "3b4fbc6f-73d3-4e8b-a92b-4208d641c613"}, "ac3c2049-3d1e-4c50-b3a3-5293b3f5b1b6": {"doc_hash": "777165318a3539afa64c4b78cfda8f711474305b4f48067de51bd36fac7b7d89", "ref_doc_id": "cb263716-aa7a-420d-8d88-5706d4529266"}, "5e05099e-3990-43ad-9541-cf683e5258fc": {"doc_hash": "ce391a16d53b0797db9f74e298ddda8d5cb57721aae29dfe4dee14ee131b0411", "ref_doc_id": "9742ce63-1419-4467-8403-3f6e7f4503f6"}, "e9a9f1a6-b83f-47f4-8517-f49381a618c2": {"doc_hash": "899eb04e09869c02f355a43c7edb725a71a0f00997664c7a06c9aed37c31c0f8", "ref_doc_id": "211b935e-b817-4432-8e47-0a6bce4b7fff"}, "9a6526b5-c398-49a2-9c1a-e23d71253042": {"doc_hash": "ed1a4d7538a7ea47e3f4942911a6d289a5976ff3f4078477da47885fd34da1f8", "ref_doc_id": "d5ae36d6-86fe-4244-9006-f3179ffb331e"}, "259ed3d4-b2df-49ad-9e94-2244ab11f319": {"doc_hash": "458960e0ebaf8e1fff087ffae89043a55f8df50bed19365c3cc0c64e261b0164", "ref_doc_id": "e40e73aa-5d66-48ce-a390-5b0e47e6d8b9"}, "96f01306-78bd-4fab-9b40-03a16851bbfb": {"doc_hash": "a1d5e6d361d2550679c7a6022167e58b369e6426c11139ba3b3c0a1f9deef0df", "ref_doc_id": "c25667ea-384b-4a00-b6a2-2f46c2db65c8"}, "e5108e7e-36d9-4e87-9ada-caa1f6fc9db2": {"doc_hash": "2f134b3420580659570ee3d691661e118d6f93aea34f1b599ad0662a7b8d0c01", "ref_doc_id": "c11300bf-c6c3-40b3-9c45-e8ae16824b21"}, "dc593e65-687c-4099-bb9b-99d55a17b5fe": {"doc_hash": "07fc01d22cdcb897e0762cc10e92b42fcc00555046c946965f456f96064d3af9", "ref_doc_id": "f406b4ba-69fc-4d18-a90e-323cd44fcf22"}, "c84e6eec-eddf-47ef-827b-adf91b2e2155": {"doc_hash": "0a607c33e1467869aad6b362067112adaa3faf3463bd2fb84d2312eddbc759e7", "ref_doc_id": "8c13f683-b4a5-4e37-ac5f-0a8f5fb77759"}, "9e043c6a-24c3-4eaa-bf92-560e03449c5e": {"doc_hash": "5c8b7f602b54e1eae93ac11cde6b0faae8d46eced93954b7e096925205ba5f78", "ref_doc_id": "1d033a5e-d562-4aa9-8a2f-c3a28b5f7f48"}, "2b75a935-1d07-4520-b9c3-ba5e6e310b78": {"doc_hash": "1dad0f8b441354d3b1d7035c85e6a0bd1e69dee1e40da62d681267e976afe923", "ref_doc_id": "b113b4d6-96b4-4092-b449-efa92c67b7ed"}, "000d51ea-2672-4064-91e1-4e345bc612cb": {"doc_hash": "9869cd69850879b05295bc70f4657c8c4cd92560f3fbcfc162a7ad88dae46ca5", "ref_doc_id": "61b5aea3-5a4f-40a3-856c-3e818b1c7404"}, "07b70d9a-c376-49f8-bff6-02ec7d1b7a31": {"doc_hash": "cceaf1e4823874a8f5520de2636374a0092c7b4670408341e4ac0d6aa456c675", "ref_doc_id": "e5a6a61c-1471-495b-8e63-0c74e5edf31e"}, "418461da-55af-4506-90b1-35dbd9a71c24": {"doc_hash": "9aea121cebff8c61548d22d79a51db7ec60d1745dbef07cdbe0e6bacd2dcbb7b", "ref_doc_id": "a3640d6a-cd9b-42dd-882a-ebfb52526070"}, "a98439e5-a43c-4d84-9cef-40306388bb89": {"doc_hash": "9ebc31fdba168da35267c510d18c134a0fb0b06705713287b33d2d35df608f64", "ref_doc_id": "85ab669d-a855-469c-b284-cf274c56982c"}, "03de00b1-960b-41c8-af43-05cd8b4e58e4": {"doc_hash": "5fe19f67df057416960fc2da69ecd512d903cc2c9f3e729720515b7c419a32d0", "ref_doc_id": "1a1fdc35-ee15-41b1-b757-acbb71bef7c6"}, "590a84ac-2e7d-40cd-ac6d-d9438d4b49a0": {"doc_hash": "5a4b8e800bc93978154e009acb391233a9eb766ef03272d5431246b439c4d054", "ref_doc_id": "f763c37e-f749-49c6-8e6e-34d153a5bd13"}, "b00bb12a-66e9-4eae-a65c-4e2c859e578f": {"doc_hash": "0214c7e8864a9566315113269557600fdb0f3cdbc529f245bfe3b672c7517ecd", "ref_doc_id": "4f4a05e2-558c-4845-a041-f1acf38fa6ab"}, "2129c459-808b-49d8-b9d0-2d520e38954f": {"doc_hash": "e308058f9cf12d01ff8bc29ab87c893d6243fc1c5dded895b1bb16949b0b3490", "ref_doc_id": "d0771fc6-64b4-4756-87ae-dc1362459759"}, "c7f4ea15-44b2-4943-963b-0b98c844f186": {"doc_hash": "aaa5332062d965d0e251d9b142bc3c8943eba2bcac9304a3370f4e3761778135", "ref_doc_id": "71ec4650-0a6c-4e97-be94-898b09bfca94"}, "a35b0995-d898-46cd-8e5b-06114ce143df": {"doc_hash": "9b3fb5fe407e807b805fefa73ad5c30fe6aa1ad711a5170b649ff7b94338d60b", "ref_doc_id": "4a62ca56-208a-4fb8-8d98-e279704b4def"}, "22717397-516d-4a1b-941c-0798efa8d80f": {"doc_hash": "9240afb842c7000048204a3bac1a0ae09b1cd18fe12a018c47dfdd9a1b9aa780", "ref_doc_id": "0b44a5a3-e90e-413d-8af2-adf4fd71260c"}, "4f2c0c2a-567d-4e49-a415-a427d8b76241": {"doc_hash": "df1ec89fc10948bf4093c8cdebea090581474d6454315cd65a10274ddbec8915", "ref_doc_id": "3f3b4407-8de6-464a-b386-6aa25238ddab"}, "439be4ff-6f5c-4274-a6fe-164b4a4fd04c": {"doc_hash": "5b0cf3ab1659bb27695a919ab56d22dc7bdfd8d189878f224a52e0e634a8bf4d", "ref_doc_id": "f2ff25fd-95e4-49a6-b399-e315acf8f516"}, "e5ef31ef-ed60-4174-b5cd-f1594a801e6f": {"doc_hash": "cd46b21f3d7c16622f5cfe57f0730a9a47bb68672ffdcddabbd548efa4a5ab89", "ref_doc_id": "a77cbefa-6a4f-4f0f-a54f-26c319bad674"}, "203cdb92-3476-46fa-9170-0844baca71ea": {"doc_hash": "f1666fc175e74659441575fe2449e48aee8f0f7eb068bfbfc8412fbab3cbd919", "ref_doc_id": "18177179-3a08-4e6c-ba9f-7681863d6a05"}, "4c01a406-65c2-4253-a6fd-24a80f502157": {"doc_hash": "b3d9589b864082e9970860688c69ee481f1ab0cce1571cd174c4c0a887829d4c", "ref_doc_id": "4c21c889-ebba-4bc1-b453-0aea92e0373b"}, "ea0d0022-4676-48f4-aa0c-6dc4fb5a8c2c": {"doc_hash": "65d626870ee465847c209abe1e6de58ef2fdaf9b0bb52bb360f1c45ca6d33126", "ref_doc_id": "0857e15a-f7c6-4cff-be38-7afcb99e683c"}, "62a800c2-4360-40e5-bdfe-a4891b4dedca": {"doc_hash": "04d36811f32e0661338ed1ee860625dd40ebbbf1c8b74e06912387a03e24bbe6", "ref_doc_id": "72355989-d836-4d4e-a0b2-1304c7e6283d"}, "fdac8698-6786-4cc3-9a62-f1d958cf0e29": {"doc_hash": "144c7f09e334d4335bd0eec584464a497553f34595e4ea9e71e5f5ab7cadbd13", "ref_doc_id": "91881cc2-df85-47e3-9f35-196d50aa7ac9"}, "25ce32fd-b389-4327-b4c8-b56d2828b222": {"doc_hash": "3248cde16676be8d58373e4d5b9d1f5ddb68af3161b19990598ec6a68293c43d", "ref_doc_id": "dc1e9a60-63c8-4545-b595-458911499267"}, "cda86376-b66c-4e6d-89cd-a66828474a9b": {"doc_hash": "e49b1ca9507db18fa6d6b31a24f49f9203e1c0dfc80a1f86ec6437f524048a16", "ref_doc_id": "463d6c70-df99-4f81-9733-c4b7424ff992"}, "58c8b66c-1eb7-458d-bb4a-a7a293c6be46": {"doc_hash": "9f302cc2f489ff9414fea6388316f1e4caca89320470e566c10f958118d2d3f8", "ref_doc_id": "bae20534-8682-4b47-aa56-5e98d3482c71"}, "35b0178e-5229-432f-ada1-4ce1665cdcf7": {"doc_hash": "eec3caa0999f69b1a8dfb3ed8fd7e4bd2283bf42da5348e0681b8fc4560e6d97", "ref_doc_id": "c58bd075-53cb-45a5-8166-f492fdd91add"}, "2aec227f-4364-4e0e-9a58-4e47755d5166": {"doc_hash": "9da4d212cf577c1bd94186fd002fb0c999332c512f3f2519a44c51934e5ad3bb", "ref_doc_id": "d289173e-3ae4-4c94-b3f7-dde8a0a81a7a"}, "4067fc11-a87c-4dee-a85d-2bb7dc264abd": {"doc_hash": "9d78d52a805a41a2c886e3a8ca70e4d5a34c381f681fe0ce668b61d801cbb6a0", "ref_doc_id": "476b7ee1-50ad-47b2-b867-14ff502545ef"}, "9b524f6a-2e0b-475a-8da7-5160ae19406e": {"doc_hash": "7c1d3408f02b7f0353f2e66e9161aaaac18ff6a3064b3e8ab594228fd2043125", "ref_doc_id": "efa1ff18-14ec-467f-ba6a-883f2ac3458a"}, "dad418ab-2de2-40da-8bc3-f047618919fa": {"doc_hash": "39fd73c6c1a3c18cb293e8b4e3c7c73100541640b488a398cc3cecc66c7e55b6", "ref_doc_id": "fe5816be-8315-40bf-a380-8df9693624bc"}, "dae49efa-d16e-422e-a8bf-b5124dcaf303": {"doc_hash": "70cb6b863f4532ae4b674590fc90d70ba2c415a34c8f53aaa904200230462cdc", "ref_doc_id": "a7cea9f3-f05b-449e-a27f-bf037f89f560"}, "e50c71bf-376b-4063-939a-e14457bc2800": {"doc_hash": "1b44f23ed5e9bce18eaba2f36a6d85f9673b03511712a90c8f3a4e1bbdeb695d", "ref_doc_id": "9ae8fc4a-588f-4d7a-bc7c-78c4e2538493"}, "dcef9015-fc71-4eca-9f90-6a7fbe9b6a27": {"doc_hash": "1308b2b59be9ecb3949a1aa0a29fcc72e5f9fc785a93287f7266b9b5b107c3f8", "ref_doc_id": "977404a6-1054-47d1-8a0f-bda9d766866c"}, "42ef2a40-8418-404b-b982-37792e4d3234": {"doc_hash": "ba11268c24f525d4741f4abe780d8a24e445da2477683f4dc5dd39d0259b1118", "ref_doc_id": "3544440c-9dfe-41a9-ad36-dbcd59f253f1"}, "9aa997ae-bdbd-4390-9fa1-0ed803fb844d": {"doc_hash": "ee068d14baffce7c8aaee8fde6452edea29c92eb0717a716088ab03fb56d221d", "ref_doc_id": "b32c52fe-4dbe-419b-9db2-75e2b7b1e8b4"}, "89bcbe92-1b20-4502-ab83-f984349c6287": {"doc_hash": "0385ca94fada46bc8b1ce85c9fb32ef5a864b0dac686c22aabe56012aee29235", "ref_doc_id": "4d5f4e56-8537-4165-b55a-f15f9248e7b3"}, "417e9b05-4a0a-48b7-9c8b-fbfa26853d6c": {"doc_hash": "0ff70eda0c57280511811a07035f4941011b7ed3b80fb9dbe1717e59da8ac491", "ref_doc_id": "a0eab821-ff31-4d8c-aca3-525ea87e8c16"}, "3971ddb6-29be-4ca9-acb8-f0dde73c9e98": {"doc_hash": "ce95eda67b072a56957513a914ee123a2d1c4b4f07d53dd49ab3c9a421922518", "ref_doc_id": "d3be118a-fe20-47db-8061-c65ed81f6d4d"}, "8ff93885-439a-4ed1-a16d-733a0c9eb190": {"doc_hash": "496cfe6548cce095311462e482866c2480d9338101180826e4d8d213195d3ea4", "ref_doc_id": "4a5ca02d-94cd-479e-ba1d-141203d20467"}, "bc7b455d-ea5d-4446-adab-3386a21ce5f0": {"doc_hash": "50314aad94f25b38190697d677c1dd6f50ea595b30092d68d01f80d1f6697aa2", "ref_doc_id": "6af6498e-9e26-4d69-a557-5c3631395575"}, "c70268dc-609f-4139-baae-a8df63426620": {"doc_hash": "b9b7d25bca8ba108473c6db730f1490df2687cc13df8084314d040e56b47f2fc", "ref_doc_id": "70141059-7dde-449b-973f-7a7161dec6be"}, "10d02576-678f-4312-a1f1-d132c380677a": {"doc_hash": "30a9ec60ff1d7a35c3b65d60a3166d347b55aa7b3d11f73529c9099fbe62591b", "ref_doc_id": "f8ed6d1f-6527-413a-a452-65745e48ebd7"}, "3e9c81a2-1419-4287-b2d5-b3a6e7154808": {"doc_hash": "f8d3166d200e9e34e139933b8c01237fc511f6835e8cde2bdccd7604ce64c488", "ref_doc_id": "26261184-c5f1-4c6c-8549-7beb63516582"}, "34d6c4d1-96cf-497a-ba04-0619a94f147b": {"doc_hash": "5f391ad2c3ef8d0d0f4d5d3a08e41ae853c5c0d7d5b91f9a611604090dcad265", "ref_doc_id": "ff5785ab-62e6-41b0-a34f-ec683b23e3be"}, "58708acf-fe4f-4580-9157-a412ddbaab83": {"doc_hash": "38265c98833eca21808c9b127b1a6c2365e16ec46810ac1617754d4c3ea5f6fa", "ref_doc_id": "f39638e3-ec89-4c3e-8531-ab190bb3353a"}, "cf7090ba-0321-4f57-8e7d-dde649339dd6": {"doc_hash": "5807b6ec88b855a7169da84c323ced655d91ab424d998edaead79a890d9b4d2c", "ref_doc_id": "5936e643-64c6-477e-a707-2028255a883a"}, "60caa3b7-e7b8-4802-96d3-f32f45d3b757": {"doc_hash": "2d2c72907073ed04a0afb53fd56681e81da2772494fc5df85a706c6ec0fe86f3", "ref_doc_id": "f1cebfd7-cc2d-4acd-8207-7356aeaf2504"}, "ead68334-cdff-4445-894b-f1855d1b6011": {"doc_hash": "f2a5b33114407f0ae7cb3faf0de925fa71f6496418b0bc0533d673fb2b6855fb", "ref_doc_id": "c895021b-81fa-4c98-bade-db10851ab346"}, "0441ea99-0efa-42fd-a910-f167c2d0b63b": {"doc_hash": "20c6ae64ed99c63530f10f1a734845a2e78148d2731b143894e6399e98a62272", "ref_doc_id": "092379ba-d2af-453a-8c83-daf959050318"}, "491561b3-b58c-4367-b6d2-4bf530749474": {"doc_hash": "49c2d7a67e9af4eeaae987b3c34794f0c0bcfb159d7aef911e7156f0499e78b0", "ref_doc_id": "d733d84e-a0d1-4383-b582-5bead2b43b00"}, "ebfc7705-4877-408e-ac01-8ff30be148de": {"doc_hash": "798bb6a304599385bb8971e48cdebbbbd3f871162a3f1d7150a69bbc5b446121", "ref_doc_id": "869fb07e-7a5b-4d75-937c-1ecfeabb3774"}, "260af7c6-0f61-4983-9d09-63a8f3b40434": {"doc_hash": "ad43f5ec11812d8700b6cb5d8c8a6eade2cdbdf803c5aca45add522f5de7d96c", "ref_doc_id": "ff6b9955-eb0f-4f1e-868a-f90d025b2ea2"}, "01e2c509-caee-435e-b974-f6b5ae132cde": {"doc_hash": "386ce62bfb49abefc249deb9f155261682e09248c2cef7645f35cd0fc444e8d3", "ref_doc_id": "c98230db-a3e3-491b-9de2-896f40695b0b"}, "e1fcb35d-9ac7-4119-98ba-0289182d86d2": {"doc_hash": "7bed6e5b0a42ca8c8bb6920632c8efe2bf1cf2e80e3cc907c8f3bc88fdfb8bb2", "ref_doc_id": "5d680d7a-2aa4-4379-aee7-99ba422d0350"}, "3a2d2f0a-50d3-4442-a518-4574bf7ac572": {"doc_hash": "644f7d994d07bcca1ccc44cff31f3dc632d1b8bbb1dde2e6fd004f3ed51f47b7", "ref_doc_id": "ee2d9eeb-1703-4581-8dae-233f36fc54fe"}, "1d1c91cc-948d-44f7-ae1f-1d562751b825": {"doc_hash": "791e6d2050e5d4d45e596f727f16daf2e2b0a758ebbbc6b19d382276c8b2b6ce", "ref_doc_id": "b6839f8b-ccde-44c5-8017-7668d7dc7c1d"}, "afa0f01e-3c6d-47f1-850c-e900e6578607": {"doc_hash": "afc0643096252263ad68657ea790302975f63efa1190eadb6c89a404c075f57b", "ref_doc_id": "aefff421-bc29-4bab-94b2-9acc1342912b"}, "459565db-7806-4dae-8141-fdd2c3eb26cd": {"doc_hash": "0ccb278221d9abc23d928f4160613c27b3811388a63e6cd52aba3c2dc02c69b9", "ref_doc_id": "4fe846f9-9c02-42f7-91ff-13b8dbca54b6"}, "36aaf72d-e6e8-4105-9b67-a0e23dc88c7a": {"doc_hash": "a8747293d5276675bed5a2d9b8776789f390a8ddf207be4933abfda3c143dc4a", "ref_doc_id": "f3c590f9-7914-463c-9cd0-b535fd67e5e5"}, "5475ce31-425a-47e9-8e6e-1212a53eaa15": {"doc_hash": "ee361af65eb775ebaf31c31ac289fa4f6c472c5c5eee1d25247bae85d98eb14f", "ref_doc_id": "fa3318e9-992e-4afb-a3b1-5ba41e9652cb"}, "433c3479-cf92-41e9-a3de-3c479a976ac9": {"doc_hash": "f8b23c342ad9e52bc411d8c752459b4473bb4f1aa6f00c3c3713106ff191cc14", "ref_doc_id": "b49deb62-dbce-48e0-b67b-9f3f1237c1b6"}, "6dc2eff7-3bdb-4564-9fd6-ae9fd83afae9": {"doc_hash": "b0ed76d390594fedc3f8223d279f4d05f0f258a4ea3bd81269b276603a5da5be", "ref_doc_id": "547ea586-f8d5-4b13-80a5-256b16b8e00e"}, "38325b9d-6ed2-4649-b27a-8baa9b1d342c": {"doc_hash": "325700395cf52ee0b561d47ca98d57b942f84adc1fc73e8fe18c1ca93bb27570", "ref_doc_id": "f907adbe-7bbf-4fec-b075-e3eb0a5a7987"}, "fcb631fc-ab69-4b28-b880-8c64187bdada": {"doc_hash": "b76a0a81bcb71bf273ba5e394ae72da5097faddfba84eed5dcdd33d970cd620e", "ref_doc_id": "6cd6b5e6-c7b6-4b33-85fd-be2fb5c50fde"}, "1eb7f313-aeff-4ed9-9f3d-07bb561cc3d1": {"doc_hash": "7da7be647ea30c72b1c52fc910f9f756dfcc5ec990dfd77e9cf8ffe7750e8a57", "ref_doc_id": "ab6dbb42-a600-48b1-b2a8-6515863c1cc6"}, "1cf3baa1-a5a9-48b4-880a-5dee45859bbb": {"doc_hash": "1c46f45f9bf273009c4310787b269f6de5ecc1faac73012207f91bab65a1bead", "ref_doc_id": "913c20e0-a69a-4eb2-b52c-9f13eda40906"}, "16dba468-a1b9-4fc1-9a78-4dae36e42418": {"doc_hash": "681002afff4612aabc260896d21f93234c33bc14395e60cc2c16cba48b5d5f86", "ref_doc_id": "b58aa14a-7243-43ad-8563-24112a760d44"}, "8dd17eda-f333-4735-9962-ab940812be4c": {"doc_hash": "9d6ccd238b918c8ad89f74c047744a3c8f28b6f407a3a75e91fccb2cc143ba69", "ref_doc_id": "287dde2f-3b33-4de7-835c-45e583660864"}, "994c9bc2-96fe-41ad-9e04-f56e352370ba": {"doc_hash": "aeeb1b5ce65f4eb61e95c9375f73456b75704515ff64b60a192cf5968bc8394e", "ref_doc_id": "087710e8-7a88-43b5-8792-38eb61eec1b3"}, "1d85c877-0a29-4447-be72-c6715f817f1a": {"doc_hash": "6e4ad6b1a7df8d11e481c776386e20318fa997ce371ca9651329ddac935ce0a6", "ref_doc_id": "038ac4c7-07a2-4a88-b6de-3a04667acc2e"}, "69b1f450-d53a-485c-9609-f81b4610164a": {"doc_hash": "e35b9602cc6499dfbce1b9014ce768d44aac2b43bee08b1b6434e0364c49e159", "ref_doc_id": "27319c0d-c6c3-4dbf-9d48-53d239f6a19e"}, "c5fc5b82-390c-46a2-910d-ef83ffb972ac": {"doc_hash": "4aef535a1ca575c6c6ac34b5b1cc0ab56d4667b392956e7933bf5dccfb54ba34", "ref_doc_id": "c985e782-94a2-44d8-a3a6-0559b1965f64"}, "cabe1a65-bbd7-4ab0-bc83-c6033317c426": {"doc_hash": "5a07e4e13228936401ee3b473041bbcf5508bd74bc89733646365599791a37d3", "ref_doc_id": "87ad69ae-6995-4ec2-a5f6-f9930c6b3811"}, "04989f81-5293-4687-99af-e88868bd7f40": {"doc_hash": "b6121c542e3132cb2fe794bd3a0e5e350d69f5fc503699d0b04a1482950637f2", "ref_doc_id": "cdeec5f3-52aa-4f43-9be2-0e5bfd8a65a1"}, "1e9a4fbc-de54-493d-a44e-b5e569d4067f": {"doc_hash": "eba1365e15673de34b3c0f59b9bcd47917d4fdea133861beb3f00ea9e2bf12f4", "ref_doc_id": "52987080-6542-4b57-832c-67cd8b1a590d"}, "fe64041f-5a0b-424a-815a-0584726c1e02": {"doc_hash": "c235b1d147002a7aeee4852a030dcbe2d3848744e19a9b90bffa8cf0e4d9f64f", "ref_doc_id": "84700511-722a-4727-927b-1a6b113394e1"}, "df66d969-93d3-477d-87cd-4f2762cbccda": {"doc_hash": "d0be49deec13eb6750bb472ed0694b6c3fdc3473ef8cdf22832d9bbff5624903", "ref_doc_id": "3efbff9e-dfdd-4472-8372-8bf431a48169"}, "e7ecd1f4-01e2-44ab-b230-4070899c5c0c": {"doc_hash": "b6adc602afc8e9eda9590f463da9bca446cbaf10b1e92a0f3d23f371b1375885", "ref_doc_id": "b542e02d-8146-4b62-9327-8bc2f7c4587c"}, "62933227-5f2f-42a5-b005-3b8fc79c7863": {"doc_hash": "e01fb4a1f921b1b8f7f768799d070508ed41b3e89e425fbb5f8c61b66cea538f", "ref_doc_id": "be535713-c8ef-4280-9c78-d2e2e720ff19"}, "fdd24628-a5f4-43f2-a81f-d538e5e81d55": {"doc_hash": "c894a166d271fd3bb32073efeeb0ffdb6a37a7cfb946cf3a502dedf507188ed6", "ref_doc_id": "47845812-fbc3-4a8b-a094-2f07bf4b7f6f"}, "800a98b7-461b-4f55-8eeb-c03e00b6a580": {"doc_hash": "f78ac540f0fac7b5381e45888aff4a7f4d4c961af16d3d15719dfb72e5c655ae", "ref_doc_id": "779ed14c-2443-4a40-be6b-a9730723f25a"}, "c973c2fa-42fc-4ac2-82ba-6b8ff03bdda7": {"doc_hash": "0b1eaba062adbacfb22c650828a232938bcbad6fd1e5b930b8e0040aa558d3e2", "ref_doc_id": "e7e0fce0-de95-4f3e-b816-d23bab1672ed"}, "eb82397d-301d-4e9b-ad27-f7284aa18a21": {"doc_hash": "db8aecc0ff7383fa6c8cf871c185ca902445e8776bc185a9a3d986ce473dcfc2", "ref_doc_id": "128deab1-0a77-463b-b0cb-3f18bdad8eb6"}, "85037c67-6f40-4686-9336-a7c88863eaa4": {"doc_hash": "b8d62331799fd60bd8e5c8c6947ed1054acbefaa75fe8a2b87360721ea0cb33d", "ref_doc_id": "50e508f1-0fca-476d-9c93-4fed86689305"}, "560b4764-d8b6-4f6c-86d3-9212dc0b9d8f": {"doc_hash": "7225a0c835690c8882aec9cd83c44ad4caa3cafed42219e3d1538790603d2406", "ref_doc_id": "ac9fb681-468f-4b2c-8154-8a733f3f561f"}, "d8c6e8b8-f2d3-4740-85fb-01741eed1aad": {"doc_hash": "a3e99b024b072c94ac09161f9aae519c4af16f67f19d4b945a5e20b409b21969", "ref_doc_id": "cff133aa-3843-4699-a15e-ecb2ebc1eea7"}, "bae1cf84-6e2a-4efa-8511-bf7af2d2142b": {"doc_hash": "44a0fa2daf3162abeeb9faccc61a447adde208a58ced285156b34ec0fd9c7706", "ref_doc_id": "b019fa7b-d2c4-48cc-882f-6b539445bd02"}, "280ec291-c365-4724-9c5e-04b4531f29da": {"doc_hash": "fe88faa3582fc761a30eaa03332cf694dc2e869364b086083d9498292ded0869", "ref_doc_id": "7ee74cc8-21be-44b7-965b-14e4cf953b43"}, "fec30406-5e7b-4f7c-a588-246f0e04ca0e": {"doc_hash": "86f488e19b754263c2d02e5df877c3594c0b2fcea9432c708fd1e34e41c18cab", "ref_doc_id": "d7721b23-53c4-4b7f-8e5e-4278ee03a5f0"}, "1236d172-41e1-4f41-be81-fd671286ee8f": {"doc_hash": "8035a9fd6a5ac45e403bcda9bcc1ea808d4cc007dce94fc2e4d8de45fa4be6cb", "ref_doc_id": "a242dd55-d696-485f-83df-fc3e614083e8"}, "252b2cdd-e35d-40eb-af23-34921acc85ce": {"doc_hash": "822c99d357488e79cd4bdfc36bb16392ed8e11ca776cd0d7048fa4370c7c7ebd", "ref_doc_id": "f54d7ba3-f556-46ff-a3ab-cd5f619f1b1b"}, "c59d01fd-7fa0-43b1-a45b-1a527e9474c3": {"doc_hash": "fdd092cc98478868d10a8e72b05ba624d6a909cb74d6a025516043d9327bf124", "ref_doc_id": "8fde44c6-d210-4a83-9a32-0467516aed7e"}, "c617b38d-1f39-481e-9a9c-d5782e28ca59": {"doc_hash": "6bee7964a7b3ca9d4fff32d818ae427cf61f0fb9d4f26e1d08ba1c39d70b15c8", "ref_doc_id": "2bec580f-f045-413e-88f0-fcb8917ca263"}, "605e61ab-cb4a-484a-9e0a-b0b633193b5a": {"doc_hash": "94d4bb6d5911f3d10297c62c309ae022a06cddb6b8fe7757f60b4e031f2b0c49", "ref_doc_id": "3aa50719-4a89-45ff-b4f7-efc373863d9a"}, "857e0c77-798f-4c2d-9816-92587dd7c341": {"doc_hash": "22e4cd2e9dd9c5b5ef04e633706d9101665d93c85f7b0ce21cf68da82a828a34", "ref_doc_id": "9e7e35d0-f9a2-4668-9105-1ba735e4ebdf"}, "2f2caa6a-23fe-488a-9f40-aff0b08aff2c": {"doc_hash": "55763b3faab14a740928e60a913c1e69e2fdbb2bfa1bbd7d56e1a0cb007d8a22", "ref_doc_id": "a23d09ce-4a73-4fdf-b330-f388c9fc96c4"}, "4cea4cab-3753-4658-b598-02d0158662f0": {"doc_hash": "d21119e9ff7ce1d4f671d8b69f70348f8434b37cad819705e28bce7baeeb0f1c", "ref_doc_id": "bb3d1630-781b-45fd-865e-37b21fe53a95"}, "a5d5be1a-7093-49b7-a77a-c34001335d73": {"doc_hash": "95755565e18b29c10a22d8e3c12dcf91f24a3de7610911556f22c0499ecb39ca", "ref_doc_id": "211aad95-fd45-4fc3-8bf7-d5ce4f6a786b"}, "4222a643-09bf-4e11-9737-0f513163765f": {"doc_hash": "824d5c97c9fdf5d6832b143e008925bd0ca52f164c5f23418866f4f021a95bc3", "ref_doc_id": "1f0ff3fa-9f68-4224-a929-b150c5cf4ba9"}, "bdda2e19-f949-430e-9e45-5d1e398f338e": {"doc_hash": "f58b1a97c17bc51be2743069cee4f3f8a3dc3ebbadd00fbabf259ce85319b6a6", "ref_doc_id": "021c7e77-2dd4-40b2-95a5-b0a6a7dcd9ac"}, "84084b2b-9f93-45d3-8f3f-3b4ab5b107ab": {"doc_hash": "457b1e97e2cadfb03f2f36f62aa50320af4b42e4c5397d97d56234c89502289f", "ref_doc_id": "c8433ed5-cb3c-462c-b7a0-145c4d450329"}, "0eea6d1d-88d8-4ab9-a531-a71c6e956b0a": {"doc_hash": "2612473d66aee34444fcd653968fe70b48e9e523f398cd2dfa40a55e95fb7132", "ref_doc_id": "c4ba51fe-0905-443a-99b1-99a3b9fc5db7"}, "65e0a00e-7054-4891-95d6-04f57d982cf1": {"doc_hash": "1c67d073faa79ae913e1235e3ef839f41f87a2535ecc434c253be40b9313a6d9", "ref_doc_id": "ca704ce1-cdc3-460e-8d0f-cbcfc66e5b2f"}, "2854f547-cf60-4a64-9332-b4079ba4bc5c": {"doc_hash": "dad0ea264e1e124bdeddd8f1ca0d659283502badd75b78f05ba80b4248fc4fef", "ref_doc_id": "49c88a0f-a9b9-48fc-b327-61c041a2105d"}, "453a22ed-c443-4dcb-8cbd-89c5224ba8d5": {"doc_hash": "984ca04a8836b9ce8847fe6188573a2e080c501dea478a4f62589349c5288f72", "ref_doc_id": "4163bc87-2d68-473e-bde6-f530c956be93"}, "4d7b32ea-f952-4131-8388-431e83f6782d": {"doc_hash": "6b914fe4a1cad6278701041bb07f3fbc684f53784b561f2fb335d5078991c133", "ref_doc_id": "74ba657b-c222-4ca0-a98d-761eab13596b"}, "69d5065f-91a9-4fed-bbd0-e0427c4372ac": {"doc_hash": "5d5323bdc8d10feb367c780c3b4c5168d3f3e46760e7fa180113636083d23e6c", "ref_doc_id": "52520531-3c4a-4baf-a77c-3d6ec1cb638d"}, "742265a8-89cd-48a7-8628-43db803195ac": {"doc_hash": "10a657afaa74003d086221ac0325120481ef7b7ddca41903eaf2e87cea76374d", "ref_doc_id": "397ba1ef-f45f-464e-9537-6409762367c4"}, "013ad195-55fb-4724-937e-7434e0cdb349": {"doc_hash": "fb8f8684aa3b3139ff128f8c23b2c7919fda94a29b9299aad8736d76ee5282bd", "ref_doc_id": "0c3c873f-ae6e-42d2-8f8f-18bcbfc00875"}, "ed715ed1-47b4-4285-b60d-b224f9f255ab": {"doc_hash": "709ecada21f928f39da5dc13dce3a2c0ffc44556898db7bc5bf7e25268518be4", "ref_doc_id": "b6a392b2-bcc6-42d0-a72d-ed81875af65a"}, "0138bafc-86bd-49b8-b8e3-29186b6d4014": {"doc_hash": "b9de4a9623c125e8cf70f1657f9b63a1a6e86083185d30f73fb20209381b40c3", "ref_doc_id": "e6413e33-4a7c-4373-b8d4-429672129b66"}, "b53a8db5-0203-4986-ac2e-d4cc44db2cbe": {"doc_hash": "a9df2891ffc78ee396482297eef57c56315168acfc5d15da66e11398d09efe74", "ref_doc_id": "5a83924d-7d0a-4448-af4d-f86dff8e5f11"}, "048c6997-964b-4b66-83e3-b8a7290b6a3c": {"doc_hash": "49876ea966a2b7fcc26e11b6fc95452582b9f8ee2810068d80207376cda47067", "ref_doc_id": "c7386cb8-6dbb-44e6-bb49-c26db4f4816d"}, "db164c0f-7a2a-4e17-a1d5-d83a469994a2": {"doc_hash": "3490e7144a4ff0695c60e36013ef596b63f7982700e781a44323fff0183508d2", "ref_doc_id": "6f1c6249-4061-490d-b196-3bd5882223b6"}, "3c63a324-7b28-47d3-a0dc-912ec2677119": {"doc_hash": "2040b56ae2a2aa4998c94263e4d3d180ebc22b2dfd867b7352dc4219b6a9a64e", "ref_doc_id": "b7049e14-f128-4c3b-bd23-12891487a547"}, "073fd465-b334-40c1-8cb9-2aaf39be136f": {"doc_hash": "e47682512cdf1f28596adaa3ede04fe13d4e424f2be62d7cc3d50aedea5aa7a0", "ref_doc_id": "58cd8407-99eb-444d-ad58-c1305be12e0d"}, "82cd9fe8-c2b0-46b2-8ce8-b413259a49fd": {"doc_hash": "8da3f937442e457ba6b7f1114e62f1272569bf51e8059f6f61e9c63b3536a5a8", "ref_doc_id": "79589276-87b2-43b5-8d31-5b23582cc573"}, "c4faff0e-718e-4798-a4ad-2adf3c4b2fe5": {"doc_hash": "3209b46d7e675461cbac7b014b23f56d1ade007580315bfa621a06a0c912d1c1", "ref_doc_id": "b9ac9b14-d0a0-4951-97ff-a5ddf3cc0616"}, "a889abfb-a530-416b-b650-13842f919275": {"doc_hash": "59cd00c1d96718932e4cdffd826f3ebbfcf10c5b8a88930ed785e9159d6345d8", "ref_doc_id": "89e4cd78-3995-4145-b39a-228330a023c5"}, "69ee6c80-194a-4f26-a3c4-c86651b84035": {"doc_hash": "493b02bf9561d7f5dd6c9a2cb47fa44bc4c0ba25deeb6d09db8f581f3345e1b9", "ref_doc_id": "217e9b6c-cf1d-4f8b-a560-819bebee2df9"}, "e5fb37d8-71f0-4897-8511-1f8b922cd20f": {"doc_hash": "c220b7f6819c29db470229bc5c187fdfa3e620808e5d9b4b0bff48a2b9e9336f", "ref_doc_id": "b6afd8bf-b9ca-4f4f-a2d1-fc34290cb157"}, "dd2f7117-74fc-4ea9-9031-6ade7d746d53": {"doc_hash": "c3089319538a5d47acff411f9c6e68cee898a85b2b6d9bd60529a1c2843beaaa", "ref_doc_id": "2adf6d9a-21fe-4d05-8103-02f3f4fd65e8"}, "202bfb89-adc1-49c8-a440-454097f35b5c": {"doc_hash": "1a539eb989fc68f046b13a2c4d58e310bca50d374d9df47678017bebdb31fb8f", "ref_doc_id": "7e9a631a-2bc4-4fa0-b970-6cb3e8611fcd"}, "275a12f1-4722-41e5-a1f1-2cab3d808e99": {"doc_hash": "d469dd3747a9e4de2c07c96ec084cf325a7be7b10a9a759bc78463dde84ac59d", "ref_doc_id": "431e80fa-41f0-46e0-9d9b-b0cc8a551426"}, "2fd077dc-490e-4261-bfda-30c9c3364fcc": {"doc_hash": "6940fdf7aa1b8d2591c7b493122859e70fda1fe22165595d74075f8a8025d7c4", "ref_doc_id": "67e79bcd-c546-4bc1-9048-81765b455dad"}, "000097a2-f78e-477f-a06d-e69e6fa54e1b": {"doc_hash": "a9be0eea53c03b9a223ac5d614d94d4b230ae7c03e63927586ae7c20416d267d", "ref_doc_id": "1b1860f2-ef2c-46c3-8e2f-48a2c65b2e6b"}, "f0b978d2-6900-4891-a257-00dc7b348cd5": {"doc_hash": "0d734007c17c5e731537a700e6dd3e6952b4fecea7ebf64af2fcb01eadd8bd83", "ref_doc_id": "2a54db99-6b15-4df9-a2b7-034618c88018"}, "c5e06154-07e1-4ac1-8d23-ae3e66d2c3ef": {"doc_hash": "5f5f37202cca0de9df778695f48197987cb8bd9e88eebb24f721e51e38a7d663", "ref_doc_id": "f37144aa-3ced-4359-8cc6-6a64e0806b27"}, "d53380bf-ef41-4f1c-b3d4-d70aaa5988cd": {"doc_hash": "d46c807ee9c59b44b3c947d0636f5e2478c29f58a735fd09ce0506f69f223eb0", "ref_doc_id": "0ad85d98-0f5d-4a6f-bde4-40141f7631f8"}, "fb37d5b1-609e-4d15-a627-fce46fe36361": {"doc_hash": "35e0a60d1e18ab02c7e296873f65ef3faba5e0ce480dc7f1c2d7bb940306a352", "ref_doc_id": "b960caa5-a7f1-4a76-a7a3-853f79ca0efa"}, "df963388-2959-4735-b6ea-24af02db438d": {"doc_hash": "66b24aa8970ab1c8cf9afd2d3ed80459c8b85ca8fa6389aed8459501fbe42802", "ref_doc_id": "dd38be3f-4f6b-41a1-9d43-0c3129b258e5"}, "c34398f7-258b-472f-9ae9-4c5c0a6e26a2": {"doc_hash": "5e36bdd816435b5140cfeb05b426b5f73762434d3953d29c05582cd7fc7aa7e6", "ref_doc_id": "4a6c22e2-4b66-47fb-83b3-0b639c166f57"}, "96bfb559-5459-4fc2-a575-0423e3e1b06b": {"doc_hash": "d9581eaa01b5651910c26ffed0449f034d39372c6204a0d5ca8518090ebe00de", "ref_doc_id": "2ec86096-ee3f-4003-ba4e-e86569859412"}, "a1cf8f03-5d48-4ff7-acea-5954d5ffba58": {"doc_hash": "0dca7187c3940f89cfb1492548abbc15c37a47d9ba0831d22e8b1b0bd3737460", "ref_doc_id": "14e56610-9479-44f7-a240-6e4e823d8726"}, "7b3cebce-c75e-4f95-b39e-46724b2d30fa": {"doc_hash": "78b23b96956466b826fbeb177ffbf3b313b6bffd83cfc5abb697743b1d64e25b", "ref_doc_id": "4ea10a54-a0fc-4c84-8243-a9fca6af0ac1"}, "649d1fed-593d-49c4-82ce-68f11218e5f5": {"doc_hash": "41579a23401f612ae9e60d33f5f42b60624101af08ce33482138edde04315be1", "ref_doc_id": "27911c6d-42dd-4c7c-985b-6eea07ab82e7"}, "7162eac3-6d6a-4760-a397-0bbfb9213d41": {"doc_hash": "2bca3dd8f07f1b749f46c82dd15368bba3cb998530d1a917ec2cd55ea2cf6abb", "ref_doc_id": "026253c5-92e8-4236-9e23-5b46842bb608"}, "b921209e-0e6d-47c3-9c47-9102dd061774": {"doc_hash": "da7834efc5914c4d1049593e7b724bc3c0a6a940f9ad82b63b2d570457fa51a2", "ref_doc_id": "6df83b9c-39fc-4f5a-9d24-699b883d9943"}, "37e19d7d-1cdb-4584-b1a1-300839ecb6bc": {"doc_hash": "817df2f049563c72ca365655f8922b480459a7e08f45c68ba855974e56941aa0", "ref_doc_id": "95a0c38c-6d33-4a41-964b-2c3fd70da37d"}, "6e774807-4b4d-48cc-a0ea-c332d2326cd2": {"doc_hash": "8dafbd6f1be0c11fdb58736d80f60d52d6f9473c36dea510a16e76d8bd3a8632", "ref_doc_id": "169306d0-9f5f-486b-91f1-182f7df1fc76"}, "268f11ef-7207-4cb3-b407-e79a6862b6a0": {"doc_hash": "afb1d84af265ba91988a177d7a0c5224226651f2bfeea661efae02b6192423f0", "ref_doc_id": "2b6c2aa3-2db3-4dca-9e56-1d803f414ea4"}, "ba093aac-f002-4be3-8167-12465d426fef": {"doc_hash": "056b3956994a84cd74a30e21eb9ced95c7ec629f46a911d7a0a106eb5f13a1e0", "ref_doc_id": "81a15016-a368-4998-9127-894dcbacf33d"}, "bd700137-7b24-4ead-91fa-1ca1459a7a85": {"doc_hash": "b3b31b1b4b5e9aeae217768bfc5bf312a670f48b32cbcf9648e4463f68255556", "ref_doc_id": "203f4ced-483b-4e62-ba43-90d1992ef1a2"}, "9074bd00-9782-43bd-b463-fdb6b9933533": {"doc_hash": "e448b224c3a9fefe4511ad39ed0fa4d43daf3dcece80650108adafaae68fcad9", "ref_doc_id": "84ff9427-ab7b-4ed8-9aae-d20f2c00f3fd"}, "0bdc71bb-fbf7-4142-946b-335f81ec0836": {"doc_hash": "0eaacbb7e9d3e039c5d7269cbe9703c03d01588293f67b350ed3e2d79c909a58", "ref_doc_id": "b6c11e9d-e0c1-4c19-8467-e54fe7e561ed"}, "801ed341-366c-42f3-a6a7-07bcfc0e41b3": {"doc_hash": "4ef120e5aff23bd37649a6c5f3daa6fce95581859e749d45c1f10533c0d9d6cc", "ref_doc_id": "020cfe55-eeb0-45b0-811e-aba74eb2f3d4"}, "4d729166-e05e-4032-80ea-7e9157ec35e3": {"doc_hash": "fe747bc1540bf1eccdf014bfe2ce3968c781b93800b16a6b4d6c55055e2c1cb3", "ref_doc_id": "b2c71f0e-fd46-4a5d-900f-90aef7e5987b"}, "514f47d7-a57e-4f44-885c-b7a63366d1ed": {"doc_hash": "98f19024b4a7c4242dc303bc29f211f8a7216af58707bdfefead7b7274de0a0f", "ref_doc_id": "089352ee-6054-4ce9-8d5c-37044a4725c6"}, "2a998c05-b606-4ea7-8f22-f4644070d05c": {"doc_hash": "2e4a925d38e9308eca459947470ff4583e0dd4858adfb77341c5152c8d71bdf7", "ref_doc_id": "8b18a1c4-ad18-4ab1-bcaa-1451991fbc7f"}, "5a0b32f5-abfe-435f-b355-481f27fc236c": {"doc_hash": "e88eb6de1ca935b85e85fad7569d495bd0c276a7c51731bb97b2ee5386e1bbbc", "ref_doc_id": "1fdae6da-b05a-4f08-a347-7ce75d6f2988"}, "f1e5295f-4155-40b0-838b-560af26cca9b": {"doc_hash": "9286738bfd23591f2ba453c9d1f0285526ef03301352fdbe025b9ba14c203dad", "ref_doc_id": "a24561b3-e15a-4ef3-b834-2b25083d49ed"}, "4670bc3e-5311-4ddd-86a6-bade97b222ca": {"doc_hash": "d3249910c40996be27a174b7492f5401ce7ed0510880834be22128c075337945", "ref_doc_id": "6473d621-09a3-4d8d-bff9-de7644800416"}, "a7a4ef0d-7108-4f2d-8be4-2b35a68e6866": {"doc_hash": "f598d715ec7961db73beb5c0ef66eb37680a40eaca8840122fa8657e4034703c", "ref_doc_id": "079146f7-2d47-412f-afcd-c31f1434e6c8"}, "d9cf65ad-90ed-40de-a5bd-3056fa45143d": {"doc_hash": "da3534b90f9af5e98ba7e9f14af6b7d67a9523022d015c27c074fe596d3568c3", "ref_doc_id": "9c7c7663-3233-4041-b833-566fb60891ed"}, "260bc70f-b845-4614-a081-4ac3f508fde2": {"doc_hash": "29489ef70eac7893788be7f744e327ea999d62e7cf3f925c0f42bc2815a5ada0", "ref_doc_id": "03b3f4d0-afc1-4077-9cdb-d4f7046c5ac1"}, "bda002b0-8b94-45da-b3fe-ef866b13a265": {"doc_hash": "9f93061a93de6fd41b589a4bdb8e8ae5070a6beaa931b5966c7493fc346e2715", "ref_doc_id": "973c7b0e-dc4c-4273-b9e1-6daed962c57c"}, "5ded86d2-8b33-4c2b-957f-f2e10c221caf": {"doc_hash": "1c8509e5613741232f04fa5848ad08eea24edee1bb7eb4b72a67e85e1ddced78", "ref_doc_id": "fa0557bd-72f2-45d3-ab41-2f50f76cb627"}, "4777b330-c7a4-4403-bba8-5cc87f00e80d": {"doc_hash": "0119d37feb2f4e09895ba32e6301672afb28042c82a429077302df4d39dbc6a6", "ref_doc_id": "f7db59a5-11a8-46e0-b89b-7e2029544ef0"}, "7657b98c-62b9-43bb-b74c-2fab974fd059": {"doc_hash": "259931cd34f6c1c49bdc1ab1ecf6fb6987b4f254dfdf97b1776e9148ef7cfa64", "ref_doc_id": "16c69326-909f-4d43-bb66-8aaa483f8b20"}, "eb7f4556-04fe-4f0c-a590-408c5a9a9dc1": {"doc_hash": "7aab41fae7040ca9f0a26f7b568631a488ebcd9c58a604cf06ca542711995a8a", "ref_doc_id": "aa5a35f6-0013-48e1-9714-5e1d15e28982"}, "0d7f7547-5de5-4f1c-9edc-ca99487ca5d2": {"doc_hash": "ac1ec4a0306d1b3156ac57f4c7b10d20efbc19f95cacdb009a8c726f34ff2c15", "ref_doc_id": "55ac7574-7e8c-43c6-b92f-b5956a1d3e27"}, "20d8d808-9d08-4864-aca2-8f15fd83e0f3": {"doc_hash": "7d50fa4f097d9a96a36c8791187e12de5a66956b8140537e4759611a794f3e0c", "ref_doc_id": "50ab5b4d-84a7-45e5-af65-ea768a436253"}, "09820be6-c6a8-4b19-a516-b9f07632756c": {"doc_hash": "3ecad1af41715156d7fa97fa5d1df31908f369582a3b9509af2755dc9ce694a9", "ref_doc_id": "c1aafa4c-2a42-49f2-9169-5bc9e5cff21f"}, "b8175948-b8e0-4453-9072-76121f9008fa": {"doc_hash": "33941c3ce191bf55395220b146514c23e807bf85e0ef06f6829bffae105c576a", "ref_doc_id": "dfd769f4-bf33-44fc-ac63-6d96f285f20e"}, "7092f885-dafa-4289-b6dd-c4d585b90d21": {"doc_hash": "256e53fecaf7eddc83bc572cb0c249ea6936a8788e9419726078e849fe6aaa48", "ref_doc_id": "6787978f-f1c8-42dd-9b8b-53cc35e8fe4a"}, "5f9dd6eb-e7df-44da-a032-03c5a0f639a9": {"doc_hash": "249dd5a4204a5b4037c3d0ed1fbf66f06dff9f08253e5d66d5d5693393fb1783", "ref_doc_id": "29f6b9b5-d5dd-4e33-bb2c-2ed675045b8f"}, "0192b39b-5a03-4770-baa4-35859742cf65": {"doc_hash": "83cc0b433fbc36a1e11a3792fd0db2f09464f85ba3a821a9ac633edc84f0016b", "ref_doc_id": "15b86020-9877-43ad-b3a6-fa925ee4ff59"}, "4b71213a-4fb0-4127-9dc9-ea5d54313630": {"doc_hash": "ebf00ff1b0294b187c56cd8e7677e78b683df383827387e0d80a9ac890b00810", "ref_doc_id": "c4cc31b0-3f53-4465-b23a-ea6393447f6f"}, "9f731183-7f17-4eca-a8b6-7aae2c057606": {"doc_hash": "3802d116f2fbdf467c2268183ed3b0ca57ed25b52b4ac46e07c171f102985b58", "ref_doc_id": "9784b06e-5e3d-4421-bb88-37a9122851a6"}, "d8681693-c20b-4e20-b59d-4f20d41eca90": {"doc_hash": "30693f8f0dbfcb905248a5c1e6594a5d9c05b626403df9e4621ff3bfbb30742d", "ref_doc_id": "0075b5ce-9a5a-47ea-acb4-ff9c4f7bbbf3"}, "27e028b1-5519-458f-8e14-10176c46ac64": {"doc_hash": "709d0dbb062d5ddf602f6dffd771599a58b2ee64c1d5752653b730473ff4a65b", "ref_doc_id": "0d7040fd-03cc-4605-b0e5-e78bc84766d9"}, "79eed254-9b84-4778-8288-42dd1bf7cd22": {"doc_hash": "fb226ec50dc3fbeab48bfbb19c47a9fca8ac5fb6b25ad2d071ccd8356d1957da", "ref_doc_id": "7ea93022-b9a9-478b-9649-12bdcd0c7afd"}, "447e7423-3fd2-401f-912a-0f13c1379d56": {"doc_hash": "563801a7893ebda323dc0518e3087d67a8f5f978f2154bf706b6b7d336d27dac", "ref_doc_id": "5b20ac86-916d-45ac-8c95-ff0101369cd7"}, "66c20a2f-5924-4ea3-bd7e-3a56b883240c": {"doc_hash": "43ae825574eeefbeba80c16f3bd253337dd3662abdb92b6da79d49295e212290", "ref_doc_id": "1c17c0e7-f9c2-4ed4-9cb6-40bcaa5d13e7"}, "d8d052b9-7c49-4d0b-8206-fbc46817737b": {"doc_hash": "0abf4028aab8075b8c1875983ae6e1a9d2e9df6834d1cf2e10fc26e075e9f467", "ref_doc_id": "12cc785f-8d99-4437-a08a-fabdba957e3e"}, "dd3c060a-6a7e-425a-961c-afd9c3747583": {"doc_hash": "5d7f77f6a1795ce3048c6696f55a3a9cc6210746d6144409da2efe8ab09f0073", "ref_doc_id": "eb4961dd-98d0-4ad9-89f6-b8f3a0db486e"}, "4510124c-ade8-4990-812a-1b345d19b51c": {"doc_hash": "985c92d5978ed46fc8c169d42b64cfff788f43ffef5e697e4015c754357083d1", "ref_doc_id": "b0dc8cad-be8a-45c4-9fe7-187dfe4ef9c2"}, "e7ca50aa-f039-46c6-ae0b-7e9d1743b743": {"doc_hash": "b128cbb98dd716060aee147faaa346ff50d66f7038e6264b367baa626e56c90f", "ref_doc_id": "059ffbea-c96a-4830-8bfd-77208657d06a"}, "831f18df-95a8-491d-bcea-fa601a16a183": {"doc_hash": "d8609a409558da75dc5092b22213ed649f733e451c57387d968b725595a899a2", "ref_doc_id": "9159eb97-cc7d-48b5-8101-6e0d8f87a1ef"}, "505a01e6-8fdb-460d-ad57-d9709e0a9e9f": {"doc_hash": "3bae9b6fee7e9b9778ff66ebfde1a4974bec52d87cf4900357cd467c612a2915", "ref_doc_id": "8c343aec-c413-457a-bb2c-7ad70ccc06ba"}, "017a0281-3012-418b-abb2-6afe0bf46d51": {"doc_hash": "01647787c53080c8e02c567e31bdd4b8e7a554b53c966ed6b9de0c269e283a4d", "ref_doc_id": "3f1e7b27-ae54-48b0-a038-2dd0a416090b"}, "a77b3169-a71d-4e72-9562-9522deec09fd": {"doc_hash": "02e997f80d4ba408040152ff004763e9f95ffdd0a86f345f711ce2f348f2c2d1", "ref_doc_id": "85ccbd40-cf03-45ab-ba64-813655718169"}, "48746ae0-5eca-4e35-bec5-cc7e27ad7013": {"doc_hash": "a43fa1a480f280200ae64e407aaf5998596b6c8b98310f82242afff201e61297", "ref_doc_id": "712d70c9-a0f1-43dd-95ec-15ed3e91af7b"}, "6f4eee60-d904-4d0e-ba4a-44b39acc290a": {"doc_hash": "9ebfb881ee947260a58a88a3c1bf68d5bd2cb0568f3f90b1e79b4f73e7417e94", "ref_doc_id": "6fa49445-43b1-46aa-b7b5-765f1f6127e1"}, "4401a8a7-0aaa-4412-9e75-b608820a22ea": {"doc_hash": "2a7c35c7f87c8b7feca3c430e9a4608c40a7e5de7d4a993c0afa4b585257e508", "ref_doc_id": "7cd045b0-7bd2-464e-8581-649c62634755"}, "e1939983-40d1-468c-971d-cbde5a91e1d1": {"doc_hash": "6583a6615732d7503c57ea55cd8d92d95fa98d5edb21add0360f161c1dfdabf9", "ref_doc_id": "061b00a4-ffa3-4457-8699-455df15ac8a9"}, "7617176a-b065-4f9d-b567-ca875b51d5e9": {"doc_hash": "de06a155063b069f001ee312726ce16fd8c55a6de45185b8c9dc2100c2f935e4", "ref_doc_id": "10b048c2-392d-471f-87ac-df42a5eeb32b"}, "72949651-b2a2-4688-b1b6-0c7060b2024c": {"doc_hash": "b1028b33cb2667d041b5a24ab951253bb8fd6a7b6ba66d570ddb3f4827baf941", "ref_doc_id": "0ebe6a7c-60d5-4217-bce1-5417cffd9ed0"}, "ff5ef41e-b0aa-4137-a51a-2d163ca29772": {"doc_hash": "d1126ca2a42c19489ba22e6cdad24fcd81d90835447cc2aeb4829f359fcfdaba", "ref_doc_id": "94b6e2b5-b6cd-4077-a5fc-179f1ed63f0e"}, "db297ea0-abe3-4944-ae9f-7cdacb78f0cc": {"doc_hash": "f732b9a7193e697a8a848a387f8be82c3824f8c7f150f51bb016af40d13f415d", "ref_doc_id": "6c8cea40-fe56-46a0-873f-308b8ba08bca"}, "71df8bd9-7c44-486f-a9c2-527c98a657b3": {"doc_hash": "4a267f5a4a1362a208cb8f29a25d870970ce97b118e55f5e395180dd8faa5384", "ref_doc_id": "46fe67e1-4cfc-431c-92a1-72b63a81c31a"}, "0d76b353-b631-42a2-9ec6-269a1efb9947": {"doc_hash": "ed73d275e91195df61cc67584055de20eeca15ecb8a167f67a631a506346faff", "ref_doc_id": "0ee9d65c-b0b4-4f68-833f-9768807ceff3"}, "dfd4aab0-2794-43d9-99b7-f7d5c6340fa7": {"doc_hash": "69e64f2e3e7a6edc520b228ee907557985c37b80eec2c0efda6ab09695ab04b4", "ref_doc_id": "72d9b5b2-2c2f-4274-9936-50799d67c548"}, "f1504f86-38eb-4f9b-b85b-23746d04fca3": {"doc_hash": "e3bcadb964a172bbe47890eeb04dc3f78e561bb2a628f3dbd9578595d8cafb21", "ref_doc_id": "4bf2f4ca-f81e-4723-8fa2-6a4f7fbd06b8"}, "b2364f45-292f-459d-880c-a8854fe1df6b": {"doc_hash": "1f8feddd094a9e069f554fa83db17ebe0e1765dee8e149248ee75da608216065", "ref_doc_id": "d652bf09-54b0-4168-acc7-f150bfd03c93"}, "19e42cf9-6898-4f39-a9b2-b008220c12e5": {"doc_hash": "765e15fee003b74ccd2937ea5f82209c2e7f6a31500d9386944989db676e6741", "ref_doc_id": "b72b372f-9d68-48c3-980c-12136c316df3"}, "c5514212-3dd8-435e-b03b-b3416f86d891": {"doc_hash": "c51ee1b46705273c9898880e421035000af4e1256e065006768acf771040c9aa", "ref_doc_id": "7c5e91c0-9fe8-482a-a482-8bbc3dfbb485"}, "6431af44-2d52-454b-862f-a66b73f777c5": {"doc_hash": "2225c6b6dde533175d95547a90d99169f81c3bf98fb6740d8cdbe8c2a6470e4c", "ref_doc_id": "42266558-3359-4a22-b4bf-24f94cc9c2b8"}, "51cf8cea-7247-4877-b8d6-50f9e4a8d72c": {"doc_hash": "e276b5967bef9606b32e79a331bbde579efc4e8d4a8e11fe22797fb72dfd4fe9", "ref_doc_id": "d88a53fd-eeff-47d9-97bc-6c9a977e8f4b"}, "028e2fe8-f139-4c5d-9ae7-bedf9ac34dd1": {"doc_hash": "fca1462c582947d5dafc2d0bf1faa054880c49bedb5375c9eff6acda77e275c6", "ref_doc_id": "75caf562-7a06-406b-8eb7-74c648fcc5ed"}, "892f2d77-57f7-42e4-bc66-d574863f844d": {"doc_hash": "c1b4a5df7b1346c02a9cd66e5088a6f156fe8f4820c155128afc9f7d622142cf", "ref_doc_id": "68dbcd2c-8984-465d-b58d-67665b72d84a"}, "6cc277ef-5fd9-4f4f-acb3-00ea06174cbb": {"doc_hash": "fb0d8efaac047a309228bb2c5d4c6af2453eacc6e491893b5dd0c6400b615cba", "ref_doc_id": "ac117449-6a55-41ee-987f-4d3f8d38b010"}, "0f6442e0-8cf9-4e85-bc5a-6007fb3198d2": {"doc_hash": "b600f2daa4e594525bd93a6152bab843913bb8a041f7780db13f3cb220e2fbb8", "ref_doc_id": "04c82f54-7421-40d9-866a-b02704549018"}, "b832a1fe-bfc0-4a8e-b8c4-eb9c27414e47": {"doc_hash": "1d97c4e5663adcd9de9356e88cc8437e5c13999531297bdd0d188f43e042440d", "ref_doc_id": "b8306ce8-0170-402f-aa7c-d99f02c0837e"}, "f6628eee-f20c-4796-b5f9-f9005c94ca8b": {"doc_hash": "f740e8b58b1f40b5f1d5a99683cf779625308a53d841dfda53bab6256b502bed", "ref_doc_id": "9c04a849-eec0-480d-92f3-18c5277771e7"}, "784d04d5-0e3f-4062-b199-63bdd111897a": {"doc_hash": "9ce68bb0902d31a8427e7bf02d555c0ff68de86c44242a97f74d68f4b082e0af", "ref_doc_id": "6151c1dc-5d49-469a-ad8b-aa401cd8d228"}, "5f78308a-e70c-4a76-8ea0-c6c43e7ee2ea": {"doc_hash": "4722d477485ad71f0a2cf277048a857f883ba53f2b15446f12d7c29f5a364b53", "ref_doc_id": "c250d60a-7527-402b-a0e2-e07afec7298a"}, "83af94e3-88cb-4280-ba73-c46ff92aac5e": {"doc_hash": "b3551ebf222f753507a74d6ad6b0a8a52fdfd631558dbb2c767ecea589697128", "ref_doc_id": "f374b933-4e08-4923-9145-0cdbccd4af0c"}, "557214f6-3c67-44b7-ae4f-75d68890d7e6": {"doc_hash": "968fcd3578d1681eb43a1f145d44a5a8778c4c1bac432d96ef8973f1d09f95df", "ref_doc_id": "59d14189-8322-4925-a478-7fb3fb6d927b"}, "188a216e-f55e-4abd-bb69-f975ab8b8ce1": {"doc_hash": "fbb1e535c36f6cb3c74af807a51a931b0fa04c7927fabdd563a406bbec8afbca", "ref_doc_id": "dc333974-748e-45e3-a3fe-ba03af452aea"}, "a1a58655-0693-400d-b0b9-c342b5d05ed7": {"doc_hash": "4e59ff9a03f835fe5e940983b4c4c5a99a7f5158e1e11e8a4efb0797dfa11b01", "ref_doc_id": "fac16ab3-d7d7-4f5b-9484-235a70ebb130"}, "a71c3d6d-1dfb-4597-b769-9829a09d9a03": {"doc_hash": "7f1fc514a5942997e280f310691d3194c96a204a8c4d53d3fcc72637273ffb68", "ref_doc_id": "151f3eef-958f-4743-aff5-05e2f0f20d79"}, "77531a1b-ca07-4199-891e-6aa6d43d4dc3": {"doc_hash": "388d76084690bc56d9cad9b50c741e7861edfe8d71cc68fa4a78ee8ad1052a91", "ref_doc_id": "89fcabb5-793e-46a1-b481-129d4dff7a04"}, "1b18e343-ebe3-4f9d-a1e9-43d4810ee847": {"doc_hash": "8c2f2cb2ce2aed7ad5f38078b5f4d0b9c29cc71f4f4e6b69356d4dc568c04cf8", "ref_doc_id": "8b877567-5c89-4689-b9b8-fc09ee9a473f"}, "064315f7-858a-4e4e-9a77-5496964023ef": {"doc_hash": "2ba013bd2cb104dfd468a24a3249e493daece0902461405586e2ec6fc2efc131", "ref_doc_id": "d6b778f2-9cac-4e54-8769-4a7e14931a9f"}, "828244ea-eb66-4dc0-83e2-e3c8004be622": {"doc_hash": "84ec6de935173c0d707add89263aac5c89498c87ae78f313417ec3d62dde3c55", "ref_doc_id": "590cf0b8-2bbb-4179-8f8c-5be02e6c1bac"}, "b4cb8cca-8535-4c73-8661-88f2bf69d32e": {"doc_hash": "f25a276b290868f63bc1301029dceb30d10f62ddf05d67b014ace6f8f51b589e", "ref_doc_id": "4dea44e2-8c5d-450e-ad71-9385d8654579"}, "85a8daae-c764-414c-9eea-bbd4a1908daf": {"doc_hash": "fbe5fa3603111fe67a0be9676a3deb21f3598679e3be0e2226675b89b2c1f8db", "ref_doc_id": "8d24c5e3-1c57-491a-83a3-5500c239d127"}, "cd029b98-121b-4a08-925a-a8401e76e932": {"doc_hash": "fbdb7e662a1cd88a55dc9038b6354064872118e11057b3d668ab1501efad0d41", "ref_doc_id": "9d6975c4-2c9c-40c4-97fe-9cbb5fd93189"}, "3293d309-7440-41c1-b8f6-e0f98ee38668": {"doc_hash": "e733f5e52a34881d26461055045ee19caa8c50700fd415cdf2386f1d00b2e994", "ref_doc_id": "1ff6b1fc-7851-4e55-8c39-8c7f9f713672"}, "c65abf1e-add3-47dd-9e2e-df4eeb658ba5": {"doc_hash": "9a739c9ad2cdafa6b5117f3d729c77600e90168ca405398ad12f07f8f3a3247d", "ref_doc_id": "c035b569-264e-4d85-a576-42dd44888603"}, "eb4b3c98-0b28-474a-82bb-f1d976eacdd6": {"doc_hash": "08451393cf76c1ff75ac3efa4b45633f3dae7fda440a93c0d2db65f2fb2312ac", "ref_doc_id": "fcdb71fc-e429-4122-b8bf-0f48921c6a9d"}, "dcd16a53-ddc0-4ab7-8988-3e757e880e16": {"doc_hash": "9d7f5c8208ff6ad509cc6573156764d489ead5f0a46fb4f734fdf34f32ff59f7", "ref_doc_id": "6bfb181c-0675-4fa0-83f2-fae9ed92e2d5"}, "56ea8f15-286f-4f3e-adb1-c2916d779e95": {"doc_hash": "5d778cd6af11a1bf3a69389113b48382a354bf6c830ba051f41e8ddde24756c9", "ref_doc_id": "725d07b5-6c10-45ce-bafa-f2b6b0fe95db"}, "c004e261-166c-4db3-8d04-2af40c2ddefe": {"doc_hash": "42dd38e9d85fe841dd7d40c10610d454b85667b40757f16c9bb8317616adce85", "ref_doc_id": "0d7f683a-9add-4e37-8d16-20d973a73323"}, "8cf43880-ef05-4582-b4d3-6e3a0c7e8d99": {"doc_hash": "a8869a3bd3590de30f4816f6b457e442b922fd32b5428f509548b8a7a800f618", "ref_doc_id": "94c00d46-45c8-464f-a552-ce428faeb428"}, "2a60fb68-6d27-420c-ad82-48ccb79ce2e4": {"doc_hash": "78b8a1d8e381de26188017d07a83c6e8b9034950ae573acc2a81808b38481316", "ref_doc_id": "0edce43c-f25e-46ad-b947-500e558cff3f"}, "290d33ab-8b9a-43f0-b777-94036015806d": {"doc_hash": "cf591f4d20741757bd589646f77a30051ba8ff059250312bc9c8fe0c7df41648", "ref_doc_id": "6e6b14a2-90e4-4940-98b4-596a9d88a99e"}, "99c65693-3217-4061-90ea-4f8274a8a9a9": {"doc_hash": "3a5017bdaefacf4e54149f2735822315c7c6d06185f5a94af012d1e238351141", "ref_doc_id": "9a5c2749-e80b-4262-81ee-c90b27d89962"}, "7a8621a9-133b-4f98-9e6d-6437bc57dce1": {"doc_hash": "f620e975c8a2935883b097be417adfc9dd3d6db5043485918840ac59c16f50c4", "ref_doc_id": "3699394e-f649-485a-aea2-23d9178111bd"}, "ccacd512-85cf-4744-9bc8-dea68a2806d9": {"doc_hash": "6cfa653dd7819ca00a1800aa07fd98b6edcdd1e4017166315c8299614c69c137", "ref_doc_id": "60da03a4-8b8e-4710-a2d8-e7828099eaa2"}, "ef3ef829-0812-4c2c-83a2-66c01ed728df": {"doc_hash": "4043e19618de9bebcab2361f2d013f24a6fc272a3c789944566487fc254bfabe", "ref_doc_id": "a5ea4df0-77f3-48ed-b2cd-cb019fb4776f"}, "e769950a-3bae-42d9-9b74-b0bc291b7d9f": {"doc_hash": "81e948a222cb5bda3a6bfe8d39c78342ab1d78e931876fe952c259bbf21c6e04", "ref_doc_id": "ab201668-0b22-4535-bba9-493b14c2ec79"}, "c287949f-69d2-42aa-ba9c-8759a892c40c": {"doc_hash": "2aa89041c883c40c2f2e89870c3396f6579c6268fb9678702e76a0ad4b359ffa", "ref_doc_id": "8bd236e0-d988-4f98-9ad4-4b8d14fe5028"}, "1db12a5c-a2a9-4871-981f-95ac36785931": {"doc_hash": "88c62703516d2ded51a9241f86db8d7147e5f4b057b8a56280cb5e8ee36bc742", "ref_doc_id": "d9ee804f-a43f-4858-acb0-6b693df0d7e3"}, "2a9f1bdd-e4ec-4f55-9c0f-c0ea8cc04276": {"doc_hash": "4b796297d42a23e871ecd7ed18f62de6744889b23cb6f0743da31be6e09d2069", "ref_doc_id": "1812fb5b-940d-40a9-beb9-465156958cac"}, "c9cd5052-67dc-4050-8a78-6e82240c7068": {"doc_hash": "9514273ef5a52c6be624dab39c35f9ce18fdb953ace293e02a24edb9d81f0f6b", "ref_doc_id": "4b9b8a77-62dd-42d5-9208-9b61ce0bf82e"}, "1e5a4381-abac-4095-92d2-c06a37efa3ff": {"doc_hash": "ea8c22e2ffdef5ec2d8e9876356b6e87995df1cdd57f8b3a1e9682e7062c2c74", "ref_doc_id": "e948e854-81c2-4be1-aade-a68e49b55938"}, "585edf3a-564d-470d-a0a2-577777b7c1bc": {"doc_hash": "af84014c3f3c41a1a62a7c2bce710cb799a8b0cb8d35db060d5ecd65d78dafd4", "ref_doc_id": "8cdcfcfe-f236-44cb-9507-76694093fbf6"}, "3833446b-9e09-4911-8390-0640bd076711": {"doc_hash": "49070f38032d7d7fa821eb838972623f8a88c3fc0ae8312638898585ff5fa8cd", "ref_doc_id": "05fde8a2-2ba9-4273-8832-1dffbfcbd4a1"}, "81d3c446-c26c-45bf-8319-1ce9c92ece9c": {"doc_hash": "06387a2b6eaf750215af6200a43fc97a4cdfead672c1ccd68eefc6ca6ffe317b", "ref_doc_id": "48244bbc-a431-4c33-a0dc-07ec696c4d44"}, "7bb7d2da-0a1d-40b4-9e7f-8dd8d5d78b33": {"doc_hash": "b60526ef4b3a336682800954888735859176e6f3b5184d91f280bac0f27e3cad", "ref_doc_id": "5ee52932-00f2-4506-b7c7-250cbf369516"}, "40393242-d545-45da-ad1f-ddfcb9c2cddd": {"doc_hash": "f6b56411e167b793a286c90bc6edf22a78300aee25c21226faa4f64f1777ea4d", "ref_doc_id": "a1d6aa73-65c7-4326-8147-89355bee576d"}, "092dcc83-ef05-4f65-844a-acaf24982c68": {"doc_hash": "315247fb5c0f332e7de53bc439690751654cc546ef9211bf36a412ea13fa89bb", "ref_doc_id": "ea7b3275-e693-4ab8-b090-acafbbf46373"}, "d812f79f-7233-478b-aabb-f1c48ab2136d": {"doc_hash": "b882b1b03fffb03f769dc1e28317008c5b198adda6780ec6c949168789f4b4fe", "ref_doc_id": "80822233-0518-45c7-b001-19a22bb6406b"}, "e31474fd-9e1a-48a1-bcb7-59ae559085a3": {"doc_hash": "ef082fb2f13ffeb0d0ce5791318efc48b774952e245f22e0d29212e77509087f", "ref_doc_id": "ea35621d-23cc-457f-8de9-25f17e812f65"}, "48221c4e-2ad0-4364-b6c3-ce8b0e78eb8f": {"doc_hash": "3a47971a9c242bbe21e816da87cac20212cbefb844a8379f546b97aaaf49ce66", "ref_doc_id": "17d7c8d2-b773-47f6-a60d-368236c917ad"}, "71b11b5c-fed5-43c4-b2aa-013f0f279618": {"doc_hash": "249962b1a8e3bc3cda89887a35f84b73fe969a19ba4adef4e14a1421d70c9720", "ref_doc_id": "cc178ceb-c948-4d25-ac3a-626e05114aa0"}, "06ced18b-c148-4eee-81b2-c86562e03bee": {"doc_hash": "916b2d591f87875d37db976b798c1dbf3aa8f53d2fcb19b49cb3e26cf3a379be", "ref_doc_id": "699dbb98-b401-44f1-a71a-fe3b2ef159f3"}, "48a4f441-501b-45eb-8507-04f4727c954d": {"doc_hash": "4b4fc33ce4919edbe5af6bd4223fe7d6487e4e68eb5e08143c4d059a15a8679b", "ref_doc_id": "aeab86c6-0a5b-4f70-b34c-3291edfe367b"}, "6c11dd03-68e1-44f8-bdcc-404c96572409": {"doc_hash": "dda1fe54a562da476bca4cf98019871b7f39b3b48c96e4c70f59a0ae2fe46a0d", "ref_doc_id": "d7443e9f-451d-4b58-a2b4-c376be3e8574"}, "e533ad31-7acd-4411-9bb6-7e1dfd787587": {"doc_hash": "4d3c6444dcce6d9bcb3d76a6564b6a713ebb2173f01207150332e9219c4da648", "ref_doc_id": "1ad65550-6cfc-4a40-a1cd-9045e9dcd038"}, "420180e7-13d5-401a-9ba3-897947dae4e1": {"doc_hash": "ef522b08506d4cb9ced7894ca1e9d5d73b79a976976977cb1ddd9d4d5dcd185c", "ref_doc_id": "4efd8eab-cd62-490d-9d0e-19ba35515141"}, "ca798708-f394-4224-84ce-1dc66468c27e": {"doc_hash": "304b1a734e42c62e66cdde4a5e34321ca70af9c4936cef415f1ae6d6850dc6d3", "ref_doc_id": "a9852f67-533f-49e0-bcd1-7b3cc7585035"}, "7407c660-5c7d-4da0-9d02-85151621a71c": {"doc_hash": "31feb496e96df77d543ad64df8c3d858cb74a8c5d70baabaf4432603d61778b8", "ref_doc_id": "da997f14-6c82-455f-a84f-4efb0ffa99db"}, "728a7316-560e-4109-8c82-7638f6fd23fd": {"doc_hash": "9d96cd54dd14e697ddf00fcf407ccf5f828f716718e188ef439f4ac985561623", "ref_doc_id": "89386a21-f946-4d07-ab33-ecceb0191b6f"}, "169f8602-a3cf-42b6-b924-e60602760e53": {"doc_hash": "0ded5cb1e0e509ad98f720802ded581b86cbc26c3c2e240b398d2b4e9d68d4ad", "ref_doc_id": "5f5f442a-7fb4-45b0-8cb8-d741810c39b2"}, "82488ec8-0aea-42c8-8719-9f5a470d900a": {"doc_hash": "c5dd6c77df26efe7ba6fa65daea4836bb38dc80c50fd0a02b1c9950cd3b894eb", "ref_doc_id": "79fe9496-a783-4294-af5c-94b27ca15f09"}, "4cb273ff-ea6c-4ae8-a899-a6ff6d6faf29": {"doc_hash": "924a8fe1d6fc893f2721ea77443f74e6323a71d402a0b63561e3ac46506f03f3", "ref_doc_id": "92e19db1-018a-4f48-bba8-4f1d42746bd7"}, "ff5c1c63-3e05-4f8f-a2ec-7b62be126859": {"doc_hash": "8bc34ce4385bd5e69696c85c50afde42d8bbd838ff2253310261b4336d7a7790", "ref_doc_id": "8c37c6e0-3ac1-4650-8fab-02951c10e263"}, "bfc64b5a-fa02-4c75-87b1-9c1801a63932": {"doc_hash": "53f1bd28614cb528fce4e0e038ba051e8e7823a143a4590720fa68c982eeddbd", "ref_doc_id": "be799452-a967-46df-94b0-71d51e1286f5"}, "81f23d68-8b2b-423f-b210-e542e90c2b53": {"doc_hash": "df0b623a577cb676d45a013b27ea3cb9500abe2232a68ab47e16846cb72c2e84", "ref_doc_id": "83418a70-5bf7-4c19-930d-3570a4697309"}, "b7ab3bf4-cf8c-4110-956c-c06fea3bae28": {"doc_hash": "a3bbb555e26bbb7b039af9c532072b0d0b1d30f522e045ad1edd2e63ee8536c4", "ref_doc_id": "beac1bea-406c-4c7f-815a-3735a68616a9"}, "88ff0a84-9d16-4313-8a73-c2eb3bdd6194": {"doc_hash": "61fbd6344b272c1bbb080d9c870f382d760ee295211e481a017cb49093f96b14", "ref_doc_id": "e7a1f254-12f3-477d-af9e-a8593c39c2fa"}, "36b10369-154b-4add-8446-fd72aa1083b2": {"doc_hash": "2b4c35084f91ce9b2f3313cd97f280d4807741ef37408572da3c045e6b9b4186", "ref_doc_id": "1dc91297-ec58-4838-a75e-c21c21111611"}, "eed5d8e9-8409-49eb-ad17-f26a4c6a1f2b": {"doc_hash": "4501586efd4264fae691c7a5bbcc7acaaa5569495f21d63c3906d339f3bc5bcf", "ref_doc_id": "97bda116-7396-4550-8359-ea1802ffc5a7"}, "036fd58b-ec6b-4534-b319-124ee5dddd10": {"doc_hash": "74b6a188391297cfeb6180cfb921a12d9348dd3ddd2e51268e1e473a139774d6", "ref_doc_id": "19b3556d-4ff1-4500-ab89-5c8632ab7092"}, "8d705e72-4ce1-4b43-b41b-40702bf09b76": {"doc_hash": "fc4475f6f41dee1668082160aa82429141b7e88d46ff37c727d19d6e331cd680", "ref_doc_id": "70b9571d-5c96-42a8-9b65-599824e8f775"}, "45e4146f-18ef-461b-a501-3e053c8b581f": {"doc_hash": "1f6f7b4888f461a858b848405f016bb7471884af508ea540af0b753bce1e8578", "ref_doc_id": "b450ead9-0cbe-4a61-921a-73378d4cd43c"}, "0d7f99e4-1176-4387-82d9-97bc2470b3af": {"doc_hash": "dd6a0119250e3fedae40cd89d08cf2d2c09ecfc2f4704110edf26d34d29d82b3", "ref_doc_id": "06729507-af8a-44b5-9f23-d696c42592b5"}, "20de5b2e-8399-4b80-93f5-48a9be0742d5": {"doc_hash": "403bc273776a72e03c46bec305af49de8eaac7fad398f2ed3e122224f29ffe83", "ref_doc_id": "59a4189a-3f84-4d4f-b7d3-6c06db28fd5d"}, "62e222a3-9b0f-43e3-97f2-d67e7085bdd7": {"doc_hash": "c548c782845d01044260f23aca5e6783c8623e83536a18c167312714b168d54f", "ref_doc_id": "d018b609-2554-43b9-bcac-9178fecb09de"}, "68be80fe-7795-48e5-b24c-e9c5d4411703": {"doc_hash": "9d893b423d4a3fe64885dc2269bc321ea70a61f93b9918fb35b09dc563239bff", "ref_doc_id": "f7796632-84fb-48ed-8272-d09a7a2e44aa"}, "9131e90d-ed2a-4a53-b354-427573b4564d": {"doc_hash": "f610d38595d65767134efaaef50c33bad64076ce42fb698c20c037645cc268d6", "ref_doc_id": "b3fdfb2a-7707-4bf6-a3bf-23e54125f144"}, "e94045be-3891-4875-8055-05d5f7903888": {"doc_hash": "76ec547ff55a20b600d2391a78ea628fd200fa8157434fd89e76b825f494cabf", "ref_doc_id": "be31afa2-5229-4470-aa1c-f23dec0b8329"}, "9e3294ed-0d00-4a4c-8b34-32ce04f3654f": {"doc_hash": "da3fd9a68bd0cbd2c5be49dae8fb396942522ee4524aa6d3ba2754ea454c70be", "ref_doc_id": "92181ebc-7264-4239-92ef-79d26ac19ef3"}, "5c55ad9c-8c12-4612-b9d1-25519cf83216": {"doc_hash": "2c014de2645ad09a15f45545dfa0ca5eeb76b962945a2960d4c427150a74d21c", "ref_doc_id": "b9ac76e2-0038-420c-ab71-76f78ece83a1"}, "751cd6ef-a0cf-40e9-b6bf-217694de42d3": {"doc_hash": "63c353fb008899e0f6266ef4cc65dd4871522d73bdb5eddb16d7b78d4ec0c011", "ref_doc_id": "9ce2d099-0969-4a0c-9491-7a3167c3b030"}, "6e7367d8-2a93-4de7-8954-2bb26d52b7d7": {"doc_hash": "210b9dfe85cef73fcc0a582c8febd642b7187438f82ed78edbced9d972fdf0bd", "ref_doc_id": "8c71c287-f5e4-48bb-a4b9-6548fceeb686"}, "75689323-40c1-4ad3-b814-fdc98e62e556": {"doc_hash": "bd9795024faf0391c67bf65b0536bc97774f916cc664bdc150f972fc85e2d001", "ref_doc_id": "939d140b-0359-4a80-9c0e-e55bc9db3012"}, "17556462-068a-4ff1-ac7d-9fc28345f3d7": {"doc_hash": "e493fa953612d6b36bb147bffd8df708c1dd2e910fa78a85a073d4bfc5f3b704", "ref_doc_id": "b055d66d-cb4c-4c3a-8d15-77909313226d"}, "6ff89e2c-c8b3-4631-9f89-6cdfe7c8ef76": {"doc_hash": "6ffbf708e04e7763ec26efb39ae3ede60115bf3846ccfd84f062561b10210eda", "ref_doc_id": "ef6aa67b-51ab-4d8e-82b7-6120a33b6d9d"}, "e8c455a4-9214-4c02-860f-56434d2e8fb1": {"doc_hash": "7eadf69c091f78e23a153241bafe67f8b7192204cd8f3f73962e17eb8991ee7f", "ref_doc_id": "d234a2e9-7dd4-423d-a749-e2566192e5c7"}, "55a13b34-881b-43f1-ab5d-39c04fc12fa3": {"doc_hash": "aed379adc3e4fdf741683df2e00b4c43231000a7dd330bd673df533fef422837", "ref_doc_id": "8f226e51-35fd-48b8-a40a-25dcb683002a"}, "5679fbb6-d4b4-4d94-ab46-c93ad6874bde": {"doc_hash": "346a0f72f4982543fdd8cc8dfad767c47375adb638246e8f08aa591f47f99a0c", "ref_doc_id": "bd92367b-bea8-4629-9aa8-a245b2ff9b05"}, "c7ba12e3-236b-48e9-9c7b-cadb3bd2fc3d": {"doc_hash": "a3a046d77f61c8a4ae8040b940cadcd48689f60a6b60f6fe83290213900d516f", "ref_doc_id": "28ea65f0-6e06-4ada-af97-c6a54e77da60"}, "c2a4734c-8b93-4b7e-a14c-afada0f3c500": {"doc_hash": "bd36526b91f1a9d14d52836290fda4a1159137b7120bade5a7988c225faff365", "ref_doc_id": "48c54cdd-2a86-4027-8a95-48647167686e"}, "bf66fa54-345d-41b2-a410-2e66876bb33d": {"doc_hash": "5a9825fcfc36c636edf214f246bda1b948c0f35b23e1f4b406667aad293a8b13", "ref_doc_id": "643e8a11-b1e2-47db-90fd-013db834636d"}, "271ae6f8-910e-4032-b4fa-56e46c915f30": {"doc_hash": "f1c384178bdb88c6f248d5d7736b9fe01c7b41d37d8fc03924d8be68b94347ce", "ref_doc_id": "2cae1645-86ad-4caf-a08b-173f3dcb99ca"}, "c85a71ab-3877-4d99-acfa-275d16ca1788": {"doc_hash": "c66df2eccff4fb07678c7fce58902435f1e386a45a29996e287173ddd5b8751d", "ref_doc_id": "7a16b931-3a53-43ad-8dbc-22b93775985a"}, "b00043f1-a64d-4ba0-be98-793f31426791": {"doc_hash": "3116f99936e20259b4508ddbfe60dcff0430dda670c3ad1f9eb88e97904a286f", "ref_doc_id": "1a2edc2c-d598-43ef-89a4-52780d1e55b6"}, "fd4398fa-2696-4dc2-a121-6c7ab7dd1656": {"doc_hash": "7ee34ce13f1c211a99b7ac163e8627e90e88f8e13e81595d969ea92badc2b205", "ref_doc_id": "2830745b-dfd0-41f0-a068-df96014859a2"}, "c4382c28-9575-43ed-bff3-85ca693e7e42": {"doc_hash": "fd39f3bfd603a5efd8b22504d118c166178afd01480aa2eda3f32b13e2db3769", "ref_doc_id": "4a5af62f-370f-4a0e-9ad2-38ae4d579002"}, "e951ea1c-7897-46d3-8227-2421fe3bb671": {"doc_hash": "85adef7934ebf88d9035719e896656050217739bb77e0c81300cc401a9360253", "ref_doc_id": "53228526-9a9b-4e69-953e-877ba8f92197"}, "776cc980-2c3f-474f-addd-a7d01357e4c9": {"doc_hash": "b9f3205ebf7d431731e880ab6221606ce568d67240737edd9196b3757439517b", "ref_doc_id": "2e0f4f6f-d700-4410-9cda-4f2b6e933431"}, "fd0c199b-8328-40c1-bbde-c2ea159d1477": {"doc_hash": "c8b7a4578e4cdc49515cf8c3b682c9a679d60e513825c7af3df57656bdbe2a0f", "ref_doc_id": "e20e775c-595b-4b99-9e72-5c00cbde6831"}, "1927d964-f691-4f1f-9ecd-db1d21de115a": {"doc_hash": "6613988e36b532db62ec655317f2096dd84449e0d2cd3cd63d8a15b460c96da7", "ref_doc_id": "29a730c3-c612-4ab8-9376-93dc62a02b16"}, "097e916a-c630-43d0-ab4b-75a9a060275a": {"doc_hash": "dc575b1bae533e8f1afaac7750b7b6eddc7d09a37f1fb09f7c7c8714b7652056", "ref_doc_id": "e43e3eca-2c40-42e8-9303-83ad3fc3d57c"}, "9d15c929-6435-4ec5-a1da-70cecfa8568b": {"doc_hash": "ede942556e9b9b1c4fd1af73af768490bf6496d91ad7cc8bb3005e420cb741ff", "ref_doc_id": "f6344791-e611-4c3e-9c02-f32fc2471201"}, "bbdadf4a-6ac9-4323-a385-312ba3ca2ea1": {"doc_hash": "31c9eae4288e20cf6692d1d6ade24ff3739c49f1e812a12772e4e2f1a7526cff", "ref_doc_id": "4ccdbcfc-ed97-446d-97b1-8e0e134b6e5a"}, "de8bcafd-a41a-4909-b091-88b8280f24a1": {"doc_hash": "e73efac6688e072ad1c40e4288099981f59583c891a4d23757eec29628ca16e3", "ref_doc_id": "9294e7f2-5c97-42af-9777-6e297f1166ce"}, "13b89716-e3da-4e40-bfb3-ea17aa770fbe": {"doc_hash": "9d98518fa4838a88c76f9cccb871129b2d748d73cc8f7f6374c968aeebf49d66", "ref_doc_id": "6ad8d495-7bed-49c8-9c61-e7cafb32d5e7"}, "54000368-c24d-49a3-bdba-a8b023eb8bcd": {"doc_hash": "f71df2d81eac7f9bbf270fa13bfe74ebf76f80f1b0c5ddddf18b84a72146f729", "ref_doc_id": "a917301f-5b0b-4852-b44c-f9f10a3c0abd"}, "a5640bf2-659c-4396-81b6-cb74d6587e99": {"doc_hash": "06e43016716fd6e3639d6da91ae3b522677310393426b567dbe6ba45716084ae", "ref_doc_id": "86ba5176-d208-4cf5-9b71-d01164598342"}, "138d7652-2705-47c2-add3-24d8a26d8e7a": {"doc_hash": "816c1f002d541c626922c38f311ea39d42ec85fb9ee20e7171915f05c17627fc", "ref_doc_id": "d11f6155-a810-4285-99e2-35b49cfecaff"}, "b964172d-ba26-4d4b-81ad-9d4b0dffcd79": {"doc_hash": "85aefddae950470a378a0fca256156a3694f2bb10e6d96f984cf5962ff579a75", "ref_doc_id": "9cd9d415-54ba-42f2-932e-ed5ce3abc806"}, "6b61ca75-aa21-43f8-9cf5-c795604df287": {"doc_hash": "1f88de38edc51734e2d9f8cb639e7e5fa7526de7f62530e1e8b3b4329549e1f1", "ref_doc_id": "e7407748-41e9-4fc7-81d9-a33d7fa159fe"}, "86ae4a05-c444-44fe-8f13-aeff778b2ffb": {"doc_hash": "91c695e638a4ac0e8da52c680919e765c145eb57bd9467a5abefbd767e1b0177", "ref_doc_id": "c68e3d7f-d87e-477e-b4e0-6d8b343df819"}, "1cb6d61b-6a88-4243-b6ef-73894621dcdb": {"doc_hash": "f5fa7d97599ff53d46ff43c25d308122b219bcd244921211ec8c45a4e3af70ad", "ref_doc_id": "dcc53ec0-55bc-4583-92ae-9effbdfd9cf8"}, "aa480a05-09b2-4e24-be40-7fce4c27e6ed": {"doc_hash": "24a0073b0bc5122be752d85dc9fcd4ab66054a13e03abc684328b8a0b5cc55d7", "ref_doc_id": "b05161e4-ffaf-48d9-8698-e92587c730dd"}, "8338cc79-18a3-4deb-b0a5-1b347cad5b89": {"doc_hash": "41525474e0f6b35f7ac6c912114fa14da7672915ee7966278c900478e0ca9832", "ref_doc_id": "e64f90f0-707d-4736-bb94-31c84170a58e"}, "0c4c52f8-5a79-4885-a223-867f9e5ca03e": {"doc_hash": "3cef554962753ff96388e89a121269fcb2ff0fa8bb3ca67d71eb79b4902c75d9", "ref_doc_id": "3cb30127-fb39-4b12-850e-8400dd346fff"}, "2150910c-95d6-49d8-a9b5-57279512d9df": {"doc_hash": "9b453896f4840698f70d21b8a9c323d12ee0ead443101a6669fbdc7652f8c183", "ref_doc_id": "fb01cb13-263b-4b9d-88b2-35435ebcdfa7"}, "c46d50a6-416d-4789-bf64-5f0e49d849cc": {"doc_hash": "8cafaed5ece1f3bea7223abbbf09c5da58ab303d74b59491227cd7707eec93fc", "ref_doc_id": "694d0cfe-3170-4bc4-afd5-98f9290a15fe"}, "feabdc27-fef5-447e-9c17-8416e08e8506": {"doc_hash": "8ae7f00669c5b6a9896c95dced81f0942ac256e22920806651010e58e621d84e", "ref_doc_id": "9bf6445d-3ad4-4c10-9f55-264080c9663a"}, "74e1cd37-afe3-418a-9d6c-26959874dfa1": {"doc_hash": "7646cdfd80b1065e6dfa40386cdacb7e06e274a9e5c7b43b59552352f5a6d0de", "ref_doc_id": "3f8470f0-98d7-4937-adb6-e97fd218e007"}, "ffce446f-8365-4101-99e9-3bbc23436ccc": {"doc_hash": "49d82e7a3c9dcd71f12097114c9726a9deb494284e9416dd4c0827007d96b67e", "ref_doc_id": "ef298f84-d704-471d-b77a-2bc3ff127838"}, "81b9625c-a7e9-40cf-ab50-aef2606d8788": {"doc_hash": "4ed153652daade2b4b512d498a3a1862dc74ec5ce581eaa847694030faa987f0", "ref_doc_id": "f826cc99-d876-4602-abbf-6fcdb1ee0a4d"}, "e103ae29-5f64-4ff8-a098-601a8162c74f": {"doc_hash": "fd7ab81bd6e868995ee272f9e86ff4fc032adf3afdfe9f01a0ac035b4e2f924f", "ref_doc_id": "32675069-43d0-4244-a639-559f512a1471"}, "d393d29f-5db5-40b3-b4f9-f55645a5794d": {"doc_hash": "4c600941b522a8856877ef5b1da66f3e1edb05354397bda05e6f132a9c80b7be", "ref_doc_id": "4d56f6d5-b8bb-42e7-9119-27c2c5840963"}, "fa5e4ada-0be8-4918-9017-43011be24329": {"doc_hash": "8c9ee29f526090a2822869992b4b57f6e380a42186ecffc5a6c6630c29c323fa", "ref_doc_id": "3206fdbc-0ce4-4e93-a242-7e031572d3ed"}, "4e10de3e-0ff9-4de5-a007-c78c1efb85db": {"doc_hash": "d42ba01c472b90928a1c3174be69dc096e358db0589ffe54f042e831dcf21f5a", "ref_doc_id": "1aab4aae-0cbc-42e1-b14e-bde25cdbae3d"}, "aee719c0-f8e5-4d9f-b6fd-22631143b59d": {"doc_hash": "5e353a2b625facd31a6395b01ba149d8cf46ff24f9cb050766a7a1eae79a27e4", "ref_doc_id": "f46a3057-5df1-4aa1-8613-aebbee04da65"}, "9de05161-b2b4-408e-a862-b6011267e071": {"doc_hash": "f648f6bb995a870f77a0f46cc2d072c3823334efa058dc34a3fa0716d80ab332", "ref_doc_id": "7ce2085c-8f89-4f34-8b35-b1c11c0698eb"}, "10e3ff52-25bd-4d70-bfe1-f0116d03f5f5": {"doc_hash": "3a257d0855a55aaffc109f1bf54755ec488b24b14f1b49880af104f3b324bedf", "ref_doc_id": "b0411985-37c7-40c3-b2b1-6f2cff2859b5"}, "9d7f0feb-e490-41aa-bfcc-cf99427440d9": {"doc_hash": "b35ede065fd426e6338d0ca72af54712d28d5f074db00a6795ee9cea3e495f77", "ref_doc_id": "1ebd2ec6-a3fc-4e15-a1f0-1d192b2a3b29"}, "06fcbdef-eea1-467e-a101-777449925acd": {"doc_hash": "675117518256a3a830b3e0c106f2113063d84a5ff0eb1178d93d2b11339e42fd", "ref_doc_id": "4894b82c-9359-4d00-b7fc-c1c522101a93"}, "bd6de242-7d63-4b36-85b6-9720e1661145": {"doc_hash": "e221d048c940425d572f7ef6183d2311a5148c755386391c022594bc66a5ccec", "ref_doc_id": "d173d9ef-d7b7-4238-8130-1f33767ceea3"}, "90da4471-3aab-4ccc-bca9-ca54464802bd": {"doc_hash": "2cac13a7f34ca64008364db557998ed43ee36fe65bf0ac0865c8be196ffd0efa", "ref_doc_id": "d43263ef-4507-404e-9321-3c59d5cfce92"}, "6209ee86-f245-43b2-9a04-33bc1df83a73": {"doc_hash": "a1bd146fcc21066a2723b7cb7a2daeabddf2ab536438aff1d8576407008b70e8", "ref_doc_id": "9e9b9338-a94f-4514-bdae-93e0cefa7f46"}, "9e82b347-af0b-41f9-a05f-6457592f7270": {"doc_hash": "3e63b895ddd334fe5fabbea609043548cd43d16a7e2840e5c6d3c7478db153d1", "ref_doc_id": "7556c0f7-1e4d-4ef0-9d00-93e8174885e2"}, "3ad39f4a-63d7-4591-93c4-84577495e1e2": {"doc_hash": "784b4d3af310339c8f1b9b7f5dae91a929ba49868c059aeb95669f48fb0dca56", "ref_doc_id": "88f1132c-bf2c-4b59-be88-208e0f876cb1"}, "cea77430-f8ae-4d1c-8cd2-cb39802f5a9b": {"doc_hash": "8ebb40ee20ca9e0ef6cca2e8a4040aa119acf91967d6b5bc42eddae982ac0504", "ref_doc_id": "19bcf5cc-013a-4a36-95de-9203d8f3f71b"}, "ae6c6c74-3b15-4abb-b420-320331f4ae49": {"doc_hash": "c932eb63dfe8565d28f2cca1c781bfe1afe303289ad8ea793b469793cfa452d0", "ref_doc_id": "6325fc46-227c-4193-acd3-5f4ee3db427f"}, "b498d79f-46c4-40d0-8267-8f19174e508d": {"doc_hash": "b351a818df1293b13444aa74f660fef3d3d98f936e529a49aa878d96193eeffe", "ref_doc_id": "e80c9287-9e02-4043-987b-f7238695332a"}, "0dff0d38-445e-4a02-9dcc-a3bcb1d82afe": {"doc_hash": "84bdedaed3e07e1b8b741c5c111cf5e36548403a94428def3951eaf614396d30", "ref_doc_id": "d4d61893-1f34-4600-9600-5e57b33ac7fb"}, "0f8c09ce-8c66-44d6-997e-6a16c5f8e671": {"doc_hash": "e5e20cfcd45e2c631a39fdc9b6f330ddd3d950a802a150f82635913e54f979ad", "ref_doc_id": "458c3adf-e45c-4ba8-89f5-8cb714651a6d"}, "643b99e5-b554-40ef-98c2-5a8f31e1a058": {"doc_hash": "ede08982e2bd95256aa47de69555dd7ad9c3a76be28d563db9fbfdcbc93d9082", "ref_doc_id": "2544ebd1-50b4-44de-9048-fde57b39f27e"}, "380c1fdc-513e-47c3-9a0f-5306dc212b7d": {"doc_hash": "6d2f911376e4fec6bc603c45d7304a563b10095a91226f171ce99f8638459e48", "ref_doc_id": "b1d88691-51a9-4ffd-804d-08eccc6654f0"}, "14d386c7-01e5-42eb-88cd-60ef80dda3cc": {"doc_hash": "15a58e072ce56e4d4854969a386e2ae924447c009782e2c47c19a97229397080", "ref_doc_id": "06c3714d-02b0-4187-b166-79f980c0cc5d"}, "09c6d4e0-e810-4a82-8058-1562d9d32e1f": {"doc_hash": "fe0070fec7b4b7845b469597087a09baecea54116f452018bff6a01a2626999a", "ref_doc_id": "3a65740a-f294-4ee8-8fa2-61edfaec1b9b"}, "31da92b4-3236-418b-ab14-fb0f92b5c38b": {"doc_hash": "45ca6d2ef0d9d053c0407b25f96bf5262fa9353220810eb8a9aeae4a54908f4b", "ref_doc_id": "ad44bc5f-bede-40d0-a124-53538c24719a"}, "817503aa-a9e4-4b71-9263-7b989e24abf1": {"doc_hash": "5277d13fdb9f565ac82c79936962233f9efc52df6843fe15ad9ab748aff82cf2", "ref_doc_id": "b53f45d6-487a-46b2-a982-084a694bbc05"}, "f593bb63-791a-49ad-a25e-a206606035cd": {"doc_hash": "dc2dfc0e9332dca741798f0ddaa4ed808f2f13986bb782185e8841f199080601", "ref_doc_id": "b7ff2ff0-9cee-4134-b7b3-553d02bc8eff"}, "12750f03-d31c-4195-890a-f46fcfc52fcc": {"doc_hash": "af1280e5c5ff5212956057f977ebc049a03256597924b3c0c35ca64165f3e07f", "ref_doc_id": "a6346c7f-715e-4aff-ab52-5095f44eadf3"}, "c4cf2ab1-d729-49b4-b551-2115c039a358": {"doc_hash": "e144f71f3da63058d98911ecc48d16484a095b9a50e9587d9b3fa76bbea29e79", "ref_doc_id": "10e528cb-e1ef-4589-b636-8ab6db0b2fa2"}, "c38f7aca-a1d1-4b9b-80fb-be6b152187ef": {"doc_hash": "f277fc558111b1747e50f6a0292c24d53f06ef1a0587b62ecfdf829b6fd9abe2", "ref_doc_id": "2afe7630-9f35-4350-b06d-5b0c7dedceed"}, "82e3dbc1-317b-4945-be71-acc4f5d4f414": {"doc_hash": "e114d33b14b98c8a95744878131af9924e3843be63490583bdf76652ec04c55d", "ref_doc_id": "ebddd389-d00d-4d3f-a1df-133b1ca365f6"}, "30fc79ae-8a35-40dd-9c76-cdad10f8dd02": {"doc_hash": "0f8dac0a9fbaec0949f1c6f7edbe3be79d565db4bdc3bd98d1a20d6b3fc4f57c", "ref_doc_id": "37029450-9cf9-4b59-a53d-03073efcdc0f"}, "31d6e295-0e01-49d6-9eec-6e589cd0149b": {"doc_hash": "16098b0d70cfb13786e0a90b41cd1846d53e76687632aa773f1235c63daff650", "ref_doc_id": "86e88310-d654-4de4-9639-7206f41cd392"}, "8acbbe41-6dd3-441f-bcaf-326752a28c8c": {"doc_hash": "90f6dc34bd3665836e9c3a12b05a06bc40d6570219bb8932354c326bca949473", "ref_doc_id": "b4fcdb6f-d363-4723-ba9d-fb86af272416"}, "fa40d2e0-58d7-49a1-9fbf-15dbb5197830": {"doc_hash": "0421191fef144bba7442749f0611e5cd49f7c289bd4ae66a33b9241db72395ab", "ref_doc_id": "84fa0acb-733c-4dd6-a31d-ef520221af2b"}, "7e54f89a-9d69-4ea3-8ed7-e88c03256c9d": {"doc_hash": "48ad76a019f7a71defd813b7b55703fcf48a49473c64e7963fbab5018323fdc2", "ref_doc_id": "e277b692-ffc3-4907-8051-27669adfe81d"}, "f87cd4d6-bd45-463b-b143-a98afdc6b15c": {"doc_hash": "d714d7067a345090578e31a0dbb4d589851ca92ed6e0e9bd8d362674548ae224", "ref_doc_id": "e736685e-c12a-4228-abd4-781781ee81c4"}, "a88e983f-f45f-4714-89f1-fd7ed2fba780": {"doc_hash": "0f8f192f508bec882f81763cd9830d31a4d7b24627211363299e8047c8da2036", "ref_doc_id": "468c4424-db9a-4680-8bd7-cf779f75ac0a"}, "e934064d-2bb0-45c8-85e3-60e15cca3fbb": {"doc_hash": "723b4d7a327df9a2cf766ce05a03fc16040765039a6e6c530c8d87108fd6d83c", "ref_doc_id": "e3ffd63d-69d2-4a83-9e5b-e69e67ab0d64"}, "111d23ef-169a-4438-8477-363c15ee0f6a": {"doc_hash": "ff75a04e8f59f7519377b26bc6ca3ceab24a08add774edb95938eddfaa0ddd64", "ref_doc_id": "e8c56e58-48b8-401c-9048-a38384860fb0"}, "307a3e75-e242-4ceb-a8d6-d9af608055ed": {"doc_hash": "cb25c437ae0116758c7c2e349ec9c3d24741414d8d5dc2c1f288119079a44b7c", "ref_doc_id": "87de75c1-8298-4de5-bbb0-19df43d376af"}, "3f07648f-0da7-4f57-88d3-1bd83af3a8da": {"doc_hash": "8e5736f083c54b6e14b35a085e8e1ee1729b854858ba89ef931f59f7bd61f0ca", "ref_doc_id": "436c473a-d4cb-4af8-ab36-ea05b01e2657"}, "7942d18a-3762-4d72-9a44-b73125876f64": {"doc_hash": "dbee04226d0b050c89ff8be9d85159261a25f9c1ee84f4c3da831ca9c97dd8aa", "ref_doc_id": "56d75f39-4020-43b5-8bcf-860a9aed42fd"}, "1a4be14e-44e1-457b-80f6-3864eb0a6742": {"doc_hash": "f55b4514afbfcdb49748d81649ceaef7f27c807d28aeab9fab84a6cf546b57b3", "ref_doc_id": "0c045498-f2d0-4fd6-9f06-ade4a1ad899a"}, "3addccae-d68f-4a0d-8185-225fc9477a88": {"doc_hash": "54dd1bd0f0627bd498a6d97c962c547d94d95a23384488ece78bceeabeace2ff", "ref_doc_id": "ac99dbf0-0ad9-48ad-ba50-fc72b1e0c0bd"}, "38d7fb5a-2c39-4c30-8db9-0fe934b0fbb6": {"doc_hash": "887176ff02cb5f3544769a859e5a141cf6d0df49d5939e6520fbc18515818fcb", "ref_doc_id": "1d08869d-8e6e-4b2d-a67b-46294e326cd4"}, "12b7a5b1-b207-4e58-a522-ff74686c70d9": {"doc_hash": "ee99eacb9eb73a8edde6148ae44c854965d62b9fb2193baafbb28567584a54e8", "ref_doc_id": "26b72d64-ce08-46b2-b3b6-3c4217bbdb05"}, "024802cb-def9-45aa-b6a5-96e88441edc6": {"doc_hash": "0f7e70ebd0a25f02b5ba17c9ba356640f6d6b268979abd1bfc23c3d7523c3c20", "ref_doc_id": "130285dc-0bc9-498d-bc29-5f5afccaf16f"}, "74a4e749-1181-44f9-924f-9868e17f4e2a": {"doc_hash": "efbebbfc57a07a338fd55a0b3ad874a9eb0545a53cca69fc4df6fb1f6d6ad780", "ref_doc_id": "5a747d33-f30b-434a-a3aa-05985b1799d5"}, "8d294ada-bdc6-4925-b7a0-77ca374d1b39": {"doc_hash": "82a13dd3ed86f8121f31c18a39f492f501e3621328321d684038f7780901db30", "ref_doc_id": "4f7362a8-ae6c-4d72-8a7b-595020f0ad22"}, "01235999-7e4e-438b-89c4-8f095790be01": {"doc_hash": "29ab811e240f0293de5b0e7e1aa09ee2c9cb905d05f4c8b7512bbd302d877138", "ref_doc_id": "7a376874-9478-4e48-9f75-a06c17a07f05"}, "4c5a5fed-3ff7-453a-9f95-9855920ac060": {"doc_hash": "a487d41afb42729d12faf50616fa51705a5f3a62d4085c70c2711bdf023e521d", "ref_doc_id": "b6c0ba1f-d4d7-45d4-a645-70c79b5b8c6d"}, "8d10159e-7f1c-4e30-be95-561d44649fa8": {"doc_hash": "f9a00e00c7ae982be838094b43181d58b65da257b4a6b2c3f1fa5c95ccb4e456", "ref_doc_id": "c32bcd9e-8f82-4dd2-b041-c5739a3832f7"}, "63374de0-66e3-41f4-96ca-9b5ffa822401": {"doc_hash": "f1efc9a2cbf5c7ecaab32b66e9d258013805e91faebdf04e79a3ea99be5d5acf", "ref_doc_id": "628b1a3d-9748-46c9-b5a0-e9ce084ec7bb"}, "7371e89c-7d64-444c-8067-821c60fdc33b": {"doc_hash": "a405fee65c2c9595b61ebcd87bf149d76072296c3f5c0b4fb14db1abc2fd9737", "ref_doc_id": "fec73a45-1ce5-4787-849b-0909dbfa447c"}, "d6d2923c-c052-4c3e-97da-2ee2bc6cd84b": {"doc_hash": "8a20cc2a626245267c333f3efa895f46ae6ab84af4170ffd2e12a44a5f733a7d", "ref_doc_id": "fe887ef0-9717-4e51-a898-1280560b7b11"}, "3d66b24a-dba2-4fff-91d8-e9cea78b94b5": {"doc_hash": "275b4c4a3dbb3b04555cb5068880b234ff01c47e6f591660f27bfdf10bf35f76", "ref_doc_id": "db5903af-d9eb-4978-add5-3ce8cd5d9e61"}, "c3c5d9ca-b6ec-472f-a0b4-deee60155623": {"doc_hash": "908848d0dc5fb37664c1ac0393fea7e385d53409f3db08038d4ac7bd8a6de7ff", "ref_doc_id": "43406a28-4625-4d84-8e6a-c56d40a09bbf"}, "d8152991-3253-437b-9e3f-f176d1ea97ea": {"doc_hash": "5b58e624d6b60136579f59638b0548b9bf8fe02a8decb2a623336fcd94a82c21", "ref_doc_id": "301cf99c-8389-4622-a5b1-7c429527fba6"}, "fa7db7c0-dc88-4a48-8e75-a823b98c33a2": {"doc_hash": "91b37fa1917b8fbabf6ac5a50fcec90bbd8f9552651209e5e3335b2285ab9385", "ref_doc_id": "d0934e0e-d408-4094-9f81-44ef5d4d72ce"}, "b9e83dcd-c993-4c2f-8928-fa135c4d3042": {"doc_hash": "1208ef0c0ae40a794a3867341ac6db2342867f16723ddccc77482d79f7e4d54a", "ref_doc_id": "cd632bb8-53ef-4e2f-a92c-cb0d98d2f51a"}, "a7f75ca4-09d6-436c-9e90-825c043d5fc9": {"doc_hash": "72d551d484815eb2b2a3fe54204e60c7442f1c29f2e0a38b622c8aabcee9f955", "ref_doc_id": "e4ebb428-0646-4b50-857c-78128c8fec82"}, "ead52f24-e1c3-4e1c-84a3-7da24bf12257": {"doc_hash": "9f1fd2253b87ba57633b112c8aa699a16c6497825af82568d41d9cefb097e1f8", "ref_doc_id": "bff5035f-eee4-470b-9c5d-b6c63ea77821"}, "ba40e518-c82e-4784-80ec-dc12d404a057": {"doc_hash": "08e6980494cac84922170baa328d4f71a50b1cd005b1c2f0117bc2d4a0243061", "ref_doc_id": "ac450977-ce13-4b69-b8ad-6fe968f24625"}, "f1d35efe-5abc-41f1-bab4-333df4bea9a4": {"doc_hash": "d33b1c5bbd6e48f672abcbac68cd7e6c1c0111a44deb66eed2f4e80962648759", "ref_doc_id": "ff774a4c-532f-4ae2-a948-7d9027f5adb0"}, "d51a7015-3934-4d76-87a6-105370e066eb": {"doc_hash": "c52c9a43792884ecae87911c9e3d750551c85e75ba2aeef99955a8421fe48d0c", "ref_doc_id": "1119cad2-5a4e-4142-b873-3f17794becf9"}, "05cdcbaf-8a97-4bda-8464-980930e4f6f4": {"doc_hash": "4d4e08d63832f0d7aeef2a2d74e097ba5bc5cd2c5f0026615f29ef09e4f22cd4", "ref_doc_id": "aab9a64d-7fc3-4669-8371-4ec64af9646e"}, "6f4058d5-758b-4493-8b61-cb814fce011e": {"doc_hash": "9de3730f6a42b25bc429a46f8efcca14d82df93c35226906034d33ec8def75b3", "ref_doc_id": "0f8b454c-88a1-49ac-a710-0e5a93a9e919"}, "5597e8f2-3b29-43e9-955b-636ffdd58777": {"doc_hash": "429463443cf126969b26056da8d72c358f3212effd105d7267bbf04d748db41a", "ref_doc_id": "72693c76-8058-4924-af00-6e0f309e49da"}, "7e300343-5b0b-4748-bdcb-2a7bcb25a77f": {"doc_hash": "7ee387e351f152a2c475de65511f6f3838515328e6ef69d57991ebb5b8a437b2", "ref_doc_id": "937deebe-d47c-401f-a879-5adf82368915"}, "fe71fa1e-64f5-4082-8606-f8bac0362109": {"doc_hash": "d019bc70276525f06662951a8ca35d3bf279d185d5ff8531ed41ce231ac1c431", "ref_doc_id": "94c1ce8c-3802-489e-8b00-f87f6d62dc6a"}, "50a21aac-cf87-4d8b-8f84-69a72eb1da35": {"doc_hash": "0f6da235586f331db86037ea532dd5ef555d10389863760018a9689b6af26047", "ref_doc_id": "2958e6e0-2142-40e1-9606-22ddd40c9660"}, "818adf8c-4076-4724-b575-035ef3744d01": {"doc_hash": "cc28486fa60a1f4dd35125122938d09ccfcb0277ddc40ea58d5d90bbbd65968b", "ref_doc_id": "5510b9d5-addb-4198-8eaa-995e5e80d45b"}, "8af81a23-390a-4f9d-b0e2-80c4e2ad836b": {"doc_hash": "08d538357524ba7882137f7d9875bd12a47ad1a9f81f7ff6195e42f80c98c18f", "ref_doc_id": "3a1f68b9-27ff-4ad9-86b0-abc0f06938fa"}, "6ef5679d-f645-443d-8571-4c0f84ca9475": {"doc_hash": "2d5b27f222ff6311a66eb41531f64b3b9ae25030de00e667793d155f5129179c", "ref_doc_id": "cba182f3-ff38-4066-a5cf-ea2fd8feb51b"}, "d9af0238-6ac9-49f2-ba9d-d9979b5954aa": {"doc_hash": "55e6107debacb2471af566f6027f5fa9f0642a12c285ba495cb263c9eb9dae87", "ref_doc_id": "d6f80db0-c230-4f45-96ad-bf680e3490a2"}, "b473eb01-a305-4123-a7a4-3524e5b101db": {"doc_hash": "ee049e77753e5b3f65d8f2c4a24f3c293ad9c1d372f712c2faca045cdd3c567d", "ref_doc_id": "5c992dc5-0990-46c0-9384-299ec9403ead"}, "dbbbd2a1-9eab-4ae8-b509-d0abe7056fde": {"doc_hash": "5cd3c95d36c0a6adad08b0ad11ea3614e48f4f1c61e052a70477f28b039b303d", "ref_doc_id": "52e81e4a-dce5-4b7a-aa20-89eb102271bf"}, "40a90dc2-4941-423f-a39b-2ba9a50c7f40": {"doc_hash": "a58fb1d47193badc381561636ced4a4b5160ebe94540c28e2b925f8a35aa18cc", "ref_doc_id": "1b3693ec-1de8-4072-8027-9cbf79713153"}, "e7b8908a-f6fa-4d42-be8c-51e7d1a13b28": {"doc_hash": "185562e50b1db5096a06624408d1c0a2ab1d9fa45faf4ace04364bc017397109", "ref_doc_id": "b49f49fb-69d5-4c57-a60c-d67fd91a4a61"}, "486f5470-a1ff-4217-b802-5616d4709e67": {"doc_hash": "a0736c0bd1467d4ea0956a5bbb8acf4c79b7b7ded9bb94edb073ebccbedf3a29", "ref_doc_id": "0199680f-db76-4c51-b437-5d0f5500cba9"}, "faf89278-ca8f-4034-99db-4425d1b111e7": {"doc_hash": "0d27308ee31f4dd6b9cfcde01c3c2165ef3337003c2be16f84789db98481ad7a", "ref_doc_id": "ae91df21-ae47-4199-81f3-a2fe71bc3dce"}, "abe1941b-45f1-4441-a95f-91494bedc3b0": {"doc_hash": "f2ab599f2a0e5512c0ff3916e0f79611948c9a575d67ad6eea1c91bd165a80cb", "ref_doc_id": "5b63ddaa-c29c-4be7-ba67-34deba098af2"}, "4f3daf57-46b7-4c87-9c42-b6fb6d5eec4a": {"doc_hash": "2a99c245c497157c57fdf47e503a6d3f91b5a8ff9e96011ff2e52367257df558", "ref_doc_id": "9aeb4493-cb74-4e76-8445-afad596967cd"}, "b4a0d705-4d0c-4761-a3ab-83daafa4a564": {"doc_hash": "d3c268da87c790c0d2f8b23227877071d3bef290d531d6c3cb4b8be0b623bd25", "ref_doc_id": "90a11c50-c372-45d9-823f-7caf8a63fcd0"}, "69556f94-d127-4a5f-a767-c3f8a5edf496": {"doc_hash": "02421fe0a41938865cb4265eda9606abbe95cf986cef8d9633df4dbe3b0eddc6", "ref_doc_id": "5eff7c9a-c33c-414d-bc25-1f5e675b95fb"}, "f77f7b0f-94cc-4019-910b-88e5972c6b95": {"doc_hash": "2a3044dcafd9d1019d30f6613c0f6319a87091f4cceab842a1a5f5bc0f6e6d13", "ref_doc_id": "fe9d13c0-5c2d-457d-88cc-3236648be547"}, "392b0370-3995-400a-a94b-d6adb0985276": {"doc_hash": "941b18804b2c583d2b4a8b096a8e64dc9aca83623e874ec4274c5b2a1e6b1917", "ref_doc_id": "22e8afdb-be9a-46a7-bf4a-a90de495aef3"}, "e67fc170-a791-454f-bc83-7d1b069498fe": {"doc_hash": "e349317387111fc91c0109d855da5117f16d1db6df48de20e92c70f30fb75676", "ref_doc_id": "d8f017dd-818c-4de0-99f7-29b33ec191e0"}, "ad164da4-bdee-4ca9-910b-a6a09ce96397": {"doc_hash": "edf4f4cfd8340b6aa32e123c2106ea051ec5c6dcf14c5355259a2dc74355ec00", "ref_doc_id": "2eaaa18b-b17a-484d-99b1-5832726c7b68"}, "0f20ac1b-f311-4ec8-a41b-c14389bf168d": {"doc_hash": "fa5616a2bb3f3bca3fd0a4ae35d68f635abba53ee553be5f42ad79405aed27a4", "ref_doc_id": "f9c6db17-b33e-4b28-9753-a3f17dd3c4ef"}, "5b52d3e9-99eb-4e80-a47f-c385c0a24dd5": {"doc_hash": "704a4055786f1a73eb42e14c4987daa62bdd1d42e803adb0f001151ef98c9cb7", "ref_doc_id": "fdece252-d9e0-4056-a725-99f43e75a60e"}, "dcb15ee6-bdef-411b-89f8-1e5bddd6f4ee": {"doc_hash": "209cfe8d2544b8ee59c42b193c999af4dea688a721e392752dac7c2c1ddb3308", "ref_doc_id": "5df1b8e3-374a-45d5-9d81-b4983056aace"}, "93138e18-c2d9-4193-935e-ed49ca1334d0": {"doc_hash": "8d6a5ce81bdd0132a2911471ce824ab50a30732fc40ec1468a49aef7c23018b8", "ref_doc_id": "0ee05932-7ebf-44db-88ef-279c1bbe76da"}, "848770ce-9a3a-4b51-bd1e-d032a63ff4c0": {"doc_hash": "4d60efd9b6e252f4f28d1e20b3ae6693a345b492d7284476e5f623dc5e8a8156", "ref_doc_id": "5c9bc197-ec46-4bba-8051-9e5f2344e1e2"}, "67d89315-18f5-4c66-aed3-21578b807699": {"doc_hash": "438d912cd22bad1de12470bf1437adf7a42682b62b8ceaed5cc98ccea65389ac", "ref_doc_id": "455b72f8-cad0-44e5-8e6c-f5e3c96bca1e"}, "a268d3c4-18ce-4fe4-8478-f9e5196a2656": {"doc_hash": "6d9f3e72242c405231a0882155d3c8f517ead9ce5219bb328515e295e7862e28", "ref_doc_id": "b8a27f18-8c99-4aaf-98fe-1cf27c9d8f8c"}, "afe696a2-d011-4257-b877-1da601bc64a2": {"doc_hash": "043ff2937c4cc51687dc45f31492d6503b0fb5bd5a2cdd3d921a57a5d61b5605", "ref_doc_id": "78b599cc-f5cb-49cc-b6e6-f77918029864"}, "9880a2a3-b675-4d96-853f-3f5a2ff6ff6b": {"doc_hash": "1cae3e49080824f16528d5af3e886eb4c8ab78a99ed977ed19a631291b430f97", "ref_doc_id": "c9f17980-27df-403c-8b84-c8e3d7080145"}, "b6dda1ab-41be-4b1b-b40b-14d03f8eb721": {"doc_hash": "af3bbddf90b850ff23d5b2485caf55d55b9252093350b792b2f7cb6defa292fa", "ref_doc_id": "1c0a37d0-a018-4b8d-ab93-e9be40a3866f"}, "94b5f737-7bc4-4058-83ab-5438b26830da": {"doc_hash": "d35f4e9c246ff71d967ee8cdffd32cb9c65d05719aa0c5587aed7469c5ea243f", "ref_doc_id": "98b8e276-0b3d-41da-b0cf-ec3227a06ac4"}, "c8a4913e-bd00-4259-b45d-b299bf32e6a2": {"doc_hash": "63a073c81582f1341f6b86224817fa4866d94a1c8f6c87ed16223904d7a1cacd", "ref_doc_id": "6b2af2e4-49a7-422f-818e-b1599b9aad00"}, "57d270a0-955b-444a-97cb-f2b6fa1db0ff": {"doc_hash": "12992ecdbf28d4112ec9245c1cf9391ef0ad5dbdde2adea34167c97c792e1972", "ref_doc_id": "aecae5a2-3704-4b43-a248-74fe1b8742df"}, "8cd3fb6c-4887-4881-bb6b-3be16cf09008": {"doc_hash": "cea04d6c6d74d2c55e43f9acae8eb1c6a29f62574511544862ffd85d4e6703eb", "ref_doc_id": "8feca3d4-19e4-4c67-8b51-bd383bf613df"}, "0e35aad0-322d-4de8-921d-a243c777f259": {"doc_hash": "9af20e080b4cdf374e590910262574ae5f5a6dd3e030ad057f498978fee17dd3", "ref_doc_id": "de5bfe81-fbd3-4a8a-9db8-193075045b53"}, "e5fedafc-b4a4-40bc-93b3-bd0448bd7c5e": {"doc_hash": "306a36e0798acd1ef0174568dfff1cae172317ae963f48794e062a90168e8050", "ref_doc_id": "279b815f-e930-4efb-bab5-49ae9ab53a2f"}, "a06f941c-dd69-467b-93cd-6f7188f5050b": {"doc_hash": "a2fcc8aa6992c22f1f642522cf62076179eb575846ba429748ade0c10c5f0983", "ref_doc_id": "0e05f165-c77a-4e09-9e78-6d05408f6aee"}, "92d2c188-70ea-4298-b33f-66a6e2c676ee": {"doc_hash": "0a9e21184d186ccd459ace96febee7103462b4452ff19612df589b4a3545db5d", "ref_doc_id": "423fb52e-4e40-4a28-8efe-e5c7bf64d8e6"}, "8ec3962b-ed21-4cd4-9c8a-c12c7569c052": {"doc_hash": "efbb6cf39a0ad157bb7f4952a844c50d08779422def15a95b9b9fee198b69589", "ref_doc_id": "f5c46abe-9bd6-419e-b4f9-dcc0674382b5"}, "39f31b6e-f89a-4240-9aff-3efd908c6732": {"doc_hash": "35f1048f38f92adf314cb8a51e7104516fa819e3a58e0541d6472e67e3648060", "ref_doc_id": "c08a64d3-8d6d-4c7d-9e42-1d1daf47445b"}, "b0ccf0c7-22dc-4249-826d-5934bf291d2b": {"doc_hash": "c06892b01412e005e970bec78a3e3f709cb4a6f8cbf0712b82ad940337e98573", "ref_doc_id": "4af92f21-f822-4d76-8848-b8dd03b30fcf"}, "7a8f9569-8637-4234-8e27-56f6bd115c5a": {"doc_hash": "429f967cea939620b71647468e7c66133d224e877edb8fa843e3d3ddd04caaf4", "ref_doc_id": "82f248e7-b722-466c-9c09-ddd6a3d21d67"}, "dcd75c83-b587-4861-b509-03283beb6dad": {"doc_hash": "90d9d08d0ff21ae1d64404e039783d33c03d9a2cc02981a16527f6f923c047a1", "ref_doc_id": "266f6b83-88a5-4c53-a687-36afe3c3ac4c"}, "c3a64159-a8ee-49f7-a881-0c7f9f38b419": {"doc_hash": "bed1c176a5f2a0d3888635054bd4f9aaa0b42b1609200e9cc7514e50a799d09b", "ref_doc_id": "47cf6c27-a891-48da-a2ea-78716870c1c9"}, "f86d5ebe-10e1-4d8a-848a-5e552e0db52b": {"doc_hash": "34a37bbc357c349c82fb41d75f0f604ebb6cf534be213a0da0d8a628e272fefc", "ref_doc_id": "9940cffb-6fe0-4699-8443-a700f5fcf292"}, "507fcc48-9c34-4972-a563-1ce93d98bf18": {"doc_hash": "ae3b31dc85e2dc11bee4158644f9daf6a0f908cdd26c178a852d61cb0d1106eb", "ref_doc_id": "dcf7ee72-120a-443d-9086-cf8f0d0b0bb5"}, "d8167c69-8761-432a-9793-ebfb61919a14": {"doc_hash": "051a8fddfbf542ae41dcdc3a9865e83a1ddbd1ff248e8bf5d35dbe5bacbaf63a", "ref_doc_id": "0b1085fc-0265-4471-acfd-5b41c7c32d0e"}, "937a3642-9ba8-402e-90c9-4727e55cab05": {"doc_hash": "30e6fee182caf586c9b2ce95e93a8304358416ab6fe5dd3bfaee70e8449cd5b5", "ref_doc_id": "e1b148a6-8f9f-4cd6-a110-cc95630f97e0"}, "882c7106-8165-403a-aeaf-3dc1a55f096a": {"doc_hash": "f0549ed55b114bfea6eb704457c129d5307ad9175cb4fc3b11ab783863e37d6b", "ref_doc_id": "4931e09a-5305-4eee-832e-4117067424be"}, "55a03b56-1463-4c3e-8a54-c5be4fc8ad47": {"doc_hash": "4b169f2fbf791ecdb8706dd97a429d3a11c430da286de416e5f5d7efc6cedc33", "ref_doc_id": "0c27e9b5-8f38-4817-a5e9-6d3e23dcafe9"}, "add39b60-34eb-42bb-aac7-2c47e159c0ee": {"doc_hash": "9732a611ee6aba874e9f29fb97a5127051ed4d6301b8830bc5610df7e3ee7b5f", "ref_doc_id": "4c47c9d3-06aa-465a-8947-ff17015ead6e"}, "424d23ea-90f2-4801-b13a-8a884a3a0f69": {"doc_hash": "96797f75b34c268bad78a751da3ce2e159d66a0351a52cb599a626320e29ce3e", "ref_doc_id": "62ae3be8-a3ae-4572-8e9e-f598308437e9"}, "292a7e2e-27e4-49d5-8237-f6631e996c0b": {"doc_hash": "e96dd8355edebd9e63dcd7a73e5f42bf388d99b77d2b57ff635068c6b064325d", "ref_doc_id": "cafadfdd-48ea-4d54-932b-c73a60bafa80"}, "c2104435-c993-45be-badf-5d5a06a640db": {"doc_hash": "9b5d2eefd355be78cb12802a23a93685bcdf0d28236219f1276f81377c277c2f", "ref_doc_id": "a7336271-cf7f-4195-b460-a26d78b78675"}, "c008fbbb-13d9-4768-a33b-5505393cefd2": {"doc_hash": "6477d68c67606f78fdd3af464d5d12e208a72f3044832b7fefccdd8ceac60fd6", "ref_doc_id": "1ca65241-1025-43a0-9494-4c65be65af9b"}, "3a7aa8bd-bf5c-4940-8c1f-8d43b1eb362e": {"doc_hash": "c1553604130313f734ba189a3983691c26f96c0fe035c304fdbccfa90ecac588", "ref_doc_id": "3bcc6aab-fcd7-4305-8940-5912e3b97fce"}, "39b31b69-4478-45a8-8b8d-82f980b09ef8": {"doc_hash": "53aa7e40bd4e50fe8dd77db1af5e7a56fa50a82330ce39091e21ffc72e9c81dd", "ref_doc_id": "3e32e2ee-c0f6-425c-beb7-19dbe0aadfea"}, "e1636f41-45c4-4fa8-ba89-8158cc12d2a7": {"doc_hash": "a228145891e9b7cbbd6fbfba061945e7d817ea5036e3f9dfc0444cfbb29fc32c", "ref_doc_id": "775796ac-6812-4f25-ad6d-88135de35fe4"}, "982e97c2-412b-4ca6-a7d8-2ac2d1d3dc46": {"doc_hash": "6447d28349e753d64cdeefb19c6d39036e9ac9b2d24d97b8e8d229003ac4bb47", "ref_doc_id": "60ee0b31-b3b8-49b3-9ba5-0a5f2daa6381"}, "b04e926c-1f54-4888-9f95-1ee4db211a2c": {"doc_hash": "07d3f9326fc7890d3d7cf98da960e87957e51c949921b13d1c9b3e1c83536af4", "ref_doc_id": "cfffde44-0ee5-486d-8dd0-daa28b762696"}, "1f406034-ebac-4ed3-bc6a-156780ea99a5": {"doc_hash": "332bb4024db88447ca6aec583c03ded297fb993b1fe019198537755d42f679a2", "ref_doc_id": "55a72620-cea3-4965-9643-8572132be2b8"}, "aa124e6f-4c29-42d7-bd51-d8c3b7ffef1e": {"doc_hash": "ffc20bfb31c7600a1eec09b5314f35e65996036d17febbaff894fb304da2263b", "ref_doc_id": "84541aba-10a4-493a-a7e7-3d532b689f13"}, "8121e107-c538-4cba-a48b-767863d3aefe": {"doc_hash": "f2214c740afd76736314cf211f79f06aabcd553b137989fe868eade3a2c181f4", "ref_doc_id": "1eaf8799-0861-4876-a380-f5f582d6b08c"}, "f2be0e17-4b8a-48d4-a0dd-39fd07fd8951": {"doc_hash": "b9bf303164d5db14848fd9b13c8dd6405c9475af152b38c3447e2a8040e73d9b", "ref_doc_id": "873de52e-ca45-4319-95fd-7413208a9c8e"}, "35aa40df-4582-4aab-8773-48df6baa9275": {"doc_hash": "a1922ed5a2433aec656e5c443db55162f81db747f72970bd663f686ee0cde9f5", "ref_doc_id": "fa00f74b-f098-417a-9194-12980b352d73"}, "6cec9329-4045-47ab-889a-7a433673f519": {"doc_hash": "887404e0b6945cbe19276a4c1e11f7981d9c5bb4b7b61722cd411571f8e1f84e", "ref_doc_id": "a3a5ba13-f5fe-4014-b299-f735becfd809"}, "e27af549-fead-4498-81f2-0486d29baa38": {"doc_hash": "272903126b85fb24c714817c21f930e117dc62dd63283a4ad34e0af2163a6834", "ref_doc_id": "9bec996f-4dcc-4172-9310-4be82a033488"}, "b596ac02-b578-4d39-9d11-e9cf440c762a": {"doc_hash": "52e6d5f0ba8c23010125d07734cb105413cb57701dff8a36d503c2087244d0f6", "ref_doc_id": "03b49dee-78be-496c-9940-22c1d98b4484"}, "55800292-1a94-438a-a8c6-3aa69be21997": {"doc_hash": "4562c9ebc8fefe8d6c8080bce555d77d79d5830236255e5d057b50ca135e644f", "ref_doc_id": "92580ef5-653e-4fe3-8322-31f4e43614b3"}, "05ebc796-0d29-4eff-952f-070d768e7478": {"doc_hash": "16302af3334a9df8f297e1472c23e04f064c2816345da16f47f3ca14955507d9", "ref_doc_id": "4145a2f6-99f3-4c0d-bcb0-04920f83d521"}, "5fe15bcb-4739-4ac7-a1aa-24950d84519e": {"doc_hash": "05962c6070b907bb395ae56e522119f9bf0954a212ad15ccfb02a4c2e7edb832", "ref_doc_id": "a505c314-64ef-47e2-bcfc-12280514c171"}, "90b2dca1-2592-4623-a478-72f1cfc3c528": {"doc_hash": "cd38052fb8b51c5b828011d0c82c43f891c101d03c67ecbead0dd462cce4b4db", "ref_doc_id": "5ab0136c-56a6-47f7-b4b1-55d7da1bad65"}, "e58e8865-299c-48e4-8ff2-3bc1650d98eb": {"doc_hash": "6775486b66a5a332eb2364757f0557d90cfa1e4b551406fa7196edad27300ae1", "ref_doc_id": "3d683b20-670d-4238-a9f3-28febd393585"}, "9bed8450-f457-41fc-9d4b-e5a64d3a66fe": {"doc_hash": "7d7ea4e6e537871bb07a120391a08401c883395271ff5334ddd092e07d74d7bd", "ref_doc_id": "610e8761-1d00-4111-86c3-035b970331a1"}, "265346ab-e0f8-44b9-9473-02bdc93c51dd": {"doc_hash": "cc318e35e8cfac8259f91d5f30a2ae79028f0f5a82e8272f6ca0b598fd0637c7", "ref_doc_id": "61cfb685-b919-44bc-a70b-03ad8cede8ca"}, "a1092c4f-7937-42be-bf42-567000a0bf74": {"doc_hash": "16db04e6248ccd76727a0706b4a6b2701dfb0ace2fbe280888529f067dc7c0d3", "ref_doc_id": "d86c554b-9223-4162-b4b7-292af92f236b"}, "792c7d96-ade5-406a-9ba0-ba46372d736b": {"doc_hash": "b012229ff24b15a0fab66af3853e95fd82d77f462ee4b5369ab23e86125b2626", "ref_doc_id": "351a7438-6977-4b35-9d43-c9cbce8721ef"}, "c2fb43ad-4318-4342-a277-0c0e694a4cff": {"doc_hash": "5f20f294939f6f8ef2644642fd6c1d5ed1f31277971c82a1c0239158fee9a00d", "ref_doc_id": "88c832a7-06d8-4d47-9927-a6cc11109c1c"}, "b708ac5d-9d55-4e29-bb95-9feff1c60dbe": {"doc_hash": "d8776a40d210e1b634c0f37edfd553e049c349578e5471d134371297353d73fa", "ref_doc_id": "8828109d-af18-4733-84b5-0fbbdcdbd14e"}, "bf23cf7a-0121-4a8a-8b8e-7a267c8ea9b8": {"doc_hash": "d1cfcd8f6bb69b6c89f436682cc441534037d8c4f94aa2f17bf14c46c711238d", "ref_doc_id": "20ee968f-da2d-4018-a5b7-2ffe43387c9c"}, "4831cbed-675d-40f1-8cda-69191ba195b9": {"doc_hash": "aa024f10cbd64b1329f03c5be6a9a5c7f44510ab006e434901e5d7be72927fe0", "ref_doc_id": "4adb7ec9-e3a5-4365-9c45-84335d1d1bf9"}, "66ef0fcd-9991-4c7b-8dfb-14f42a1b0e65": {"doc_hash": "8d325b1067b568fa8aa18215400e4ba02a0835401790e747f3d2697266f9aea6", "ref_doc_id": "cbc02846-0685-45d1-b076-880992c9aaf3"}, "7235596a-a8c3-43b5-b19a-e854988832dd": {"doc_hash": "aae5fab8a91e5316b40483e531bb63c4785b3687975ad96d074b9918c44ecce5", "ref_doc_id": "8e8b173d-b254-48ef-b105-c7856ccb139e"}, "c89d7bb9-862e-4798-85c7-53b94e8d9285": {"doc_hash": "884ba0e3ccc8d29a3d8ecb30ea10f4031ddbab06a41c22f7bbc61b3b9dd60510", "ref_doc_id": "98e90777-563a-4e3d-bd31-841bb3c31e20"}, "a6263aa9-2988-48ba-9eb3-73bbe00f9db9": {"doc_hash": "29d79235248d1ac20b82c6e05477d41d0c7259a40a27af8e0a799ebf44330f18", "ref_doc_id": "7d03b90c-f7c8-4cf6-a91f-244de49fd37b"}, "4b642531-35c4-465a-9e09-89f35333ebee": {"doc_hash": "3e696dcbe2a3507331dd0f44f8b07f61dc1a9b9910879c8bd3139f3d5e67853f", "ref_doc_id": "8b1d9adb-402a-460f-b02f-4ab0452c03f3"}, "952db052-77ec-40d2-8e9e-b9bbb6d79379": {"doc_hash": "82295fbc79b48c5914fd89895b462d0ad841d62e24d703825968629f9b9b7eb7", "ref_doc_id": "4ce13e7d-8f9b-41fd-98ea-eb85f56538e5"}, "54bcdb0b-b74f-4235-87ee-0c993a696130": {"doc_hash": "e680674edd1a1a39eb65682922d2ab95f4796d14c4da53b0d6560ca4a36b9101", "ref_doc_id": "087a45d7-3b79-426a-8a4e-daebd2421271"}, "01ed84a6-05fa-405d-961c-21b9179ee579": {"doc_hash": "918975eff5ec950d38b4a71ee0b3b7ef1eff098ab629ecaccbfd451470a2ba1a", "ref_doc_id": "2c8f1ca2-429d-4174-afd8-4ac4915ae494"}, "37d7bb2f-8066-4994-b5bb-8414f969891c": {"doc_hash": "8937b97d8d1770317181845bc1590c5114517a94418d5bb49735851120716aa7", "ref_doc_id": "92e6de4c-b1f7-4e5e-a559-5ac0f4fa3ca0"}, "6a9ebdef-b63a-4d70-a798-bc87f21f4a9b": {"doc_hash": "23a8a2e710d2d259580db50e83f5d59c1a4614250230c086d6f94687a4352a88", "ref_doc_id": "faf50b3c-76d6-4fa0-a38f-7bd84b8f9859"}, "6f2d41ae-d01e-4f84-a6e4-ba27f0730580": {"doc_hash": "3446abfc9de40b9a04be00b71a026e96b05ebf12bd92ba1ba16afa5b7e3bc89e", "ref_doc_id": "f8896a29-9f67-4b72-9f1c-04b54179c16e"}, "889440d5-a5a6-48e4-a48f-ed450d7f3b40": {"doc_hash": "953e72a9d34e4b03d923e112ccb5200a27a976a5df6f66e6357c73ce1db242b8", "ref_doc_id": "ca4955ce-ca9e-4f89-8fca-0abf48d6d3c6"}, "c33c98f9-2c1f-4c89-ac03-640c737997d9": {"doc_hash": "8199bc5f3af3153e34104d394bf5f3673363fde9e45bfc90e3e74fa9456e31da", "ref_doc_id": "e5a2fa32-172a-4ca2-bd0a-497147bc8f10"}, "b9ac8a93-4bb2-4f62-9221-4da95d98709b": {"doc_hash": "500b1be37cebb25fa3b473728023114d7f88b1a237555483757a9baafdb3fb6b", "ref_doc_id": "4def5dc3-5b13-432e-9e0e-eb8cb7233b36"}, "ce669f7a-7676-479a-9e90-4072f03b9392": {"doc_hash": "f7831040351602fff3b85c8392c8c4a638aa022568ef08c09bbc972014df8526", "ref_doc_id": "ab3ffdee-67e8-4b3e-9235-b8403e21efd2"}, "c6acd465-0f12-4c83-b8c5-7b86ecde1110": {"doc_hash": "6e454a0649b019010840f3cb64dde6d0500c2677ebee756ad4ce014f527e6276", "ref_doc_id": "dbcdec27-0895-4167-a75e-ba88da43d804"}, "9362b2a4-064c-4c74-950a-d32640d4fb0e": {"doc_hash": "486dc1f6e805a5caae81a67a521004244008f9130fbc4f671ac9c23215307726", "ref_doc_id": "88f4c355-a8be-4989-b23f-177670652c4b"}, "1f7e9bb0-52ef-43ce-95b8-9081d649ab38": {"doc_hash": "f9e9f698082552ce6c53af69f4c6616f201388980d5f5bf3f924a2dc30191f1b", "ref_doc_id": "1ef90fc1-2c70-4a3d-b6ac-7e2b17235ef9"}, "90d5db8f-a65a-4e23-8419-d254a015cc94": {"doc_hash": "368f9c502e5468c724aac6f6a27b1653b858cdcea13f331bf5dc807716b03c37", "ref_doc_id": "97c61370-209b-45f3-99ce-885421b06dca"}, "bed9af0c-d653-445d-bf6a-e88a0c537a3d": {"doc_hash": "88aaa6415c1df62de9f69b8426b2cfb0c4a30a8f55b936cc4651320687cd7f39", "ref_doc_id": "4d3a55b3-f032-49bb-81db-f4d5c0ec5488"}, "297fd5ef-f2b8-4f7c-8fbd-d3d83668ec86": {"doc_hash": "f4ea768e10e9c7002a135ee15f5750f266c5cc4978981b555ff1c074ceeebb0f", "ref_doc_id": "2d51f8ba-665a-43f3-885d-800f57c93517"}, "a70159f4-c5cf-49e6-a0ef-8c0cb4d15c39": {"doc_hash": "2d3ab6d8497d255ed3aeb522842903c344ab170be3f7f4b076222f5b3baaef63", "ref_doc_id": "5a47d883-9901-4000-9e04-39172f58948d"}, "aeee8dfd-44ab-4c92-bc5d-7a0b23f6664c": {"doc_hash": "9e00afebaa0ea9d36cbb544dfcb586c51d5b93490e71c18c70e176a53a0ac3ed", "ref_doc_id": "8584dab7-eb53-4bc9-a9f1-3d5c6595a821"}, "2465bdc7-74cc-4f4e-9e0d-69aef6a3c365": {"doc_hash": "0505b1b06e7bc5257b3aa36d8caffeb0b20db24170491f8a1728c9ecc5ed1046", "ref_doc_id": "68d22fda-75bf-41bb-b259-37d778e3ab0d"}, "d0101154-b4a4-4ce1-ab49-2d165c650a06": {"doc_hash": "3ba7e31b6fa52eacd334cb9cfb3c46c14d0332ef47699e64a8f6a78f2d892b43", "ref_doc_id": "48e9773b-1dcd-4b60-a857-db32cc477b77"}, "ae913f99-1973-4867-ac00-d23b576c650d": {"doc_hash": "188b4da5f147b17afa759eb956d5599d90afd0be335fdf4f44f8ce991caeac08", "ref_doc_id": "e7264c60-f93c-4232-8a69-7563d7a60223"}, "e9bfca89-ae74-4843-ae9e-4a358825c3b2": {"doc_hash": "5953b36c2f28be8d2d100c36332acb9349bbb73d496aae0a1bdf00baf05b128f", "ref_doc_id": "90f29860-6702-4711-a3a3-aa7cfcacb050"}, "a31c948a-b8ad-4ede-a14e-0f64ad8f036c": {"doc_hash": "dccedb6def2aa9120e5c9ede2b48e6915a7409c76e6d50a7a25224c706b9150b", "ref_doc_id": "2dae169e-e13b-4428-902e-39c854ca8173"}, "9a1d864a-c2f6-4573-8bdd-a2d68cc341e1": {"doc_hash": "5e14e3718ad48add4b00df876a4b0d4199cd0b7d11cd1edd025800c3b3326824", "ref_doc_id": "bdf1b317-bc7e-48fd-a7cc-60be63a4d67d"}, "baf20abb-d6ab-475e-a6d4-76a207c5d57a": {"doc_hash": "476b05c42fa3e0f38df22cb940b200f146609f6d372b780a6e5dc82a44d54e55", "ref_doc_id": "2c614bde-3c71-449f-987a-0ed6c6d09fc8"}, "2c11c584-9c65-4dc5-96c0-56d121d86182": {"doc_hash": "33e6c1af60f46b5d465240107ec943e5103c3feee0e39b8929b13ad7638bc900", "ref_doc_id": "a56a22d3-a5eb-4c5d-a49e-503304b5cd22"}, "49af0546-c58e-4e34-9e95-7215dff878f5": {"doc_hash": "bab39da423b156a5d2333ffb205dcf6ba9bf338e395c525b4d3a7f6d8a03509d", "ref_doc_id": "b6777253-428f-4f0e-adba-49475bb275ed"}}, "docstore/ref_doc_info": {"b38fb95f-4f4e-4e28-968e-5d016a3f8863": {"node_ids": ["52a61a2a-ced7-46fd-a528-2691b0501be5"], "metadata": {"page_label": "Microservices Patterns", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "281fff4b-ed73-4fff-947a-9fcbd5b7affe": {"node_ids": ["41536b26-2123-4034-bc17-cd705ee279d2"], "metadata": {"page_label": "IFC", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "509cada2-1d54-4435-bfa7-a000d85f5cce": {"node_ids": ["b094b148-67e8-4b16-bf93-04057b59e6c5"], "metadata": {"page_label": "i", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9ac245fb-f28c-4760-a4f1-806f9a2dd646": {"node_ids": ["3a0cfc9a-11ac-4b65-a83b-b05ef28192fc"], "metadata": {"page_label": "iii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f613fa76-7349-478d-960b-2b61c006889d": {"node_ids": ["3cc42c19-ea5a-4b85-aeff-5ce0967c07f6"], "metadata": {"page_label": "iv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "85d2dca7-184a-4957-9de0-a17e23202a77": {"node_ids": ["4b2df9e5-3c93-49b7-ae49-810f192e7b0a"], "metadata": {"page_label": "v", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8082f0aa-d82b-4049-9681-88118338d3b6": {"node_ids": ["18454a97-2870-48e6-aec3-99c121248f50"], "metadata": {"page_label": "vii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3b4fbc6f-73d3-4e8b-a92b-4208d641c613": {"node_ids": ["6d52565f-59cd-4adc-9810-15b98ead733e"], "metadata": {"page_label": "ix", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cb263716-aa7a-420d-8d88-5706d4529266": {"node_ids": ["ac3c2049-3d1e-4c50-b3a3-5293b3f5b1b6"], "metadata": {"page_label": "x", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9742ce63-1419-4467-8403-3f6e7f4503f6": {"node_ids": ["5e05099e-3990-43ad-9541-cf683e5258fc"], "metadata": {"page_label": "xi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "211b935e-b817-4432-8e47-0a6bce4b7fff": {"node_ids": ["e9a9f1a6-b83f-47f4-8517-f49381a618c2"], "metadata": {"page_label": "xii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d5ae36d6-86fe-4244-9006-f3179ffb331e": {"node_ids": ["9a6526b5-c398-49a2-9c1a-e23d71253042"], "metadata": {"page_label": "xiii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e40e73aa-5d66-48ce-a390-5b0e47e6d8b9": {"node_ids": ["259ed3d4-b2df-49ad-9e94-2244ab11f319"], "metadata": {"page_label": "xiv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c25667ea-384b-4a00-b6a2-2f46c2db65c8": {"node_ids": ["96f01306-78bd-4fab-9b40-03a16851bbfb"], "metadata": {"page_label": "xv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c11300bf-c6c3-40b3-9c45-e8ae16824b21": {"node_ids": ["e5108e7e-36d9-4e87-9ada-caa1f6fc9db2"], "metadata": {"page_label": "xvii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f406b4ba-69fc-4d18-a90e-323cd44fcf22": {"node_ids": ["dc593e65-687c-4099-bb9b-99d55a17b5fe"], "metadata": {"page_label": "xviii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8c13f683-b4a5-4e37-ac5f-0a8f5fb77759": {"node_ids": ["c84e6eec-eddf-47ef-827b-adf91b2e2155"], "metadata": {"page_label": "xix", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1d033a5e-d562-4aa9-8a2f-c3a28b5f7f48": {"node_ids": ["9e043c6a-24c3-4eaa-bf92-560e03449c5e"], "metadata": {"page_label": "xx", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b113b4d6-96b4-4092-b449-efa92c67b7ed": {"node_ids": ["2b75a935-1d07-4520-b9c3-ba5e6e310b78"], "metadata": {"page_label": "xxi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "61b5aea3-5a4f-40a3-856c-3e818b1c7404": {"node_ids": ["000d51ea-2672-4064-91e1-4e345bc612cb"], "metadata": {"page_label": "xxii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e5a6a61c-1471-495b-8e63-0c74e5edf31e": {"node_ids": ["07b70d9a-c376-49f8-bff6-02ec7d1b7a31"], "metadata": {"page_label": "xxiii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a3640d6a-cd9b-42dd-882a-ebfb52526070": {"node_ids": ["418461da-55af-4506-90b1-35dbd9a71c24"], "metadata": {"page_label": "xxiv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "85ab669d-a855-469c-b284-cf274c56982c": {"node_ids": ["a98439e5-a43c-4d84-9cef-40306388bb89"], "metadata": {"page_label": "xxv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1a1fdc35-ee15-41b1-b757-acbb71bef7c6": {"node_ids": ["03de00b1-960b-41c8-af43-05cd8b4e58e4"], "metadata": {"page_label": "xxvi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f763c37e-f749-49c6-8e6e-34d153a5bd13": {"node_ids": ["590a84ac-2e7d-40cd-ac6d-d9438d4b49a0"], "metadata": {"page_label": "xxvii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4f4a05e2-558c-4845-a041-f1acf38fa6ab": {"node_ids": ["b00bb12a-66e9-4eae-a65c-4e2c859e578f"], "metadata": {"page_label": "1", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d0771fc6-64b4-4756-87ae-dc1362459759": {"node_ids": ["2129c459-808b-49d8-b9d0-2d520e38954f"], "metadata": {"page_label": "2", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "71ec4650-0a6c-4e97-be94-898b09bfca94": {"node_ids": ["c7f4ea15-44b2-4943-963b-0b98c844f186"], "metadata": {"page_label": "3", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4a62ca56-208a-4fb8-8d98-e279704b4def": {"node_ids": ["a35b0995-d898-46cd-8e5b-06114ce143df"], "metadata": {"page_label": "4", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0b44a5a3-e90e-413d-8af2-adf4fd71260c": {"node_ids": ["22717397-516d-4a1b-941c-0798efa8d80f"], "metadata": {"page_label": "5", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3f3b4407-8de6-464a-b386-6aa25238ddab": {"node_ids": ["4f2c0c2a-567d-4e49-a415-a427d8b76241"], "metadata": {"page_label": "6", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f2ff25fd-95e4-49a6-b399-e315acf8f516": {"node_ids": ["439be4ff-6f5c-4274-a6fe-164b4a4fd04c"], "metadata": {"page_label": "7", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a77cbefa-6a4f-4f0f-a54f-26c319bad674": {"node_ids": ["e5ef31ef-ed60-4174-b5cd-f1594a801e6f"], "metadata": {"page_label": "8", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "18177179-3a08-4e6c-ba9f-7681863d6a05": {"node_ids": ["203cdb92-3476-46fa-9170-0844baca71ea"], "metadata": {"page_label": "9", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4c21c889-ebba-4bc1-b453-0aea92e0373b": {"node_ids": ["4c01a406-65c2-4253-a6fd-24a80f502157"], "metadata": {"page_label": "10", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0857e15a-f7c6-4cff-be38-7afcb99e683c": {"node_ids": ["ea0d0022-4676-48f4-aa0c-6dc4fb5a8c2c"], "metadata": {"page_label": "11", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "72355989-d836-4d4e-a0b2-1304c7e6283d": {"node_ids": ["62a800c2-4360-40e5-bdfe-a4891b4dedca"], "metadata": {"page_label": "12", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "91881cc2-df85-47e3-9f35-196d50aa7ac9": {"node_ids": ["fdac8698-6786-4cc3-9a62-f1d958cf0e29"], "metadata": {"page_label": "13", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dc1e9a60-63c8-4545-b595-458911499267": {"node_ids": ["25ce32fd-b389-4327-b4c8-b56d2828b222"], "metadata": {"page_label": "14", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "463d6c70-df99-4f81-9733-c4b7424ff992": {"node_ids": ["cda86376-b66c-4e6d-89cd-a66828474a9b"], "metadata": {"page_label": "15", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "bae20534-8682-4b47-aa56-5e98d3482c71": {"node_ids": ["58c8b66c-1eb7-458d-bb4a-a7a293c6be46"], "metadata": {"page_label": "16", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c58bd075-53cb-45a5-8166-f492fdd91add": {"node_ids": ["35b0178e-5229-432f-ada1-4ce1665cdcf7"], "metadata": {"page_label": "17", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d289173e-3ae4-4c94-b3f7-dde8a0a81a7a": {"node_ids": ["2aec227f-4364-4e0e-9a58-4e47755d5166"], "metadata": {"page_label": "18", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "476b7ee1-50ad-47b2-b867-14ff502545ef": {"node_ids": ["4067fc11-a87c-4dee-a85d-2bb7dc264abd"], "metadata": {"page_label": "19", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "efa1ff18-14ec-467f-ba6a-883f2ac3458a": {"node_ids": ["9b524f6a-2e0b-475a-8da7-5160ae19406e"], "metadata": {"page_label": "20", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fe5816be-8315-40bf-a380-8df9693624bc": {"node_ids": ["dad418ab-2de2-40da-8bc3-f047618919fa"], "metadata": {"page_label": "21", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a7cea9f3-f05b-449e-a27f-bf037f89f560": {"node_ids": ["dae49efa-d16e-422e-a8bf-b5124dcaf303"], "metadata": {"page_label": "22", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9ae8fc4a-588f-4d7a-bc7c-78c4e2538493": {"node_ids": ["e50c71bf-376b-4063-939a-e14457bc2800"], "metadata": {"page_label": "23", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "977404a6-1054-47d1-8a0f-bda9d766866c": {"node_ids": ["dcef9015-fc71-4eca-9f90-6a7fbe9b6a27"], "metadata": {"page_label": "24", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3544440c-9dfe-41a9-ad36-dbcd59f253f1": {"node_ids": ["42ef2a40-8418-404b-b982-37792e4d3234"], "metadata": {"page_label": "25", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b32c52fe-4dbe-419b-9db2-75e2b7b1e8b4": {"node_ids": ["9aa997ae-bdbd-4390-9fa1-0ed803fb844d"], "metadata": {"page_label": "26", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4d5f4e56-8537-4165-b55a-f15f9248e7b3": {"node_ids": ["89bcbe92-1b20-4502-ab83-f984349c6287"], "metadata": {"page_label": "27", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a0eab821-ff31-4d8c-aca3-525ea87e8c16": {"node_ids": ["417e9b05-4a0a-48b7-9c8b-fbfa26853d6c"], "metadata": {"page_label": "28", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d3be118a-fe20-47db-8061-c65ed81f6d4d": {"node_ids": ["3971ddb6-29be-4ca9-acb8-f0dde73c9e98"], "metadata": {"page_label": "29", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4a5ca02d-94cd-479e-ba1d-141203d20467": {"node_ids": ["8ff93885-439a-4ed1-a16d-733a0c9eb190"], "metadata": {"page_label": "30", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6af6498e-9e26-4d69-a557-5c3631395575": {"node_ids": ["bc7b455d-ea5d-4446-adab-3386a21ce5f0"], "metadata": {"page_label": "31", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "70141059-7dde-449b-973f-7a7161dec6be": {"node_ids": ["c70268dc-609f-4139-baae-a8df63426620"], "metadata": {"page_label": "32", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f8ed6d1f-6527-413a-a452-65745e48ebd7": {"node_ids": ["10d02576-678f-4312-a1f1-d132c380677a"], "metadata": {"page_label": "33", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "26261184-c5f1-4c6c-8549-7beb63516582": {"node_ids": ["3e9c81a2-1419-4287-b2d5-b3a6e7154808"], "metadata": {"page_label": "34", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ff5785ab-62e6-41b0-a34f-ec683b23e3be": {"node_ids": ["34d6c4d1-96cf-497a-ba04-0619a94f147b"], "metadata": {"page_label": "35", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f39638e3-ec89-4c3e-8531-ab190bb3353a": {"node_ids": ["58708acf-fe4f-4580-9157-a412ddbaab83"], "metadata": {"page_label": "36", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5936e643-64c6-477e-a707-2028255a883a": {"node_ids": ["cf7090ba-0321-4f57-8e7d-dde649339dd6"], "metadata": {"page_label": "37", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f1cebfd7-cc2d-4acd-8207-7356aeaf2504": {"node_ids": ["60caa3b7-e7b8-4802-96d3-f32f45d3b757"], "metadata": {"page_label": "38", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c895021b-81fa-4c98-bade-db10851ab346": {"node_ids": ["ead68334-cdff-4445-894b-f1855d1b6011"], "metadata": {"page_label": "39", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "092379ba-d2af-453a-8c83-daf959050318": {"node_ids": ["0441ea99-0efa-42fd-a910-f167c2d0b63b"], "metadata": {"page_label": "40", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d733d84e-a0d1-4383-b582-5bead2b43b00": {"node_ids": ["491561b3-b58c-4367-b6d2-4bf530749474"], "metadata": {"page_label": "41", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "869fb07e-7a5b-4d75-937c-1ecfeabb3774": {"node_ids": ["ebfc7705-4877-408e-ac01-8ff30be148de"], "metadata": {"page_label": "42", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ff6b9955-eb0f-4f1e-868a-f90d025b2ea2": {"node_ids": ["260af7c6-0f61-4983-9d09-63a8f3b40434"], "metadata": {"page_label": "43", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c98230db-a3e3-491b-9de2-896f40695b0b": {"node_ids": ["01e2c509-caee-435e-b974-f6b5ae132cde"], "metadata": {"page_label": "44", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5d680d7a-2aa4-4379-aee7-99ba422d0350": {"node_ids": ["e1fcb35d-9ac7-4119-98ba-0289182d86d2"], "metadata": {"page_label": "45", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ee2d9eeb-1703-4581-8dae-233f36fc54fe": {"node_ids": ["3a2d2f0a-50d3-4442-a518-4574bf7ac572"], "metadata": {"page_label": "46", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b6839f8b-ccde-44c5-8017-7668d7dc7c1d": {"node_ids": ["1d1c91cc-948d-44f7-ae1f-1d562751b825"], "metadata": {"page_label": "47", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "aefff421-bc29-4bab-94b2-9acc1342912b": {"node_ids": ["afa0f01e-3c6d-47f1-850c-e900e6578607"], "metadata": {"page_label": "48", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4fe846f9-9c02-42f7-91ff-13b8dbca54b6": {"node_ids": ["459565db-7806-4dae-8141-fdd2c3eb26cd"], "metadata": {"page_label": "49", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f3c590f9-7914-463c-9cd0-b535fd67e5e5": {"node_ids": ["36aaf72d-e6e8-4105-9b67-a0e23dc88c7a"], "metadata": {"page_label": "50", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fa3318e9-992e-4afb-a3b1-5ba41e9652cb": {"node_ids": ["5475ce31-425a-47e9-8e6e-1212a53eaa15"], "metadata": {"page_label": "51", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b49deb62-dbce-48e0-b67b-9f3f1237c1b6": {"node_ids": ["433c3479-cf92-41e9-a3de-3c479a976ac9"], "metadata": {"page_label": "52", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "547ea586-f8d5-4b13-80a5-256b16b8e00e": {"node_ids": ["6dc2eff7-3bdb-4564-9fd6-ae9fd83afae9"], "metadata": {"page_label": "53", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f907adbe-7bbf-4fec-b075-e3eb0a5a7987": {"node_ids": ["38325b9d-6ed2-4649-b27a-8baa9b1d342c"], "metadata": {"page_label": "54", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6cd6b5e6-c7b6-4b33-85fd-be2fb5c50fde": {"node_ids": ["fcb631fc-ab69-4b28-b880-8c64187bdada"], "metadata": {"page_label": "55", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ab6dbb42-a600-48b1-b2a8-6515863c1cc6": {"node_ids": ["1eb7f313-aeff-4ed9-9f3d-07bb561cc3d1"], "metadata": {"page_label": "56", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "913c20e0-a69a-4eb2-b52c-9f13eda40906": {"node_ids": ["1cf3baa1-a5a9-48b4-880a-5dee45859bbb"], "metadata": {"page_label": "57", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b58aa14a-7243-43ad-8563-24112a760d44": {"node_ids": ["16dba468-a1b9-4fc1-9a78-4dae36e42418"], "metadata": {"page_label": "58", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "287dde2f-3b33-4de7-835c-45e583660864": {"node_ids": ["8dd17eda-f333-4735-9962-ab940812be4c"], "metadata": {"page_label": "59", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "087710e8-7a88-43b5-8792-38eb61eec1b3": {"node_ids": ["994c9bc2-96fe-41ad-9e04-f56e352370ba"], "metadata": {"page_label": "60", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "038ac4c7-07a2-4a88-b6de-3a04667acc2e": {"node_ids": ["1d85c877-0a29-4447-be72-c6715f817f1a"], "metadata": {"page_label": "61", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "27319c0d-c6c3-4dbf-9d48-53d239f6a19e": {"node_ids": ["69b1f450-d53a-485c-9609-f81b4610164a"], "metadata": {"page_label": "62", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c985e782-94a2-44d8-a3a6-0559b1965f64": {"node_ids": ["c5fc5b82-390c-46a2-910d-ef83ffb972ac"], "metadata": {"page_label": "63", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "87ad69ae-6995-4ec2-a5f6-f9930c6b3811": {"node_ids": ["cabe1a65-bbd7-4ab0-bc83-c6033317c426"], "metadata": {"page_label": "64", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cdeec5f3-52aa-4f43-9be2-0e5bfd8a65a1": {"node_ids": ["04989f81-5293-4687-99af-e88868bd7f40"], "metadata": {"page_label": "65", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "52987080-6542-4b57-832c-67cd8b1a590d": {"node_ids": ["1e9a4fbc-de54-493d-a44e-b5e569d4067f"], "metadata": {"page_label": "66", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "84700511-722a-4727-927b-1a6b113394e1": {"node_ids": ["fe64041f-5a0b-424a-815a-0584726c1e02"], "metadata": {"page_label": "67", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3efbff9e-dfdd-4472-8372-8bf431a48169": {"node_ids": ["df66d969-93d3-477d-87cd-4f2762cbccda"], "metadata": {"page_label": "68", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b542e02d-8146-4b62-9327-8bc2f7c4587c": {"node_ids": ["e7ecd1f4-01e2-44ab-b230-4070899c5c0c"], "metadata": {"page_label": "69", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "be535713-c8ef-4280-9c78-d2e2e720ff19": {"node_ids": ["62933227-5f2f-42a5-b005-3b8fc79c7863"], "metadata": {"page_label": "70", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "47845812-fbc3-4a8b-a094-2f07bf4b7f6f": {"node_ids": ["fdd24628-a5f4-43f2-a81f-d538e5e81d55"], "metadata": {"page_label": "71", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "779ed14c-2443-4a40-be6b-a9730723f25a": {"node_ids": ["800a98b7-461b-4f55-8eeb-c03e00b6a580"], "metadata": {"page_label": "72", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e7e0fce0-de95-4f3e-b816-d23bab1672ed": {"node_ids": ["c973c2fa-42fc-4ac2-82ba-6b8ff03bdda7"], "metadata": {"page_label": "73", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "128deab1-0a77-463b-b0cb-3f18bdad8eb6": {"node_ids": ["eb82397d-301d-4e9b-ad27-f7284aa18a21"], "metadata": {"page_label": "74", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "50e508f1-0fca-476d-9c93-4fed86689305": {"node_ids": ["85037c67-6f40-4686-9336-a7c88863eaa4"], "metadata": {"page_label": "75", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ac9fb681-468f-4b2c-8154-8a733f3f561f": {"node_ids": ["560b4764-d8b6-4f6c-86d3-9212dc0b9d8f"], "metadata": {"page_label": "76", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cff133aa-3843-4699-a15e-ecb2ebc1eea7": {"node_ids": ["d8c6e8b8-f2d3-4740-85fb-01741eed1aad"], "metadata": {"page_label": "77", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b019fa7b-d2c4-48cc-882f-6b539445bd02": {"node_ids": ["bae1cf84-6e2a-4efa-8511-bf7af2d2142b"], "metadata": {"page_label": "78", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7ee74cc8-21be-44b7-965b-14e4cf953b43": {"node_ids": ["280ec291-c365-4724-9c5e-04b4531f29da"], "metadata": {"page_label": "79", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d7721b23-53c4-4b7f-8e5e-4278ee03a5f0": {"node_ids": ["fec30406-5e7b-4f7c-a588-246f0e04ca0e"], "metadata": {"page_label": "80", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a242dd55-d696-485f-83df-fc3e614083e8": {"node_ids": ["1236d172-41e1-4f41-be81-fd671286ee8f"], "metadata": {"page_label": "81", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f54d7ba3-f556-46ff-a3ab-cd5f619f1b1b": {"node_ids": ["252b2cdd-e35d-40eb-af23-34921acc85ce"], "metadata": {"page_label": "82", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8fde44c6-d210-4a83-9a32-0467516aed7e": {"node_ids": ["c59d01fd-7fa0-43b1-a45b-1a527e9474c3"], "metadata": {"page_label": "83", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2bec580f-f045-413e-88f0-fcb8917ca263": {"node_ids": ["c617b38d-1f39-481e-9a9c-d5782e28ca59"], "metadata": {"page_label": "84", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3aa50719-4a89-45ff-b4f7-efc373863d9a": {"node_ids": ["605e61ab-cb4a-484a-9e0a-b0b633193b5a"], "metadata": {"page_label": "85", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9e7e35d0-f9a2-4668-9105-1ba735e4ebdf": {"node_ids": ["857e0c77-798f-4c2d-9816-92587dd7c341"], "metadata": {"page_label": "86", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a23d09ce-4a73-4fdf-b330-f388c9fc96c4": {"node_ids": ["2f2caa6a-23fe-488a-9f40-aff0b08aff2c"], "metadata": {"page_label": "87", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "bb3d1630-781b-45fd-865e-37b21fe53a95": {"node_ids": ["4cea4cab-3753-4658-b598-02d0158662f0"], "metadata": {"page_label": "88", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "211aad95-fd45-4fc3-8bf7-d5ce4f6a786b": {"node_ids": ["a5d5be1a-7093-49b7-a77a-c34001335d73"], "metadata": {"page_label": "89", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1f0ff3fa-9f68-4224-a929-b150c5cf4ba9": {"node_ids": ["4222a643-09bf-4e11-9737-0f513163765f"], "metadata": {"page_label": "90", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "021c7e77-2dd4-40b2-95a5-b0a6a7dcd9ac": {"node_ids": ["bdda2e19-f949-430e-9e45-5d1e398f338e"], "metadata": {"page_label": "91", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c8433ed5-cb3c-462c-b7a0-145c4d450329": {"node_ids": ["84084b2b-9f93-45d3-8f3f-3b4ab5b107ab"], "metadata": {"page_label": "92", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c4ba51fe-0905-443a-99b1-99a3b9fc5db7": {"node_ids": ["0eea6d1d-88d8-4ab9-a531-a71c6e956b0a"], "metadata": {"page_label": "93", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ca704ce1-cdc3-460e-8d0f-cbcfc66e5b2f": {"node_ids": ["65e0a00e-7054-4891-95d6-04f57d982cf1"], "metadata": {"page_label": "94", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "49c88a0f-a9b9-48fc-b327-61c041a2105d": {"node_ids": ["2854f547-cf60-4a64-9332-b4079ba4bc5c"], "metadata": {"page_label": "95", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4163bc87-2d68-473e-bde6-f530c956be93": {"node_ids": ["453a22ed-c443-4dcb-8cbd-89c5224ba8d5"], "metadata": {"page_label": "96", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "74ba657b-c222-4ca0-a98d-761eab13596b": {"node_ids": ["4d7b32ea-f952-4131-8388-431e83f6782d"], "metadata": {"page_label": "97", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "52520531-3c4a-4baf-a77c-3d6ec1cb638d": {"node_ids": ["69d5065f-91a9-4fed-bbd0-e0427c4372ac"], "metadata": {"page_label": "98", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "397ba1ef-f45f-464e-9537-6409762367c4": {"node_ids": ["742265a8-89cd-48a7-8628-43db803195ac"], "metadata": {"page_label": "99", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0c3c873f-ae6e-42d2-8f8f-18bcbfc00875": {"node_ids": ["013ad195-55fb-4724-937e-7434e0cdb349"], "metadata": {"page_label": "100", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b6a392b2-bcc6-42d0-a72d-ed81875af65a": {"node_ids": ["ed715ed1-47b4-4285-b60d-b224f9f255ab"], "metadata": {"page_label": "101", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e6413e33-4a7c-4373-b8d4-429672129b66": {"node_ids": ["0138bafc-86bd-49b8-b8e3-29186b6d4014"], "metadata": {"page_label": "102", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5a83924d-7d0a-4448-af4d-f86dff8e5f11": {"node_ids": ["b53a8db5-0203-4986-ac2e-d4cc44db2cbe"], "metadata": {"page_label": "103", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c7386cb8-6dbb-44e6-bb49-c26db4f4816d": {"node_ids": ["048c6997-964b-4b66-83e3-b8a7290b6a3c"], "metadata": {"page_label": "104", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6f1c6249-4061-490d-b196-3bd5882223b6": {"node_ids": ["db164c0f-7a2a-4e17-a1d5-d83a469994a2"], "metadata": {"page_label": "105", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b7049e14-f128-4c3b-bd23-12891487a547": {"node_ids": ["3c63a324-7b28-47d3-a0dc-912ec2677119"], "metadata": {"page_label": "106", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "58cd8407-99eb-444d-ad58-c1305be12e0d": {"node_ids": ["073fd465-b334-40c1-8cb9-2aaf39be136f"], "metadata": {"page_label": "107", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "79589276-87b2-43b5-8d31-5b23582cc573": {"node_ids": ["82cd9fe8-c2b0-46b2-8ce8-b413259a49fd"], "metadata": {"page_label": "108", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b9ac9b14-d0a0-4951-97ff-a5ddf3cc0616": {"node_ids": ["c4faff0e-718e-4798-a4ad-2adf3c4b2fe5"], "metadata": {"page_label": "109", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "89e4cd78-3995-4145-b39a-228330a023c5": {"node_ids": ["a889abfb-a530-416b-b650-13842f919275"], "metadata": {"page_label": "110", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "217e9b6c-cf1d-4f8b-a560-819bebee2df9": {"node_ids": ["69ee6c80-194a-4f26-a3c4-c86651b84035"], "metadata": {"page_label": "111", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b6afd8bf-b9ca-4f4f-a2d1-fc34290cb157": {"node_ids": ["e5fb37d8-71f0-4897-8511-1f8b922cd20f"], "metadata": {"page_label": "112", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2adf6d9a-21fe-4d05-8103-02f3f4fd65e8": {"node_ids": ["dd2f7117-74fc-4ea9-9031-6ade7d746d53"], "metadata": {"page_label": "113", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7e9a631a-2bc4-4fa0-b970-6cb3e8611fcd": {"node_ids": ["202bfb89-adc1-49c8-a440-454097f35b5c"], "metadata": {"page_label": "114", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "431e80fa-41f0-46e0-9d9b-b0cc8a551426": {"node_ids": ["275a12f1-4722-41e5-a1f1-2cab3d808e99"], "metadata": {"page_label": "115", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "67e79bcd-c546-4bc1-9048-81765b455dad": {"node_ids": ["2fd077dc-490e-4261-bfda-30c9c3364fcc"], "metadata": {"page_label": "116", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1b1860f2-ef2c-46c3-8e2f-48a2c65b2e6b": {"node_ids": ["000097a2-f78e-477f-a06d-e69e6fa54e1b"], "metadata": {"page_label": "117", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2a54db99-6b15-4df9-a2b7-034618c88018": {"node_ids": ["f0b978d2-6900-4891-a257-00dc7b348cd5"], "metadata": {"page_label": "118", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f37144aa-3ced-4359-8cc6-6a64e0806b27": {"node_ids": ["c5e06154-07e1-4ac1-8d23-ae3e66d2c3ef"], "metadata": {"page_label": "119", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0ad85d98-0f5d-4a6f-bde4-40141f7631f8": {"node_ids": ["d53380bf-ef41-4f1c-b3d4-d70aaa5988cd"], "metadata": {"page_label": "120", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b960caa5-a7f1-4a76-a7a3-853f79ca0efa": {"node_ids": ["fb37d5b1-609e-4d15-a627-fce46fe36361"], "metadata": {"page_label": "121", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dd38be3f-4f6b-41a1-9d43-0c3129b258e5": {"node_ids": ["df963388-2959-4735-b6ea-24af02db438d"], "metadata": {"page_label": "122", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4a6c22e2-4b66-47fb-83b3-0b639c166f57": {"node_ids": ["c34398f7-258b-472f-9ae9-4c5c0a6e26a2"], "metadata": {"page_label": "123", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2ec86096-ee3f-4003-ba4e-e86569859412": {"node_ids": ["96bfb559-5459-4fc2-a575-0423e3e1b06b"], "metadata": {"page_label": "124", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "14e56610-9479-44f7-a240-6e4e823d8726": {"node_ids": ["a1cf8f03-5d48-4ff7-acea-5954d5ffba58"], "metadata": {"page_label": "125", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4ea10a54-a0fc-4c84-8243-a9fca6af0ac1": {"node_ids": ["7b3cebce-c75e-4f95-b39e-46724b2d30fa"], "metadata": {"page_label": "126", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "27911c6d-42dd-4c7c-985b-6eea07ab82e7": {"node_ids": ["649d1fed-593d-49c4-82ce-68f11218e5f5"], "metadata": {"page_label": "127", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "026253c5-92e8-4236-9e23-5b46842bb608": {"node_ids": ["7162eac3-6d6a-4760-a397-0bbfb9213d41"], "metadata": {"page_label": "128", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6df83b9c-39fc-4f5a-9d24-699b883d9943": {"node_ids": ["b921209e-0e6d-47c3-9c47-9102dd061774"], "metadata": {"page_label": "129", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "95a0c38c-6d33-4a41-964b-2c3fd70da37d": {"node_ids": ["37e19d7d-1cdb-4584-b1a1-300839ecb6bc"], "metadata": {"page_label": "130", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "169306d0-9f5f-486b-91f1-182f7df1fc76": {"node_ids": ["6e774807-4b4d-48cc-a0ea-c332d2326cd2"], "metadata": {"page_label": "131", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2b6c2aa3-2db3-4dca-9e56-1d803f414ea4": {"node_ids": ["268f11ef-7207-4cb3-b407-e79a6862b6a0"], "metadata": {"page_label": "132", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "81a15016-a368-4998-9127-894dcbacf33d": {"node_ids": ["ba093aac-f002-4be3-8167-12465d426fef"], "metadata": {"page_label": "133", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "203f4ced-483b-4e62-ba43-90d1992ef1a2": {"node_ids": ["bd700137-7b24-4ead-91fa-1ca1459a7a85"], "metadata": {"page_label": "134", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "84ff9427-ab7b-4ed8-9aae-d20f2c00f3fd": {"node_ids": ["9074bd00-9782-43bd-b463-fdb6b9933533"], "metadata": {"page_label": "135", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b6c11e9d-e0c1-4c19-8467-e54fe7e561ed": {"node_ids": ["0bdc71bb-fbf7-4142-946b-335f81ec0836"], "metadata": {"page_label": "136", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "020cfe55-eeb0-45b0-811e-aba74eb2f3d4": {"node_ids": ["801ed341-366c-42f3-a6a7-07bcfc0e41b3"], "metadata": {"page_label": "137", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b2c71f0e-fd46-4a5d-900f-90aef7e5987b": {"node_ids": ["4d729166-e05e-4032-80ea-7e9157ec35e3"], "metadata": {"page_label": "138", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "089352ee-6054-4ce9-8d5c-37044a4725c6": {"node_ids": ["514f47d7-a57e-4f44-885c-b7a63366d1ed"], "metadata": {"page_label": "139", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8b18a1c4-ad18-4ab1-bcaa-1451991fbc7f": {"node_ids": ["2a998c05-b606-4ea7-8f22-f4644070d05c"], "metadata": {"page_label": "140", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1fdae6da-b05a-4f08-a347-7ce75d6f2988": {"node_ids": ["5a0b32f5-abfe-435f-b355-481f27fc236c"], "metadata": {"page_label": "141", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a24561b3-e15a-4ef3-b834-2b25083d49ed": {"node_ids": ["f1e5295f-4155-40b0-838b-560af26cca9b"], "metadata": {"page_label": "142", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6473d621-09a3-4d8d-bff9-de7644800416": {"node_ids": ["4670bc3e-5311-4ddd-86a6-bade97b222ca"], "metadata": {"page_label": "143", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "079146f7-2d47-412f-afcd-c31f1434e6c8": {"node_ids": ["a7a4ef0d-7108-4f2d-8be4-2b35a68e6866"], "metadata": {"page_label": "144", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9c7c7663-3233-4041-b833-566fb60891ed": {"node_ids": ["d9cf65ad-90ed-40de-a5bd-3056fa45143d"], "metadata": {"page_label": "145", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "03b3f4d0-afc1-4077-9cdb-d4f7046c5ac1": {"node_ids": ["260bc70f-b845-4614-a081-4ac3f508fde2"], "metadata": {"page_label": "146", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "973c7b0e-dc4c-4273-b9e1-6daed962c57c": {"node_ids": ["bda002b0-8b94-45da-b3fe-ef866b13a265"], "metadata": {"page_label": "147", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fa0557bd-72f2-45d3-ab41-2f50f76cb627": {"node_ids": ["5ded86d2-8b33-4c2b-957f-f2e10c221caf"], "metadata": {"page_label": "148", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f7db59a5-11a8-46e0-b89b-7e2029544ef0": {"node_ids": ["4777b330-c7a4-4403-bba8-5cc87f00e80d"], "metadata": {"page_label": "149", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "16c69326-909f-4d43-bb66-8aaa483f8b20": {"node_ids": ["7657b98c-62b9-43bb-b74c-2fab974fd059"], "metadata": {"page_label": "150", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "aa5a35f6-0013-48e1-9714-5e1d15e28982": {"node_ids": ["eb7f4556-04fe-4f0c-a590-408c5a9a9dc1"], "metadata": {"page_label": "151", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "55ac7574-7e8c-43c6-b92f-b5956a1d3e27": {"node_ids": ["0d7f7547-5de5-4f1c-9edc-ca99487ca5d2"], "metadata": {"page_label": "152", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "50ab5b4d-84a7-45e5-af65-ea768a436253": {"node_ids": ["20d8d808-9d08-4864-aca2-8f15fd83e0f3"], "metadata": {"page_label": "153", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c1aafa4c-2a42-49f2-9169-5bc9e5cff21f": {"node_ids": ["09820be6-c6a8-4b19-a516-b9f07632756c"], "metadata": {"page_label": "154", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dfd769f4-bf33-44fc-ac63-6d96f285f20e": {"node_ids": ["b8175948-b8e0-4453-9072-76121f9008fa"], "metadata": {"page_label": "155", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6787978f-f1c8-42dd-9b8b-53cc35e8fe4a": {"node_ids": ["7092f885-dafa-4289-b6dd-c4d585b90d21"], "metadata": {"page_label": "156", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "29f6b9b5-d5dd-4e33-bb2c-2ed675045b8f": {"node_ids": ["5f9dd6eb-e7df-44da-a032-03c5a0f639a9"], "metadata": {"page_label": "157", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "15b86020-9877-43ad-b3a6-fa925ee4ff59": {"node_ids": ["0192b39b-5a03-4770-baa4-35859742cf65"], "metadata": {"page_label": "158", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c4cc31b0-3f53-4465-b23a-ea6393447f6f": {"node_ids": ["4b71213a-4fb0-4127-9dc9-ea5d54313630"], "metadata": {"page_label": "159", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9784b06e-5e3d-4421-bb88-37a9122851a6": {"node_ids": ["9f731183-7f17-4eca-a8b6-7aae2c057606"], "metadata": {"page_label": "160", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0075b5ce-9a5a-47ea-acb4-ff9c4f7bbbf3": {"node_ids": ["d8681693-c20b-4e20-b59d-4f20d41eca90"], "metadata": {"page_label": "161", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0d7040fd-03cc-4605-b0e5-e78bc84766d9": {"node_ids": ["27e028b1-5519-458f-8e14-10176c46ac64"], "metadata": {"page_label": "162", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7ea93022-b9a9-478b-9649-12bdcd0c7afd": {"node_ids": ["79eed254-9b84-4778-8288-42dd1bf7cd22"], "metadata": {"page_label": "163", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5b20ac86-916d-45ac-8c95-ff0101369cd7": {"node_ids": ["447e7423-3fd2-401f-912a-0f13c1379d56"], "metadata": {"page_label": "164", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1c17c0e7-f9c2-4ed4-9cb6-40bcaa5d13e7": {"node_ids": ["66c20a2f-5924-4ea3-bd7e-3a56b883240c"], "metadata": {"page_label": "165", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "12cc785f-8d99-4437-a08a-fabdba957e3e": {"node_ids": ["d8d052b9-7c49-4d0b-8206-fbc46817737b"], "metadata": {"page_label": "166", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "eb4961dd-98d0-4ad9-89f6-b8f3a0db486e": {"node_ids": ["dd3c060a-6a7e-425a-961c-afd9c3747583"], "metadata": {"page_label": "167", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b0dc8cad-be8a-45c4-9fe7-187dfe4ef9c2": {"node_ids": ["4510124c-ade8-4990-812a-1b345d19b51c"], "metadata": {"page_label": "168", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "059ffbea-c96a-4830-8bfd-77208657d06a": {"node_ids": ["e7ca50aa-f039-46c6-ae0b-7e9d1743b743"], "metadata": {"page_label": "169", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9159eb97-cc7d-48b5-8101-6e0d8f87a1ef": {"node_ids": ["831f18df-95a8-491d-bcea-fa601a16a183"], "metadata": {"page_label": "170", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8c343aec-c413-457a-bb2c-7ad70ccc06ba": {"node_ids": ["505a01e6-8fdb-460d-ad57-d9709e0a9e9f"], "metadata": {"page_label": "171", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3f1e7b27-ae54-48b0-a038-2dd0a416090b": {"node_ids": ["017a0281-3012-418b-abb2-6afe0bf46d51"], "metadata": {"page_label": "172", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "85ccbd40-cf03-45ab-ba64-813655718169": {"node_ids": ["a77b3169-a71d-4e72-9562-9522deec09fd"], "metadata": {"page_label": "173", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "712d70c9-a0f1-43dd-95ec-15ed3e91af7b": {"node_ids": ["48746ae0-5eca-4e35-bec5-cc7e27ad7013"], "metadata": {"page_label": "174", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6fa49445-43b1-46aa-b7b5-765f1f6127e1": {"node_ids": ["6f4eee60-d904-4d0e-ba4a-44b39acc290a"], "metadata": {"page_label": "175", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7cd045b0-7bd2-464e-8581-649c62634755": {"node_ids": ["4401a8a7-0aaa-4412-9e75-b608820a22ea"], "metadata": {"page_label": "176", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "061b00a4-ffa3-4457-8699-455df15ac8a9": {"node_ids": ["e1939983-40d1-468c-971d-cbde5a91e1d1"], "metadata": {"page_label": "177", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "10b048c2-392d-471f-87ac-df42a5eeb32b": {"node_ids": ["7617176a-b065-4f9d-b567-ca875b51d5e9"], "metadata": {"page_label": "178", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0ebe6a7c-60d5-4217-bce1-5417cffd9ed0": {"node_ids": ["72949651-b2a2-4688-b1b6-0c7060b2024c"], "metadata": {"page_label": "179", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "94b6e2b5-b6cd-4077-a5fc-179f1ed63f0e": {"node_ids": ["ff5ef41e-b0aa-4137-a51a-2d163ca29772"], "metadata": {"page_label": "180", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6c8cea40-fe56-46a0-873f-308b8ba08bca": {"node_ids": ["db297ea0-abe3-4944-ae9f-7cdacb78f0cc"], "metadata": {"page_label": "181", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "46fe67e1-4cfc-431c-92a1-72b63a81c31a": {"node_ids": ["71df8bd9-7c44-486f-a9c2-527c98a657b3"], "metadata": {"page_label": "182", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0ee9d65c-b0b4-4f68-833f-9768807ceff3": {"node_ids": ["0d76b353-b631-42a2-9ec6-269a1efb9947"], "metadata": {"page_label": "183", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "72d9b5b2-2c2f-4274-9936-50799d67c548": {"node_ids": ["dfd4aab0-2794-43d9-99b7-f7d5c6340fa7"], "metadata": {"page_label": "184", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4bf2f4ca-f81e-4723-8fa2-6a4f7fbd06b8": {"node_ids": ["f1504f86-38eb-4f9b-b85b-23746d04fca3"], "metadata": {"page_label": "185", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d652bf09-54b0-4168-acc7-f150bfd03c93": {"node_ids": ["b2364f45-292f-459d-880c-a8854fe1df6b"], "metadata": {"page_label": "186", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b72b372f-9d68-48c3-980c-12136c316df3": {"node_ids": ["19e42cf9-6898-4f39-a9b2-b008220c12e5"], "metadata": {"page_label": "187", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7c5e91c0-9fe8-482a-a482-8bbc3dfbb485": {"node_ids": ["c5514212-3dd8-435e-b03b-b3416f86d891"], "metadata": {"page_label": "188", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "42266558-3359-4a22-b4bf-24f94cc9c2b8": {"node_ids": ["6431af44-2d52-454b-862f-a66b73f777c5"], "metadata": {"page_label": "189", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d88a53fd-eeff-47d9-97bc-6c9a977e8f4b": {"node_ids": ["51cf8cea-7247-4877-b8d6-50f9e4a8d72c"], "metadata": {"page_label": "190", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "75caf562-7a06-406b-8eb7-74c648fcc5ed": {"node_ids": ["028e2fe8-f139-4c5d-9ae7-bedf9ac34dd1"], "metadata": {"page_label": "191", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "68dbcd2c-8984-465d-b58d-67665b72d84a": {"node_ids": ["892f2d77-57f7-42e4-bc66-d574863f844d"], "metadata": {"page_label": "192", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ac117449-6a55-41ee-987f-4d3f8d38b010": {"node_ids": ["6cc277ef-5fd9-4f4f-acb3-00ea06174cbb"], "metadata": {"page_label": "193", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "04c82f54-7421-40d9-866a-b02704549018": {"node_ids": ["0f6442e0-8cf9-4e85-bc5a-6007fb3198d2"], "metadata": {"page_label": "194", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b8306ce8-0170-402f-aa7c-d99f02c0837e": {"node_ids": ["b832a1fe-bfc0-4a8e-b8c4-eb9c27414e47"], "metadata": {"page_label": "195", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9c04a849-eec0-480d-92f3-18c5277771e7": {"node_ids": ["f6628eee-f20c-4796-b5f9-f9005c94ca8b"], "metadata": {"page_label": "196", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6151c1dc-5d49-469a-ad8b-aa401cd8d228": {"node_ids": ["784d04d5-0e3f-4062-b199-63bdd111897a"], "metadata": {"page_label": "197", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c250d60a-7527-402b-a0e2-e07afec7298a": {"node_ids": ["5f78308a-e70c-4a76-8ea0-c6c43e7ee2ea"], "metadata": {"page_label": "198", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f374b933-4e08-4923-9145-0cdbccd4af0c": {"node_ids": ["83af94e3-88cb-4280-ba73-c46ff92aac5e"], "metadata": {"page_label": "199", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "59d14189-8322-4925-a478-7fb3fb6d927b": {"node_ids": ["557214f6-3c67-44b7-ae4f-75d68890d7e6"], "metadata": {"page_label": "200", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dc333974-748e-45e3-a3fe-ba03af452aea": {"node_ids": ["188a216e-f55e-4abd-bb69-f975ab8b8ce1"], "metadata": {"page_label": "201", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fac16ab3-d7d7-4f5b-9484-235a70ebb130": {"node_ids": ["a1a58655-0693-400d-b0b9-c342b5d05ed7"], "metadata": {"page_label": "202", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "151f3eef-958f-4743-aff5-05e2f0f20d79": {"node_ids": ["a71c3d6d-1dfb-4597-b769-9829a09d9a03"], "metadata": {"page_label": "203", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "89fcabb5-793e-46a1-b481-129d4dff7a04": {"node_ids": ["77531a1b-ca07-4199-891e-6aa6d43d4dc3"], "metadata": {"page_label": "204", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8b877567-5c89-4689-b9b8-fc09ee9a473f": {"node_ids": ["1b18e343-ebe3-4f9d-a1e9-43d4810ee847"], "metadata": {"page_label": "205", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d6b778f2-9cac-4e54-8769-4a7e14931a9f": {"node_ids": ["064315f7-858a-4e4e-9a77-5496964023ef"], "metadata": {"page_label": "206", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "590cf0b8-2bbb-4179-8f8c-5be02e6c1bac": {"node_ids": ["828244ea-eb66-4dc0-83e2-e3c8004be622"], "metadata": {"page_label": "207", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4dea44e2-8c5d-450e-ad71-9385d8654579": {"node_ids": ["b4cb8cca-8535-4c73-8661-88f2bf69d32e"], "metadata": {"page_label": "208", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8d24c5e3-1c57-491a-83a3-5500c239d127": {"node_ids": ["85a8daae-c764-414c-9eea-bbd4a1908daf"], "metadata": {"page_label": "209", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9d6975c4-2c9c-40c4-97fe-9cbb5fd93189": {"node_ids": ["cd029b98-121b-4a08-925a-a8401e76e932"], "metadata": {"page_label": "210", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1ff6b1fc-7851-4e55-8c39-8c7f9f713672": {"node_ids": ["3293d309-7440-41c1-b8f6-e0f98ee38668"], "metadata": {"page_label": "211", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c035b569-264e-4d85-a576-42dd44888603": {"node_ids": ["c65abf1e-add3-47dd-9e2e-df4eeb658ba5"], "metadata": {"page_label": "212", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fcdb71fc-e429-4122-b8bf-0f48921c6a9d": {"node_ids": ["eb4b3c98-0b28-474a-82bb-f1d976eacdd6"], "metadata": {"page_label": "213", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6bfb181c-0675-4fa0-83f2-fae9ed92e2d5": {"node_ids": ["dcd16a53-ddc0-4ab7-8988-3e757e880e16"], "metadata": {"page_label": "214", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "725d07b5-6c10-45ce-bafa-f2b6b0fe95db": {"node_ids": ["56ea8f15-286f-4f3e-adb1-c2916d779e95"], "metadata": {"page_label": "215", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0d7f683a-9add-4e37-8d16-20d973a73323": {"node_ids": ["c004e261-166c-4db3-8d04-2af40c2ddefe"], "metadata": {"page_label": "216", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "94c00d46-45c8-464f-a552-ce428faeb428": {"node_ids": ["8cf43880-ef05-4582-b4d3-6e3a0c7e8d99"], "metadata": {"page_label": "217", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0edce43c-f25e-46ad-b947-500e558cff3f": {"node_ids": ["2a60fb68-6d27-420c-ad82-48ccb79ce2e4"], "metadata": {"page_label": "218", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6e6b14a2-90e4-4940-98b4-596a9d88a99e": {"node_ids": ["290d33ab-8b9a-43f0-b777-94036015806d"], "metadata": {"page_label": "219", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9a5c2749-e80b-4262-81ee-c90b27d89962": {"node_ids": ["99c65693-3217-4061-90ea-4f8274a8a9a9"], "metadata": {"page_label": "220", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3699394e-f649-485a-aea2-23d9178111bd": {"node_ids": ["7a8621a9-133b-4f98-9e6d-6437bc57dce1"], "metadata": {"page_label": "221", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "60da03a4-8b8e-4710-a2d8-e7828099eaa2": {"node_ids": ["ccacd512-85cf-4744-9bc8-dea68a2806d9"], "metadata": {"page_label": "222", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a5ea4df0-77f3-48ed-b2cd-cb019fb4776f": {"node_ids": ["ef3ef829-0812-4c2c-83a2-66c01ed728df"], "metadata": {"page_label": "223", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ab201668-0b22-4535-bba9-493b14c2ec79": {"node_ids": ["e769950a-3bae-42d9-9b74-b0bc291b7d9f"], "metadata": {"page_label": "224", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8bd236e0-d988-4f98-9ad4-4b8d14fe5028": {"node_ids": ["c287949f-69d2-42aa-ba9c-8759a892c40c"], "metadata": {"page_label": "225", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d9ee804f-a43f-4858-acb0-6b693df0d7e3": {"node_ids": ["1db12a5c-a2a9-4871-981f-95ac36785931"], "metadata": {"page_label": "226", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1812fb5b-940d-40a9-beb9-465156958cac": {"node_ids": ["2a9f1bdd-e4ec-4f55-9c0f-c0ea8cc04276"], "metadata": {"page_label": "227", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4b9b8a77-62dd-42d5-9208-9b61ce0bf82e": {"node_ids": ["c9cd5052-67dc-4050-8a78-6e82240c7068"], "metadata": {"page_label": "228", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e948e854-81c2-4be1-aade-a68e49b55938": {"node_ids": ["1e5a4381-abac-4095-92d2-c06a37efa3ff"], "metadata": {"page_label": "229", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8cdcfcfe-f236-44cb-9507-76694093fbf6": {"node_ids": ["585edf3a-564d-470d-a0a2-577777b7c1bc"], "metadata": {"page_label": "230", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "05fde8a2-2ba9-4273-8832-1dffbfcbd4a1": {"node_ids": ["3833446b-9e09-4911-8390-0640bd076711"], "metadata": {"page_label": "231", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "48244bbc-a431-4c33-a0dc-07ec696c4d44": {"node_ids": ["81d3c446-c26c-45bf-8319-1ce9c92ece9c"], "metadata": {"page_label": "232", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5ee52932-00f2-4506-b7c7-250cbf369516": {"node_ids": ["7bb7d2da-0a1d-40b4-9e7f-8dd8d5d78b33"], "metadata": {"page_label": "233", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a1d6aa73-65c7-4326-8147-89355bee576d": {"node_ids": ["40393242-d545-45da-ad1f-ddfcb9c2cddd"], "metadata": {"page_label": "234", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ea7b3275-e693-4ab8-b090-acafbbf46373": {"node_ids": ["092dcc83-ef05-4f65-844a-acaf24982c68"], "metadata": {"page_label": "235", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "80822233-0518-45c7-b001-19a22bb6406b": {"node_ids": ["d812f79f-7233-478b-aabb-f1c48ab2136d"], "metadata": {"page_label": "236", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ea35621d-23cc-457f-8de9-25f17e812f65": {"node_ids": ["e31474fd-9e1a-48a1-bcb7-59ae559085a3"], "metadata": {"page_label": "237", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "17d7c8d2-b773-47f6-a60d-368236c917ad": {"node_ids": ["48221c4e-2ad0-4364-b6c3-ce8b0e78eb8f"], "metadata": {"page_label": "238", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cc178ceb-c948-4d25-ac3a-626e05114aa0": {"node_ids": ["71b11b5c-fed5-43c4-b2aa-013f0f279618"], "metadata": {"page_label": "239", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "699dbb98-b401-44f1-a71a-fe3b2ef159f3": {"node_ids": ["06ced18b-c148-4eee-81b2-c86562e03bee"], "metadata": {"page_label": "240", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "aeab86c6-0a5b-4f70-b34c-3291edfe367b": {"node_ids": ["48a4f441-501b-45eb-8507-04f4727c954d"], "metadata": {"page_label": "241", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d7443e9f-451d-4b58-a2b4-c376be3e8574": {"node_ids": ["6c11dd03-68e1-44f8-bdcc-404c96572409"], "metadata": {"page_label": "242", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1ad65550-6cfc-4a40-a1cd-9045e9dcd038": {"node_ids": ["e533ad31-7acd-4411-9bb6-7e1dfd787587"], "metadata": {"page_label": "243", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4efd8eab-cd62-490d-9d0e-19ba35515141": {"node_ids": ["420180e7-13d5-401a-9ba3-897947dae4e1"], "metadata": {"page_label": "244", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a9852f67-533f-49e0-bcd1-7b3cc7585035": {"node_ids": ["ca798708-f394-4224-84ce-1dc66468c27e"], "metadata": {"page_label": "245", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "da997f14-6c82-455f-a84f-4efb0ffa99db": {"node_ids": ["7407c660-5c7d-4da0-9d02-85151621a71c"], "metadata": {"page_label": "246", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "89386a21-f946-4d07-ab33-ecceb0191b6f": {"node_ids": ["728a7316-560e-4109-8c82-7638f6fd23fd"], "metadata": {"page_label": "247", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5f5f442a-7fb4-45b0-8cb8-d741810c39b2": {"node_ids": ["169f8602-a3cf-42b6-b924-e60602760e53"], "metadata": {"page_label": "248", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "79fe9496-a783-4294-af5c-94b27ca15f09": {"node_ids": ["82488ec8-0aea-42c8-8719-9f5a470d900a"], "metadata": {"page_label": "249", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "92e19db1-018a-4f48-bba8-4f1d42746bd7": {"node_ids": ["4cb273ff-ea6c-4ae8-a899-a6ff6d6faf29"], "metadata": {"page_label": "250", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8c37c6e0-3ac1-4650-8fab-02951c10e263": {"node_ids": ["ff5c1c63-3e05-4f8f-a2ec-7b62be126859"], "metadata": {"page_label": "251", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "be799452-a967-46df-94b0-71d51e1286f5": {"node_ids": ["bfc64b5a-fa02-4c75-87b1-9c1801a63932"], "metadata": {"page_label": "252", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "83418a70-5bf7-4c19-930d-3570a4697309": {"node_ids": ["81f23d68-8b2b-423f-b210-e542e90c2b53"], "metadata": {"page_label": "253", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "beac1bea-406c-4c7f-815a-3735a68616a9": {"node_ids": ["b7ab3bf4-cf8c-4110-956c-c06fea3bae28"], "metadata": {"page_label": "254", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e7a1f254-12f3-477d-af9e-a8593c39c2fa": {"node_ids": ["88ff0a84-9d16-4313-8a73-c2eb3bdd6194"], "metadata": {"page_label": "255", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1dc91297-ec58-4838-a75e-c21c21111611": {"node_ids": ["36b10369-154b-4add-8446-fd72aa1083b2"], "metadata": {"page_label": "256", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "97bda116-7396-4550-8359-ea1802ffc5a7": {"node_ids": ["eed5d8e9-8409-49eb-ad17-f26a4c6a1f2b"], "metadata": {"page_label": "257", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "19b3556d-4ff1-4500-ab89-5c8632ab7092": {"node_ids": ["036fd58b-ec6b-4534-b319-124ee5dddd10"], "metadata": {"page_label": "258", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "70b9571d-5c96-42a8-9b65-599824e8f775": {"node_ids": ["8d705e72-4ce1-4b43-b41b-40702bf09b76"], "metadata": {"page_label": "259", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b450ead9-0cbe-4a61-921a-73378d4cd43c": {"node_ids": ["45e4146f-18ef-461b-a501-3e053c8b581f"], "metadata": {"page_label": "260", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "06729507-af8a-44b5-9f23-d696c42592b5": {"node_ids": ["0d7f99e4-1176-4387-82d9-97bc2470b3af"], "metadata": {"page_label": "261", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "59a4189a-3f84-4d4f-b7d3-6c06db28fd5d": {"node_ids": ["20de5b2e-8399-4b80-93f5-48a9be0742d5"], "metadata": {"page_label": "262", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d018b609-2554-43b9-bcac-9178fecb09de": {"node_ids": ["62e222a3-9b0f-43e3-97f2-d67e7085bdd7"], "metadata": {"page_label": "263", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f7796632-84fb-48ed-8272-d09a7a2e44aa": {"node_ids": ["68be80fe-7795-48e5-b24c-e9c5d4411703"], "metadata": {"page_label": "264", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b3fdfb2a-7707-4bf6-a3bf-23e54125f144": {"node_ids": ["9131e90d-ed2a-4a53-b354-427573b4564d"], "metadata": {"page_label": "265", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "be31afa2-5229-4470-aa1c-f23dec0b8329": {"node_ids": ["e94045be-3891-4875-8055-05d5f7903888"], "metadata": {"page_label": "266", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "92181ebc-7264-4239-92ef-79d26ac19ef3": {"node_ids": ["9e3294ed-0d00-4a4c-8b34-32ce04f3654f"], "metadata": {"page_label": "267", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b9ac76e2-0038-420c-ab71-76f78ece83a1": {"node_ids": ["5c55ad9c-8c12-4612-b9d1-25519cf83216"], "metadata": {"page_label": "268", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9ce2d099-0969-4a0c-9491-7a3167c3b030": {"node_ids": ["751cd6ef-a0cf-40e9-b6bf-217694de42d3"], "metadata": {"page_label": "269", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8c71c287-f5e4-48bb-a4b9-6548fceeb686": {"node_ids": ["6e7367d8-2a93-4de7-8954-2bb26d52b7d7"], "metadata": {"page_label": "270", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "939d140b-0359-4a80-9c0e-e55bc9db3012": {"node_ids": ["75689323-40c1-4ad3-b814-fdc98e62e556"], "metadata": {"page_label": "271", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b055d66d-cb4c-4c3a-8d15-77909313226d": {"node_ids": ["17556462-068a-4ff1-ac7d-9fc28345f3d7"], "metadata": {"page_label": "272", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ef6aa67b-51ab-4d8e-82b7-6120a33b6d9d": {"node_ids": ["6ff89e2c-c8b3-4631-9f89-6cdfe7c8ef76"], "metadata": {"page_label": "273", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d234a2e9-7dd4-423d-a749-e2566192e5c7": {"node_ids": ["e8c455a4-9214-4c02-860f-56434d2e8fb1"], "metadata": {"page_label": "274", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8f226e51-35fd-48b8-a40a-25dcb683002a": {"node_ids": ["55a13b34-881b-43f1-ab5d-39c04fc12fa3"], "metadata": {"page_label": "275", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "bd92367b-bea8-4629-9aa8-a245b2ff9b05": {"node_ids": ["5679fbb6-d4b4-4d94-ab46-c93ad6874bde"], "metadata": {"page_label": "276", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "28ea65f0-6e06-4ada-af97-c6a54e77da60": {"node_ids": ["c7ba12e3-236b-48e9-9c7b-cadb3bd2fc3d"], "metadata": {"page_label": "277", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "48c54cdd-2a86-4027-8a95-48647167686e": {"node_ids": ["c2a4734c-8b93-4b7e-a14c-afada0f3c500"], "metadata": {"page_label": "278", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "643e8a11-b1e2-47db-90fd-013db834636d": {"node_ids": ["bf66fa54-345d-41b2-a410-2e66876bb33d"], "metadata": {"page_label": "279", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2cae1645-86ad-4caf-a08b-173f3dcb99ca": {"node_ids": ["271ae6f8-910e-4032-b4fa-56e46c915f30"], "metadata": {"page_label": "280", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7a16b931-3a53-43ad-8dbc-22b93775985a": {"node_ids": ["c85a71ab-3877-4d99-acfa-275d16ca1788"], "metadata": {"page_label": "281", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1a2edc2c-d598-43ef-89a4-52780d1e55b6": {"node_ids": ["b00043f1-a64d-4ba0-be98-793f31426791"], "metadata": {"page_label": "282", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2830745b-dfd0-41f0-a068-df96014859a2": {"node_ids": ["fd4398fa-2696-4dc2-a121-6c7ab7dd1656"], "metadata": {"page_label": "283", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4a5af62f-370f-4a0e-9ad2-38ae4d579002": {"node_ids": ["c4382c28-9575-43ed-bff3-85ca693e7e42"], "metadata": {"page_label": "284", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "53228526-9a9b-4e69-953e-877ba8f92197": {"node_ids": ["e951ea1c-7897-46d3-8227-2421fe3bb671"], "metadata": {"page_label": "285", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2e0f4f6f-d700-4410-9cda-4f2b6e933431": {"node_ids": ["776cc980-2c3f-474f-addd-a7d01357e4c9"], "metadata": {"page_label": "286", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e20e775c-595b-4b99-9e72-5c00cbde6831": {"node_ids": ["fd0c199b-8328-40c1-bbde-c2ea159d1477"], "metadata": {"page_label": "287", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "29a730c3-c612-4ab8-9376-93dc62a02b16": {"node_ids": ["1927d964-f691-4f1f-9ecd-db1d21de115a"], "metadata": {"page_label": "288", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e43e3eca-2c40-42e8-9303-83ad3fc3d57c": {"node_ids": ["097e916a-c630-43d0-ab4b-75a9a060275a"], "metadata": {"page_label": "289", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f6344791-e611-4c3e-9c02-f32fc2471201": {"node_ids": ["9d15c929-6435-4ec5-a1da-70cecfa8568b"], "metadata": {"page_label": "290", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4ccdbcfc-ed97-446d-97b1-8e0e134b6e5a": {"node_ids": ["bbdadf4a-6ac9-4323-a385-312ba3ca2ea1"], "metadata": {"page_label": "291", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9294e7f2-5c97-42af-9777-6e297f1166ce": {"node_ids": ["de8bcafd-a41a-4909-b091-88b8280f24a1"], "metadata": {"page_label": "292", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6ad8d495-7bed-49c8-9c61-e7cafb32d5e7": {"node_ids": ["13b89716-e3da-4e40-bfb3-ea17aa770fbe"], "metadata": {"page_label": "293", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a917301f-5b0b-4852-b44c-f9f10a3c0abd": {"node_ids": ["54000368-c24d-49a3-bdba-a8b023eb8bcd"], "metadata": {"page_label": "294", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "86ba5176-d208-4cf5-9b71-d01164598342": {"node_ids": ["a5640bf2-659c-4396-81b6-cb74d6587e99"], "metadata": {"page_label": "295", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d11f6155-a810-4285-99e2-35b49cfecaff": {"node_ids": ["138d7652-2705-47c2-add3-24d8a26d8e7a"], "metadata": {"page_label": "296", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9cd9d415-54ba-42f2-932e-ed5ce3abc806": {"node_ids": ["b964172d-ba26-4d4b-81ad-9d4b0dffcd79"], "metadata": {"page_label": "297", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e7407748-41e9-4fc7-81d9-a33d7fa159fe": {"node_ids": ["6b61ca75-aa21-43f8-9cf5-c795604df287"], "metadata": {"page_label": "298", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c68e3d7f-d87e-477e-b4e0-6d8b343df819": {"node_ids": ["86ae4a05-c444-44fe-8f13-aeff778b2ffb"], "metadata": {"page_label": "299", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dcc53ec0-55bc-4583-92ae-9effbdfd9cf8": {"node_ids": ["1cb6d61b-6a88-4243-b6ef-73894621dcdb"], "metadata": {"page_label": "300", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b05161e4-ffaf-48d9-8698-e92587c730dd": {"node_ids": ["aa480a05-09b2-4e24-be40-7fce4c27e6ed"], "metadata": {"page_label": "301", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e64f90f0-707d-4736-bb94-31c84170a58e": {"node_ids": ["8338cc79-18a3-4deb-b0a5-1b347cad5b89"], "metadata": {"page_label": "302", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3cb30127-fb39-4b12-850e-8400dd346fff": {"node_ids": ["0c4c52f8-5a79-4885-a223-867f9e5ca03e"], "metadata": {"page_label": "303", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fb01cb13-263b-4b9d-88b2-35435ebcdfa7": {"node_ids": ["2150910c-95d6-49d8-a9b5-57279512d9df"], "metadata": {"page_label": "304", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "694d0cfe-3170-4bc4-afd5-98f9290a15fe": {"node_ids": ["c46d50a6-416d-4789-bf64-5f0e49d849cc"], "metadata": {"page_label": "305", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9bf6445d-3ad4-4c10-9f55-264080c9663a": {"node_ids": ["feabdc27-fef5-447e-9c17-8416e08e8506"], "metadata": {"page_label": "306", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3f8470f0-98d7-4937-adb6-e97fd218e007": {"node_ids": ["74e1cd37-afe3-418a-9d6c-26959874dfa1"], "metadata": {"page_label": "307", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ef298f84-d704-471d-b77a-2bc3ff127838": {"node_ids": ["ffce446f-8365-4101-99e9-3bbc23436ccc"], "metadata": {"page_label": "308", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f826cc99-d876-4602-abbf-6fcdb1ee0a4d": {"node_ids": ["81b9625c-a7e9-40cf-ab50-aef2606d8788"], "metadata": {"page_label": "309", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "32675069-43d0-4244-a639-559f512a1471": {"node_ids": ["e103ae29-5f64-4ff8-a098-601a8162c74f"], "metadata": {"page_label": "310", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4d56f6d5-b8bb-42e7-9119-27c2c5840963": {"node_ids": ["d393d29f-5db5-40b3-b4f9-f55645a5794d"], "metadata": {"page_label": "311", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3206fdbc-0ce4-4e93-a242-7e031572d3ed": {"node_ids": ["fa5e4ada-0be8-4918-9017-43011be24329"], "metadata": {"page_label": "312", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1aab4aae-0cbc-42e1-b14e-bde25cdbae3d": {"node_ids": ["4e10de3e-0ff9-4de5-a007-c78c1efb85db"], "metadata": {"page_label": "313", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f46a3057-5df1-4aa1-8613-aebbee04da65": {"node_ids": ["aee719c0-f8e5-4d9f-b6fd-22631143b59d"], "metadata": {"page_label": "314", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7ce2085c-8f89-4f34-8b35-b1c11c0698eb": {"node_ids": ["9de05161-b2b4-408e-a862-b6011267e071"], "metadata": {"page_label": "315", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b0411985-37c7-40c3-b2b1-6f2cff2859b5": {"node_ids": ["10e3ff52-25bd-4d70-bfe1-f0116d03f5f5"], "metadata": {"page_label": "316", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1ebd2ec6-a3fc-4e15-a1f0-1d192b2a3b29": {"node_ids": ["9d7f0feb-e490-41aa-bfcc-cf99427440d9"], "metadata": {"page_label": "317", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4894b82c-9359-4d00-b7fc-c1c522101a93": {"node_ids": ["06fcbdef-eea1-467e-a101-777449925acd"], "metadata": {"page_label": "318", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d173d9ef-d7b7-4238-8130-1f33767ceea3": {"node_ids": ["bd6de242-7d63-4b36-85b6-9720e1661145"], "metadata": {"page_label": "319", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d43263ef-4507-404e-9321-3c59d5cfce92": {"node_ids": ["90da4471-3aab-4ccc-bca9-ca54464802bd"], "metadata": {"page_label": "320", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9e9b9338-a94f-4514-bdae-93e0cefa7f46": {"node_ids": ["6209ee86-f245-43b2-9a04-33bc1df83a73"], "metadata": {"page_label": "321", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7556c0f7-1e4d-4ef0-9d00-93e8174885e2": {"node_ids": ["9e82b347-af0b-41f9-a05f-6457592f7270"], "metadata": {"page_label": "322", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "88f1132c-bf2c-4b59-be88-208e0f876cb1": {"node_ids": ["3ad39f4a-63d7-4591-93c4-84577495e1e2"], "metadata": {"page_label": "323", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "19bcf5cc-013a-4a36-95de-9203d8f3f71b": {"node_ids": ["cea77430-f8ae-4d1c-8cd2-cb39802f5a9b"], "metadata": {"page_label": "324", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6325fc46-227c-4193-acd3-5f4ee3db427f": {"node_ids": ["ae6c6c74-3b15-4abb-b420-320331f4ae49"], "metadata": {"page_label": "325", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e80c9287-9e02-4043-987b-f7238695332a": {"node_ids": ["b498d79f-46c4-40d0-8267-8f19174e508d"], "metadata": {"page_label": "326", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d4d61893-1f34-4600-9600-5e57b33ac7fb": {"node_ids": ["0dff0d38-445e-4a02-9dcc-a3bcb1d82afe"], "metadata": {"page_label": "327", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "458c3adf-e45c-4ba8-89f5-8cb714651a6d": {"node_ids": ["0f8c09ce-8c66-44d6-997e-6a16c5f8e671"], "metadata": {"page_label": "328", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2544ebd1-50b4-44de-9048-fde57b39f27e": {"node_ids": ["643b99e5-b554-40ef-98c2-5a8f31e1a058"], "metadata": {"page_label": "329", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b1d88691-51a9-4ffd-804d-08eccc6654f0": {"node_ids": ["380c1fdc-513e-47c3-9a0f-5306dc212b7d"], "metadata": {"page_label": "330", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "06c3714d-02b0-4187-b166-79f980c0cc5d": {"node_ids": ["14d386c7-01e5-42eb-88cd-60ef80dda3cc"], "metadata": {"page_label": "331", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3a65740a-f294-4ee8-8fa2-61edfaec1b9b": {"node_ids": ["09c6d4e0-e810-4a82-8058-1562d9d32e1f"], "metadata": {"page_label": "332", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ad44bc5f-bede-40d0-a124-53538c24719a": {"node_ids": ["31da92b4-3236-418b-ab14-fb0f92b5c38b"], "metadata": {"page_label": "333", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b53f45d6-487a-46b2-a982-084a694bbc05": {"node_ids": ["817503aa-a9e4-4b71-9263-7b989e24abf1"], "metadata": {"page_label": "334", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b7ff2ff0-9cee-4134-b7b3-553d02bc8eff": {"node_ids": ["f593bb63-791a-49ad-a25e-a206606035cd"], "metadata": {"page_label": "335", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a6346c7f-715e-4aff-ab52-5095f44eadf3": {"node_ids": ["12750f03-d31c-4195-890a-f46fcfc52fcc"], "metadata": {"page_label": "336", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "10e528cb-e1ef-4589-b636-8ab6db0b2fa2": {"node_ids": ["c4cf2ab1-d729-49b4-b551-2115c039a358"], "metadata": {"page_label": "337", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2afe7630-9f35-4350-b06d-5b0c7dedceed": {"node_ids": ["c38f7aca-a1d1-4b9b-80fb-be6b152187ef"], "metadata": {"page_label": "338", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ebddd389-d00d-4d3f-a1df-133b1ca365f6": {"node_ids": ["82e3dbc1-317b-4945-be71-acc4f5d4f414"], "metadata": {"page_label": "339", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "37029450-9cf9-4b59-a53d-03073efcdc0f": {"node_ids": ["30fc79ae-8a35-40dd-9c76-cdad10f8dd02"], "metadata": {"page_label": "340", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "86e88310-d654-4de4-9639-7206f41cd392": {"node_ids": ["31d6e295-0e01-49d6-9eec-6e589cd0149b"], "metadata": {"page_label": "341", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b4fcdb6f-d363-4723-ba9d-fb86af272416": {"node_ids": ["8acbbe41-6dd3-441f-bcaf-326752a28c8c"], "metadata": {"page_label": "342", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "84fa0acb-733c-4dd6-a31d-ef520221af2b": {"node_ids": ["fa40d2e0-58d7-49a1-9fbf-15dbb5197830"], "metadata": {"page_label": "343", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e277b692-ffc3-4907-8051-27669adfe81d": {"node_ids": ["7e54f89a-9d69-4ea3-8ed7-e88c03256c9d"], "metadata": {"page_label": "344", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e736685e-c12a-4228-abd4-781781ee81c4": {"node_ids": ["f87cd4d6-bd45-463b-b143-a98afdc6b15c"], "metadata": {"page_label": "345", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "468c4424-db9a-4680-8bd7-cf779f75ac0a": {"node_ids": ["a88e983f-f45f-4714-89f1-fd7ed2fba780"], "metadata": {"page_label": "346", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e3ffd63d-69d2-4a83-9e5b-e69e67ab0d64": {"node_ids": ["e934064d-2bb0-45c8-85e3-60e15cca3fbb"], "metadata": {"page_label": "347", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e8c56e58-48b8-401c-9048-a38384860fb0": {"node_ids": ["111d23ef-169a-4438-8477-363c15ee0f6a"], "metadata": {"page_label": "348", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "87de75c1-8298-4de5-bbb0-19df43d376af": {"node_ids": ["307a3e75-e242-4ceb-a8d6-d9af608055ed"], "metadata": {"page_label": "349", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "436c473a-d4cb-4af8-ab36-ea05b01e2657": {"node_ids": ["3f07648f-0da7-4f57-88d3-1bd83af3a8da"], "metadata": {"page_label": "350", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "56d75f39-4020-43b5-8bcf-860a9aed42fd": {"node_ids": ["7942d18a-3762-4d72-9a44-b73125876f64"], "metadata": {"page_label": "351", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0c045498-f2d0-4fd6-9f06-ade4a1ad899a": {"node_ids": ["1a4be14e-44e1-457b-80f6-3864eb0a6742"], "metadata": {"page_label": "352", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ac99dbf0-0ad9-48ad-ba50-fc72b1e0c0bd": {"node_ids": ["3addccae-d68f-4a0d-8185-225fc9477a88"], "metadata": {"page_label": "353", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1d08869d-8e6e-4b2d-a67b-46294e326cd4": {"node_ids": ["38d7fb5a-2c39-4c30-8db9-0fe934b0fbb6"], "metadata": {"page_label": "354", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "26b72d64-ce08-46b2-b3b6-3c4217bbdb05": {"node_ids": ["12b7a5b1-b207-4e58-a522-ff74686c70d9"], "metadata": {"page_label": "355", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "130285dc-0bc9-498d-bc29-5f5afccaf16f": {"node_ids": ["024802cb-def9-45aa-b6a5-96e88441edc6"], "metadata": {"page_label": "356", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5a747d33-f30b-434a-a3aa-05985b1799d5": {"node_ids": ["74a4e749-1181-44f9-924f-9868e17f4e2a"], "metadata": {"page_label": "357", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4f7362a8-ae6c-4d72-8a7b-595020f0ad22": {"node_ids": ["8d294ada-bdc6-4925-b7a0-77ca374d1b39"], "metadata": {"page_label": "358", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7a376874-9478-4e48-9f75-a06c17a07f05": {"node_ids": ["01235999-7e4e-438b-89c4-8f095790be01"], "metadata": {"page_label": "359", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b6c0ba1f-d4d7-45d4-a645-70c79b5b8c6d": {"node_ids": ["4c5a5fed-3ff7-453a-9f95-9855920ac060"], "metadata": {"page_label": "360", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c32bcd9e-8f82-4dd2-b041-c5739a3832f7": {"node_ids": ["8d10159e-7f1c-4e30-be95-561d44649fa8"], "metadata": {"page_label": "361", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "628b1a3d-9748-46c9-b5a0-e9ce084ec7bb": {"node_ids": ["63374de0-66e3-41f4-96ca-9b5ffa822401"], "metadata": {"page_label": "362", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fec73a45-1ce5-4787-849b-0909dbfa447c": {"node_ids": ["7371e89c-7d64-444c-8067-821c60fdc33b"], "metadata": {"page_label": "363", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fe887ef0-9717-4e51-a898-1280560b7b11": {"node_ids": ["d6d2923c-c052-4c3e-97da-2ee2bc6cd84b"], "metadata": {"page_label": "364", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "db5903af-d9eb-4978-add5-3ce8cd5d9e61": {"node_ids": ["3d66b24a-dba2-4fff-91d8-e9cea78b94b5"], "metadata": {"page_label": "365", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "43406a28-4625-4d84-8e6a-c56d40a09bbf": {"node_ids": ["c3c5d9ca-b6ec-472f-a0b4-deee60155623"], "metadata": {"page_label": "366", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "301cf99c-8389-4622-a5b1-7c429527fba6": {"node_ids": ["d8152991-3253-437b-9e3f-f176d1ea97ea"], "metadata": {"page_label": "367", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d0934e0e-d408-4094-9f81-44ef5d4d72ce": {"node_ids": ["fa7db7c0-dc88-4a48-8e75-a823b98c33a2"], "metadata": {"page_label": "368", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cd632bb8-53ef-4e2f-a92c-cb0d98d2f51a": {"node_ids": ["b9e83dcd-c993-4c2f-8928-fa135c4d3042"], "metadata": {"page_label": "369", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e4ebb428-0646-4b50-857c-78128c8fec82": {"node_ids": ["a7f75ca4-09d6-436c-9e90-825c043d5fc9"], "metadata": {"page_label": "370", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "bff5035f-eee4-470b-9c5d-b6c63ea77821": {"node_ids": ["ead52f24-e1c3-4e1c-84a3-7da24bf12257"], "metadata": {"page_label": "371", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ac450977-ce13-4b69-b8ad-6fe968f24625": {"node_ids": ["ba40e518-c82e-4784-80ec-dc12d404a057"], "metadata": {"page_label": "372", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ff774a4c-532f-4ae2-a948-7d9027f5adb0": {"node_ids": ["f1d35efe-5abc-41f1-bab4-333df4bea9a4"], "metadata": {"page_label": "373", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1119cad2-5a4e-4142-b873-3f17794becf9": {"node_ids": ["d51a7015-3934-4d76-87a6-105370e066eb"], "metadata": {"page_label": "374", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "aab9a64d-7fc3-4669-8371-4ec64af9646e": {"node_ids": ["05cdcbaf-8a97-4bda-8464-980930e4f6f4"], "metadata": {"page_label": "375", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0f8b454c-88a1-49ac-a710-0e5a93a9e919": {"node_ids": ["6f4058d5-758b-4493-8b61-cb814fce011e"], "metadata": {"page_label": "376", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "72693c76-8058-4924-af00-6e0f309e49da": {"node_ids": ["5597e8f2-3b29-43e9-955b-636ffdd58777"], "metadata": {"page_label": "377", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "937deebe-d47c-401f-a879-5adf82368915": {"node_ids": ["7e300343-5b0b-4748-bdcb-2a7bcb25a77f"], "metadata": {"page_label": "378", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "94c1ce8c-3802-489e-8b00-f87f6d62dc6a": {"node_ids": ["fe71fa1e-64f5-4082-8606-f8bac0362109"], "metadata": {"page_label": "379", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2958e6e0-2142-40e1-9606-22ddd40c9660": {"node_ids": ["50a21aac-cf87-4d8b-8f84-69a72eb1da35"], "metadata": {"page_label": "380", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5510b9d5-addb-4198-8eaa-995e5e80d45b": {"node_ids": ["818adf8c-4076-4724-b575-035ef3744d01"], "metadata": {"page_label": "381", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3a1f68b9-27ff-4ad9-86b0-abc0f06938fa": {"node_ids": ["8af81a23-390a-4f9d-b0e2-80c4e2ad836b"], "metadata": {"page_label": "382", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cba182f3-ff38-4066-a5cf-ea2fd8feb51b": {"node_ids": ["6ef5679d-f645-443d-8571-4c0f84ca9475"], "metadata": {"page_label": "383", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d6f80db0-c230-4f45-96ad-bf680e3490a2": {"node_ids": ["d9af0238-6ac9-49f2-ba9d-d9979b5954aa"], "metadata": {"page_label": "384", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5c992dc5-0990-46c0-9384-299ec9403ead": {"node_ids": ["b473eb01-a305-4123-a7a4-3524e5b101db"], "metadata": {"page_label": "385", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "52e81e4a-dce5-4b7a-aa20-89eb102271bf": {"node_ids": ["dbbbd2a1-9eab-4ae8-b509-d0abe7056fde"], "metadata": {"page_label": "386", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1b3693ec-1de8-4072-8027-9cbf79713153": {"node_ids": ["40a90dc2-4941-423f-a39b-2ba9a50c7f40"], "metadata": {"page_label": "387", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b49f49fb-69d5-4c57-a60c-d67fd91a4a61": {"node_ids": ["e7b8908a-f6fa-4d42-be8c-51e7d1a13b28"], "metadata": {"page_label": "388", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0199680f-db76-4c51-b437-5d0f5500cba9": {"node_ids": ["486f5470-a1ff-4217-b802-5616d4709e67"], "metadata": {"page_label": "389", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ae91df21-ae47-4199-81f3-a2fe71bc3dce": {"node_ids": ["faf89278-ca8f-4034-99db-4425d1b111e7"], "metadata": {"page_label": "390", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5b63ddaa-c29c-4be7-ba67-34deba098af2": {"node_ids": ["abe1941b-45f1-4441-a95f-91494bedc3b0"], "metadata": {"page_label": "391", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9aeb4493-cb74-4e76-8445-afad596967cd": {"node_ids": ["4f3daf57-46b7-4c87-9c42-b6fb6d5eec4a"], "metadata": {"page_label": "392", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "90a11c50-c372-45d9-823f-7caf8a63fcd0": {"node_ids": ["b4a0d705-4d0c-4761-a3ab-83daafa4a564"], "metadata": {"page_label": "393", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5eff7c9a-c33c-414d-bc25-1f5e675b95fb": {"node_ids": ["69556f94-d127-4a5f-a767-c3f8a5edf496"], "metadata": {"page_label": "394", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fe9d13c0-5c2d-457d-88cc-3236648be547": {"node_ids": ["f77f7b0f-94cc-4019-910b-88e5972c6b95"], "metadata": {"page_label": "395", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "22e8afdb-be9a-46a7-bf4a-a90de495aef3": {"node_ids": ["392b0370-3995-400a-a94b-d6adb0985276"], "metadata": {"page_label": "396", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d8f017dd-818c-4de0-99f7-29b33ec191e0": {"node_ids": ["e67fc170-a791-454f-bc83-7d1b069498fe"], "metadata": {"page_label": "397", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2eaaa18b-b17a-484d-99b1-5832726c7b68": {"node_ids": ["ad164da4-bdee-4ca9-910b-a6a09ce96397"], "metadata": {"page_label": "398", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f9c6db17-b33e-4b28-9753-a3f17dd3c4ef": {"node_ids": ["0f20ac1b-f311-4ec8-a41b-c14389bf168d"], "metadata": {"page_label": "399", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fdece252-d9e0-4056-a725-99f43e75a60e": {"node_ids": ["5b52d3e9-99eb-4e80-a47f-c385c0a24dd5"], "metadata": {"page_label": "400", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5df1b8e3-374a-45d5-9d81-b4983056aace": {"node_ids": ["dcb15ee6-bdef-411b-89f8-1e5bddd6f4ee"], "metadata": {"page_label": "401", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0ee05932-7ebf-44db-88ef-279c1bbe76da": {"node_ids": ["93138e18-c2d9-4193-935e-ed49ca1334d0"], "metadata": {"page_label": "402", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5c9bc197-ec46-4bba-8051-9e5f2344e1e2": {"node_ids": ["848770ce-9a3a-4b51-bd1e-d032a63ff4c0"], "metadata": {"page_label": "403", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "455b72f8-cad0-44e5-8e6c-f5e3c96bca1e": {"node_ids": ["67d89315-18f5-4c66-aed3-21578b807699"], "metadata": {"page_label": "404", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b8a27f18-8c99-4aaf-98fe-1cf27c9d8f8c": {"node_ids": ["a268d3c4-18ce-4fe4-8478-f9e5196a2656"], "metadata": {"page_label": "405", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "78b599cc-f5cb-49cc-b6e6-f77918029864": {"node_ids": ["afe696a2-d011-4257-b877-1da601bc64a2"], "metadata": {"page_label": "406", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c9f17980-27df-403c-8b84-c8e3d7080145": {"node_ids": ["9880a2a3-b675-4d96-853f-3f5a2ff6ff6b"], "metadata": {"page_label": "407", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1c0a37d0-a018-4b8d-ab93-e9be40a3866f": {"node_ids": ["b6dda1ab-41be-4b1b-b40b-14d03f8eb721"], "metadata": {"page_label": "408", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "98b8e276-0b3d-41da-b0cf-ec3227a06ac4": {"node_ids": ["94b5f737-7bc4-4058-83ab-5438b26830da"], "metadata": {"page_label": "409", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "6b2af2e4-49a7-422f-818e-b1599b9aad00": {"node_ids": ["c8a4913e-bd00-4259-b45d-b299bf32e6a2"], "metadata": {"page_label": "410", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "aecae5a2-3704-4b43-a248-74fe1b8742df": {"node_ids": ["57d270a0-955b-444a-97cb-f2b6fa1db0ff"], "metadata": {"page_label": "411", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8feca3d4-19e4-4c67-8b51-bd383bf613df": {"node_ids": ["8cd3fb6c-4887-4881-bb6b-3be16cf09008"], "metadata": {"page_label": "412", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "de5bfe81-fbd3-4a8a-9db8-193075045b53": {"node_ids": ["0e35aad0-322d-4de8-921d-a243c777f259"], "metadata": {"page_label": "413", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "279b815f-e930-4efb-bab5-49ae9ab53a2f": {"node_ids": ["e5fedafc-b4a4-40bc-93b3-bd0448bd7c5e"], "metadata": {"page_label": "414", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0e05f165-c77a-4e09-9e78-6d05408f6aee": {"node_ids": ["a06f941c-dd69-467b-93cd-6f7188f5050b"], "metadata": {"page_label": "415", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "423fb52e-4e40-4a28-8efe-e5c7bf64d8e6": {"node_ids": ["92d2c188-70ea-4298-b33f-66a6e2c676ee"], "metadata": {"page_label": "416", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f5c46abe-9bd6-419e-b4f9-dcc0674382b5": {"node_ids": ["8ec3962b-ed21-4cd4-9c8a-c12c7569c052"], "metadata": {"page_label": "417", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "c08a64d3-8d6d-4c7d-9e42-1d1daf47445b": {"node_ids": ["39f31b6e-f89a-4240-9aff-3efd908c6732"], "metadata": {"page_label": "418", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4af92f21-f822-4d76-8848-b8dd03b30fcf": {"node_ids": ["b0ccf0c7-22dc-4249-826d-5934bf291d2b"], "metadata": {"page_label": "419", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "82f248e7-b722-466c-9c09-ddd6a3d21d67": {"node_ids": ["7a8f9569-8637-4234-8e27-56f6bd115c5a"], "metadata": {"page_label": "420", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "266f6b83-88a5-4c53-a687-36afe3c3ac4c": {"node_ids": ["dcd75c83-b587-4861-b509-03283beb6dad"], "metadata": {"page_label": "421", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "47cf6c27-a891-48da-a2ea-78716870c1c9": {"node_ids": ["c3a64159-a8ee-49f7-a881-0c7f9f38b419"], "metadata": {"page_label": "422", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9940cffb-6fe0-4699-8443-a700f5fcf292": {"node_ids": ["f86d5ebe-10e1-4d8a-848a-5e552e0db52b"], "metadata": {"page_label": "423", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dcf7ee72-120a-443d-9086-cf8f0d0b0bb5": {"node_ids": ["507fcc48-9c34-4972-a563-1ce93d98bf18"], "metadata": {"page_label": "424", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0b1085fc-0265-4471-acfd-5b41c7c32d0e": {"node_ids": ["d8167c69-8761-432a-9793-ebfb61919a14"], "metadata": {"page_label": "425", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e1b148a6-8f9f-4cd6-a110-cc95630f97e0": {"node_ids": ["937a3642-9ba8-402e-90c9-4727e55cab05"], "metadata": {"page_label": "426", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4931e09a-5305-4eee-832e-4117067424be": {"node_ids": ["882c7106-8165-403a-aeaf-3dc1a55f096a"], "metadata": {"page_label": "427", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "0c27e9b5-8f38-4817-a5e9-6d3e23dcafe9": {"node_ids": ["55a03b56-1463-4c3e-8a54-c5be4fc8ad47"], "metadata": {"page_label": "428", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4c47c9d3-06aa-465a-8947-ff17015ead6e": {"node_ids": ["add39b60-34eb-42bb-aac7-2c47e159c0ee"], "metadata": {"page_label": "429", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "62ae3be8-a3ae-4572-8e9e-f598308437e9": {"node_ids": ["424d23ea-90f2-4801-b13a-8a884a3a0f69"], "metadata": {"page_label": "430", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cafadfdd-48ea-4d54-932b-c73a60bafa80": {"node_ids": ["292a7e2e-27e4-49d5-8237-f6631e996c0b"], "metadata": {"page_label": "431", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a7336271-cf7f-4195-b460-a26d78b78675": {"node_ids": ["c2104435-c993-45be-badf-5d5a06a640db"], "metadata": {"page_label": "432", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1ca65241-1025-43a0-9494-4c65be65af9b": {"node_ids": ["c008fbbb-13d9-4768-a33b-5505393cefd2"], "metadata": {"page_label": "433", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3bcc6aab-fcd7-4305-8940-5912e3b97fce": {"node_ids": ["3a7aa8bd-bf5c-4940-8c1f-8d43b1eb362e"], "metadata": {"page_label": "434", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3e32e2ee-c0f6-425c-beb7-19dbe0aadfea": {"node_ids": ["39b31b69-4478-45a8-8b8d-82f980b09ef8"], "metadata": {"page_label": "435", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "775796ac-6812-4f25-ad6d-88135de35fe4": {"node_ids": ["e1636f41-45c4-4fa8-ba89-8158cc12d2a7"], "metadata": {"page_label": "436", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "60ee0b31-b3b8-49b3-9ba5-0a5f2daa6381": {"node_ids": ["982e97c2-412b-4ca6-a7d8-2ac2d1d3dc46"], "metadata": {"page_label": "437", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cfffde44-0ee5-486d-8dd0-daa28b762696": {"node_ids": ["b04e926c-1f54-4888-9f95-1ee4db211a2c"], "metadata": {"page_label": "438", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "55a72620-cea3-4965-9643-8572132be2b8": {"node_ids": ["1f406034-ebac-4ed3-bc6a-156780ea99a5"], "metadata": {"page_label": "439", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "84541aba-10a4-493a-a7e7-3d532b689f13": {"node_ids": ["aa124e6f-4c29-42d7-bd51-d8c3b7ffef1e"], "metadata": {"page_label": "440", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1eaf8799-0861-4876-a380-f5f582d6b08c": {"node_ids": ["8121e107-c538-4cba-a48b-767863d3aefe"], "metadata": {"page_label": "441", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "873de52e-ca45-4319-95fd-7413208a9c8e": {"node_ids": ["f2be0e17-4b8a-48d4-a0dd-39fd07fd8951"], "metadata": {"page_label": "442", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "fa00f74b-f098-417a-9194-12980b352d73": {"node_ids": ["35aa40df-4582-4aab-8773-48df6baa9275"], "metadata": {"page_label": "443", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a3a5ba13-f5fe-4014-b299-f735becfd809": {"node_ids": ["6cec9329-4045-47ab-889a-7a433673f519"], "metadata": {"page_label": "444", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "9bec996f-4dcc-4172-9310-4be82a033488": {"node_ids": ["e27af549-fead-4498-81f2-0486d29baa38"], "metadata": {"page_label": "445", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "03b49dee-78be-496c-9940-22c1d98b4484": {"node_ids": ["b596ac02-b578-4d39-9d11-e9cf440c762a"], "metadata": {"page_label": "446", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "92580ef5-653e-4fe3-8322-31f4e43614b3": {"node_ids": ["55800292-1a94-438a-a8c6-3aa69be21997"], "metadata": {"page_label": "447", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4145a2f6-99f3-4c0d-bcb0-04920f83d521": {"node_ids": ["05ebc796-0d29-4eff-952f-070d768e7478"], "metadata": {"page_label": "448", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a505c314-64ef-47e2-bcfc-12280514c171": {"node_ids": ["5fe15bcb-4739-4ac7-a1aa-24950d84519e"], "metadata": {"page_label": "449", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5ab0136c-56a6-47f7-b4b1-55d7da1bad65": {"node_ids": ["90b2dca1-2592-4623-a478-72f1cfc3c528"], "metadata": {"page_label": "450", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "3d683b20-670d-4238-a9f3-28febd393585": {"node_ids": ["e58e8865-299c-48e4-8ff2-3bc1650d98eb"], "metadata": {"page_label": "451", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "610e8761-1d00-4111-86c3-035b970331a1": {"node_ids": ["9bed8450-f457-41fc-9d4b-e5a64d3a66fe"], "metadata": {"page_label": "452", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "61cfb685-b919-44bc-a70b-03ad8cede8ca": {"node_ids": ["265346ab-e0f8-44b9-9473-02bdc93c51dd"], "metadata": {"page_label": "453", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "d86c554b-9223-4162-b4b7-292af92f236b": {"node_ids": ["a1092c4f-7937-42be-bf42-567000a0bf74"], "metadata": {"page_label": "454", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "351a7438-6977-4b35-9d43-c9cbce8721ef": {"node_ids": ["792c7d96-ade5-406a-9ba0-ba46372d736b"], "metadata": {"page_label": "455", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "88c832a7-06d8-4d47-9927-a6cc11109c1c": {"node_ids": ["c2fb43ad-4318-4342-a277-0c0e694a4cff"], "metadata": {"page_label": "456", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8828109d-af18-4733-84b5-0fbbdcdbd14e": {"node_ids": ["b708ac5d-9d55-4e29-bb95-9feff1c60dbe"], "metadata": {"page_label": "457", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "20ee968f-da2d-4018-a5b7-2ffe43387c9c": {"node_ids": ["bf23cf7a-0121-4a8a-8b8e-7a267c8ea9b8"], "metadata": {"page_label": "458", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4adb7ec9-e3a5-4365-9c45-84335d1d1bf9": {"node_ids": ["4831cbed-675d-40f1-8cda-69191ba195b9"], "metadata": {"page_label": "459", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "cbc02846-0685-45d1-b076-880992c9aaf3": {"node_ids": ["66ef0fcd-9991-4c7b-8dfb-14f42a1b0e65"], "metadata": {"page_label": "460", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8e8b173d-b254-48ef-b105-c7856ccb139e": {"node_ids": ["7235596a-a8c3-43b5-b19a-e854988832dd"], "metadata": {"page_label": "461", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "98e90777-563a-4e3d-bd31-841bb3c31e20": {"node_ids": ["c89d7bb9-862e-4798-85c7-53b94e8d9285"], "metadata": {"page_label": "462", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "7d03b90c-f7c8-4cf6-a91f-244de49fd37b": {"node_ids": ["a6263aa9-2988-48ba-9eb3-73bbe00f9db9"], "metadata": {"page_label": "463", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8b1d9adb-402a-460f-b02f-4ab0452c03f3": {"node_ids": ["4b642531-35c4-465a-9e09-89f35333ebee"], "metadata": {"page_label": "464", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4ce13e7d-8f9b-41fd-98ea-eb85f56538e5": {"node_ids": ["952db052-77ec-40d2-8e9e-b9bbb6d79379"], "metadata": {"page_label": "465", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "087a45d7-3b79-426a-8a4e-daebd2421271": {"node_ids": ["54bcdb0b-b74f-4235-87ee-0c993a696130"], "metadata": {"page_label": "466", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2c8f1ca2-429d-4174-afd8-4ac4915ae494": {"node_ids": ["01ed84a6-05fa-405d-961c-21b9179ee579"], "metadata": {"page_label": "467", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "92e6de4c-b1f7-4e5e-a559-5ac0f4fa3ca0": {"node_ids": ["37d7bb2f-8066-4994-b5bb-8414f969891c"], "metadata": {"page_label": "468", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "faf50b3c-76d6-4fa0-a38f-7bd84b8f9859": {"node_ids": ["6a9ebdef-b63a-4d70-a798-bc87f21f4a9b"], "metadata": {"page_label": "469", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "f8896a29-9f67-4b72-9f1c-04b54179c16e": {"node_ids": ["6f2d41ae-d01e-4f84-a6e4-ba27f0730580"], "metadata": {"page_label": "470", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ca4955ce-ca9e-4f89-8fca-0abf48d6d3c6": {"node_ids": ["889440d5-a5a6-48e4-a48f-ed450d7f3b40"], "metadata": {"page_label": "471", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e5a2fa32-172a-4ca2-bd0a-497147bc8f10": {"node_ids": ["c33c98f9-2c1f-4c89-ac03-640c737997d9"], "metadata": {"page_label": "473", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4def5dc3-5b13-432e-9e0e-eb8cb7233b36": {"node_ids": ["b9ac8a93-4bb2-4f62-9221-4da95d98709b"], "metadata": {"page_label": "474", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "ab3ffdee-67e8-4b3e-9235-b8403e21efd2": {"node_ids": ["ce669f7a-7676-479a-9e90-4072f03b9392"], "metadata": {"page_label": "475", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "dbcdec27-0895-4167-a75e-ba88da43d804": {"node_ids": ["c6acd465-0f12-4c83-b8c5-7b86ecde1110"], "metadata": {"page_label": "476", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "88f4c355-a8be-4989-b23f-177670652c4b": {"node_ids": ["9362b2a4-064c-4c74-950a-d32640d4fb0e"], "metadata": {"page_label": "477", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "1ef90fc1-2c70-4a3d-b6ac-7e2b17235ef9": {"node_ids": ["1f7e9bb0-52ef-43ce-95b8-9081d649ab38"], "metadata": {"page_label": "478", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "97c61370-209b-45f3-99ce-885421b06dca": {"node_ids": ["90d5db8f-a65a-4e23-8419-d254a015cc94"], "metadata": {"page_label": "479", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "4d3a55b3-f032-49bb-81db-f4d5c0ec5488": {"node_ids": ["bed9af0c-d653-445d-bf6a-e88a0c537a3d"], "metadata": {"page_label": "480", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2d51f8ba-665a-43f3-885d-800f57c93517": {"node_ids": ["297fd5ef-f2b8-4f7c-8fbd-d3d83668ec86"], "metadata": {"page_label": "481", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "5a47d883-9901-4000-9e04-39172f58948d": {"node_ids": ["a70159f4-c5cf-49e6-a0ef-8c0cb4d15c39"], "metadata": {"page_label": "482", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "8584dab7-eb53-4bc9-a9f1-3d5c6595a821": {"node_ids": ["aeee8dfd-44ab-4c92-bc5d-7a0b23f6664c"], "metadata": {"page_label": "483", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "68d22fda-75bf-41bb-b259-37d778e3ab0d": {"node_ids": ["2465bdc7-74cc-4f4e-9e0d-69aef6a3c365"], "metadata": {"page_label": "484", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "48e9773b-1dcd-4b60-a857-db32cc477b77": {"node_ids": ["d0101154-b4a4-4ce1-ab49-2d165c650a06"], "metadata": {"page_label": "485", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "e7264c60-f93c-4232-8a69-7563d7a60223": {"node_ids": ["ae913f99-1973-4867-ac00-d23b576c650d"], "metadata": {"page_label": "486", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "90f29860-6702-4711-a3a3-aa7cfcacb050": {"node_ids": ["e9bfca89-ae74-4843-ae9e-4a358825c3b2"], "metadata": {"page_label": "487", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2dae169e-e13b-4428-902e-39c854ca8173": {"node_ids": ["a31c948a-b8ad-4ede-a14e-0f64ad8f036c"], "metadata": {"page_label": "488", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "bdf1b317-bc7e-48fd-a7cc-60be63a4d67d": {"node_ids": ["9a1d864a-c2f6-4573-8bdd-a2d68cc341e1"], "metadata": {"page_label": "489", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "2c614bde-3c71-449f-987a-0ed6c6d09fc8": {"node_ids": ["baf20abb-d6ab-475e-a6d4-76a207c5d57a"], "metadata": {"page_label": "490", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "a56a22d3-a5eb-4c5d-a49e-503304b5cd22": {"node_ids": ["2c11c584-9c65-4dc5-96c0-56d121d86182"], "metadata": {"page_label": "IBC", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}, "b6777253-428f-4f0e-adba-49475bb275ed": {"node_ids": ["49af0546-c58e-4e34-9e95-7215dff878f5"], "metadata": {"page_label": "Back cover", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}}}, "docstore/data": {"52a61a2a-ced7-46fd-a528-2691b0501be5": {"__data__": {"id_": "52a61a2a-ced7-46fd-a528-2691b0501be5", "embedding": null, "metadata": {"page_label": "Microservices Patterns", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b38fb95f-4f4e-4e28-968e-5d016a3f8863", "node_type": "4", "metadata": {"page_label": "Microservices Patterns", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "227b3a40210ad1002cd3ff20d48ff6bf04d262ce1ac92c32d42b599cf164ab93", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "MANNING\nChris Richardson", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 24, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41536b26-2123-4034-bc17-cd705ee279d2": {"__data__": {"id_": "41536b26-2123-4034-bc17-cd705ee279d2", "embedding": null, "metadata": {"page_label": "IFC", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "281fff4b-ed73-4fff-947a-9fcbd5b7affe", "node_type": "4", "metadata": {"page_label": "IFC", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "dec2e6c3c435d55261dac7764f214293cdd77c92a44a477a8ef04701b46ad2d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "List of Patterns\nApplication architecture patterns\nMonolithic architecture (40)\nMicroservice architecture (40)\nDecomposition patterns\nDecompose by business capability (51)\nDecompose by subdomain (54)\nMessaging style patterns\nMessaging (85)\nRemote procedure invocation (72)\nReliable communications patterns\nCircuit breaker (78)\nService discovery patterns\n3rd party registration (85)\nClient-side discovery (83)\nSelf-registration (82)\nServer-side discovery (85)\nTransactional messaging patterns\nPolling publisher (98)\nTransaction log tailing (99)\nTransactional outbox (98)\nData consistency patterns\nSaga (114)\nBusiness logic design patterns\nAggregate (150)\nDomain event (160)\nDomain model (150)\nEvent sourcing (184)\nTransaction script (149)\nQuerying patterns\nAPI composition (223)\nCommand query responsibility segregation \n(228)\nExternal API patterns\nAPI gateway (259)\nBackends for frontends (265)\nTesting patterns\nConsumer-driven contract test (302)\nConsumer-side contract test (303)\nService component test (335)\nSecurity patterns\nAccess token (354) \nCross-cutting concerns patterns\nExternalized configuration (361)\nMicroservice chassis (379)\nObservability patterns\nApplication metrics (373)\nAudit logging (377)\nDistributed tracing (370)\nException tracking (376)\nHealth check API (366)\nLog aggregation (368)\nDeployment patterns\nDeploy a service as a container (393)\nDeploy a service as a VM (390)\nLanguage-specific packaging format (387)\nService mesh (380)\nServerless deployment (416)\nSidecar (410)\nRefactoring to microservices patterns\nAnti-corruption layer (447)\nStrangler application (432)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1590, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b094b148-67e8-4b16-bf93-04057b59e6c5": {"__data__": {"id_": "b094b148-67e8-4b16-bf93-04057b59e6c5", "embedding": null, "metadata": {"page_label": "i", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "509cada2-1d54-4435-bfa7-a000d85f5cce", "node_type": "4", "metadata": {"page_label": "i", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "87d3c6a4df88644354452a4180169ee4b5fab7dacc51baf7426e48d97dca6e08", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Microservices Patterns", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 22, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a0cfc9a-11ac-4b65-a83b-b05ef28192fc": {"__data__": {"id_": "3a0cfc9a-11ac-4b65-a83b-b05ef28192fc", "embedding": null, "metadata": {"page_label": "iii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ac245fb-f28c-4760-a4f1-806f9a2dd646", "node_type": "4", "metadata": {"page_label": "iii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6104ce5d00f7d36283b5c870957bf6b13c42a93a11320752dc85582530c66c2c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Microservices Patterns\nWITH EXAMPLES IN JAVA\nCHRIS RICHARDSON\nMANNING\nSHELTER ISLAND", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 84, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3cc42c19-ea5a-4b85-aeff-5ce0967c07f6": {"__data__": {"id_": "3cc42c19-ea5a-4b85-aeff-5ce0967c07f6", "embedding": null, "metadata": {"page_label": "iv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f613fa76-7349-478d-960b-2b61c006889d", "node_type": "4", "metadata": {"page_label": "iv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "529bcabf406b8e128bdfcd179c234ae8ff7778c955846862325cbdb2d7726f45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For online information and ordering of this and other Manning books, please visit\nwww.manning.com. The publisher offers discounts on this book when ordered in quantity. \nFor more information, please contact\nSpecial Sales Department\nManning Publications Co.\n20 Baldwin Road\nPO Box 761\nShelter Island, NY 11964\nEmail: orders@manning.com\n\u00a92019 by Chris Richardson. All rights reserved.\nNo part of this publication may be reproduced, stored in a retrieval system, or transmitted, in \nany form or by means electronic, mechanical, photocopying, or otherwise, without prior written \npermission of the publisher.\nMany of the designations used by manufacturers and sellers to distinguish their products are \nclaimed as trademarks. Where those designations appear in the book, and Manning \nPublications was aware of a trademark claim, the designations have been printed in initial caps \nor all caps.\nRecognizing the importance of preserving what has been written, it is Manning\u2019s policy to have \nthe books we publish printed on acid-free paper, and we exert our best efforts to that end. \nRecognizing also our responsibility to conserve the resources of our planet, Manning books\nare printed on paper that is at least 15 percent recycled and processed without the use of \nelemental chlorine.\nManning Publications Co. Development editor: Marina Michaels\n20 Baldwin Road Technical development editor: Christian Mennerich\nPO Box 761 Review editor: Aleksandar Dragosavljevic\u00b4\nShelter Island, NY 11964 Project editor: Lori Weidert\nCopy editor: Corbin Collins\nProofreader: Alyson Brener\nTechnical proofreader: Andy Miles\nTypesetter: Dennis Dalinnik\nCover designer: Marija Tudor\nISBN: 9781617294549\nPrinted in the United States of America\n1234567891 0\u2013D P\u20132 32 22 12 01 91 8", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1757, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b2df9e5-3c93-49b7-ae49-810f192e7b0a": {"__data__": {"id_": "4b2df9e5-3c93-49b7-ae49-810f192e7b0a", "embedding": null, "metadata": {"page_label": "v", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85d2dca7-184a-4957-9de0-a17e23202a77", "node_type": "4", "metadata": {"page_label": "v", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c9bc72e9e9033bf04be2d3064f31a05be3811e6be7348ffa873ccc952748bfd7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Where you see wrong or inequality or injustice, speak out, because this is your country. \nThis is your democracy. Make it. Protect it. Pass it on.\n \u2014 Thurgood Marshall, Justice of the Supreme Court", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 198, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18454a97-2870-48e6-aec3-99c121248f50": {"__data__": {"id_": "18454a97-2870-48e6-aec3-99c121248f50", "embedding": null, "metadata": {"page_label": "vii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8082f0aa-d82b-4049-9681-88118338d3b6", "node_type": "4", "metadata": {"page_label": "vii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c2502ef41ff69545969ca004a961b92d344f99db59094f7d53076265d8f0d898", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "vii\nbrief contents\n1 \u25a0 Escaping monolithic hell 1\n2 \u25a0 Decomposition strategies 33\n3 \u25a0 Interprocess communication in a microservice \narchitecture 65\n4 \u25a0 Managing transactions with sagas 110\n5 \u25a0 Designing business logic in a microservice \narchitecture 146\n6 \u25a0 Developing business logic with event sourcing 183\n7 \u25a0 Implementing queries in a microservice architecture 220\n8 \u25a0 External API patterns 253\n9 \u25a0 Testing microservices: Part 1 292\n10 \u25a0 Testing microservices: Part 2 318\n11 \u25a0 Developing production-ready services 348\n12 \u25a0 Deploying microservices 383\n13 \u25a0 Refactoring to microservices 428", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 591, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d52565f-59cd-4adc-9810-15b98ead733e": {"__data__": {"id_": "6d52565f-59cd-4adc-9810-15b98ead733e", "embedding": null, "metadata": {"page_label": "ix", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b4fbc6f-73d3-4e8b-a92b-4208d641c613", "node_type": "4", "metadata": {"page_label": "ix", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "bdf8a225d6bf9f05dea3f062e1df546edff22f10ab4d313805f58392456295fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ix\ncontents\npreface xvii\nacknowledgments xx\nabout this book xxii\nabout the cover illustration xxvi\n1 \nEscaping monolithic hell 1\n1.1 The slow march toward monolithic hell 2\nThe architecture of the FTGO application 3 \u25a0 The benefits of the \nmonolithic architecture 4 \u25a0 Living in monolithic hell 4\n1.2 Why this book is relevant to you 7\n1.3 What you\u2019ll learn in this book 7\n1.4 Microservice architecture to the rescue 8\nScale cube and microservices 8 \u25a0 Microservices as a form of \nmodularity 11 \u25a0 Each service has its own database 12\nThe FTGO microservice architecture 12 \u25a0 Comparing the \nmicroservice architecture and SOA 13\n1.5 Benefits and drawbacks of the microservice \narchitecture 14\nBenefits of the microservice architecture 14 \u25a0 Drawbacks of the \nmicroservice architecture 17", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 780, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac3c2049-3d1e-4c50-b3a3-5293b3f5b1b6": {"__data__": {"id_": "ac3c2049-3d1e-4c50-b3a3-5293b3f5b1b6", "embedding": null, "metadata": {"page_label": "x", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb263716-aa7a-420d-8d88-5706d4529266", "node_type": "4", "metadata": {"page_label": "x", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b9c1f8242d04f9c9bdbf862b46c2f81903598e4d6cadee01de3a7ca5eb580fa4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTSx\n1.6 The Microservice architecture pattern language 19\nMicroservice architecture is not a silver bullet 19 \u25a0 Patterns and \npattern languages 20 \u25a0 Overview of the Microservice architecture \npattern language 23\n1.7 Beyond microservices: Process and organization 29\nSoftware development and delivery organization 29 \u25a0 Software \ndevelopment and delivery process 30 \u25a0 The human side of \nadopting microservices 31\n2 \nDecomposition strategies 33\n2.1 What is the microservice  architecture exactly? 34\nWhat is software architecture and why does it matter? 34\nOverview of architectural styles 37 \u25a0 The microservice architecture \nis an architectural style 40\n2.2 Defining an application\u2019s microservice architecture 44\nIdentifying the system operations 45 \u25a0 Defining services by \napplying the Decompose by business capability pattern 51\nDefining services by applying the Decompose by sub-domain \npattern 54 \u25a0 Decomposition guidelines 56 \u25a0 Obstacles to \ndecomposing an application into services 57 \u25a0 Defining service \nAPIs 61\n3 \nInterprocess communication in a microservice architecture 65\n3.1 Overview of interprocess communication in a microservice \narchitecture 66\nInteraction styles 67 \u25a0 Defining APIs in a microservice \narchitecture 68 \u25a0 Evolving APIs 69 \u25a0 Message formats 71\n3.2 Communicating using the synchronous Remote \nprocedure invocation pattern 72\nUsing REST 73 \u25a0 Using gRPC 76 \u25a0 Handling partial failure \nusing the Circuit breaker pattern 77 \u25a0 Using service discovery 80\n3.3 Communicating using the Asynchronous messaging \npattern 85\nOverview of messaging 86 \u25a0 Implementing the interaction styles \nusing messaging 87 \u25a0 Creating an API specification for a \nmessaging-based service API 89 \u25a0 Using a message broker 90\nCompeting receivers and message ordering 94 \u25a0 Handling \nduplicate messages 95 \u25a0 Transactional messaging 97\nLibraries and frameworks for messaging 100", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5e05099e-3990-43ad-9541-cf683e5258fc": {"__data__": {"id_": "5e05099e-3990-43ad-9541-cf683e5258fc", "embedding": null, "metadata": {"page_label": "xi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9742ce63-1419-4467-8403-3f6e7f4503f6", "node_type": "4", "metadata": {"page_label": "xi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "12f1b13685a3390020a6e8f6297ba1b2127fafb72e83b04155cb99dfd8703f82", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTS xi\n3.4 Using asynchronous messaging to improve \navailability 103\nSynchronous communication reduces availability 103\nEliminating synchronous interaction 104\n4 \nManaging transactions with sagas 110\n4.1 Transaction management in a microservice \narchitecture 111\nThe need for distributed transactions in a microservice \narchitecture 112 \u25a0 The trouble with distributed \ntransactions 112 \u25a0 Using the Saga pattern to maintain \ndata consistency 114\n4.2 Coordinating sagas 117\nChoreography-based sagas 118 \u25a0 Orchestration-based sagas 121\n4.3 Handling the lack of isolation 126\nOverview of anomalies 127 \u25a0 Countermeasures for handling the \nlack of isolation 128\n4.4 The design of the Order Service and \nthe Create Order Saga 132\nThe OrderService class 133 \u25a0 The implementation of the Create \nOrder Saga 135 \u25a0 The OrderCommandHandlers class 142\nThe OrderServiceConfiguration class 143\n5 \nDesigning business logic in a microservice architecture 146\n5.1 Business logic organization patterns 147\nDesigning business logic using the Transaction script pattern 149\nDesigning business logic using the Domain model pattern 150\nAbout Domain-driven design 151\n5.2 Designing a domain model using the \nDDD aggregate pattern 152\nThe problem with fuzzy boundaries 153 \u25a0 Aggregates have \nexplicit boundaries 154 \u25a0 Aggregate rules 155 \u25a0 Aggregate \ngranularity 158 \u25a0 Designing business logic with aggregates 159\n5.3 Publishing domain events 160\nWhy publish change events? 160 \u25a0 What is a domain \nevent? 161 \u25a0 Event enrichment 161 \u25a0 Identifying domain \nevents 162 \u25a0 Generating and publishing domain events 164\nConsuming domain events 167", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1617, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9a9f1a6-b83f-47f4-8517-f49381a618c2": {"__data__": {"id_": "e9a9f1a6-b83f-47f4-8517-f49381a618c2", "embedding": null, "metadata": {"page_label": "xii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "211b935e-b817-4432-8e47-0a6bce4b7fff", "node_type": "4", "metadata": {"page_label": "xii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d46d4c7aa51ae82673e467613015b2bf82d5667e87fab748a0600836e3a0918f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTSxii\n5.4 Kitchen Service business logic 168\nThe Ticket aggregate 169\n5.5 Order Service business logic 173\nThe Order Aggregate 175 \u25a0 The OrderService class 180\n6 \nDeveloping business logic with event sourcing 183\n6.1 Developing business logic using event sourcing 184\nThe trouble with traditional persistence 185 \u25a0 Overview of event \nsourcing 186 \u25a0 Handling concurrent updates using optimistic \nlocking 193 \u25a0 Event sourcing and publishing events 194\nUsing snapshots to improve performance 195 \u25a0 Idempotent \nmessage processing 197 \u25a0 Evolving domain events 198\nBenefits of event sourcing 199 \u25a0 Drawbacks of event \nsourcing 200\n6.2 Implementing an event store 202\nHow the Eventuate Local event store works 203 \u25a0 The Eventuate \nclient framework for Java 205\n6.3 Using sagas and event sourcing together 209\nImplementing choreography-based sagas using event sourcing 210\nCreating an orchestration-based saga 211 \u25a0 Implementing an \nevent sourcing-based saga participant 213 \u25a0 Implementing saga \norchestrators using event sourcing 216\n7 \nImplementing queries in a microservice architecture 220\n7.1 Querying using the API composition pattern 221\nThe findOrder() query operation 221 \u25a0 Overview of the API \ncomposition pattern 222 \u25a0 Implementing the findOrder() query \noperation using the API composition pattern 224 \u25a0 API \ncomposition design issues 225 \u25a0 The benefits and drawbacks \nof the API composition pattern 227\n7.2 Using the CQRS pattern 228\nMotivations for using CQRS 229 \u25a0 Overview of CQRS 232\nThe benefits of CQRS 235 \u25a0 The drawbacks of CQRS 236\n7.3 Designing CQRS views 236\nChoosing a view datastore 237 \u25a0 Data access module design 239\nAdding and updating CQRS views 241\n7.4 Implementing a CQRS view with AWS DynamoDB 242\nThe OrderHistoryEventHandlers module 243\nData modeling and query design with DynamoDB 244\nThe OrderHistoryDaoDynamoDb class 249", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1856, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a6526b5-c398-49a2-9c1a-e23d71253042": {"__data__": {"id_": "9a6526b5-c398-49a2-9c1a-e23d71253042", "embedding": null, "metadata": {"page_label": "xiii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5ae36d6-86fe-4244-9006-f3179ffb331e", "node_type": "4", "metadata": {"page_label": "xiii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "295afa60467a3f9aad35a9767ca32ae91c5e89d92ffbfd318d8fac5023586d14", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTS xiii\n8 \nExternal API patterns 253\n8.1 External API design issues 254\nAPI design issues for the FTGO mobile client 255 \u25a0 API design \nissues for other kinds of clients 258\n8.2 The API gateway pattern 259\nOverview of the API gateway pattern 259 \u25a0 Benefits and \ndrawbacks of an API gateway 267 \u25a0 Netflix as an example \nof an API gateway 267 \u25a0 API gateway design issues 268\n8.3 Implementing an API gateway 271\nUsing an off-the-shelf API gateway product/service 271\nDeveloping your own API gateway 273 \u25a0 Implementing an \nAPI gateway using GraphQL 279\n9 \nTesting microservices: Part 1 292\n9.1 Testing strategies for microservice architectures 294\nOverview of testing 294 \u25a0 The challenge of testing \nmicroservices 299 \u25a0 The deployment pipeline 305\n9.2 Writing unit tests for a service 307\nDeveloping unit tests for entities 309 \u25a0 Writing unit tests for value \nobjects 310 \u25a0 Developing unit tests for sagas 310 \u25a0 Writing \nunit tests for domain services 312 \u25a0 Developing unit tests for \ncontrollers 313 \u25a0 Writing unit tests for event and message \nhandlers 315\n10 \nTesting microservices: Part 2 318\n10.1 Writing integration tests 319\nPersistence integration tests 321 \u25a0 Integration testing REST-based \nrequest/response style interactions 322 \u25a0 Integration testing \npublish/subscribe-style interactions 326 \u25a0 Integration contract \ntests for asynchronous request/response interactions 330\n10.2 Developing component tests 335\nDefining acceptance tests 336 \u25a0 Writing acceptance tests using \nGherkin 337 \u25a0 Designing component tests 339 \u25a0 Writing \ncomponent tests for the FTGO Order Service 340\n10.3 Writing end-to-end tests 345\nDesigning end-to-end tests 345 \u25a0 Writing end-to-end tests 346\nRunning end-to-end tests 346", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1711, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "259ed3d4-b2df-49ad-9e94-2244ab11f319": {"__data__": {"id_": "259ed3d4-b2df-49ad-9e94-2244ab11f319", "embedding": null, "metadata": {"page_label": "xiv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e40e73aa-5d66-48ce-a390-5b0e47e6d8b9", "node_type": "4", "metadata": {"page_label": "xiv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5bba90e35db3646b6d72b70194c1152e21c73fbac9c18461140513fe7da53f01", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTSxiv\n11 \nDeveloping production-ready services 348\n11.1 Developing secure services 349\nOverview of security in a traditional monolithic application 350\nImplementing security in a microservice architecture 353\n11.2 Designing configurable services 360\nUsing push-based externalized configuration 362 \u25a0 Using pull-\nbased externalized configuration 363\n11.3 Designing observable services 364\nUsing the Health check API pattern 366 \u25a0 Applying the Log \naggregation pattern 368 \u25a0 Using the Distributed tracing \npattern 370 \u25a0 Applying the Application metrics pattern 373\nUsing the Exception tracking pattern 376 \u25a0 Applying the Audit \nlogging pattern 377\n11.4 Developing services using the Microservice chassis \npattern 378\nUsing a microservice chassis 379 \u25a0 From microservice chassis to \nservice mesh 380\n12 \nDeploying microservices 383\n12.1 Deploying services using the Language-specific packaging \nformat pattern 386\nBenefits of the Service as a language-specific package pattern 388\nDrawbacks of the Service as a language-specific package \npattern 389\n12.2 Deploying services using the Service as a virtual machine \npattern 390\nThe benefits of deploying services as VMs 392 \u25a0 The drawbacks of \ndeploying services as VMs 392\n12.3 Deploying services using the Service as a container \npattern 393\nDeploying services using Docker 395 \u25a0 Benefits of deploying \nservices as containers 398 \u25a0 Drawbacks of deploying services \nas containers 399\n12.4 Deploying the FTGO application with Kubernetes 399\nOverview of Kubernetes 399 \u25a0 Deploying the Restaurant service \non Kubernetes 402 \u25a0 Deploying the API gateway 405\nZero-downtime deployments 406 \u25a0 Using a service mesh \nto separate deployment from release 407", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1698, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96f01306-78bd-4fab-9b40-03a16851bbfb": {"__data__": {"id_": "96f01306-78bd-4fab-9b40-03a16851bbfb", "embedding": null, "metadata": {"page_label": "xv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c25667ea-384b-4a00-b6a2-2f46c2db65c8", "node_type": "4", "metadata": {"page_label": "xv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5c5176d5191c4e8e1577bedc63f3f8acd1f261e377397328e908b80b0a209a42", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTS xv\n12.5 Deploying services using the Serverless deployment \npattern 415\nOverview of serverless deployment with AWS Lambda 416\nDeveloping a lambda function 417 \u25a0 Invoking lambda \nfunctions 417 \u25a0 Benefits of using lambda functions 418\nDrawbacks of using lambda functions 419\n12.6 Deploying a RESTful service using AWS Lambda \nand AWS Gateway 419\nThe design of the AWS Lambda version of Restaurant Service 419\nPackaging the service as ZIP file 424\u25a0 Deploying lambda \nfunctions using the Serverless framework 425\n13 \nRefactoring to microservices 428\n13.1 Overview of refactoring to microservices 429\nWhy refactor a monolith? 429 \u25a0 Strangling the monolith 430\n13.2 Strategies for refactoring a monolith to \nmicroservices 433\nImplement new features as services 434 \u25a0 Separate presentation \ntier from the backend 436 \u25a0 Extract business capabilities into \nservices 437\n13.3 Designing how the service and the monolith \ncollaborate 443\nDesigning the integration glue 444 \u25a0 Maintaining data \nconsistency across a service and a monolith 449 \u25a0 Handling \nauthentication and authorization 453\n13.4 Implementing a new feature as a service: handling \nmisdelivered orders 455\nThe design of Delayed Delivery Service 456 \u25a0 Designing the \nintegration glue for Delayed Delivery Service 457\n13.5 Breaking apart the monolith: extracting delivery \nmanagement 459\nOverview of existing delivery management functionality 460\nOverview of Delivery Service 462\u25a0 Designing the Delivery Service \ndomain model 463 \u25a0 The design of the Delivery Service integration \nglue 465 \u25a0 Changing the FTGO monolith to interact with Delivery \nService 467\nindex 473", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1625, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5108e7e-36d9-4e87-9ada-caa1f6fc9db2": {"__data__": {"id_": "e5108e7e-36d9-4e87-9ada-caa1f6fc9db2", "embedding": null, "metadata": {"page_label": "xvii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c11300bf-c6c3-40b3-9c45-e8ae16824b21", "node_type": "4", "metadata": {"page_label": "xvii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2a1fd6efe4a6846875aa6a17b44c15138ef164b50042498d7d9682ac83e57b7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xvii\npreface\nOne of my favorite quotes is\nThe future is already here\u2014it\u2019s ju st not very evenly distributed.\n\u2014William Gibson, science fiction author\nThe essence of that quote is that new id eas and technology take a while to diffuse\nthrough a community and become widely adopted. A good example of the slow diffu-\nsion of ideas is the story of how I discover ed microservices. It began in 2006, when,\nafter being inspired by a talk given by an  AWS evangelist, I started down a path that\nultimately led to my creating the original Cloud Foundry. (The only thing in common\nwith today\u2019s Cloud Foundry is the name.) Cloud Foundry was a Platform-as-a-Service\n(PaaS) for automating the deployment of Java  applications on EC2. Like every other\nenterprise Java application that I\u2019d built, my Cloud Foundry had a monolith architec-\nture consisting of a single Java Web Application Archive (WAR) file.\n Bundling a diverse and complex set of fu nctions such as provisioning, configura-\ntion, monitoring, and management into a monolith created both development and\noperations challenges. You couldn\u2019t, for example, change the UI without testing and\nredeploying the entire application. An d because the monitoring and management\ncomponent relied on a Complex Event Processing (CEP) engine which maintained\nin-memory state we couldn\u2019t run multiple instances of the application! That\u2019s embar-\nrassing to admit, but all I can say is that I am a software developer, and, \u201clet he who is\nwithout sin cast the first stone.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc593e65-687c-4099-bb9b-99d55a17b5fe": {"__data__": {"id_": "dc593e65-687c-4099-bb9b-99d55a17b5fe", "embedding": null, "metadata": {"page_label": "xviii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f406b4ba-69fc-4d18-a90e-323cd44fcf22", "node_type": "4", "metadata": {"page_label": "xviii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "52381f2337a6bcbedf1dd5c5f8937188e19f9fc41e7ae4e4653f356db7a9610a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "PREFACExviii\n Clearly, the application had quickly outgrown its monolith architecture, but what was\nthe alternative? The answer had been out in the software community for some time at\ncompanies such as eBay and Amazon. Amazon had, for example, started to migrate away\nfrom the monolith around 2002 (https://plus.google.com/110981030061712822816/\nposts/AaygmbzVeRq). The new architecture replaced the monolith with a collection\nof loosely coupled services. Services are owned by what Amazon calls two-pizza teams\u2014\nteams small enough to be fed by two pizzas.\n Amazon had adopted this architecture to accelerate the rate of software develop-\nment so that the company could innovate faster and compete more effectively. The\nresults are impressive: Amazon reportedly deploys changes into production every 11.6\nseconds!\n In early 2010, after I\u2019d moved on to other projects, the future of software architec-\nture finally caught up with me. That\u2019s when I read the book The Art of Scalability:\nScalable Web Architecture, Processes, an d Organizations for the Modern Enterprise  (Addison-\nWesley Professional, 2009) by Michael T. Fisher and Martin L. Abbott. A key idea in\nthat book is the scale cube, which, as desc ribed in chapter 2, is a three-dimensional\nmodel for scaling an application. The Y-axis  scaling defined by the scale cube func-\ntionally decomposes an application into services. In hindsight, this was quite obvious,\nbut for me at the time, it was an a-ha moment! I could have solved the challenges I was\nfacing two years earlier by architecting Cloud Foundry as a set of services!\n In April 2012, I gave my first talk on this architectural approach, called \u201cDecom-\nposing Applications of Deployability and Scalability\u201d ( www.slideshare.net/chris.e\n.richardson/decomposing-applications-for-scalability-and-deployability-april-2012). At\nthe time, there wasn\u2019t a generally accepted term for this kind of architecture. I some-\ntimes called it modular, polyglot architecture, because the services could be written in\ndifferent languages.\n But in another example of how the future is unevenly distributed, the term micro-\nservice was used at a software architecture workshop in 2011 to describe this kind of\narchitecture ( https://en.wikipedia.org/wiki/Microservices). I first encountered the\nterm when I heard Fred George give a talk at Oredev 2013, and I liked it!\n In January 2014, I created the https://microservices.io website to document archi-\ntecture and design patterns that I had encountered. Then in March 2014, James Lewis\nand Martin Fowler published a blog post about microservices ( https://martinfowler\n.com/articles/microservices.html). By popularizing the term microservices, the blog\npost caused the software community to consolidate around the concept.\n The idea of small, loosely coupled teams, rapidly and reliably developing and deliv-\nering microservices is slowly diffusing through the software community. But it\u2019s likely\nthat this vision of the future is quite different from your daily reality. Today, business-\ncritical enterprise applications are typically large monoliths developed by large teams.\nSoftware releases occur infrequently and are often painful for everyone involved. IT\noften struggles to keep up with the needs of the business. You\u2019re wondering how on\nearth you can adopt the microservice architecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3347, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c84e6eec-eddf-47ef-827b-adf91b2e2155": {"__data__": {"id_": "c84e6eec-eddf-47ef-827b-adf91b2e2155", "embedding": null, "metadata": {"page_label": "xix", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c13f683-b4a5-4e37-ac5f-0a8f5fb77759", "node_type": "4", "metadata": {"page_label": "xix", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "aac02d8fd1213d34435aa2effc3f5d98f7dce0b3b17e67b5eeea34c8e2156cc2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "PREFACE xix\n The goal of this book is to answer that question. It will give you a good understand-\ning of the microservice architecture, its be nefits and drawbacks, and when to use it.\nThe book describes how to solve the numero us design challenges you\u2019ll face, includ-\ning how to manage distributed data. It also covers how to refactor a monolithic appli-\ncation to a microservice architecture. But this book is not a microservices manifesto.\nInstead, it\u2019s organized around a collection of patterns. A pattern is a reusable solution\nto a problem that occurs in a particular context. The beauty of a pattern is that\nbesides describing the benefits of the solution, it also describes the drawbacks and the\nissues you must address in order to successf ully implement a solution. In my experi-\nence, this kind of objectivity when thinking about solutions leads to much better deci-\nsion making. I hope you\u2019ll enjoy reading th is book and that it teaches you how to\nsuccessfully develop microservices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 998, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e043c6a-24c3-4eaa-bf92-560e03449c5e": {"__data__": {"id_": "9e043c6a-24c3-4eaa-bf92-560e03449c5e", "embedding": null, "metadata": {"page_label": "xx", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d033a5e-d562-4aa9-8a2f-c3a28b5f7f48", "node_type": "4", "metadata": {"page_label": "xx", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0740ec16e56a1ae6af185c849cdddf7952ffd334f6b8793d7fd9516d25c6bcdc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xx\nacknowledgments\nAlthough writing is a solitary activity, it ta kes a large number of people to turn rough\ndrafts into a finished book.\n First, I want to thank Erin Twohey an d Michael Stevens from Manning for their\npersistent encouragement to write another book. I would also like to thank my devel-\nopment editors, Cynthia Kane and Marina Michaels. Cynthia Kane got me started and\nworked with me on the first few chapters. Marina Michaels took over from Cynthia\nand worked with me to the end. I\u2019ll be fo rever grateful for Marina\u2019s meticulous and\nconstructive critiques of my chapters. And I want to thank the rest of the Manning\nteam who\u2019s been involved in getting this book published.\n I\u2019d like to thank my technical development editor, Christian Mennerich, my tech-\nnical proofreader, Andy Miles, and all my external reviewers: Andy Kirsch, Antonio\nPessolano, Areg Melik-Adamyan, Cage Sl agel, Carlos Curotto, Dror Helper, Eros\nPedrini, Hugo Cruz, Irina Romanenko, Jesse Rosalia, Joe Justesen, John Guthrie,\nKeerthi Shetty, Michele Mauro, Paul Grebenc, Pethuru Raj, Potito Coluccelli, Shobha\nIyer, Simeon Leyzerzon, Srihari Sridharan, Tim Moore, Tony Sweets, Trent Whiteley,\nWes Shaddix, William E. Wheeler, and Zoltan Hamori.\n I also want to thank everyone who purchased the MEAP and provided feedback in\nthe forum or to me directly.\n I want to thank the organizers and attendees of all of the conferences and meetups\na t  w h i c h  I \u2019 v e  s p o k e n  f o r  t h e  c h a n c e  t o  p resent and revise my ideas. And I want to\nthank my consulting and training clients around the world for giving me the opportu-\nnity to help them put my ideas into practice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2b75a935-1d07-4520-b9c3-ba5e6e310b78": {"__data__": {"id_": "2b75a935-1d07-4520-b9c3-ba5e6e310b78", "embedding": null, "metadata": {"page_label": "xxi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b113b4d6-96b4-4092-b449-efa92c67b7ed", "node_type": "4", "metadata": {"page_label": "xxi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "66cf110cb9ff7f12e1113d52965c209f1446c7c3cf5464207d38bd148360375f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ACKNOWLEDGMENTS xxi\n I want to thank my colleagues Andrew, Valentin, Artem, and Stanislav at Eventuate,\nInc., for their contributions to the Eventuate product and open source projects.\n Finally, I\u2019d like to thank my wife, Laura, and my children, Ellie, Thomas, and Janet\nfor their support and understanding over the last 18 months. While I\u2019ve been glued to\nmy laptop, I\u2019ve missed out on going to El lie\u2019s soccer games, watching Thomas learn-\ning to fly on his flight simulator, and trying new restaurants with Janet.\n Thank you all!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 532, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "000d51ea-2672-4064-91e1-4e345bc612cb": {"__data__": {"id_": "000d51ea-2672-4064-91e1-4e345bc612cb", "embedding": null, "metadata": {"page_label": "xxii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61b5aea3-5a4f-40a3-856c-3e818b1c7404", "node_type": "4", "metadata": {"page_label": "xxii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "71b2cecd22e7a809c6a880d9212b4dfad2ca32ccfbf4f1ac8ee852baadfc70a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxii\nabout this book\nThe goal of this book is to teach you how to successfully develop applications using\nthe microservice architecture.\n Not only does it discuss the benefits of the microservice architecture, it also\ndescribes the drawbacks. You\u2019ll learn when you should consider using the monolithic\narchitecture and when it makes sense to use microservices.\nWho should read this book\nThe focus of this book is on architectu re and development. It\u2019s meant for anyone\nresponsible for developing and delivering software, such as developers, architects,\nCTOs, or VPs of engineering.\n The book focuses on explaining the micr oservice architecture patterns and other\nconcepts. My goal is for you to find this material accessible, regardless of the technol-\nogy stack you use. You only need to be fam iliar with the basics of enterprise applica-\ntion architecture and design. In particular, you need to understand concepts like\nthree-tier architecture, web application design, relational databases, interprocess com-\nmunication using messaging and REST, and the basics of application security. The\ncode examples, though, use Java and the Spring framework. In order to get the most\nout of them, you should be familiar with the Spring framework.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1239, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "07b70d9a-c376-49f8-bff6-02ec7d1b7a31": {"__data__": {"id_": "07b70d9a-c376-49f8-bff6-02ec7d1b7a31", "embedding": null, "metadata": {"page_label": "xxiii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5a6a61c-1471-495b-8e63-0c74e5edf31e", "node_type": "4", "metadata": {"page_label": "xxiii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "09a9d421fbe2a087cd0f24ef2ca5e4abcede84f4d1ddc0eb15891ef3f9a78418", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ABOUT THIS BOOK xxiii\nRoadmap\nThis book consists of 13 chapters:\n\u25a0 Chapter 1 describes the symptoms of mo nolithic hell, which occurs when a\nmonolithic application outgrows its architecture, and advises on how to escape\nby adopting the microservice architecture. It also provides an overview of the\nmicroservice architecture pattern language, which is the organizing theme for\nmost of the book.\n\u25a0 Chapter 2 explains why software archit ecture is important and describes the\npatterns you can use to decompose an appl ication into a collection of services.\nIt also explains how to overcome the various obstacles you typically encounter\nalong the way.\n\u25a0 Chapter 3 describes the different patterns for robust, interprocess communica-\ntion in a microservice architecture. It explains why asynchronous, message-\nbased communication is often the best choice.\n\u25a0 Chapter 4 explains how to maintain data consistency across services by using\nthe Saga pattern. A saga is a sequence of local transactions coordinated using\nasynchronous messaging.\n\u25a0 Chapter 5 describes how to design the business logic for a service using the\ndomain-driven design (DDD) Aggregate and Domain event patterns.\n\u25a0 Chapter 6 builds on chapter 5 and explains how to develop business logic using\nthe Event sourcing pattern, an event-centric way to structure the business logic\nand persist domain objects.\n\u25a0 Chapter 7 describes how to implement qu eries that retrieve data scattered\nacross multiple services by using eith er the API composition pattern or the\nCommand query responsibility segregation (CQRS) pattern.\n\u25a0 Chapter 8 covers the external API patterns for handling requests from a diverse\ncollection of external clients, such as mobile applications, browser-based Java-\nScript applications, and third-party applications.\n\u25a0 Chapter 9 is the first of two chapters on automated testing techniques for micro-\nservices. It introduces important testing concepts such as the test pyramid, which\ndescribes the relative proportions of each ty pe of test in your test suite. It also\nshows how to write unit tests, which form the base of the testing pyramid.\n\u25a0 Chapter 10 builds on chapter 9 and describes how to write other types of tests in\nthe test pyramid, including integration tests, consumer contract tests, and com-\nponent tests.\n\u25a0 Chapter 11 covers various aspects of developing production-ready services,\nincluding security, the Externalized configuration pattern, and the service\nobservability patterns. The service obse rvability patterns include Log aggrega-\ntion, Application metrics, and Distributed tracing.\n\u25a0 Chapter 12 describes the various depl oyment patterns that you can use to\ndeploy services, including virtual machines, containers, and serverless. It also", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2740, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "418461da-55af-4506-90b1-35dbd9a71c24": {"__data__": {"id_": "418461da-55af-4506-90b1-35dbd9a71c24", "embedding": null, "metadata": {"page_label": "xxiv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a3640d6a-cd9b-42dd-882a-ebfb52526070", "node_type": "4", "metadata": {"page_label": "xxiv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9014fd2fee4dfdccab176c7e83d7b72576b420501108fd17f7d94b48eabdb143", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ABOUT THIS BOOKxxiv\ndiscusses the benefits of using a servic e mesh, a layer of networking software\nthat mediates communication in a microservice architecture.\n\u25a0 Chapter 13 explains how to incrementally refactor a monolithic architecture to\na microservice architecture by applying the Strangler application pattern: imple-\nmenting new features as services and extracting modules out of the monolith\nand converting them to services. \nAs you progress through these chapters, you\u2019 ll learn about different aspects of the\nmicroservice architecture.\nAbout the code\nThis book contains many examples of sour ce code both in numbered listings and\ninline with normal text. In both cases, source code is formatted in a fixed-width font\nlike this to separate it from ordinary text. Sometimes code is also in bold to high-\nlight code that has changed from previous steps in the chapter, such as when a new\nfeature adds to an existing line of code. In  many cases, the original source code has\nbeen reformatted; the publisher has adde d line breaks and reworked indentation to\naccommodate the available page space in the book. In rare cases, even this was not\nenough, and listings include line-continuation markers ( \u27a5). Additionally, comments\ni n  t h e  s o u r c e  c o d e  h a v e  o f t e n  b e e n  r e m oved from the listings when the code is\ndescribed in the text. Code annotations accompany many of the listings, highlighting\nimportant concepts.\n Every chapter, except chapters 1, 2, and 13, contains code from the companion\nexample application. You can find the code for this application in a GitHub reposi-\ntory: https://github.com/microservices-patterns/ftgo-application.\nBook forum\nThe purchase of Microservices Patterns in cludes free access to a private web forum\nrun by Manning Publications where you ca n make comments about the book, ask\ntechnical questions, share your solutions to exercises, and receive help from the\nauthor and from other users. To access the forum and subscribe to it, point your web\nbrowser to https://forums.manning.com/forums/microservices-patterns. You can\nalso learn more about Manning\u2019s forums and the rules of conduct at https://forums\n.manning.com/forums/about.\n Manning\u2019s commitment to our readers is to provide a venue where a meaningful\ndialogue between individual readers and between readers and the author can take\nplace. It\u2019s not a commitment to any specific amount of participation on the part of the\nauthor, whose contribution to the forum remains voluntary (and unpaid). We suggest\nyou try asking the author some challenging questions lest his interest stray! The forum\nand the archives of previous discussions will be accessible from the publisher\u2019s website\nas long as the book is in print.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a98439e5-a43c-4d84-9cef-40306388bb89": {"__data__": {"id_": "a98439e5-a43c-4d84-9cef-40306388bb89", "embedding": null, "metadata": {"page_label": "xxv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85ab669d-a855-469c-b284-cf274c56982c", "node_type": "4", "metadata": {"page_label": "xxv", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "bbec2701110191daf6f692e224c1b46241ac84a697094d7109db47da3eadfc9d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ABOUT THIS BOOK xxv\nOther online resources\nAnother great resource for learning the microservice architecture is my website http://\nmicroservices.io.\n Not only does it contain the complete pa ttern language, it also has links to other\nresources such as articles, presentations, and example code.\nAbout the author\nChris Richardson is a developer and architect. He is a Java Champion, a JavaOne rock\nstar, and the author of POJOs in Action (Manning, 2006), which describes how to build\nenterprise Java applications with frameworks such as Spring and Hibernate.\n Chris was also the founder of the original CloudFoundry.com, an early Java PaaS\nfor Amazon EC2.\n Today, he is a recognized thought leader in microservices and speaks regularly at\ninternational conferences. Chris is the creator of Microservices.io, a pattern language\nfor microservices. He provides microservices consulting and training to organizations\naround the world that are adopting the microservice architecture. Chris is working on\nhis third startup: Eventuate.io, an applicat ion platform for developing transactional\nmicroservices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1099, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03de00b1-960b-41c8-af43-05cd8b4e58e4": {"__data__": {"id_": "03de00b1-960b-41c8-af43-05cd8b4e58e4", "embedding": null, "metadata": {"page_label": "xxvi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a1fdc35-ee15-41b1-b757-acbb71bef7c6", "node_type": "4", "metadata": {"page_label": "xxvi", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a986563a55106ff242db8fe20ade5531e2624b3f75130fde487c1c0fc78dd897", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxvi\nabout the cover illustration\nJefferys\nThe figure on the cover of Microservices Patterns is captioned \u201cHabit of a Morisco\nSlave in 1568.\u201d The illustration is taken from Thomas Jefferys\u2019 A Collection of the Dresses\nof Different Nations, Ancient and Modern  (four volumes), London, published between\n1757 and 1772. The title page states that these are hand-colored copperplate engrav-\nings, heightened with gum arabic. \n Thomas Jefferys (1719\u20131771) was called \u201cGeographer to King George III.\u201d He was\nan English cartographer who was the lead ing map supplier of his day. He engraved\nand printed maps for government and othe r official bodies and produced a wide\nrange of commercial maps and atlases, especially of North America. His work as a map\nmaker sparked an interest in local dre ss customs of the lands he surveyed and\nmapped, which are brilliantly displayed in this collection. Fascination with faraway\nlands and travel for pleasure were relatively new phenomena in the late 18th century,\nand collections such as this one were popu lar, introducing both the tourist as well as\nthe armchair traveler to the inhabitants of other countries.\n The diversity of the drawings in Jefferys\u2019 volumes speaks vividly of the uniqueness\nand individuality of the world\u2019s nations some 200 years ago. Dress codes have changed\nsince then, and the diversity by region and country, so rich at the time, has faded away.\nIt\u2019s now often hard to tell the inhabitants of one continent from another. Perhaps, try-\ning to view it optimistically, we\u2019ve traded a cultural and visual diversity for a more var-\nied personal life\u2014or a more varied and in teresting intellectual and technical life.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1673, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "590a84ac-2e7d-40cd-ac6d-d9438d4b49a0": {"__data__": {"id_": "590a84ac-2e7d-40cd-ac6d-d9438d4b49a0", "embedding": null, "metadata": {"page_label": "xxvii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f763c37e-f749-49c6-8e6e-34d153a5bd13", "node_type": "4", "metadata": {"page_label": "xxvii", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1eab1775c206585d73f98b1db49e8e53da9b2a76bc5cdfd4a31d2b943c302686", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ABOUT THE COVER ILLUSTRATION xxvii\n At a time when it\u2019s difficult to tell one computer book from another, Manning cel-\nebrates the inventiveness and initiative of the computer business with book covers\nbased on the rich diversity of regional life of two centuries ago, brought back to life by\nJeffreys\u2019 pictures.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 312, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b00bb12a-66e9-4eae-a65c-4e2c859e578f": {"__data__": {"id_": "b00bb12a-66e9-4eae-a65c-4e2c859e578f", "embedding": null, "metadata": {"page_label": "1", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f4a05e2-558c-4845-a041-f1acf38fa6ab", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fb284f4eee7da27527f5218818a6490c08b755cc9b7c3c55379ff739d170d820", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1\nEscaping monolithic hell\nIt was only Monday lunchtime, but Mary, the CTO of Food to Go, Inc. (FTGO), was\nalready feeling frustrated. Her day had started off really well. She had spent the\nprevious week with other software architects and developers at an excellent confer-\nence learning about the latest software development techniques, including contin-\nuous deployment and the microservice architecture. Mary had also met up with her\nformer computer science classmates from North Carolina A&T State and shared\ntechnology leadership war stories. The conference had left her feeling empowered\nand eager to improve how FTGO develops software.\nThis chapter covers\n\uf0a1 The symptoms of monolithic hell and how to \nescape it by adopting the microservice \narchitecture\n\uf0a1 The essential characteristics of the microservice \narchitecture and its benefits and drawbacks\n\uf0a1 How microservices enable the DevOps style of \ndevelopment of large, complex applications\n\uf0a1 The microservice architecture pattern language \nand why you should use it", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1025, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2129c459-808b-49d8-b9d0-2d520e38954f": {"__data__": {"id_": "2129c459-808b-49d8-b9d0-2d520e38954f", "embedding": null, "metadata": {"page_label": "2", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0771fc6-64b4-4756-87ae-dc1362459759", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1c3531763017262a30bdc0de0c6f224af6ab5f466f072c3b14e00145505302ae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 CHAPTER 1 Escaping monolithic hell\n Unfortunately, that feeling had quickly evaporated. She had just spent the first\nmorning back in the office in yet anothe r painful meeting with senior engineering\nand business people. They had spent two hours discussing why the development team\nwas going to miss another critical release date. Sadly, this kind of meeting had become\nincreasingly common over the past few years. Despite adopting agile, the pace of devel-\nopment was slowing down, making it next to impossible to meet the business\u2019s goals.\nAnd, to make matters worse, there didn\u2019t seem to be a simple solution.\n The conference had made Mary realize that FTGO was suffering from a case of\nmonolithic hell and that the cure was to adopt th e microservice architecture. But the\nmicroservice architecture and the associat ed state-of-the-art software development\npractices described at the conference felt like an elusive dream. It was unclear to Mary\nhow she could fight today\u2019s fires while simultaneously improving the way software was\ndeveloped at FTGO.\n Fortunately, as you will learn in this book, there is a way. But first, let\u2019s look at the\nproblems that FTGO is facing and how they got there.\n1.1 The slow march toward monolithic hell\nSince its launch in late 2005, FTGO had grown by leaps and bounds. Today, it\u2019s one of\nthe leading online food delivery companies in the United States. The business even\nplans to expand overseas, although those plans are in jeopardy because of delays in\nimplementing the necessary features.\n At its core, the FTGO application is quite simple. Consumers use the FTGO web-\nsite or mobile application to place food orders at local restaurants. FTGO coordinates\na network of couriers who deliver the orders . It\u2019s also responsible for paying couriers\nand restaurants. Restaurants use the FTGO website to edit their menus and manage\norders. The application uses  various web services, incl uding Stripe for payments,\nTwilio for messaging, and Amazon Simple Email Service (SES) for email.\n Like many other aging enterprise applic ations, the FTGO application is a mono-\nlith, consisting of a single Java Web Application Archive (WAR) file. Over the years, it\nhas become a large, complex application. Despite the best efforts of the FTGO devel-\nopment team, it\u2019s become an example of the Big Ball of Mud pattern ( www.laputan\n.org/mud/). To quote Foote and Yoder, the auth ors of that pattern, it\u2019s a \u201chaphaz-\nardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle.\u201d\nThe pace of software delivery has slowed. To make matters worse, the FTGO applica-\ntion has been written using some increasingly obsolete frameworks. The FTGO appli-\ncation is exhibiting all the symptoms of monolithic hell.\n The next section describes the architec ture of the FTGO application. Then it\ntalks about why the monolithic architecture worked well initially. We\u2019ll get into how\nthe FTGO application has outgrown its ar chitecture and how that has resulted in\nmonolithic hell.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3020, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7f4ea15-44b2-4943-963b-0b98c844f186": {"__data__": {"id_": "c7f4ea15-44b2-4943-963b-0b98c844f186", "embedding": null, "metadata": {"page_label": "3", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71ec4650-0a6c-4e97-be94-898b09bfca94", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a026e66070c9e2629f70be2c3e0f5ebfabc03d52586fc7d49483611aea450490", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3The slow march toward monolithic hell\n1.1.1 The architecture of the FTGO application\nFTGO is a typical enterprise Java applicat ion. Figure 1.1 shows its architecture. The\nFTGO application has a hexagonal architec ture, which is an architectural style\ndescribed in more detail in chapter 2. In  a hexagonal architecture, the core of the\napplication consists of the business logic.  Surrounding the business logic are various\nadapters that implement UIs and integrate with external systems.\nThe business logic consists of modules, each of which is a collection of domain\nobjects. Examples of the modules include Order Management, Delivery Management,\nBilling, and Payments. There are several adapters that interface with the external sys-\ntems. Some are inbound adapters, which handle requests by invoking the business\nlogic, including the REST API and Web UI adapters. Others are outbound adapters,\nwhich enable the business logic to access the MySQL database and invoke cloud ser-\nvices such as Twilio and Stripe.\n Despite having a logically modular architecture, the FTGO application is packaged\nas a single WAR file. The application is an example of the widely used monolithic style\nInvoked by mobile applications\nTwilio\nmessaging\nservice\nCloud services\nFTGO application\nAWS SES\nemail\nservice\nStripe\npayment\nservice\nAdapters invoke\ncloud services.\nTwilio\nadapter\nCourier REST\nAPI\nWeb\nUI\nMySQL\nadapter\nRestaurant\nmanagement\nPayments\nBilling\nNoti\ufb01cation\nOrder\nmanagement\nDelivery\nmanagement\nAmazon\nSES\nadapter\nStripe\nadapter\nConsumer\nRestaurant\nMySQL\nFigure 1.1 The FTGO application has a hexagonal ar chitecture. It consists of business logic \nsurrounded by adapters that implement UIs and interface with external systems, such as mobile \napplications and cloud services for payments, messaging, and email.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a35b0995-d898-46cd-8e5b-06114ce143df": {"__data__": {"id_": "a35b0995-d898-46cd-8e5b-06114ce143df", "embedding": null, "metadata": {"page_label": "4", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a62ca56-208a-4fb8-8d98-e279704b4def", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "34f4ee83b669afaa492c490fad0d7eb1edecd3edc207d6fd8033ecf764dc2737", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 CHAPTER 1 Escaping monolithic hell\nof software architecture, which structures a system as a single executable or deploy-\nable component. If the FTGO application were written in the Go language (GoLang),\nit would be a single executable. A Ruby or NodeJS version of the application would be\na single directory hierarchy of source code. The monolithic architecture isn\u2019t inher-\nently bad. The FTGO developers made a good decision when they picked monolithic\narchitecture for their application. \n1.1.2 The benefits of the monolithic architecture\nIn the early days of FTGO, when the application was relatively small, the application\u2019s\nmonolithic architecture had lots of benefits:\n\uf0a1 Simple to develop\u2014IDEs and other developer tools are focused on building a sin-\ngle application.\n\uf0a1 Easy to make radical changes to the application \u2014You can change the code and the\ndatabase schema, build, and deploy.\n\uf0a1 Straightforward to test \u2014The developers wrote end-to-end tests that launched the\napplication, invoked the REST API, and tested the UI with Selenium.\n\uf0a1 Straightforward to deploy \u2014All a developer had to do was copy the WAR file to a\nserver that had Tomcat installed.\n\uf0a1 Easy to scale \u2014FTGO ran multiple instances of the application behind a load\nbalancer.\nOver time, though, development, testing, deployment, and scaling became much more\ndifficult. Let\u2019s look at why. \n1.1.3 Living in monolithic hell\nUnfortunately, as the FTGO developers ha ve discovered, the monolithic architecture\nhas a huge limitation. Successful applications like the FTGO application have a habit\nof outgrowing the monolithic architecture. Each sprint, the FTGO development team\nimplemented a few more stories, which made  the code base larger. Moreover, as the\ncompany became more successful, the size of the development team steadily grew.\nNot only did this increase the growth rate of the code base, it also increased the man-\nagement overhead.\n As figure 1.2 shows, the once small, si mple FTGO application has grown over the\nyears into a monstrous monolith. Similarl y, the small development team has now\nbecome multiple Scrum teams, each of whic h works on a particular functional area.\nAs a result of outgrowing its architecture, FTGO is in monolithic hell. Development is\nslow and painful. Agile development and depl oyment is impossible. Let\u2019s look at why\nthis has happened.\nCOMPLEXITY INTIMIDATES DEVELOPERS\nA major problem with the FTGO application is that it\u2019s too complex. It\u2019s too large for\nany developer to fully understand. As a result, fixing bugs and correctly implementing\nnew features have become difficult and time consuming. Deadlines are missed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "22717397-516d-4a1b-941c-0798efa8d80f": {"__data__": {"id_": "22717397-516d-4a1b-941c-0798efa8d80f", "embedding": null, "metadata": {"page_label": "5", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b44a5a3-e90e-413d-8af2-adf4fd71260c", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "14f6c3d63e91de545f73897e013a9434e2c665f2912485886c3ba43b8862813e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5The slow march toward monolithic hell\nTo make matters worse, this overwhelming complexity tends to be a downward spiral.\nIf the code base is difficult to understa nd, a developer won\u2019t make changes correctly.\nEach change makes the code base incrementally more complex and harder to under-\nstand. The clean, modular architecture shown earlier in figure 1.1 doesn\u2019t reflect real-\nity. FTGO is gradually becoming a monstrous, incomprehensible, big ball of mud.\n Mary remembers recently attending a conference where she met a developer who\nwas writing a tool to analyze the dependencies between the thousands of JARs in their\nmultimillion lines-of-code (LOC) application. At the time, that tool seemed like some-\nthing FTGO could use. Now she\u2019s not so su re. Mary suspects a better approach is to\nmigrate to an architecture that is better suited to a complex application: microservices. \nDEVELOPMENT IS SLOW\nAs well as having to fight overwhelming complexity, FTGO developers find day-to-day\ndevelopment tasks slow. The large application overloads and slows down a developer\u2019s\nIDE. Building the FTGO application takes a long time. Moreover, because it\u2019s so large,\nthe application takes a long time to start up. As a result, the edit-build-run-test loop\ntakes a long time, which badly impacts productivity. \nPATH FROM COMMIT TO DEPLOYMENT IS LONG AND ARDUOUS\nAnother problem with the FTGO application is that deploying changes into produc-\ntion is a long and painful process. The te am typically deploys updates to production\nonce a month, usually late on a Friday or Saturday night. Mary keeps reading that the\nstate-of-the-art for Software-as-a-Service (SaaS) applications is continuous deployment :\nLarge\ndevelopment\norganization\nSingle code base creates\ncommunication and\ncoordination overhead.\nLarge, complex\nunreliable, dif\ufb01cult\nto maintain\nThe path from code commit to\nproduction is arduous.\nChanges sit in a queue until\nthey can be manually tested.\nOrder management team\nRestaurant management team\nDelivery management team\nFTGO development\nProduction\nJenkins\nCl Backlog\nDeployment pipeline\nSource\ncode\nrepository\nManual\ntesting\nFTGO\napplication\nFigure 1.2 A case of monolithic hell. The la rge FTGO developer team commits their changes to a \nsingle source code repository. The path from code commit to production is long and arduous and \ninvolves manual testing. The FTGO application is large, complex, unreliable, and difficult to maintain.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2445, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f2c0c2a-567d-4e49-a415-a427d8b76241": {"__data__": {"id_": "4f2c0c2a-567d-4e49-a415-a427d8b76241", "embedding": null, "metadata": {"page_label": "6", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f3b4407-8de6-464a-b386-6aa25238ddab", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "dae5303d61777b6b3c880064e2f9e69b8ce25ce9f2bf0af16b74477b85d56d4f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "6 CHAPTER 1 Escaping monolithic hell\ndeploying changes to production many times a day during business hours. Apparently,\nas of 2011, Amazon.com deployed a change into production every 11.6 seconds with-\nout ever impacting the user! For the FTGO  developers, updating production more\nthan once a month seems like a distant dream. And adopting continuous deployment\nseems next to impossible.\n FTGO has partially adopted agile. The engineering team is divided into squads\nand uses two-week sprints. Unfortunately, the journey from code complete to running\nin production is long and arduous. One problem with so many developers committing\nto the same code base is that the build is frequently in an unreleasable state. When the\nFTGO developers tried to solve this problem by using feature branches, their attempt\nresulted in lengthy, painful merges. Consequently, once a team completes its sprint, a\nlong period of testing and code stabilization follows.\n Another reason it takes so long to get changes into production is that testing takes\na long time. Because the code base is so complex and the impact of a change isn\u2019t well\nunderstood, developers and the Continuous  Integration (CI) server must run the\nentire test suite. Some parts of the system even require manual testing. It also takes a\nwhile to diagnose and fix the cause of a test failure. As a result, it takes a couple of days\nto complete a testing cycle. \nSCALING IS DIFFICULT\nThe FTGO team also has problems scaling its application. That\u2019s because different\napplication modules have conflicting resource requirements. The restaurant data, for\nexample, is stored in a large, in-memory database, which is ideally deployed on servers\nwith lots of memory. In contrast, the im age processing module is CPU intensive and\nbest deployed on servers with lots of CPU. Because these modules are part of the same\napplication, FTGO must compromise on the server configuration. \nDELIVERING A RELIABLE MONOLITH IS CHALLENGING\nAnother problem with the FTGO application is the lack of reliability. As a result, there\nare frequent production outages. One reason it\u2019s unreliable is that testing the applica-\ntion thoroughly is difficult, due to its la rge size. This lack of testability means bugs\nmake their way into production. To make matters worse, the application lacks fault iso-\nlation, because all modules are running within the same process. Every so often, a bug\nin one module\u2014for example, a memory leak\u2014crashes all instances of the applica-\ntion, one by one. The FTGO developers don\u2019t enjoy being paged in the middle of the\nnight because of a production outage. The business people like the loss of revenue\nand trust even less. \nLOCKED INTO INCREASINGLY OBSOLETE TECHNOLOGY STACK\nThe final aspect of monolithic hell experien ced by the FTGO team is that the archi-\ntecture forces them to use a technology stack that\u2019s becoming increasingly obsolete. The\nmonolithic architecture makes it difficult to adopt new frameworks and languages. It\nwould be extremely expensive and risky to rewrite the entire monolithic application so\nthat it would use a new and presumably be tter technology. Consequently, developers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3163, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "439be4ff-6f5c-4274-a6fe-164b4a4fd04c": {"__data__": {"id_": "439be4ff-6f5c-4274-a6fe-164b4a4fd04c", "embedding": null, "metadata": {"page_label": "7", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2ff25fd-95e4-49a6-b399-e315acf8f516", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4d7b51b02cfda69a6727c31d84008a10e7afd345efc7c1d105820ed111deafd5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "7What you\u2019ll learn in this book\nare stuck with the technology choices they made at the start of the project. Quite\noften, they must maintain an application written using an increasingly obsolete tech-\nnology stack.\n The Spring framework has continued to evolve while being backward compatible,\nso in theory FTGO might have been able to upgrade. Unfortunately, the FTGO applica-\ntion uses versions of frameworks that are incompatible with newer versions of Spring.\nThe development team has never found the time to upgrade those frameworks. As a\nresult, major parts of the application are written using increasingly out-of-date frame-\nworks. What\u2019s more, the FTGO developers would like to experiment with non-JVM\nlanguages such as GoLang and NodeJS. Sadl y, that\u2019s not possible with a monolithic\napplication. \n1.2 Why this book is relevant to you\nIt\u2019s likely that you\u2019re a developer, architect, CTO, or VP of engineering. You\u2019re responsi-\nble for an application that has outgrown its monolithic architecture. Like Mary at\nFTGO, you\u2019re struggling with software delivery and want to know how to escape\nmonolith hell. Or perhaps you fear that your organization is on the path to mono-\nlithic hell and you want to know how to chan ge direction before it\u2019s too late. If you\nneed to escape or avoid monolithic hell, this is the book for you.\n This book spends a lot of time explaining microservice architecture concepts. My\ngoal is for you to find this material acce ssible, regardless of the technology stack you\nuse. All you need is to be familiar with the basics of enterprise application architecture\nand design. In particular, you need to know the following:\n\uf0a1 Three-tier architecture\n\uf0a1 Web application design\n\uf0a1 How to develop business logic using object-oriented design\n\uf0a1 How to use an RDBMS: SQL and ACID transactions\n\uf0a1 How to use interprocess communication using a message broker and REST APIs\n\uf0a1 Security, including authentication and authorization\nThe code examples in this book are writ ten using Java and the Spring framework.\nThat means in order to get the most out of the examples, you need to be familiar with\nthe Spring framework too.\n1.3 What you\u2019ll learn in this book\nBy the time you finish reading this book you\u2019ll understand the following:\n\uf0a1 The essential characteristics of the micr oservice architecture, its benefits and\ndrawbacks, and when to use it\n\uf0a1 Distributed data management patterns\n\uf0a1 Effective microservice testing strategies\n\uf0a1 Deployment options for microservices\n\uf0a1 Strategies for refactoring a monolithic application into a microservice architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2573, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5ef31ef-ed60-4174-b5cd-f1594a801e6f": {"__data__": {"id_": "e5ef31ef-ed60-4174-b5cd-f1594a801e6f", "embedding": null, "metadata": {"page_label": "8", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a77cbefa-6a4f-4f0f-a54f-26c319bad674", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2d29960d2c90a07d817c5be7110f3d209e3bccaef4c15c93f65895ff3a6560e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "8 CHAPTER 1 Escaping monolithic hell\nYou\u2019ll also be able to do the following:\n\uf0a1 Architect an application using the microservice architecture pattern\n\uf0a1 Develop the business logic for a service\n\uf0a1 Use sagas to maintain data consistency across services\n\uf0a1 Implement queries that span services\n\uf0a1 Effectively test microservices\n\uf0a1 Develop production-ready services that are secure, configurable, and observable\n\uf0a1 Refactor an existing monolithic application to services\n1.4 Microservice architecture to the rescue\nMary has come to the conclusion that FTGO must migrate to the microservice\narchitecture.\n I n t e r e s t i n g l y ,  s o f t w a r e  a r c h i t e c t u r e  h a s  v e r y  l i t t l e  t o  d o  w i t h  f u n c t i o n a l  r e q u i r e -\nments. You can implement a set of use cases \u2014an application\u2019s functional require-\nments\u2014with any architecture. In fact, it\u2019s common for successful applications, such as\nthe FTGO application, to be big balls of mud.\n Architecture matters, however, because of how it affects the so-called quality of ser-\nvice requirements, also called nonfunctional requirements, quality attributes, or ilities. As\nthe FTGO application has grown, various qual ity attributes have suffered, most nota-\nbly those that impact the velocity of softwa re delivery: maintainability, extensibility,\nand testability.\n On the one hand, a disciplined team can slow down the pace of its descent toward\nmonolithic hell. Team members can work ha rd to maintain the modularity of their\napplication. They can write comprehensive automated tests. On the other hand, they\ncan\u2019t avoid the issues of a large team working on a single monolithic application. Nor\ncan they solve the problem of an increasing ly obsolete technology stack. The best a\nteam can do is delay the inevitable. To escape monolithic hell, they must migrate to a\nnew architecture: the Microservice architecture.\n Today, the growing consensus is that if you\u2019re building a large, complex applica-\ntion, you should consider using the microservice architecture. But what are micro-\nservices exactly? Unfortunately, the name doesn\u2019t help because it overemphasizes size.\nThere are numerous definitions of the microservice architecture. Some take the name\ntoo literally and claim that a service shou ld be tiny\u2014for example, 100 LOC. Others\nclaim that a service should only take two weeks to develop. Adrian Cockcroft, formerly\nof Netflix, defines a microservice architectu re as a service-oriented architecture com-\nposed of loosely coupled elements that have bounded contexts. That\u2019s not a bad defi-\nnition, but it is a little dense. Let\u2019s see if we can do better.\n1.4.1 Scale cube and microservices\nM y  d e f i n i t i o n  o f  t h e  m i c r o s e r v i c e  a r c h i t e c t u r e  i s  i n s p i r e d  b y  M a r t i n  A b b o t t  a n d\nMichael Fisher\u2019s excellent book, The Art of Scalability  (Addison-Wesley, 2015). This", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2909, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "203cdb92-3476-46fa-9170-0844baca71ea": {"__data__": {"id_": "203cdb92-3476-46fa-9170-0844baca71ea", "embedding": null, "metadata": {"page_label": "9", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18177179-3a08-4e6c-ba9f-7681863d6a05", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "995d376bdc68870501f038aba3dd5931d073b5231df9850ad66e62d462e7fb38", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "9Microservice architecture to the rescue\nbook describes a useful, three-di mensional scalability model: the scale cube, shown in\nfigure 1.3.\nThe model defines three ways to scale an application: X, Y, and Z.\nX-AXIS SCALING LOAD BALANCES REQUESTS ACROSS MULTIPLE INSTANCES\nX-axis scaling is a common way to scale a mo nolithic application. Figure 1.4 shows\nhow X-axis scaling works. You run multiple  instances of the application behind a\nload balancer. The load balancer distributes requests among the N identical instances of\nthe application. This is a great way of im proving the capacity and availability of an\napplication. \nZ-AXIS SCALING ROUTES REQUESTS BASED ON AN ATTRIBUTE OF THE REQUEST\nZ-axis scaling also runs multiple instances of the monolith application, but unlike X-axis\nscaling, each instance is responsible for only a subset of the data. Figure 1.5 shows how\nZ-axis scaling works. The router in front of the instances uses a request attribute to\nroute it to the appropriate instance. An application might, for example, route requests\nusing userId.\n In this example, each application instance is responsible for a subset of users. The\nrouter uses the userId specified by the request Authorization header to select one of\nMicroservices\nY-axis scaling,\na.k.a. functional\ndecomposition\nScale by splitting\nthings that are\ndifferent, such as\nby function.\nX-axis scaling,\na.k.a. horizontal duplication\nScale by cloning.\nZ-axis scaling,\na.k.a. data partitioning\nScale by splitting\nsimilar things, such as\nby customer ID.\nOne\ninstance\nMany\ninstances\nOne\npartition\nMany\npartitions\nMonolith\nFigure 1.3 The scale cube defines three separate ways to scale an application: X-axis \nscaling load balances requests across multiple, identical instances; Z-axis scaling routes \nrequests based on an attribute of the request; Y-axis functionally decomposes an application \ninto services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1885, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c01a406-65c2-4253-a6fd-24a80f502157": {"__data__": {"id_": "4c01a406-65c2-4253-a6fd-24a80f502157", "embedding": null, "metadata": {"page_label": "10", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c21c889-ebba-4bc1-b453-0aea92e0373b", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "32f6c9c517a266e68998cacabea41849ed5286625d76ca0c91ee57d1fc3ecd7e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10 CHAPTER 1 Escaping monolithic hell\nthe N identical instances of the application. Z-axis scaling is a great way to scale an\napplication to handle increasing transaction and data volumes. \nY-AXIS SCALING FUNCTIONALLY DECOMPOSES AN APPLICATION INTO SERVICES\nX- and Z-axis scaling improve the application\u2019s capacity and availability. But neither\napproach solves the problem of increasing development and application complexity. To\nsolve those, you need to apply Y-axis scaling, or functional decomposition. Figure 1.6 shows\nhow Y-axis scaling works: by splitting a monolithic application into a set of services.\nApplication\ninstance 1\nN identical application\ninstances\nApplication\ninstance 2\nLoad\nbalancerClient\nRequest\nApplication\ninstance 3\nRoute requests using a\nload balancing algorithm.\nFigure 1.4 X-axis scaling runs multiple , identical instances of the monolithic \napplication behind a load balancer.\nApplication\ninstance 1\nN identical application\ninstances\nApplication\ninstance 2Client Router\nRequest:\nGET /...\nAuthorization: userId:password\nApplication\ninstance 3\nUsers: a\u2013h\nUsers: i-p\nUsers: r\u2013z\nUses the userId to decide\nwhere to route requests\nEach instance is responsible\nfor a subset of the users.\nFigure 1.5 Z-axis scaling runs multiple identi cal instances of the monolithic application behind \na router, which routes based on a request attribute . Each instance is responsible for a subset \nof the data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1420, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ea0d0022-4676-48f4-aa0c-6dc4fb5a8c2c": {"__data__": {"id_": "ea0d0022-4676-48f4-aa0c-6dc4fb5a8c2c", "embedding": null, "metadata": {"page_label": "11", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0857e15a-f7c6-4cff-be38-7afcb99e683c", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "07c920842397a76e02e3cf845baf843d0eec4c0c7406612b4979da1af9b5a163", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "11Microservice architecture to the rescue\nA service is a mini application that implements narrowly focused functionality, such as\norder management, customer management, and so on. A service is scaled using X-axis\nscaling, though some services may also use Z-axis scaling. For example, the Order ser-\nvice consists of a set of load-balanced service instances.\n The high-level definition of microservice  architecture (microservices) is an archi-\ntectural style that functionally decomposes an application into a set of services. Note\nthat this definition doesn\u2019t say anything about size. Instead, what matters is that each\nservice has a focused, cohesive set of responsibilities. Later in the book I discuss what\nthat means.\n Now let\u2019s look at how the microservice architecture is a form of modularity. \n1.4.2 Microservices as a form of modularity\nModularity is essential when developing large,  complex applications. A modern appli-\ncation like FTGO is too large to be develo ped by an individual. It\u2019s also too complex\nto be understood by a single person. Applications must be decomposed into modules\nthat are developed and understood by diff erent people. In a monolithic application,\nmodules are defined using a combination of programming language constructs (such\nas Java packages) and build artifacts (such as Java JAR files). However, as the FTGO\ndevelopers have discovered, this approach tends not to work well in practice. Long-\nlived, monolithic applications usually degenerate into big balls of mud.\n The microservice architecture uses services as the unit of modularity. A service has\nan API, which is an impermeable boundary that is difficult to violate. You can\u2019t bypass\nOrder\nService\nApplication\nCustomer\nServiceClient\nReview\nService\nOrder\nrequests\nCustomer\nrequests\nReview\nrequests\nOrder\nService\ninstance 1\nOrder service\nOrder\nService\ninstance 2\nOrder\nService\ninstance 3\nLoad\nbalancer\nRequest\nY-axis scaling functionality decomposes\nan application into services.\nEach service is typically scaled using\nX-axis and possibly Z-axis scaling.\nFigure 1.6 Y-axis scaling splits the application into a set of services. Each service is responsible for \na particular function. A service is scaled using X-axis scaling and, possibly, Z-axis scaling.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2253, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "62a800c2-4360-40e5-bdfe-a4891b4dedca": {"__data__": {"id_": "62a800c2-4360-40e5-bdfe-a4891b4dedca", "embedding": null, "metadata": {"page_label": "12", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72355989-d836-4d4e-a0b2-1304c7e6283d", "node_type": "4", "metadata": {"page_label": "12", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e3b49550c51b851d9ec6ba41eafbc61b118517e629d740a1665009cee5698cb0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12 CHAPTER 1 Escaping monolithic hell\nthe API and access an internal class as you can with a Java package. As a result, it\u2019s\nmuch easier to preserve the modularity of the application over time. There are other\nbenefits of using services as building blocks , including the ability to deploy and scale\nthem independently. \n1.4.3 Each service has its own database\nA key characteristic of the microservice arch itecture is that the services are loosely\ncoupled and communicate only via APIs. One way to achieve loose coupling is by each\nservice having its own datastore. In the online store, for example, Order Service has a\ndatabase that includes the ORDERS table, and Customer Service has its database, which\nincludes the CUSTOMERS table. At development time, developers can change a service\u2019s\nschema without having to coordinate with  developers working on other services. At\nruntime, the services are isolated from each other\u2014for example, one service will\nnever be blocked because another service holds a database lock.\nNow that we\u2019ve defined the microservice architecture and described some of its essen-\ntial characteristics, let\u2019s look at how this applies to the FTGO application. \n1.4.4 The FTGO microservice architecture\nThe rest of this book discusses the FTGO application\u2019s microservice architecture in\ndepth. But first let\u2019s quickly look at what it means to apply Y-axis scaling to this applica-\ntion. If we apply Y-axis decomposition to the FTGO application, we get the architec-\nture shown in figure 1.7. The decomposed application consists of numerous frontend\nand backend services. We would also apply X- axis and, possibly Z-axis scaling, so that\nat runtime there would be multiple instances of each service.\n The frontend services include an API gateway and the Restaurant Web UI. The API\ngateway, which plays the role of a facade and is described in detail in chapter 8, provides\nthe REST APIs that are used by the consumers\u2019 and couriers\u2019 mobile applications. The\nRestaurant Web UI implements the web interface that\u2019s used by the restaurants to man-\nage menus and process orders.\n The FTGO application\u2019s business logic consists of numerous backend services.\nEach backend service has a REST API and its own private datastore. The backend ser-\nvices include the following:\n\uf0a1 Order Service\u2014 Manages orders\n\uf0a1 Delivery Service\u2014Manages delivery of orders from restaurants to consumers\nDon\u2019t worry: Loose coupling doesn\u2019t make Larry Ellison richer\nThe requirement for each service to have its own database doesn\u2019t mean it has its\nown database server. You don\u2019t, for example, have to spend 10 times more on Oracle\nRDBMS licenses. Chapter 2 explores this topic in depth.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2677, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fdac8698-6786-4cc3-9a62-f1d958cf0e29": {"__data__": {"id_": "fdac8698-6786-4cc3-9a62-f1d958cf0e29", "embedding": null, "metadata": {"page_label": "13", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91881cc2-df85-47e3-9f35-196d50aa7ac9", "node_type": "4", "metadata": {"page_label": "13", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9306a5441af22f1c57c655667935b1dea72988218a32575d40058a4403e5f161", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "13Microservice architecture to the rescue\n\uf0a1 Restaurant Service\u2014Maintains information about restaurants\n\uf0a1 Kitchen Service\u2014Manages the preparation of orders\n\uf0a1 Accounting Service\u2014Handles billing and payments\nMany services correspond to the modules described earlier in this chapter. What\u2019s dif-\nferent is that each service and its API are very clearly defined. Each one can be inde-\npendently developed, tested, deployed, and scaled. Also, this architecture does a good\njob of preserving modularity. A developer can\u2019t bypass a service\u2019s API and access its\ninternal components. Chapter 13 describes how to transform an existing monolithic\napplication into microservices. \n1.4.5 Comparing the microservice architecture and SOA\nSome critics of the microservice architec ture claim it\u2019s nothing new\u2014it\u2019s service-\noriented architecture (SOA). At a very hi gh level, there are some similarities. SOA\nand the microservice architecture are architec tural styles that structure a system as a\nset of services. But as table 1.1 shows, on ce you dig deep, you encounter significant\ndifferences.\nAmazon\nSES\nAdapter\nTwilio\nAdapter\nStripe\nAdapter\nThe API Gateway routes\nrequests from the mobile\napplications to services.\nServices have APIs. A service\u2019s data is private.\nServices corresponding\nto business capabilities/\ndomain-driven design\n(DDD) subdomains\nAPI\nGateway\nRestaurant\nWeb UI\nOrder\nService\nCourier\nREST\nAPI\nREST\nAPI\nREST\nAPI\nConsumer\nRestaurant\nRestaurant\nService\nREST\nAPI\nAccounting\nService\nREST\nAPI\nNoti\ufb01cation\nService\nREST\nAPI\nKitchen\nService\nREST\nAPI\nDelivery\nService\nREST\nAPI\nFigure 1.7 Some of the services of the mi croservice architecture-based version of the FTGO \napplication. An API Gateway routes requests from the mobile applications to services. The services \ncollaborate via APIs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1788, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "25ce32fd-b389-4327-b4c8-b56d2828b222": {"__data__": {"id_": "25ce32fd-b389-4327-b4c8-b56d2828b222", "embedding": null, "metadata": {"page_label": "14", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc1e9a60-63c8-4545-b595-458911499267", "node_type": "4", "metadata": {"page_label": "14", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "be8873d6aeea9842099961ee5a03f923b9d1768ecce8fc042e1ae74e245e0b48", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "14 CHAPTER 1 Escaping monolithic hell\nSOA and the microservice architecture usually use different technology stacks. SOA\napplications typically use heavyweight technologies such as SOAP and other WS* stan-\ndards. They often use an ESB, a smart pipe that contains business and message-processing\nlogic to integrate the services. Applicatio ns built using the microservice architecture\ntend to use lightweight, open source technologies. The services communicate via dumb\npipes, such as message brokers or lightweight protocols like REST or gRPC.\n SOA and the microservice architecture also differ in how they treat data. SOA\napplications typically have a global data model and share databases. In contrast, as\nmentioned earlier, in the microservice architecture each service has its own database.\nMoreover, as described in chapter 2, each service is usually considered to have its own\ndomain model.\n Another key difference between SOA and the microservice architecture is the size\nof the services. SOA is typically used to in tegrate large, complex, monolithic applica-\ntions. Although services in a microservice  architecture aren\u2019t always tiny, they\u2019re\nalmost always much smaller. As a result, a SOA application usually consists of a few\nlarge services, whereas a microservices-based application typically consists of dozens or\nhundreds of smaller services. \n1.5 Benefits and drawbacks of the microservice \narchitecture\nLet\u2019s first consider the benefits and then we\u2019ll look at the drawbacks.\n1.5.1 Benefits of the microservice architecture\nThe microservice architecture has the following benefits:\n\uf0a1 It enables the continuous delivery and deployment of large, complex applications.\n\uf0a1 Services are small and easily maintained.\n\uf0a1 Services are independently deployable.\n\uf0a1 Services are independently scalable.\n\uf0a1 The microservice architecture enables teams to be autonomous.\n\uf0a1 It allows easy experimenting and adoption of new technologies.\n\uf0a1 It has better fault isolation.\nTable 1.1 Comparing SOA with microservices\nSOA Microservices\nInter-service \ncommunication\nSmart pipes, such as Enterprise Ser-\nvice Bus, using heavyweight protocols, \nsuch as SOAP and the other WS* \nstandards.\nDumb pipes, such as a message \nbroker, or direct service-to-service \ncommunication, using lightweight \nprotocols such as REST or gRPC\nData Global data model and shared data-\nbases\nData model and database per service\nTypical service Larger monolithic application Smaller service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2455, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cda86376-b66c-4e6d-89cd-a66828474a9b": {"__data__": {"id_": "cda86376-b66c-4e6d-89cd-a66828474a9b", "embedding": null, "metadata": {"page_label": "15", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "463d6c70-df99-4f81-9733-c4b7424ff992", "node_type": "4", "metadata": {"page_label": "15", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "78aa8f1540f462df664157af2f58f09ee5b05490a38c24ad39eaaceaacc44f79", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "15Benefits and drawbacks of the microservice architecture\nLet\u2019s look at each benefit.\nENABLES THE CONTINUOUS DELIVERY AND DEPLOYMENT OF LARGE, COMPLEX APPLICATIONS\nThe most important benefit of the microservice architecture is that it enables continu-\nous delivery and deployment of large, complex applications. As described later in sec-\ntion 1.7, continuous delivery/deployment is part of DevOps, a set of practices for the\nrapid, frequent, and reliable delivery of software. High-performing DevOps organiza-\ntions typically deploy changes into production with very few production issues.\n There are three ways that the microservi ce architecture enables continuous deliv-\nery/deployment:\n\uf0a1 It has the testability required by continuous delivery/deployment\u2014Automated testing is\na key practice of continuous delivery/d eployment. Because each service in a\nmicroservice architecture is relatively small, automated tests are much easier to\nwrite and faster to execute. As a result, the application will have fewer bugs.\n\uf0a1 It has the deployability required by continuous delivery/deployment \u2014Each service can\nbe deployed independently of other services. If the developers responsible for a\nservice need to deploy a change that\u2019s local to that service, they don\u2019t need to\ncoordinate with other developers. They can deploy their changes. As a result,\nit\u2019s much easier to deploy changes frequently into production.\n\uf0a1 It enables development teams to be autonomous and loosely coupled\u2014You can structure\nthe engineering organization as a collec tion of small (for example, two-pizza)\nteams. Each team is solely responsible for the development and deployment of\none or more related services. As figure 1.8 shows, each team can develop, deploy,\nand scale their services independently of all the other teams. As a result, the\ndevelopment velocity is much higher.\nThe ability to do continuous delivery and deployment has several business benefits:\n\uf0a1 It reduces the time to market, which enables the business to rapidly react to\nfeedback from customers.\n\uf0a1 It enables the business to provide the kind of reliable service today\u2019s customers\nhave come to expect.\n\uf0a1 Employee satisfaction is higher because more time is spent delivering valuable\nfeatures instead of fighting fires.\nAs a result, the microservice architecture has become the table stakes of any business\nthat depends upon software technology. \nEACH SERVICE IS SMALL AND EASILY MAINTAINED\nAnother benefit of the microservice architecture is that each service is relatively small.\nThe code is easier for a developer to un derstand. The small code base doesn\u2019t slow\ndown the IDE, making developers more productive. And each service typically starts a\nlot faster than a large monolith does, wh ich also makes developers more productive\nand speeds up deployments.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2804, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58c8b66c-1eb7-458d-bb4a-a7a293c6be46": {"__data__": {"id_": "58c8b66c-1eb7-458d-bb4a-a7a293c6be46", "embedding": null, "metadata": {"page_label": "16", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bae20534-8682-4b47-aa56-5e98d3482c71", "node_type": "4", "metadata": {"page_label": "16", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f932752e4d9fb7624f5986ea47ec8cee8ae893f67896c31037a1636546ec477f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "16 CHAPTER 1 Escaping monolithic hell\nSERVICES ARE INDEPENDENTLY SCALABLE\nEach service in a microservice architecture  can be scaled independently of other ser-\nvices using X-axis cloning and Z-axis pa rtitioning. Moreover, each service can be\ndeployed on hardware that\u2019s best suited to its resource requirements. This is quite dif-\nferent than when using a monolithic architecture, where components with wildly dif-\nferent resource requirements\u2014for example, CPU-intensive vs. memory-intensive\u2014\nmust be deployed together. \nBETTER FAULT ISOLATION\nThe microservice architecture has better fa ult isolation. For example, a memory leak\nin one service only affects that service. Other services will continue to handle requests\nnormally. In comparison, one misbehaving component of a monolithic architecture\nwill bring down the entire system. \nEASILY EXPERIMENT WITH AND ADOPT NEW TECHNOLOGIES\nLast but not least, the microservice arch itecture eliminates any long-term commit-\nment to a technology stack. In principle, when developing a new service, the develop-\ners are free to pick whatever language and frameworks are best suited for that service.\nSmall, autonomous,\nloosely coupled teams\nEach service has\nits own source\ncode repository.\nEach service has\nits own automated\ndeployment pipeline.\nSmall, simple,\nreliable, easy to\nmaintain services\nOrder management team\nRestaurant management team\nDelivery management team\nFTGO development\nProduction\nJenkins Cl\nDeployment pipeline\nOrder Service\nsource code\nrepository\nOrder Service\nJenkins Cl\nDeployment pipeline\nRestaurant Service\nsource code\nrepository\nRestaurant Service\nJenkins Cl\nDeployment pipeline\nDelivery Service\nsource code\nrepository\nDelivery Service\nFigure 1.8 The microservices-based FTGO application consists of a set of loosely coupled services. \nEach team develops, tests, and deploys their services independently.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "35b0178e-5229-432f-ada1-4ce1665cdcf7": {"__data__": {"id_": "35b0178e-5229-432f-ada1-4ce1665cdcf7", "embedding": null, "metadata": {"page_label": "17", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c58bd075-53cb-45a5-8166-f492fdd91add", "node_type": "4", "metadata": {"page_label": "17", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "45af7ceee38f156762665d643ab0e401f4229440dc2e148cb32d89b16ebf2183", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "17Benefits and drawbacks of the microservice architecture\nIn many organizations, it makes sense to re strict the choices, but the key point is that\nyou aren\u2019t constrained by past decisions.\n Moreover, because the services are smal l, rewriting them using better languages\nand technologies becomes practical. If the trial of a new technology fails, you can\nthrow away that work without risking the en tire project. This is quite different than\nwhen using a monolithic architecture, wher e your initial technology choices severely\nconstrain your ability to use different languages and frameworks in the future. \n1.5.2 Drawbacks of the microservice architecture\nCertainly, no technology is a silver bull et, and the microservice architecture has a\nnumber of significant drawbacks and issues. Indeed most of this book is about how to\naddress these drawbacks and issues. As you read about the challenges, don\u2019t worry.\nLater in this book I describe ways to address them.\n Here are the major drawbacks and issues of the microservice architecture:\n\uf0a1 Finding the right set of services is challenging.\n\uf0a1 Distributed systems are complex, which makes development, testing, and deploy-\nment difficult.\n\uf0a1 Deploying features that span multiple services requires careful coordination.\n\uf0a1 Deciding when to adopt the microservice architecture is difficult.\nLet\u2019s look at each one in turn.\nFINDING THE RIGHT SERVICES IS CHALLENGING\nOne challenge with using the microservice ar chitecture is that there isn\u2019t a concrete,\nwell-defined algorithm for decomposing a system  into services. As with much of soft-\nware development, it\u2019s something of an art. To make matters worse, if you decompose\na system incorrectly, you\u2019ll build a distributed monolith, a system consisting of coupled\nservices that must be deployed together. A distributed monolith has the drawbacks of\nboth the monolithic architecture and the microservice architecture. \nDISTRIBUTED SYSTEMS ARE COMPLEX\nAnother issue with using the microservice ar chitecture is that developers must deal\nwith the additional complexity of creating  a distributed system. Services must use an\ninterprocess communication mechanism. This is more complex than a simple method\ncall. Moreover, a service must be designed to handle partial failure and deal with the\nremote service either being unavailable or exhibiting high latency.\n Implementing use cases that span multiple  services requires the use of unfamiliar\ntechniques. Each service has its own database, which makes it a challenge to implement\ntransactions and queries that span services. As described in chapter 4, a microservices-\nbased application must use what are known as sagas to maintain data consistency\nacross services. Chapter 7 explains that a microservices-based application can\u2019t retrieve\ndata from multiple services using simple queries. Instead, it must implement queries\nusing either API composition or CQRS views.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2911, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2aec227f-4364-4e0e-9a58-4e47755d5166": {"__data__": {"id_": "2aec227f-4364-4e0e-9a58-4e47755d5166", "embedding": null, "metadata": {"page_label": "18", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d289173e-3ae4-4c94-b3f7-dde8a0a81a7a", "node_type": "4", "metadata": {"page_label": "18", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fe29dcc4e212943fc35f4f62f86a68754f55c63b0f4a2f81a45af3775dff90b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "18 CHAPTER 1 Escaping monolithic hell\n IDEs and other development tools are fo cused on building monolithic applica-\ntions and don\u2019t provide explicit support for developing distributed applications. Writ-\ning automated tests that involve multiple se rvices is challenging. These are all issues\nthat are specific to the mi croservice architecture. Consequently, your organization\u2019s\ndevelopers must have sophisticated software development and delivery skills in order\nto successfully use microservices.\n The microservice architecture also intr oduces significant operational complexity.\nMany more moving parts\u2014multiple instance s of different types of service\u2014must be\nmanaged in production. To successfully deploy microservices, you need a high level of\nautomation. You must use technologies such as the following:\n\uf0a1 Automated deployment tooling, like Netflix Spinnaker\n\uf0a1 An off-the-shelf PaaS, like Pivotal Cloud Foundry or Red Hat OpenShift\n\uf0a1 A Docker orchestration platform, like Docker Swarm or Kubernetes\nI describe the deployment options in more detail in chapter 12. \nDEPLOYING FEATURES SPANNING MULTIPLE SERVICES NEEDS CAREFUL COORDINATION\nAnother challenge with using the microservice architecture is that deploying features\nthat span multiple services requires careful coordination between the various develop-\nment teams. You have to create a rollout plan that orders service deployments based\non the dependencies between services. That\u2019s quite different than a monolithic archi-\ntecture, where you can easily deploy updates to multiple components atomically. \nDECIDING WHEN TO ADOPT IS DIFFICULT\nAnother issue with using the microservice architecture is deciding at what point during\nthe lifecycle of the application you should use this architecture. When developing the\nfirst version of an application, you often do n\u2019t have the problems that this architec-\nture solves. Moreover, using an elaborate,  distributed architecture will slow down\ndevelopment. That can be a major dilemma for startups, where the biggest problem is\nusually how to rapidly evolve the busi ness model and accompanying application.\nUsing the microservice architecture makes it much more difficult to iterate rapidly. A\nstartup should almost certainly begin with a monolithic application.\n Later on, though, when the problem is how to handle complexity, that\u2019s when it\nmakes sense to functionally decompose the application into a set of microservices.\nYou may find refactoring difficult becaus e of tangled dependencies. Chapter 13 goes\nover strategies for refactoring a monolithic application into microservices.\n As you can see, the microservice architecture offer many benefits, but also has some\nsignificant drawbacks. Because of these i ssues, adopting a microservice architecture\nshould not be undertaken lightly. But for complex applications, such as a consumer-\nfacing web application or SaaS application, it\u2019s usually the right choice. Well-known\nsites like eBay ( www.slideshare.net/RandyShoup/the-ebay-architecture-striking-a-\nbalance-between-site-stability-feature-velocity-performance-and-cost ), Amazon.com,\nGroupon, and Gilt have all evolved from a monolithic architecture to a microservice\narchitecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3203, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4067fc11-a87c-4dee-a85d-2bb7dc264abd": {"__data__": {"id_": "4067fc11-a87c-4dee-a85d-2bb7dc264abd", "embedding": null, "metadata": {"page_label": "19", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "476b7ee1-50ad-47b2-b867-14ff502545ef", "node_type": "4", "metadata": {"page_label": "19", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7a6e0b8fda9c1cc1a23fb158075257d82af69bec1931cb5dd6811700606f7301", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19The Microservice architecture pattern language\n You must address numerous design and architectural issues when using the micro-\nservice architecture. What\u2019s more, many of these issues have multiple solutions, each\nwith a different set of trade-offs. There is no one single perfect solution. To help guide\nyour decision making, I\u2019ve created the Microservice architecture pattern language. I ref-\nerence this pattern language throughout the rest of the book as I teach you about the\nmicroservice architecture. Let\u2019s look at what a pattern language is and why it\u2019s helpful. \n1.6 The Microservice architecture pattern language\nArchitecture and design are all about making decisions. You need to decide whether\nthe monolithic or microservice architecture is the best fit for your application. When\nmaking these decisions you have lots of trade-offs to consider. If you pick the microser-\nvice architecture, you\u2019ll need to address lots of issues.\n A good way to describe the various arch itectural and design options and improve\ndecision making is to use a pattern language . Let\u2019s first look at why we need patterns\nand a pattern language, and then we\u2019ll take a tour of the Microservice architecture\npattern language.\n1.6.1 Microservice architecture is not a silver bullet\nBack in 1986, Fred Brooks, author of The Mythical Man-Month (Addison-Wesley Profes-\nsional, 1995), said that in software engineering, there are no silver bullets. That means\nthere are no techniques or technologies that if adopted would give you a tenfold\nboost in productivity. Yet decades years later, developers are still arguing passionately\nabout their favorite silver bullets, absolute ly convinced that their favorite technology\nwill give them a massive boost in productivity.\n A lot of arguments follow the suck/rock dichotomy (http://nealford.com/memeagora/\n2009/08/05/suck-rock-dichotomy.html), a term coined by Neal Ford that describes\nhow everything in the software world either  sucks or rocks, with no middle ground.\nThese arguments have this structure: if you do X, then a puppy will die, so therefore\nyou must do Y. For example, synchronous versus reactive programming, object-oriented\nversus functional, Java versus JavaScript, REST versus messaging. Of course, reality is\nmuch more nuanced. Every technology has drawbacks and limitations that are often\noverlooked by its advocates. As a result, th e adoption of a technology usually follows\nthe Gartner hype cycle (https://en.wikipedia.org/wiki/Hype_cycle), in which an emerg-\ning technology goes through five phases, including the peak of inflated expectations  (it\nrocks), followed by the trough of disillusionment (it sucks), and ending with the plateau\nof productivity (we now understand the trade-offs and when to use it).\n Microservices are not immune to the silver bullet phenomenon. Whether this\narchitecture is appropriate for your appl ication depends on many factors. Conse-\nquently, it\u2019s bad advice to advise always using the microservice architecture, but it\u2019s\nequally bad advice to advise never using it. As with many things, it depends.\n The underlying reason for these polarized and hyped arguments about technology is\nthat humans are primarily driven by their emotions. Jonathan Haidt, in his excellent", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3256, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b524f6a-2e0b-475a-8da7-5160ae19406e": {"__data__": {"id_": "9b524f6a-2e0b-475a-8da7-5160ae19406e", "embedding": null, "metadata": {"page_label": "20", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "efa1ff18-14ec-467f-ba6a-883f2ac3458a", "node_type": "4", "metadata": {"page_label": "20", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "47a03bfb131cd53aeed3594288745847cd72b777d51c25a95af12b8fe1bd6aff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "20 CHAPTER 1 Escaping monolithic hell\nbook The Righteous Mind: Why Good People Are Divided by Politics and Religion  (Vintage,\n2013), uses the metaphor of an elephant and its rider to describe how the human mind\nworks. The elephant represents the emotion part of the human brain. It makes most of\nthe decisions. The rider represents the rational part of the brain. It can sometimes influ-\nence the elephant, but it mostly provides justifications for the elephant\u2019s decisions.\n We\u2014the software development commun ity\u2014need to overcome our emotional\nnature and find a better way of discussing and applying technology. A great way to dis-\ncuss and describe technology is to use the pattern format, because it\u2019s objective. When\ndescribing a technology in the pattern fo rmat, you must, for example, describe the\ndrawbacks. Let\u2019s take a look at the pattern format. \n1.6.2 Patterns and pattern languages\nA pattern is a reusable solution to a problem that occurs in a particular context. It\u2019s an\nidea that has its origins in real-world archit ecture and that has proven to be useful in\nsoftware architecture and design. The concept of a pattern was created by Christo-\npher Alexander, a real-world architec t. He also created the concept of a pattern lan-\nguage, a collection of related patterns that solve problems within a particular domain.\nHis book A Pattern Language: Towns, Buildings, Construction  (Oxford University Press,\n1977) describes a pattern language for architecture that consists of 253 patterns. The\npatterns range from solutions to high-level  problems, such as where to locate a city\n(\u201cAccess to water\u201d), to low-level problems, such as how to design a room (\u201cLight on\ntwo sides of every room\u201d). Each of these patterns solves a problem by arranging physi-\ncal objects that range in scope from cities to windows.\n Christopher Alexander\u2019s writings inspir ed the software community to adopt the\nconcept of patterns and pattern languages. The book Design Patterns: Elements of Reus-\nable Object-Oriented Software  (Addison-Wesley Professional, 1994), by Erich Gamma,\nRichard Helm, Ralph Johnson, and John Vlissi des is a collection of object-oriented\ndesign patterns. The book popularized patterns among software developers. Since the\nmid-1990s, software developers have documented numerous software patterns. A soft-\nware pattern solves a software architecture or design problem by defining a set of col-\nlaborating software elements.\n Let\u2019s imagine, for example, that you\u2019re building a banking application that must\nsupport a variety of overdraft policies. Each policy defines limits on the balance of an\naccount and the fees charged for an overdr awn account. You can solve this problem\nusing the Strategy pattern, which is a well-known pattern from the classic Design Pat-\nterns book. The solution defined by the Strategy pattern consists of three parts:\n\uf0a1 A strategy interface called Overdraft that encapsulates the overdraft algorithm\n\uf0a1 One or more concrete strategy classes, one for each particular context\n\uf0a1 The Account class that uses the algorithm\nThe Strategy pattern is an object-oriented design pattern, so the elements of the solution\nare classes. Later in this section, I describe high-level design patterns, where the solu-\ntion consists of collaborating services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3287, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dad418ab-2de2-40da-8bc3-f047618919fa": {"__data__": {"id_": "dad418ab-2de2-40da-8bc3-f047618919fa", "embedding": null, "metadata": {"page_label": "21", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe5816be-8315-40bf-a380-8df9693624bc", "node_type": "4", "metadata": {"page_label": "21", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7e12005cf2afc166236269706e92dc21e2d098fb45a7ab1618934ceb1230733b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "21The Microservice architecture pattern language\n One reason why patterns are valuable is  because a pattern must describe the con-\ntext within which it applies. The idea that a solution is specific to a particular context\nand might not work well in other contexts is an improvement over how technology\nused to typically be discussed. For example,  a solution that solves the problem at the\nscale of Netflix might not be the best approach for an application with fewer users.\n The value of a pattern, however, goes far beyond requiring you to consider the\ncontext of a problem. It forces you to describe other critical yet frequently overlooked\naspects of a solution. A commonly used pattern structure includes three especially\nvaluable sections:\n\uf0a1 Forces\n\uf0a1 Resulting context\n\uf0a1 Related patterns\nLet\u2019s look at each of these, starting with forces.\nFORCES: THE ISSUES THAT YOU MUST ADDRESS WHEN SOLVING A PROBLEM\nThe forces section of a pattern describes the forces (issues) that you must address\nwhen solving a problem in a given context.  Forces can conflict, so it might not be\npossible to solve all of them. Which forc es are more important depends on the con-\ntext. You have to prioritize solving some forces over others. For example, code must\nbe easy to understand and have good performance. Code written in a reactive style\nhas better performance than synchronous code , yet is often more difficult to under-\nstand. Explicitly listing the forces is usef ul because it makes clear which issues need\nto be solved. \nRESULTING CONTEXT: THE CONSEQUENCES OF APPLYING A PATTERN\nThe resulting context section of a pattern describes the consequences of applying the\npattern. It consists of three parts:\n\uf0a1 Benefits\u2014The benefits of the pattern, including the forces that have been resolved\n\uf0a1 Drawbacks\u2014The drawbacks of the pattern, including the unresolved forces\n\uf0a1 Issues\u2014The new problems that have been introduced by applying the pattern\nThe resulting context provides a more complete and less biased view of the solution,\nwhich enables better design decisions. \nRELATED PATTERNS: THE FIVE DIFFERENT TYPES OF RELATIONSHIPS\nThe related patterns section of a pattern describes the relationship between the pattern\nand other patterns. There are five types of relationships between patterns:\n\uf0a1 Predecessor\u2014A predecessor pattern is a pattern that motivates the need for this\npattern. For example, the Microservice architecture pattern is the predecessor\nto the rest of the patterns in the pattern language, except the monolithic archi-\ntecture pattern.\n\uf0a1 Successor\u2014A pattern that solves an issue that has been introduced by this pat-\ntern. For example, if you apply the Microservice architecture pattern, you must", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2704, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dae49efa-d16e-422e-a8bf-b5124dcaf303": {"__data__": {"id_": "dae49efa-d16e-422e-a8bf-b5124dcaf303", "embedding": null, "metadata": {"page_label": "22", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7cea9f3-f05b-449e-a27f-bf037f89f560", "node_type": "4", "metadata": {"page_label": "22", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "21d5839a9a0c669a4031a948e9ea773cdad23c00ff801e3a14f59bb1135a7be5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "22 CHAPTER 1 Escaping monolithic hell\nthen apply numerous successor patterns , including service discovery patterns\nand the Circuit breaker pattern.\n\uf0a1 Alternative\u2014A pattern that provides an alternative solution to this pattern. For\nexample, the Monolithic architecture pattern and the Microservice architec-\nture pattern are alternative ways of architecting an application. You pick one or\nthe other.\n\uf0a1 Generalization\u2014A pattern that is a general solution to a problem. For example,\nin chapter 12 you\u2019ll learn about the different implementations of the Single ser-\nvice per host pattern.\n\uf0a1 Specialization\u2014A specialized form of a particular pattern. For example, in chap-\nter 12 you\u2019ll learn that the Deploy a service as a container pattern is a specializa-\ntion of Single service per host.\nIn addition, you can organize patterns that tackle issues in a particular problem area\ninto groups. The explicit description of re lated patterns provides valuable guidance\non how to effectively solve a particular pr oblem. Figure 1.9 shows how the relation-\nships between patterns is visually represented.\nThe different kinds of relationships betwee n patterns shown in figure 1.9 are repre-\nsented as follows:\n\uf0a1 Represents the predecessor-successor relationship\n\uf0a1 Patterns that are alternative solutions to the same problem\n\uf0a1 Indicates that one pattern is a specialization of another pattern\n\uf0a1 Patterns that apply to a particular problem area\nPattern\nProblem area\nDeployment\nMonolithic\narchitecture\nKey\nMicroservice\narchitecture\nSingle service\nper host\nService-per-container\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nFigure 1.9 The visual representation of different types of relationships \nbetween the patterns: a successor pattern solves a problem created by applying \nthe predecessor pattern; two or more patterns can be alternative solutions to \nthe same problem; one pattern can be a specialization of another pattern; and \npatterns that solve problems in the same area can be grouped, or generalized.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2021, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e50c71bf-376b-4063-939a-e14457bc2800": {"__data__": {"id_": "e50c71bf-376b-4063-939a-e14457bc2800", "embedding": null, "metadata": {"page_label": "23", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ae8fc4a-588f-4d7a-bc7c-78c4e2538493", "node_type": "4", "metadata": {"page_label": "23", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8be0c93a56cd4d8a1349d6ece0b61c0994e9ac383207e0c0c592bf2026ddd6d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "23The Microservice architecture pattern language\nA collection of patterns related through th ese relationships sometimes form what is\nknown as a pattern language. The patterns in a pattern language work together to\nsolve problems in a particular domain. In  particular, I\u2019ve created the Microservice\narchitecture pattern language. It\u2019s a collec tion of interrelated software architecture\nand design patterns for microservices. Let\u2019s take a look at this pattern language. \n1.6.3 Overview of the Microservice architecture pattern language\nThe Microservice architecture pattern lang uage is a collection of patterns that help\nyou architect an application using the micr oservice architecture. Figure 1.10 shows\nthe high-level structure of the pattern la nguage. The pattern language first helps\nyou decide whether to use the microservice  architecture. It describes the monolithic\narchitecture and the microservice architec ture, along with their benefits and draw-\nbacks. Then, if the microservice architecture  is a good fit for your application, the\npattern language helps you use it effectiv ely by solving various architecture and\ndesign issues.\n The pattern language consists of several groups of patterns. On the left in figure 1.10\nis the application architecture patterns gr oup, the Monolithic architecture pattern\nand the Microservice architecture pattern. Those are the patterns we\u2019ve been discussing\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nDecomposition\nApplication infrastructure patterns\nCommunication patterns\nInfrastructure patterns\nMicroservice patterns\nApplication\narchitecture\nApplication patterns\nTesting\nObservability\nMaintaining\ndata consistency\nDatabase\narchitecture\nKey\nQuerying\nSecurityCross-cutting\nconcerns Reliability\nExternal\nAPI\nCommunication style\nDiscovery\nTransactional messaging\nProblem area\nDeployment\nMonolithic\narchitecture\nMicroservice\narchitecture\nFigure 1.10 A high-level view of the Microservice archi tecture pattern language showing the different problem \nareas that the patterns solve. On the left are the application architecture patterns: Monolithic architecture and \nMicroservice architecture. All the other groups of patterns solve problems that result from choosing the \nMicroservice architecture pattern.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2278, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dcef9015-fc71-4eca-9f90-6a7fbe9b6a27": {"__data__": {"id_": "dcef9015-fc71-4eca-9f90-6a7fbe9b6a27", "embedding": null, "metadata": {"page_label": "24", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "977404a6-1054-47d1-8a0f-bda9d766866c", "node_type": "4", "metadata": {"page_label": "24", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8166e47a8050c612fa4b0c92d5b612680050cca3ab97fec4c0414b73a6a793be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "24 CHAPTER 1 Escaping monolithic hell\nin this chapter. The rest of the pattern language consists of groups of patterns that are\nsolutions to issues that are introduced by using the Microservice architecture pattern.\n The patterns are also divided into three layers:\n\uf0a1 Infrastructure patterns\u2014These solve problems that are mostly infrastructure issues\noutside of development.\n\uf0a1 Application infrastructure \u2014These are for infrastructure issues that also impact\ndevelopment.\n\uf0a1 Application patterns\u2014These solve problems faced by developers.\nThese patterns are grouped together based on  the kind of problem they solve. Let\u2019s\nlook at the main groups of patterns.\nPATTERNS FOR DECOMPOSING AN APPLICATION INTO SERVICES\nDeciding how to decompose a system into a set of services is very much an art, but\nthere are a number of strategies that can help. The two decomposition patterns\nshown in figure 1.11 are different strategies you can use to define your application\u2019s\narchitecture.\nChapter 2 describes these patterns in detail. \nCOMMUNICATION PATTERNS\nAn application built using the microservice architecture is a distributed system. Conse-\nquently, interprocess communication (IPC) is an important part of the microservice\narchitecture. You must make a variety of architectural and design decisions about how\nyour services communicate with one another and the outside world. Figure 1.12 shows\nthe communication patterns, which are organized into five groups:\n\uf0a1 Communication style\u2014What kind of IPC mechanism should you use?\n\uf0a1 Discovery\u2014How does a client of a service de termine the IP address of a service\ninstance so that, for example, it makes an HTTP request?\n\uf0a1 Reliability\u2014How can you ensure that communication between services is reli-\nable even though services can be unavailable?\n\uf0a1 Transactional messaging\u2014How should you integrate the sending of messages and\npublishing of events with database transactions that update business data?\n\uf0a1 External API\u2014How do clients of your application communicate with the services?\nDecompose by\nbusiness capability\nDecompose by\nsubdomain\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nKey\nProblem area\nFigure 1.11 There are two \ndecomposition patterns: Decompose \nby business capability, which organizes \nservices around business capabilities, \nand Decompose by subdomain, which \norganizes services around domain-\ndriven design (DDD) subdomains.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2397, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42ef2a40-8418-404b-b982-37792e4d3234": {"__data__": {"id_": "42ef2a40-8418-404b-b982-37792e4d3234", "embedding": null, "metadata": {"page_label": "25", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3544440c-9dfe-41a9-ad36-dbcd59f253f1", "node_type": "4", "metadata": {"page_label": "25", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6bd040056fd91fd0045a211b6c42f83a5ca8e8b85da917e3d86ea6ce9009eb32", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "25The Microservice architecture pattern language\nChapter 3 looks at the first four groups of  patterns: communication style, discovery,\nreliability, and transaction messaging. Chapter 8 looks at the external API patterns. \nDATA CONSISTENCY PATTERNS FOR IMPLEMENTING TRANSACTION MANAGEMENT\nAs mentioned earlier, in order to ensure loose coupling, each service has its own data-\nbase. Unfortunately, having a database per service introduces some significant issues. I\ndescribe in chapter 4 that the traditional approach of using distributed transactions\n(2PC) isn\u2019t a viable option for a modern application. Instead, an application needs to\nmaintain data consistency by using the Sa ga pattern. Figure 1.13 shows data-related\npatterns.\n Chapters 4, 5, and 6 describe these patterns in more detail. \nPATTERNS FOR QUERYING DATA IN A MICROSERVICE ARCHITECTURE\nThe other issue with using a database per se rvice is that some queries need to join\ndata that\u2019s owned by multiple services. A service\u2019s data is only accessible via its API, so\nyou can\u2019t use distributed queries against it s database. Figure 1.14 shows a couple of\npatterns you can use to implement queries.\nPolling\npublisher\nTransaction\nlog tailing\nTransactional messaging\nTransactional\noutbox\nMessaging Remote procedure\ninvocation\nCircuit\nbreaker\nCommunication style\nReliabilityDomain-speci\ufb01c\nSelf registrationClient-side\ndiscovery\nDiscovery External API\n3rd-party\nregistration\nAPI gateway\nBackend for\nfrontendServer-side\ndiscovery\nService registry\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nKey\nProblem area\nFigure 1.12 The five groups of communication patterns", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1641, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9aa997ae-bdbd-4390-9fa1-0ed803fb844d": {"__data__": {"id_": "9aa997ae-bdbd-4390-9fa1-0ed803fb844d", "embedding": null, "metadata": {"page_label": "26", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b32c52fe-4dbe-419b-9db2-75e2b7b1e8b4", "node_type": "4", "metadata": {"page_label": "26", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "faaed070a67b5249c6076ac2e996149cde2c6a578963893e48afa40b576bd4e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "26 CHAPTER 1 Escaping monolithic hell\nSometimes you can use the API composition pattern, which invokes the APIs of one or\nmore services and aggregates results. Other times, you must use the Command query\nresponsibility segregation (CQRS) pattern, which maintains one or more easily queried\nreplicas of the data. Chapter 7 looks at the different ways of implementing queries. \nSERVICE DEPLOYMENT PATTERNS\nDeploying a monolithic application isn\u2019t alwa ys easy, but it is straightforward in the\nsense that there is a single application to deploy. You have to run multiple instances of\nthe application behind a load balancer.\n In comparison, deploying a microservice s-based application is much more com-\nplex. There may be tens or hundreds of serv ices that are written in a variety of lan-\nguages and frameworks. There are many more moving parts that need to be managed.\nFigure 1.15 shows the deployment patterns.\n The traditional, and often manual, way of deploying applications in a language-\nspecific packaging format, for example WAR files, doesn\u2019t scale to support a microser-\nvice architecture. You need a highly auto mated deployment infrastructure. Ideally,\nyou should use a deployment platform that  provides the developer with a simple UI\n(command-line or GUI) for deploying and managing their services. The deployment\nplatform will typically be based on virtual machines (VMs), containers, or serverless\ntechnology. Chapter 12 looks at the different deployment options. \nDatabase per\nservice Saga Event\nsourcing\nDomain\nevent\nAggregate\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nKey\nProblem area\nFigure 1.13 Because each service has its own database,  you must use the Saga pattern to maintain \ndata consistency across services.\nCQRSAPI\ncomposition\nDatabase\nper service\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nKey\nProblem area\nFigure 1.14 Because each service has its own database, you must use one \nof the querying patterns to retrieve data scattered across multiple services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2034, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "89bcbe92-1b20-4502-ab83-f984349c6287": {"__data__": {"id_": "89bcbe92-1b20-4502-ab83-f984349c6287", "embedding": null, "metadata": {"page_label": "27", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d5f4e56-8537-4165-b55a-f15f9248e7b3", "node_type": "4", "metadata": {"page_label": "27", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1ce8d2094235b3ed6132d90641f149ffa1fcbb3e49480306ad85e6994b30fa35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "27The Microservice architecture pattern language\nOBSERVABILITY PATTERNS PROVIDE INSIGHT INTO APPLICATION BEHAVIOR\nA key part of operating an application is understanding its runtime behavior and trouble-\nshooting problems such as failed requests and high latency. Though understanding and\ntroubleshooting a monolithic application isn\u2019t always easy, it helps that requests are han-\ndled in a simple, straightforward way. Each incoming request is load balanced to a par-\nticular application instance, which makes a few calls to the database and returns a\nresponse. For example, if you need to understand how a particular request was handled,\nyou look at the log file of the application instance that handled the request.\n In contrast, understanding and diagnosing problems in a microservice architec-\nture is much more complicated. A request can bounce around between multiple ser-\nvices before a response is finally returned to a client. Consequently, there isn\u2019t one log\nfile to examine. Similarly, problems with latency are more difficult to diagnose because\nthere are multiple suspects.\n You can use the following patterns to design observable services:\n\uf0a1 Health check API\u2014Expose an endpoint that returns the health of the service.\n\uf0a1 Log aggregation \u2014Log service activity and write logs into a centralized logging\nserver, which provides searching and alerting.\nTraditional approach of deploying\nservices using their language-speci\ufb01c\npackaging, such as WAR \ufb01les\nAutomated, self-service\nplatform for deploying\nand managing services\nA modern approach,\nwhich runs your code\nwithout you having to\nworry about managing\nthe infrastructure\nA modern approach, which\nencapsulates a service\u2019s\ntechnology stack\nSingle service\nper host\nMultiple services\nper host\nServerless\ndeployment\nService-per-container\nService-per-VMService deployment\nplatform\nGeneral\nAlternative A\nPredecessor\nSpeci\ufb01c\nAlternative B\nSuccessor\nKey\nProblem area\nFigure 1.15 Several patterns for deploying microservices. The traditional approach is to deploy \nservices in a language-specific packaging format. There are two modern approaches to deploying \nservices. The first deploys services as VM or containers. The second is the serverless approach. \nYou simply upload the service\u2019s code and the serverless platform runs it. You should use a service \ndeployment platform, which is an automated, self-service platform for deploying and managing \nservices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2415, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "417e9b05-4a0a-48b7-9c8b-fbfa26853d6c": {"__data__": {"id_": "417e9b05-4a0a-48b7-9c8b-fbfa26853d6c", "embedding": null, "metadata": {"page_label": "28", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0eab821-ff31-4d8c-aca3-525ea87e8c16", "node_type": "4", "metadata": {"page_label": "28", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "13c4c135cb2963df755b00c631eb3e6d347d5261e975cb09e78cc0b03229f110", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "28 CHAPTER 1 Escaping monolithic hell\n\uf0a1 Distributed tracing\u2014Assign each external request a unique ID and trace requests\nas they flow between services.\n\uf0a1 Exception tracking \u2014Report exceptions to an exception tracking service, which\ndeduplicates exceptions, alerts developers, and tracks the resolution of each\nexception.\n\uf0a1 Application metrics\u2014Maintain metrics, such as co unters and gauges, and expose\nthem to a metrics server.\n\uf0a1 Audit logging\u2014Log user actions.\nChapter 11 describes these patterns in more detail. \nPATTERNS FOR THE AUTOMATED TESTING OF SERVICES\nThe microservice architecture makes individual services easier to test because they\u2019re\nmuch smaller than the monolithic application. At the same time, though, it\u2019s import-\nant to test that the different services wo rk together while avoiding using complex,\nslow, and brittle end-to-end tests that test multiple services together. Here are patterns\nfor simplifying testing by testing services in isolation:\n\uf0a1 Consumer-driven contract test \u2014Verify that a service meets the expectations of its\nclients.\n\uf0a1 Consumer-side contract test \u2014Verify that the client of a service can communicate\nwith the service.\n\uf0a1 Service component test\u2014Test a service in isolation.\nChapters 9 and 10 describe these testing patterns in more detail. \nPATTERNS FOR HANDLING CROSS-CUTTING CONCERNS\nIn a microservice architecture, there are numerous concerns that every service must\nimplement, including the observability patte rns and discovery patterns. It must also\nimplement the Externalized Configuratio n pattern, which supplies configuration\nparameters such as database credentials to  a service at runtime. When developing a\nnew service, it would be too time consuming to reimplement these concerns from\nscratch. A much better approach is to apply the Microservice Chassis pattern and\nbuild services on top of a framework that handles these concerns. Chapter 11\ndescribes these patterns in more detail. \nSECURITY PATTERNS\nIn a microservice architecture, users are typically authenticated by the API gateway. It\nmust then pass information about the user, such as identity and roles, to the services it\ninvokes. A common solution is to apply the Access token pattern. The API gateway\npasses an access token, such as JWT (JSON Web Token), to the services, which can val-\nidate the token and obtain information about the user. Chapter 11 discusses the\nAccess token pattern in more detail.\n Not surprisingly, the patterns in the Mi croservice architecture pattern language\nare focused on solving architect and design  problems. You certainly need the right", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2588, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3971ddb6-29be-4ca9-acb8-f0dde73c9e98": {"__data__": {"id_": "3971ddb6-29be-4ca9-acb8-f0dde73c9e98", "embedding": null, "metadata": {"page_label": "29", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3be118a-fe20-47db-8061-c65ed81f6d4d", "node_type": "4", "metadata": {"page_label": "29", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "07f03ca24b4bf1b1e8afeb6dc28fe50657bd600d4c74afb03e8d8525814b930f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "29Beyond microservices: Process and organization\narchitecture in order to successfully develop software, but it\u2019s not the only concern.\nYou must also consider process and organization. \n1.7 Beyond microservices: Process and organization\nFor a large, complex application, the micr oservice architecture is usually the best\nchoice. But in addition to having the righ t architecture, successful software develop-\nment requires you to also have organization, and development and delivery processes.\nFigure 1.16 shows the relationships between process, organization, and architecture.\nI\u2019ve already described the microservice architecture. Let\u2019s look at organization and\nprocess.\n1.7.1 Software development and delivery organization\nSuccess inevitably means that the engineering team will grow. On the one hand, that\u2019s\na good thing because more developers ca n get more done. The trouble with large\nteams is, as Fred Brooks wrote in The Mythical Man-Month , the communication over-\nhead of a team of size N is O(N 2). If the team gets too large, it will become inefficient,\ndue to the communication overhead. Imagine, for example, trying to do a daily standup\nwith 20 people.\n The solution is to refactor a large single  team into a team of teams. Each team is\nsmall, consisting of no more than 8\u201312 people. It has a clearly defined business-oriented\nmission: developing and possibly operating one or more services that implement a\nfeature or a business capability. The team is  cross-functional and can develop, test,\nand deploy its services without having to frequently communicate or coordinate with\nother teams.\nEnables\nEnables\nArchitecture:\nMicroservice\narchitecture\nOrganization:\nSmall, autonomous,\ncross-functional teams\nProcess:\nDevOps/continuous delivery/deployment\nEnables\nRapid, frequent,\nand reliable delivery\nof software\nFigure 1.16 The rapid, frequent, and reliable delivery of large, \ncomplex applications requires a combination of DevOps, which \nincludes continuous delivery/deployment, small, autonomous \nteams, and the microservice architecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2057, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ff93885-439a-4ed1-a16d-733a0c9eb190": {"__data__": {"id_": "8ff93885-439a-4ed1-a16d-733a0c9eb190", "embedding": null, "metadata": {"page_label": "30", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a5ca02d-94cd-479e-ba1d-141203d20467", "node_type": "4", "metadata": {"page_label": "30", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d0d0fefbe6331a3317261f099f4faf0c1f392164eadcee5893e4020aa428b193", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "30 CHAPTER 1 Escaping monolithic hell\nThe velocity of the team of teams is signif icantly higher than that of a single large\nteam. As described earlier in section 1.5.1,  the microservice architecture plays a key\nrole in enabling the teams to be autonomous. Each team can develop, deploy, and\nscale their services without coordinating wi th other teams. Moreover, it\u2019s very clear\nwho to contact when a service isn\u2019t meeting its SLA.\n What\u2019s more, the development organization is much more scalable. You grow the\norganization by adding teams. If a single team becomes too large, you split it and its\nassociated service or services. Because th e teams are loosely coupled, you avoid the\ncommunication overhead of a large team. As a result, you can add people without\nimpacting productivity. \n1.7.2 Software development and delivery process\nUsing the microservice architecture with a waterfall development process is like driv-\ning a horse-drawn Ferrari\u2014you squander most of the benefit of using microservices. If\nyou want to develop an application with th e microservice architecture, it\u2019s essential\nthat you adopt agile development and depl oyment practices such as Scrum or Kan-\nban. Better yet, you should practice continuous delivery/deployment, which is a part\nof DevOps.\n Jez Humble ( https://continuousdelivery.com/ ) defines continuous delivery as\nfollows:\nContinuous Delivery is the ability to get changes of all types\u2014including new features,\nconfiguration changes, bug fixes and experiments\u2014into production, or into the hands of\nusers, safely and quickly in a sustainable way.\nA key characteristic of continuous delivery  is that software is always releasable. It\nrelies on a high level of automation, including automated testing. Continuous\ndeployment takes continuous delivery one st ep further in the practice of automati-\ncally deploying releasable code into production. High-performing organizations\nThe reverse Conway maneuver\nIn order to effectively deliver software when using the microservice architecture, you\nneed to take into account Conway\u2019s law (https://en.wikipedia.org/wiki/Conway%27s\n_law), which states the following:\nOrganizations which design systems \u2026 are constrained to produce designs\nwhich are copies of the communication structures of these organizations.\nMelvin Conway\nIn other words, your application\u2019s architecture mirrors the structure of the organiza-\ntion that developed it. It\u2019s important, ther efore, to apply Conway\u2019s law in reverse\n(www.thoughtworks.com/radar/techniques/inverse-conway-maneuver) and design\nyour organization so that its structure mirrors your microservice architecture. By doing\nso, you ensure that your development teams are as loosely coupled as the services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2721, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bc7b455d-ea5d-4446-adab-3386a21ce5f0": {"__data__": {"id_": "bc7b455d-ea5d-4446-adab-3386a21ce5f0", "embedding": null, "metadata": {"page_label": "31", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6af6498e-9e26-4d69-a557-5c3631395575", "node_type": "4", "metadata": {"page_label": "31", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b29c65ee6c81c6c8d825f26a866af8111f3e0278e8d68083bdeea6d364a03ce3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "31Beyond microservices: Process and organization\nthat practice continuous deployment deploy multiple times per day into produc-\ntion, have far fewer production outages, an d recover quickly from any that do occur\n(https://puppet.com/ resources/whitepaper/state-of-devops-report). As described ear-\nlier in section 1.5.1, the microservice architecture directly supports continuous\ndelivery/deployment.\n1.7.3 The human side of adopting microservices\nAdopting the microservice architecture changes your architecture, your organization,\nand your development processes. Ultimately, though, it changes the working environ-\nment of people, who are, as mentioned earlie r, emotional creatures. If ignored, their\nemotions can make the adoption of micros ervices a bumpy ride. Mary and the other\nFTGO leaders will struggle to change how FTGO develops software.\n The best-selling book Managing Transitions  ( D a  C a p o  L i f e l o n g  B o o k s ,  2 0 1 7 ,\nhttps://wmbridges.com/books) by William and Susan Bridges introduces the con-\ncept of a transition, which refers to the process of how people respond emotionally to a\nchange. It describes a three-stage Transition Model:\n1 Ending, Losing, and Letting Go \u2014The period of emotional upheaval and resis-\ntance when people are presented with a change that forces them out of their\ncomfort zone. They often mourn the loss of the old way of doing things. For\nexample, when people reorganize into cr oss-functional teams, they miss their\nformer teammates. Similarly, a data mo deling group that owns the global data\nmodel will be threatened by the idea  of each service having its own data\nmodel.\nMove fast without breaking things\nThe goal of continuous delivery/deployment (and, more generally, DevOps) is to rap-\nidly yet reliably deliver software. Four useful metrics for assessing software develop-\nment are as follows:\n\uf0a1 Deployment frequency\u2014How often software is deployed into production\n\uf0a1 Lead time\u2014Time from a developer checking in a change to that change being\ndeployed\n\uf0a1 Mean time to recover\u2014Time to recover from a production problem\n\uf0a1 Change failure rate\u2014Percentage of changes that result in a production problem\nIn a traditional organization, the deployment frequency is low, and the lead time is\nhigh. Stressed-out developers and operations people typically stay up late into the\nnight fixing last-minute issues during the maintenance window. In contrast, a DevOps\norganization releases software frequently, often multiple times per day, with far fewer\nproduction issues. Amazon, for example, deployed changes into production every\n11.6 seconds in 2014 (www.youtube.com/watch?v=dxk8b9rSKOo), and Netflix had\na lead time of 16 minutes for one software component (https://medium.com/netflix-\ntechblog/how-we-build-code-at-netflix-c5d9bd727f15).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2797, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c70268dc-609f-4139-baae-a8df63426620": {"__data__": {"id_": "c70268dc-609f-4139-baae-a8df63426620", "embedding": null, "metadata": {"page_label": "32", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70141059-7dde-449b-973f-7a7161dec6be", "node_type": "4", "metadata": {"page_label": "32", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f8aaad4ee35af17863b569ac254970ca5bc171b41e2b12ec1a4832ab91e23976", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "32 CHAPTER 1 Escaping monolithic hell\n2 The Neutral Zone\u2014The intermediate stage between the old and new ways of doing\nthings, where people are often confused. They are often struggling to learn the\nnew way of doing things.\n3 The New Beginning\u2014The final stage where people have enthusiastically embraced\nthe new way of doing things and are starting to experience the benefits.\nThe book describes how best to manage each  stage of the transition and increase the\nlikelihood of successfully implementing the change. FTGO is certainly suffering from\nmonolithic hell and needs to migrate to a microservice architecture. It must also\nchange its organization and development processes. In order for FTGO to successfully\naccomplish this, however, it must take into account the transition model and consider\npeople\u2019s emotions.\n In the next chapter, you\u2019ll learn about the goal of software architecture and how to\ndecompose an application into services. \nSummary\n\uf0a1 The Monolithic architecture pattern structures the application as a single deploy-\nable unit.\n\uf0a1 The Microservice architecture pattern de composes a system into a set of inde-\npendently deployable services, each with its own database.\n\uf0a1 The monolithic architecture is a good choice for simple applications, but micro-\nservice architecture is usually a better choice for large, complex applications.\n\uf0a1 The microservice architecture accelerates the velocity of software development\nby enabling small, autonomous teams to work in parallel.\n\uf0a1 The microservice architecture isn\u2019t a si lver bullet\u2014there are significant draw-\nbacks, including complexity.\n\uf0a1 The Microservice architecture pattern la nguage is a collection of patterns that\nhelp you architect an application using the microservice architecture. It helps\nyou decide whether to use the microservi ce architecture, and if you pick the\nmicroservice architecture, the pattern language helps you apply it effectively.\n\uf0a1 You need more than just the microservi ce architecture to accelerate software\ndelivery. Successful software developm ent also requires DevOps and small,\nautonomous teams.\n\uf0a1 Don\u2019t forget about the human side of adopting microservices. You need to con-\nsider employees\u2019 emotions in order to successfully transition to a microservice\narchitecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2270, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10d02576-678f-4312-a1f1-d132c380677a": {"__data__": {"id_": "10d02576-678f-4312-a1f1-d132c380677a", "embedding": null, "metadata": {"page_label": "33", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8ed6d1f-6527-413a-a452-65745e48ebd7", "node_type": "4", "metadata": {"page_label": "33", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "375c8841748f317c675055e590ba76f57212610d3b49544163b1bdc5d72713b0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "33\nDecomposition strategies\nSometimes you have to be careful what you wish for. After an intense lobbying\neffort, Mary had finally convinced the bu siness that migrating to a microservice\narchitecture was the right thing to do. Feeling a mixture of excitement and some\ntrepidation, Mary had a morning-long meeting with her architects to discuss where\nto begin. During the discussion, it became apparent that some aspects of the Micro-\nservice architecture pattern language, su ch as deployment and service discovery,\nwere new and unfamiliar, yet straightforw ard. The key challenge, which is the\nessence of the microservice architecture, is the functional decomposition of the\napplication into services. The first and most important aspect of the architecture is,\nThis chapter covers\n\uf0a1 Understanding software architecture and why it\u2019s \nimportant\n\uf0a1 Decomposing an application into services by \napplying the decomposition patterns Decompose \nby business capability and Decompose by \nsubdomain\n\uf0a1 Using the bounded context concept from domain-\ndriven design (DDD) to untangle data and make \ndecomposition easier", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1107, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3e9c81a2-1419-4287-b2d5-b3a6e7154808": {"__data__": {"id_": "3e9c81a2-1419-4287-b2d5-b3a6e7154808", "embedding": null, "metadata": {"page_label": "34", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26261184-c5f1-4c6c-8549-7beb63516582", "node_type": "4", "metadata": {"page_label": "34", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "48314d6e3aeef7d0e9704ff95300cb1435c3169518b0f672201ceb744c88c0c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "34 CHAPTER 2 Decomposition strategies\ntherefore, the definition of the services. As they stood around the whiteboard, the\nFTGO team wondered exactly how to do that!\n In this chapter, you\u2019ll learn how to define a microservice architecture for an appli-\ncation. I describe strategies for decomposing an application into services. You\u2019ll learn\nthat services are organized around business concerns rather than technical concerns.\nI also show how to use ideas from doma in-driven design (DDD) to eliminate god\nclasses, which are classes that are used th roughout an application and cause tangled\ndependencies that prevent decomposition.\n I begin this chapter by defining the micr oservice architecture in terms of software\narchitecture concepts. After that, I descri be a process for defining a microservice\narchitecture for an application starting from  its requirements. I discuss strategies for\ndecomposing an application into a collection  of services, obstacles to it, and how to\novercome them. Let\u2019s start by examining the concept of software architecture.\n2.1 What is the microservice architecture exactly?\nChapter 1 describes how the key idea of th e microservice architecture is functional\ndecomposition. Instead of developing one large application, you structure the appli-\ncation as a set of services. On one hand, de scribing the microservice architecture as a\nkind of functional decomposition is useful . But on the other hand, it leaves several\nquestions unanswered, including how does the microservice architecture relate to the\nbroader concepts of software architecture? What\u2019s a service? And how important is the\nsize of a service?\n In order to answer those questions, we need to take a step back and look at what is\nmeant by software architecture. The architecture of a software application is its high-level\nstructure, which consists of constituent parts and the dependencies between those\nparts. As you\u2019ll see in this section, an application\u2019s architecture is multidimensional, so\nthere are multiple ways to describe it. The reason architecture is important is because\nit determines the application\u2019s software quality attributes or -ilities. Traditionally, the\ngoal of architecture has been scalability, reliability, and security. But today it\u2019s import-\nant that the architecture also enables the rapid and safe delivery of software. You\u2019ll\nlearn that the microservice architecture is an architecture style that gives an applica-\ntion high maintainability, testability, and deployability.\n I begin this section by describing the concept of software architecture and why it\u2019s\nimportant. Next, I discuss the idea of an ar chitectural style. Then I define the micro-\nservice architecture as a particular architectural style. Let\u2019s start by looking at the con-\ncept of software architecture.\n2.1.1 What is software architecture and why does it matter?\nArchitecture is clearly important. There are at least two conferences dedicated to the\ntopic: O\u2019Reilly Software Architecture Conference ( https://conferences.oreilly.com/\nsoftware-architecture) and the SATURN conference (https://resources.sei.cmu.edu/\nnews-events/events/saturn/). Many developers have the goal of becoming an archi-\ntect. But what is architecture and why does it matter?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3250, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "34d6c4d1-96cf-497a-ba04-0619a94f147b": {"__data__": {"id_": "34d6c4d1-96cf-497a-ba04-0619a94f147b", "embedding": null, "metadata": {"page_label": "35", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff5785ab-62e6-41b0-a34f-ec683b23e3be", "node_type": "4", "metadata": {"page_label": "35", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "19619a66ce1fc23ef0a9c86f20a85d71cc3e3a0a0bd17a573492808c0327b5bb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "35What is the microservice architecture exactly?\n To answer that question, I first define what is meant by the term software architecture.\nAfter that, I discuss how an application\u2019s architecture is multidimensional and is best\ndescribed using a collection of views or blueprints. I then describe that software archi-\ntecture matters because of its impact on the application\u2019s software quality attributes.\nA DEFINITION OF SOFTWARE ARCHITECTURE\nThere are numerous definitions of soft ware architecture. For example, see https://\nen.wikiquote.org/wiki/Software_architecture to read some of them. My favorite defi-\nnition comes from Len Bass and colleagues  at the Software Engineering Institute\n(www.sei.cmu.edu), who played a key role in establishing software architecture as a\ndiscipline. They define software architecture as follows:\nThe software architecture of a computing system is the set of structures needed to reason about\nthe system, which comprise software elements, relations among them, and properties of both.\nDocumenting Software Architectures by Bass et al.\nThat\u2019s obviously a quite abstract definition . But its essence is that an application\u2019s\narchitecture is its decomposition into parts (the elements) and the relationships (the\nrelations) between those parts. Decomposition is important for a couple of reasons:\n\uf0a1 It facilitates the division of labor and knowledge. It enables multiple people (or\nmultiple teams) with possibly specialized knowledge to work productively together\non an application.\n\uf0a1 It defines how the software elements interact.\nIt\u2019s the decomposition into parts and the relationships between those parts that deter-\nmine the application\u2019s -ilities. \nTHE 4+1 VIEW MODEL OF SOFTWARE ARCHITECTURE\nMore concretely, an application\u2019s architecture can be viewed from multiple perspec-\ntives, in the same way that a building\u2019s ar chitecture can be viewed from structural,\nplumbing, electrical, and other perspectives . Phillip Krutchen wrote a classic paper\ndescribing the 4+1 view model of software  architecture, \u201cArchitectural Blueprints\u2014\nThe \u20184+1\u2019 View Model of Software Architecture\u201d ( www.cs.ubc.ca/~gregor/teaching/\npapers/4+1view-architecture.pdf). The 4+1 model, shown in Figure 2.1, defines four\ndifferent views of a software architecture. Each describes a particular aspect of the\narchitecture and consists of a particular set of software elements and relationships\nbetween them.\n The purpose of each view is as follows:\n\uf0a1 Logical view \u2014The software elements that are cr eated by developers. In object-\noriented languages, these elements are classes and packages. The relations\nbetween them are the relationships between classes and packages, including\ninheritance, associations, and depends-on.\n\uf0a1 Implementation view\u2014The output of the build system. This view consists of mod-\nules, which represent packaged code, and components, which are executable", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2891, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58708acf-fe4f-4580-9157-a412ddbaab83": {"__data__": {"id_": "58708acf-fe4f-4580-9157-a412ddbaab83", "embedding": null, "metadata": {"page_label": "36", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f39638e3-ec89-4c3e-8531-ab190bb3353a", "node_type": "4", "metadata": {"page_label": "36", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f6182bfded151776985e0ca61732f0b3a58596b3cdcc0e5f46a0776efccff4c5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "36 CHAPTER 2 Decomposition strategies\nor deployable units consisting of one or more modules. In Java, a module is a\nJAR file, and a component is typically a WAR file or an executable JAR file. The\nrelations between them include dependency relationships between modules\nand composition relationships between components and modules.\n\uf0a1 Process view \u2014The components at runtime. Each  element is a process, and the\nrelations between processes represent interprocess communication.\n\uf0a1 Deployment\u2014How the processes are mapped to machines. The elements in this\nview consist of (physical or virtual) machines and the processes. The relations\nbetween machines represent networking. This view also describes the relation-\nship between processes and machines.\nIn addition to these four views, there are the scenarios\u2014the +1 in the 4+1 model\u2014\nthat animate views. Each scenario describes how the various architectural components\nwithin a particular view collaborate in order to handle a request. A scenario in the log-\nical view, for example, shows how the classes collaborate. Similarly, a scenario in the\nprocess view shows how the processes collaborate.\n The 4+1 view model is an excellent way to describe an applications\u2019s architec-\nture. Each view describes an important aspect of the architecture, and the scenarios\nLogical\nview\nImplementation\nview\nProcess\nview\nDeployment\nview\nScenarios\nWhat developers create\nElements: Classes and packages\nRelations: The relationships\nbetween them\nWhat is produced by the build system\nElements: Modules, (JAR \ufb01les) and\ncomponents (WAR \ufb01les\nor executables)\nRelations: Their dependencies\nRunning components\nElements: Processes\nRelations: Inter-process\ncommunication\nProcesses running on \u201cmachines\u201d\nElements: Machines and processes\nRelations: Networking\nAnimate the views.\nFigure 2.1 The 4+1 view model describes an application\u2019s architecture using four views, \nalong with scenarios that show how the elements within each view collaborate to handle \nrequests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1983, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cf7090ba-0321-4f57-8e7d-dde649339dd6": {"__data__": {"id_": "cf7090ba-0321-4f57-8e7d-dde649339dd6", "embedding": null, "metadata": {"page_label": "37", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5936e643-64c6-477e-a707-2028255a883a", "node_type": "4", "metadata": {"page_label": "37", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8776cddcf1bb401043c42d74f7d601962849134414c51e7d1521a82b76b53a1b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "37What is the microservice architecture exactly?\nillustrate how the elements of a view coll aborate. Let\u2019s now look at why architecture\nis important. \nWHY ARCHITECTURE MATTERS\nAn application has two categories of requ irements. The first category includes the\nfunctional requirements, which define what the application must do. They\u2019re usually\nin the form of use cases or user stories. Architecture has very little to do with the func-\ntional requirements. You can implement fu nctional requirements with almost any\narchitecture, even a big ball of mud.\n Architecture is important because it en ables an application to satisfy the second\ncategory of requirements: its quality of service  requirements. These are also known as\nquality attributes  and are the so-called -ilities. The quality of service requirements\ndefine the runtime qualities such as scalab ility and reliability. They also define devel-\nopment time qualities including maintain ability, testability, and deployability. The\narchitecture you choose for your applicat ion determines how well it meets these\nquality requirements. \n2.1.2 Overview of architectural styles\nIn the physical world, a building\u2019s architecture often follows a particular style, such as\nVictorian, American Craftsman, or Art Deco. Each style is a package of design deci-\nsions that constrains a building\u2019s features and building materials. The concept of\narchitectural style also applies to software. David Garlan and Mary Shaw (An Introduc-\ntion to Software Architecture, January 1994, https://www.cs.cmu.edu/afs/cs/project/\nable/ftp/intro_softarch/intro_softarch.pdf ), pioneers in the discipline of software\narchitecture, define an architectural style as follows:\nAn architectural style, then, defines a family of such systems in terms of a pattern of\nstructural organization. More specifically, an architectural style determines the vocabulary\nof components and connectors that can be used in instances of that style, together with a\nset of constraints on how they can be combined.\nA particular architectural style provides a limited palette of elements (components)\nand relations (connectors) from which you can define a view of your application\u2019s\narchitecture. An application typically uses a combination of architectural styles. For\nexample, later in this section I describe ho w the monolithic architecture is an archi-\ntectural style that structures the implementa tion view as a single (executable/deploy-\nable) component. The microservice architectu re structures an application as a set of\nloosely coupled services.\nTHE LAYERED ARCHITECTURAL STYLE\nThe classic example of an architectural style is the layered architecture. A layered archi-\ntecture organizes software elements into layers. Each layer has a well-defined set of\nresponsibilities. A layered architecture also constraints the dependencies between the\nlayers. A layer can only depend on either the layer immediately below it (if strict layer-\ning) or any of the layers below it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2988, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60caa3b7-e7b8-4802-96d3-f32f45d3b757": {"__data__": {"id_": "60caa3b7-e7b8-4802-96d3-f32f45d3b757", "embedding": null, "metadata": {"page_label": "38", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f1cebfd7-cc2d-4acd-8207-7356aeaf2504", "node_type": "4", "metadata": {"page_label": "38", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fb61cced8a872d0021ebe2441521c180cec1444b772339dda1155772dc8a3d13", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "38 CHAPTER 2 Decomposition strategies\n You can apply the layered architecture to any of the four views discussed earlier.\nThe popular three-tier architecture is the layered architecture applied to the logical\nview. It organizes the application\u2019s classes into the following tiers or layers:\n\uf0a1 Presentation layer \u2014Contains code that implements  the user interface or exter-\nnal APIs\n\uf0a1 Business logic layer\u2014Contains the business logic\n\uf0a1 Persistence layer\u2014Implements the logic of interacting with the database\nThe layered architecture is a great example of  an architectural style, but it does have\nsome significant drawbacks:\n\uf0a1 Single presentation layer\u2014It doesn\u2019t represent the fact that an application is likely\nto be invoked by more than just a single system.\n\uf0a1 Single persistence layer \u2014It doesn\u2019t represent the fact that an application is likely\nto interact with more than just a single database.\n\uf0a1 Defines the business logic layer as depending on the persistence layer \u2014In theory, this\ndependency prevents you from testing the business logic without the database.\nAlso, the layered architecture misreprese nts the dependencies in a well-designed\napplication. The business logic typically defi nes an interface or a repository of inter-\nfaces that define data access methods. Th e persistence tier defines DAO classes that\nimplement the repository interfaces. In other words, the dependencies are the reverse\nof what\u2019s depicted by a layered architecture.\n Let\u2019s look at an alternative architecture that overcomes these drawbacks: the hex-\nagonal architecture. \nABOUT THE HEXAGONAL ARCHITECTURE STYLE\nHexagonal architecture is an alternative to the layered architectural style. As figure 2.2\nshows, the hexagonal architecture style organizes the logical view in a way that places\nthe business logic at the center. Instead of the presentation layer, the application has\none or more inbound adapters that handle requests from the outside by invoking the\nbusiness logic. Similarly, instead of a data  persistence tier, the application has one or\nmore outbound adapters  that are invoked by the business logic and invoke external\napplications. A key characteristic and benefit of this architecture is that the business\nlogic doesn\u2019t depend on the adapters. Instead, they depend upon it.\n The business logic has one or more ports. A port defines a set of operations and is\nhow the business logic interacts with what\u2019s outside of it. In Java, for example, a port is\noften a Java interface. There are two kinds of ports: inbound and outbound ports. An\ninbound port is an API exposed by the busi ness logic, which enables it to be invoked\nby external applications. An example of an inbound port is a service interface, which\ndefines a service\u2019s public methods. An outbound port is how the business logic invokes\nexternal systems. An example of an output port is a repository interface, which defines a\ncollection of data access operations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ead68334-cdff-4445-894b-f1855d1b6011": {"__data__": {"id_": "ead68334-cdff-4445-894b-f1855d1b6011", "embedding": null, "metadata": {"page_label": "39", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c895021b-81fa-4c98-bade-db10851ab346", "node_type": "4", "metadata": {"page_label": "39", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "52da1bed792bafb36a4465a02a41d9e144f8c7875f5ddaf6b56697a867f219c7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "39What is the microservice architecture exactly?\nSurrounding the business logic are adapters . As with ports, there are two types of\nadapters: inbound and outbound. An inbound adapter handles requests from the out-\nside world by invoking an inbound port. An example of an inbound adapter is a\nSpring MVC Controller that implements either a set of REST endpoints or a set of\nweb pages. Another example is a message br oker client that subscribes to messages.\nMultiple inbound adapters can invoke the same inbound port.\n An outbound adapter implements an ou tbound port and handles requests from\nthe business logic by invoking an external application or service. An example of an\noutbound adapter is a data access object  (DAO) class that implements operations for\naccessing a database. Another example woul d be a proxy class that invokes a remote\nservice. Outbound adapters can also publish events.\n An important benefit of the hexagonal arch itectural style is that it decouples the\nbusiness logic from the presentation and data access logic in the adapters. The busi-\nness logic doesn\u2019t depend on either the pr esentation logic or the data access logic.\nBusiness logic\nBrowser\nMessage broker\nOutbound adapter\nOutbound port\nOutbound adapter\nInbound port\nInbound adapter Inbound adapter\nSome\ncontroller\nclass\nMessage\nconsumer\nMessaging\ninterface\nFoo\nservice\nRepository\ninterface\nDAO\nDatabase\nMessage\nproducer\nFigure 2.2 An example of a hexagonal architecture, which consists of the business logic and one or \nmore adapters that communicate with external systems. The business logic has one or more ports. \nInbound adapters, which handled requests from external systems, invoke an inbound port. An \noutbound adapter implements an outbound port, and invokes an external system.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1775, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0441ea99-0efa-42fd-a910-f167c2d0b63b": {"__data__": {"id_": "0441ea99-0efa-42fd-a910-f167c2d0b63b", "embedding": null, "metadata": {"page_label": "40", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "092379ba-d2af-453a-8c83-daf959050318", "node_type": "4", "metadata": {"page_label": "40", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2a03a3ce8e3ba7d3bf3a09ca1e825c9db003e4c9f47af444b3fee50835b82fd4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "40 CHAPTER 2 Decomposition strategies\nBecause of this decoupling, it\u2019s much easi er to test the business logic in isolation.\nAnother benefit is that it more accurately reflects the architecture of a modern appli-\ncation. The business logic can be invoked via multiple adapters, each of which imple-\nments a particular API or UI. The business logic can also invoke multiple adapters,\neach one of which invokes a different exte rnal system. Hexagonal architecture is a\ngreat way to describe the architecture of each service in a microservice architecture.\n The layered and hexagonal architectures are both examples of architectural styles.\nEach defines the building blocks of an ar chitecture and imposes constraints on the\nrelationships between them. The hexagonal architecture and the layered architec-\nture, in the form of a three-tier architec ture, organize the logical view. Let\u2019s now\ndefine the microservice architecture as an architectural style that organizes the imple-\nmentation view. \n2.1.3 The microservice architecture is an architectural style\nI\u2019ve discussed the 4+1 view model and architectural styles, so I can now define mono-\nlithic and microservice architecture. They\u2019re both architectural styles. Monolithic\narchitecture is an architectural style that structures the implementation view as a sin-\ngle component: a single executable or WAR file. This definition says nothing about\nthe other views. A monolithic application can, for example, have a logical view that\u2019s\norganized along the lines of a hexagonal architecture.\nThe microservice architecture is also an ar chitectural style. It structures the imple-\nmentation view as a set of multiple comp onents: executables or WAR files. The com-\nponents are services, and the connectors are the communication protocols that\nenable those services to collaborate. Each service has its own logical view architecture,\nwhich is typically a hexagonal architecture . Figure 2.3 shows a possible microservice\narchitecture for the FTGO application. The services in this architecture correspond to\nbusiness capabilities, such as Order management and Restaurant management.\nLater in this chapter, I describe what is meant by business capability . The connectors\nbetween services are implemented usin g interprocess communication mechanisms\nsuch as REST APIs and asynchronous me ssaging. Chapter 3 discusses interprocess\ncommunication in more detail.\nPattern: Monolithic architecture\nStructure the application as a single executable/deployable component. See http://\nmicroservices.io/patterns/ monolithic.html.\nPattern: Microservice architecture\nStructure the application as a collection of loosely coupled, independently deployable\nservices. See http://microservices.io/patterns/microservices.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2754, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "491561b3-b58c-4367-b6d2-4bf530749474": {"__data__": {"id_": "491561b3-b58c-4367-b6d2-4bf530749474", "embedding": null, "metadata": {"page_label": "41", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d733d84e-a0d1-4383-b582-5bead2b43b00", "node_type": "4", "metadata": {"page_label": "41", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e6674f55add33ae95efe9d0b36e776df6c363bc219370ba2c02addfd53dfad0a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "41What is the microservice architecture exactly?\nA key constraint imposed by the microservice architecture is that the services are\nloosely coupled. Consequently, there are restrictions on how the services collaborate.\nIn order to explain those restrictions , I\u2019ll attempt to define the term service, describe\nwhat it means to be loosely coupled, and tell you why this matters.\nWHAT IS A SERVICE?\nA service is a standalone, independently depl oyable software component that imple-\nments some useful functionality. Figure 2.4 shows the external view of a service, which in\nthis example is the Order Service. A service has an API that provides its clients access to\nits functionality. There are two types of operations: commands and queries. The API\nconsists of commands, queries, and events. A command, such as createOrder(), per-\nforms actions and updates data. A query, such as findOrderById(), retrieves data. A ser-\nvice also publishes events, such as OrderCreated, which are consumed by its clients.\n A service\u2019s API encapsulates its internal implementation. Unlike in a monolith, a\ndeveloper can\u2019t write code that bypasses its API. As a result, the microservice architec-\nture enforces the application\u2019s modularity.\n Each service in a microservice architecture has its own architecture and, potentially,\ntechnology stack. But a typical service has a hexagonal architecture. Its API is imple-\nmented by adapters that interact with th e service\u2019s business logic. The operations\nAmazon\nSES\nAdapter\nTwilio\nAdapter\nStripe\nAdapter\nThe API Gateway routes\nrequests from the mobile\napplications to services.\nServices have APIs. A service\u2019s data is private.\nServices corresponding\nto business capabilities/\nDDD subdomains\nAPI\nGateway\nRestaurant\nWeb UI\nOrder\nService\nCourier\nREST\nAPI\nREST\nAPI\nREST\nAPI\nConsumer\nRestaurant\nRestaurant\nService\nREST\nAPI\nAccounting\nService\nREST\nAPI\nNoti\ufb01cation\nService\nREST\nAPI\nKitchen\nService\nREST\nAPI\nDelivery\nService\nREST\nAPI\nFigure 2.3 A possible microservice architecture for the FTGO application. It consists of numerous \nservices.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2060, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ebfc7705-4877-408e-ac01-8ff30be148de": {"__data__": {"id_": "ebfc7705-4877-408e-ac01-8ff30be148de", "embedding": null, "metadata": {"page_label": "42", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "869fb07e-7a5b-4d75-937c-1ecfeabb3774", "node_type": "4", "metadata": {"page_label": "42", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fe69d8b3cb85ba8726e1a2f224dd830102aff444922d2f3267a8dd7ada3e2175", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "42 CHAPTER 2 Decomposition strategies\nadapter invokes the business logic, and the events adapter publishes events emitted by\nthe business logic.\n Later in chapter 12, when I discuss depl oyment technologies, you\u2019ll see that the\nimplementation view of a service can take many forms. The component might be a\nstandalone process, a web application or OS GI bundle running in a container, or a\nserverless cloud function. An essential requirement, however, is that a service has an\nAPI and is independently deployable. \nWHAT IS LOOSE COUPLING?\nAn important characteristic of the microservi ce architecture is that the services are\nloosely coupled (https://en.wikipedia.org/wiki/Loose_coupling). All interaction with a\nservice happens via its API, which encapsulates its implementation details. This enables\nthe implementation of the service to chan ge without impacting its clients. Loosely\ncoupled services are key to improving an application\u2019s development time attributes,\nincluding its maintainability and testability. They are much easier to understand, change,\nand test.\n The requirement for services to be loosely coupled and to collaborate only via APIs\nprohibits services from communicating vi a a database. You must treat a service\u2019s\npersistent data like the fields of a class and keep them private. Keeping the data pri-\nvate enables a developer to change their service\u2019s database schema without having to\nOrder Service\nInvokes\nSubscribes to events\nOrder\nService\nclient\nDe\ufb01nes operations\nPublishes events when data changes\nCommands:\ncreateOrder()\n...\nQueries:\n\ufb01ndOrderbyId()\n...\nOrder\nevent\npublisher\nService API\nOrder created\nOrder cancelled\nFigure 2.4 A service has an API that encapsul ates the implementation. The API defines \noperations, which are invoked by clients. There are two types of operations: commands update \ndata, and queries retrieve data. When its data changes, a service publishes events that clients \ncan subscribe to.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1944, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "260af7c6-0f61-4983-9d09-63a8f3b40434": {"__data__": {"id_": "260af7c6-0f61-4983-9d09-63a8f3b40434", "embedding": null, "metadata": {"page_label": "43", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff6b9955-eb0f-4f1e-868a-f90d025b2ea2", "node_type": "4", "metadata": {"page_label": "43", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4cc9228974d65e8c1c18b40008e4cab3f296dbc58f8eb40c3acf22611d8b916d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "43What is the microservice architecture exactly?\nspend time coordinating with developers working on other services. Not sharing data-\nbase tables also improves runtime isolation.  It ensures, for example, that one service\ncan\u2019t hold database locks that block another service. Later on, though, you\u2019ll learn\nthat one downside of not sharing databases is that maintaining data consistency and\nquerying across services are more complex. \nTHE ROLE OF SHARED LIBRARIES\nDevelopers often package functionality in a library (module) so that it can be reused\nby multiple applications without duplicating code. After all, where would we be today\nwithout Maven or npm repositories? You might be tempted to also use shared libraries\nin microservice architecture. On the surfac e, it looks like a good way to reduce code\nduplication in your services. But you need to ensure that you don\u2019t accidentally intro-\nduce coupling between your services.\n Imagine, for example, that multiple services need to update the Order business\nobject. One approach is to package that functionality as a library that\u2019s used by multi-\nple services. On one hand, using a library el iminates code duplication. On the other\nhand, consider what happens when the requirements change in a way that affects the\nOrder business object. You would need to simu ltaneously rebuild and redeploy those\nservices. A much better approach would be to implement functionality that\u2019s likely to\nchange, such as Order management, as a service.\n You should strive to use libraries for functionality that\u2019s unlikely to change. For\nexample, in a typical application it makes no sense for every service to implement a\ngeneric Money class. Instead, you should create a library that\u2019s used by the services. \nTHE SIZE OF A SERVICE IS MOSTLY UNIMPORTANT\nOne problem with the term microservice is that the first thing you hear is micro. This\nsuggests that a service should be very small. This is also true of other size-based terms\nsuch as miniservice or nanoservice. In reality, size isn\u2019t a useful metric.\n A much better goal is to define a well -designed service to be a service capable of\nbeing developed by a small team with minimal lead time and with minimal collabora-\ntion with other teams. In theory, a team might only be responsible for a single service,\nso that service is by no means micro. Conversely, if a service requires a large team or\ntakes a long time to test, it probably makes sense to split the team and the service. Or\nif you constantly need to change a service because of changes to other services or if it\u2019s\ntriggering changes in other services, that\u2019s a sign that it\u2019s not loosely coupled. You\nmight even have built a distributed monolith.\n The microservice architecture structures an application as a set of small, loosely\ncoupled services. As a result, it improves the development time attributes\u2014main-\ntainability, testability, deployability, and so on\u2014and enables an organization to\ndevelop better software faster. It also improves an application\u2019s scalability, although\nthat\u2019s not the main goal. To develop a microservice architecture for your application,\nyou need to identify the services and dete rmine how they collaborate. Let\u2019s look at\nhow to do that.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3224, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01e2c509-caee-435e-b974-f6b5ae132cde": {"__data__": {"id_": "01e2c509-caee-435e-b974-f6b5ae132cde", "embedding": null, "metadata": {"page_label": "44", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c98230db-a3e3-491b-9de2-896f40695b0b", "node_type": "4", "metadata": {"page_label": "44", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7ce4ebc22a6e39adc2db4673387d64293c1ca37b1bb5f46e0bd2f735e8f83462", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "44 CHAPTER 2 Decomposition strategies\n2.2 Defining an application\u2019s microservice architecture\nHow should we define a microservice architecture? As with any software development\neffort, the starting points are the written requirements, hopefully domain experts, and\nperhaps an existing application. Like mu ch of software development, defining an\narchitecture is more art than science. This  section describes a simple, three-step pro-\ncess, shown in figure 2.5, for defining an application\u2019s architecture. It\u2019s important to\nremember, though, that it\u2019s not a process you can follow mechanically. It\u2019s likely to be\niterative and involve a lot of creativity.\nAn application exists to handle requests, so the first step in defining its architecture is\nto distill the application\u2019s requirements into the key requests. But instead of describing\nthe requests in terms of specific IPC technologies such as REST or messaging, I use\nOrder\nService\nFTGO FTGO\nRestaurant\nService\nKitchen\nService\n...\nOrder\nService\nIterate\nverifyOrder()\nRestaurant\nService\nKitchen\nService\nFunctional requirements\ncreateOrder()\ncreateTicket()\nacceptOrder()\ncreateOrder()\nacceptOrder()\nFTGO\nAs a consumer\nI want to place an order\nso that I can ...\ncreateOrder()\nacceptOrder()\nAs a restaurant\nI want to accept an order\nso that I can ...\nStep 1: Identify system operations\nStep 2: Identify services Step 3: De\ufb01ne service APIs and collaborations\nThe starting point are the requirements,\nsuch as the user stories.\nA system operation represents\nan external request.\nFigure 2.5 A three-step process for defining an application\u2019s microservice architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1614, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1fcb35d-9ac7-4119-98ba-0289182d86d2": {"__data__": {"id_": "e1fcb35d-9ac7-4119-98ba-0289182d86d2", "embedding": null, "metadata": {"page_label": "45", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d680d7a-2aa4-4379-aee7-99ba422d0350", "node_type": "4", "metadata": {"page_label": "45", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f44d5dc4cef61fa46ad247fa889d1d2a80bcc50fa4890be3c46317def829f199", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "45Defining an application\u2019s microservice architecture\nthe more abstract notion of system operation. A system operation is an abstraction of a\nrequest that the application must handle. It\u2019s either a command, which updates data,\nor a query, which retrieves data. The behavi or of each command is defined in terms\nof an abstract domain model, which is al so derived from the requirements. The sys-\ntem operations become the architectural scenarios that illustrate how the services\ncollaborate.\n The second step in the process is to determine the decomposition into services.\nThere are several strategies to choose from. One strategy, which has its origins in the\ndiscipline of business architecture, is to define services corresponding to business\ncapabilities. Another strategy is to organize services around domain-driven design sub-\ndomains. The end result is services th at are organized around business concepts\nrather than technical concepts.\n The third step in defining the applicatio n\u2019s architecture is to determine each ser-\nvice\u2019s API. To do that, you assign each system operation identified in the first step to a\nservice. A service might implement an operat ion entirely by itself. Alternatively, it\nmight need to collaborate with other services. In that case, you determine how the ser-\nvices collaborate, which typically requires services to support a dditional operations.\nYou\u2019ll also need to decide which of the IPC mechanisms I describe in chapter 3 to\nimplement each service\u2019s API.\n There are several obstacles to decomposit ion. The first is network latency. You\nmight discover that a particular decomposition would be impractical due to too many\nround-trips between services. Another obstac le to decomposition is that synchronous\ncommunication between services reduces availability. You might need to use the con-\ncept of self-contained services, describe d in chapter 3. The third obstacle is the\nrequirement to maintain data consistency across services. You\u2019ll typically need to use\nsagas, discussed in chapter 4. The fourth and final obstacle to decomposition is so-\ncalled god classes, which are used throughout an application. Fortunately, you can use\nconcepts from domain-driven design to eliminate god classes.\n This section first describes how to identi ty an application\u2019s operations. After that,\nwe\u2019ll look at strategies and guidelines for decomposing an application into services,\nand at obstacles to decomposition and how to address them. Finally, I\u2019ll describe how\nto define each service\u2019s API.\n2.2.1 Identifying the system operations\nThe first step in defining an application\u2019s architecture is to define the system opera-\ntions. The starting point is the applicatio n\u2019s requirements, including user stories and\ntheir associated user scenarios (note that these are different from the architectural\nscenarios). The system operations are identified and defined using the two-step pro-\ncess shown in figure 2.6. This process is inspired by the object-oriented design process\ncovered in Craig Larman\u2019s book Applying UML and Patterns (Prentice Hall, 2004) (see\nwww.craiglarman.com/wiki/index.php?title=Book_Applying_UML_and_Patterns for\ndetails). The first step creates the high-level domain model consisting of the key classes", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a2d2f0a-50d3-4442-a518-4574bf7ac572": {"__data__": {"id_": "3a2d2f0a-50d3-4442-a518-4574bf7ac572", "embedding": null, "metadata": {"page_label": "46", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee2d9eeb-1703-4581-8dae-233f36fc54fe", "node_type": "4", "metadata": {"page_label": "46", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9f7a2b8e154b4302b71d64bf6cd28006de95a9eee1239019720a73d81165c8a7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "46 CHAPTER 2 Decomposition strategies\nthat provide a vocabulary with which to describe the system operations. The second\nstep identifies the system operations and describes each one\u2019s behavior in terms of the\ndomain model.\nThe domain model is derived primarily from the nouns of the user stories, and the sys-\ntem operations are derived mostly from th e verbs. You could also define the domain\nmodel using a technique called Event Stor ming, which I talk about in chapter 5.\nThe behavior of each system operation is described in terms of its effect on one or\nmore domain objects and the relationship s between them. A system operation can\ncreate, update, or delete domain objects, as  well as create or destroy relationships\nbetween them.\n Let\u2019s look at how to define a high-level domain model. After that I\u2019ll define the sys-\ntem operations in terms of the domain model.\nCREATING A HIGH-LEVEL DOMAIN MODEL\nThe first step in the process of defining th e system operations is to sketch a high-\nlevel domain model for the application. No te that this domain model is much sim-\npler than what will ultimately be implem ented. The application won\u2019t even have a\nsingle domain model because, as you\u2019ll so on learn, each service has its own domain\nmodel. Despite being a drastic simplification, a high-level domain model is useful at\nthis stage because it defines the vocabulary  for describing the behavior of the system\noperations.\n A domain model is created using standard techniques such as analyzing the nouns\nin the stories and scenarios and talking to the domain experts. Consider, for example,\nFunctional requirements\nFTGO\nAs a consumer\nI want to place an order\nso that I can ...\ncreateOrder()\nacceptOrder()\nAs a restaurant\nI want to accept an order\nso that I can ...\nStep 2\nHigh-level domain model\nStep 1\nOrder\nMaps to\nSystem operations are de\ufb01ned\nin terms of domain model.\nDomain model\nderived from\nrequirements\nRestaurant\nDelivery\nFigure 2.6 System operations are derived from the applicat ion\u2019s requirements using a two-step process. The first \nstep is to create a high-level domain model. The second step is to define the system operations, which are defined \nin terms of the domain model.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2195, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1d1c91cc-948d-44f7-ae1f-1d562751b825": {"__data__": {"id_": "1d1c91cc-948d-44f7-ae1f-1d562751b825", "embedding": null, "metadata": {"page_label": "47", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6839f8b-ccde-44c5-8017-7668d7dc7c1d", "node_type": "4", "metadata": {"page_label": "47", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fe5682798110942bbba1c95c277f6bb7e54bedc02489b7a6f48462003c2c4315", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "47Defining an application\u2019s microservice architecture\nthe Place Order story. We can expand that story into numerous user scenarios includ-\ning this one:\nGiven a consumer\nAnd a restaurant\nAnd a delivery address/time that can be served by that restaurant\nAnd an order total that meets the restaurant's order minimum\nWhen the consumer places an order for the restaurant\nThen consumer's credit card is authorized\nAnd an order is created in the PENDING_ACCEPTANCE state\nAnd the order is associated with the consumer\nAnd the order is associated with the restaurant\nThe nouns in this user scenario hint at the existence of various classes, including\nConsumer, Order, Restaurant, and CreditCard.\n Similarly, the Accept Order story can be expanded into a scenario such as this one:\nGiven an order that is in the PENDING_ACCEPTANCE state\nand a courier that is available to deliver the order\nWhen a restaurant accepts an order with a promise to prepare by a particular\ntime\nThen the state of the order is changed to ACCEPTED\nAnd the order's promiseByTime is updated to the promised time\nAnd the courier is assigned to deliver the order\nThis scenario suggests the existence of Courier and Delivery classes. The end result\nafter a few iterations of analysis will be a domain model that consists, unsurprisingly,\nof those classes and others, such as MenuItem and Address. Figure 2.7 is a class dia-\ngram that shows the key classes.\nConsumer Order\nstate\n...\ncreditcardId\n... deliveryTime quantity name\nprice\nstreet1\nstreet2\ncity\nstate\nzip\nname\n...\navailable\n...\nlat\nlon\nRestaurant Courier Location\nPaymentInfo DeliveryInfo OrderLineItem MenuItem Address\nPlaced by For\nAssigned to\nPaid usingPays using\nFigure 2.7 The key classes in the FTGO domain model", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afa0f01e-3c6d-47f1-850c-e900e6578607": {"__data__": {"id_": "afa0f01e-3c6d-47f1-850c-e900e6578607", "embedding": null, "metadata": {"page_label": "48", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aefff421-bc29-4bab-94b2-9acc1342912b", "node_type": "4", "metadata": {"page_label": "48", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6d185788f22da808776eadb4fc78e16c87273b454f976e284b41c76d34f40974", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "48 CHAPTER 2 Decomposition strategies\nThe responsibilities of each class are as follows:\n\uf0a1 Consumer\u2014A consumer who places orders.\n\uf0a1 Order\u2014An order placed by a consumer. It describes the order and tracks its status.\n\uf0a1 OrderLineItem\u2014A line item of an Order.\n\uf0a1 DeliveryInfo\u2014The time and place to deliver an order.\n\uf0a1 Restaurant\u2014A restaurant that prepares or ders for delivery to consumers.\n\uf0a1 MenuItem\u2014An item on the restaurant\u2019s menu.\n\uf0a1 Courier\u2014A courier who deliver orders to consumers. It tracks the availability of\nthe courier and their current location.\n\uf0a1 Address\u2014The address of a Consumer or a Restaurant.\n\uf0a1 Location\u2014The latitude and longitude of a Courier.\nA class diagram such as the one in figure 2. 7 illustrates one aspect of an application\u2019s\narchitecture. But it isn\u2019t much more than a pretty picture without the scenarios to ani-\nmate it. The next step is to define the sy stem operations, which correspond to archi-\ntectural scenarios. \nDEFINING SYSTEM OPERATIONS\nOnce you\u2019ve defined a high-level domain model, the next step is to identify the requests\nthat the application must handle. The details of the UI are beyond the scope of this\nbook, but you can imagine that in each user scenario, the UI will make requests to the\nbackend business logic to retrieve and upda te data. FTGO is primarily a web applica-\ntion, which means that most requests are HTTP-based, but it\u2019s possible that some clients\nmight use messaging. Instead of committing to a specific protocol, therefore, it makes\nsense to use the more abstract notion of a system operation to represent requests.\n There are two types of system operations:\n\uf0a1 Commands\u2014System operations that crea te, update, and delete data\n\uf0a1 Queries\u2014System operations that read (query) data\nUltimately, these system operations will correspond to REST, RPC, or messaging\nendpoints, but for now thinking of them abst ractly is useful. Let\u2019s first identify some\ncommands.\n A good starting point for identifying system commands is to analyze the verbs in the\nuser stories and scenarios. Consider, for example, the Place Order story. It clearly sug-\ngests that the system must provide a Create Order operation. Many other stories individ-\nually map directly to system commands. Table 2.1 lists some of the key system commands.\nTable 2.1 Key system commands for the FTGO application\nActor Story Command Description\nConsumer Create Order createOrder() Creates an order\nRestaurant Accept Order acceptOrder() Indicates that the restaurant has \naccepted the order and is committed \nto preparing it by the indicated time", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2558, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "459565db-7806-4dae-8141-fdd2c3eb26cd": {"__data__": {"id_": "459565db-7806-4dae-8141-fdd2c3eb26cd", "embedding": null, "metadata": {"page_label": "49", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fe846f9-9c02-42f7-91ff-13b8dbca54b6", "node_type": "4", "metadata": {"page_label": "49", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1c83e2aed69b9f15e149f1946cd7c1eb1bae3fe52fb49d203ddd061191c4cfce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "49Defining an application\u2019s microservice architecture\nA command has a specification that defines its parameters, return value, and behavior\nin terms of the domain model classes. The behavior specification consists of precondi-\ntions that must be true when the operatio n is invoked, and post-conditions that are\ntrue after the operation is invoked. Here, for example, is the specification of the\ncreateOrder() system operation:\nThe preconditions mirror the givens in the Place Order user scenario described ear-\nlier. The post-conditions mirror the thens from the scenario. When a system operation\nis invoked it will verify the precondition s and perform the actions required to make\nthe post-conditions true.\n Here\u2019s the specification of the acceptOrder() system operation:\nRestaurant Order Ready \nfor Pickup\nnoteOrderReadyForPickup() Indicates that the order is ready for \npickup\nCourier Update \nLocation\nnoteUpdatedLocation() Updates the current location of the \ncourier\nCourier Delivery \npicked up\nnoteDeliveryPickedUp() Indicates that the courier has \npicked up the order\nCourier Delivery \ndelivered\nnoteDeliveryDelivered() Indicates that the courier has deliv-\nered the order\nOperation createOrder (consumer id, payment method, delivery address, delivery time, \nrestaurant id, order line items)\nReturns orderId, \u2026\nPreconditions \uf0a1 The consumer exists and can place orders.\n\uf0a1 The line items correspond to the restaurant\u2019s menu items.\n\uf0a1 The delivery address and time can be serviced by the restaurant.\nPost-conditions \uf0a1 The consumer\u2019s credit card was authorized for the order total.\n\uf0a1 An order was created in the PENDING_ACCEPTANCE state.\nOperation acceptOrder(restaurantId, orderId, readyByTime)\nReturns \u2014\nPreconditions \uf0a1 The order.status is PENDING_ACCEPTANCE.\n\uf0a1 A courier is available to deliver the order.\nPost-conditions \uf0a1 The order.status was changed to ACCEPTED.\n\uf0a1 The order.readyByTime was changed to the readyByTime.\n\uf0a1 The courier was assigned to deliver the order.\nTable 2.1 Key system commands for the FTGO application  (continued)\nActor Story Command Description", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2077, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36aaf72d-e6e8-4105-9b67-a0e23dc88c7a": {"__data__": {"id_": "36aaf72d-e6e8-4105-9b67-a0e23dc88c7a", "embedding": null, "metadata": {"page_label": "50", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3c590f9-7914-463c-9cd0-b535fd67e5e5", "node_type": "4", "metadata": {"page_label": "50", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "80e8de002b425908740683e0e89fd3f140f3f799c38bbf4e33a952118a5b8597", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "50 CHAPTER 2 Decomposition strategies\nIts pre- and post-conditions mirror the user scenario from earlier.\n Most of the architecturally relevant sy stem operations are commands. Sometimes,\nthough, queries, which retrieve data, are also important.\n Besides implementing commands, an ap plication must also implement queries.\nThe queries provide the UI with the inform ation a user needs to make decisions. At\nthis stage, we don\u2019t have a particular UI  design for FTGO application in mind, but\nconsider, for example, the flow when a consumer places an order:\n1 User enters delivery address and time.\n2 System displays available restaurants.\n3 User selects restaurant.\n4 System displays menu.\n5 User selects item and checks out.\n6 System creates order.\nThis user scenario suggests the following queries:\n\uf0a1 findAvailableRestaurants(deliveryAddress, deliveryTime)\u2014Retrieves the\nrestaurants that can deliver to the specified delivery address at the specified time\n\uf0a1 findRestaurantMenu(id)\u2014Retrieves information about a restaurant including\nthe menu items\nOf the two queries, findAvailableRestaurants() is probably the most architecturally\nsignificant. It\u2019s a complex query involv ing geosearch. The geosearch component of\nthe query consists of finding all points \u2014restaurants\u2014that are near a location\u2014the\ndelivery address. It also filters out those restaurants that are closed when the order\nneeds to be prepared and picked up. More over, performance is critical, because this\nquery is executed whenever a consumer wants to place an order.\n The high-level domain model and the system operations capture what the applica-\ntion does. They help drive the definition of the application\u2019s architecture. The behav-\nior of each system operation is descri bed in terms of the domain model. Each\nimportant system operation represents an architecturally significant scenario that\u2019s\npart of the description of the architecture.\n Once the system operations have been de fined, the next step is to identify the\napplication\u2019s services. As mentioned earlier, there isn\u2019t a mechanical process to follow.\nThere are, however, various decomposition strategies that you can use. Each one\nattacks the problem from a different perspective and uses its own terminology. But\nwith all strategies, the end result is the same: an architecture consisting of services that\nare primarily organized around business rather than technical concepts.\n Let\u2019s look at the first strategy, which defines services corresponding to business\ncapabilities.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5475ce31-425a-47e9-8e6e-1212a53eaa15": {"__data__": {"id_": "5475ce31-425a-47e9-8e6e-1212a53eaa15", "embedding": null, "metadata": {"page_label": "51", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa3318e9-992e-4afb-a3b1-5ba41e9652cb", "node_type": "4", "metadata": {"page_label": "51", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e60a9156283132da531dbe4844644c5bd6c08dfcfc7f45459888a81ed4f4533a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "51Defining an application\u2019s microservice architecture\n2.2.2 Defining services by applying the Decompose by business \ncapability pattern\nOne strategy for creating a microservice architecture is to decompose by business\ncapability. A concept from business architecture modeling, a business capability is some-\nthing that a business does in order to generate value. The set of capabilities for a given\nbusiness depends on the kind of business. For example, the capabilities of an insur-\nance company typically include Underwriting, Claims management, Billing, Compliance,\nand so on. The capabilities of an online store include Order management, Inventory\nmanagement, Shipping, and so on.\nBUSINESS CAPABILITIES DEFINE WHAT AN ORGANIZATION DOES\nAn organization\u2019s business capabilities capture what an organization\u2019s business is.\nThey\u2019re generally stable, as opposed to how an organization conducts its business, which\nchanges over time, sometimes dramatically. That\u2019s especially true today, with the rapidly\ngrowing use of technology to automate many business processes. For example, it wasn\u2019t\nthat long ago that you deposited checks at your bank by handing them to a teller. It then\nbecame possible to deposit checks using an ATM. Today you can conveniently deposit\nmost checks using your smartphone. As you can see, the Deposit check business capabil-\nity has remained stable, but the manner in which it\u2019s done has drastically changed. \nIDENTIFYING BUSINESS CAPABILITIES\nAn organization\u2019s business capabilities are identified by analyzing the organization\u2019s\npurpose, structure, and business processes. Each business capability can be thought of\nas a service, except it\u2019s business-oriented rather than technical. Its specification con-\nsists of various components, including inpu ts, outputs, and service-level agreements.\nFor example, the input to an Insurance un derwriting capability is the consumer\u2019s\napplication, and the outputs include approval and price.\n A business capability is often focused on a particular business object. For example,\nthe Claim business object is the focus of the Claim management capability. A capability\ncan often be decomposed into sub-capabilities. For example, the Claim management\ncapability has several sub-capabilities, including Claim information management, Claim\nreview, and Claim payment management.\n It is not difficult to imagine that the business capabilities for FTGO include the\nfollowing:\n\uf0a1 Supplier management\n\u2013 Courier management\u2014Managing courier information\n\u2013 Restaurant information management \u2014Managing restaurant menus and other\ninformation, including location and open hours\nPattern: Decompose by business capability\nDefine services corresponding to business capabilities. See http://microservices.io/\npatterns/decomposition/decompose-by-business-capability.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2813, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "433c3479-cf92-41e9-a3de-3c479a976ac9": {"__data__": {"id_": "433c3479-cf92-41e9-a3de-3c479a976ac9", "embedding": null, "metadata": {"page_label": "52", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b49deb62-dbce-48e0-b67b-9f3f1237c1b6", "node_type": "4", "metadata": {"page_label": "52", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a7366dfcc41a39e8bc0669c2e1feea8b17eae3228e8b6c03d42535e4ecbb6ed6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "52 CHAPTER 2 Decomposition strategies\n\uf0a1 Consumer management\u2014Managing information about consumers\n\uf0a1 Order taking and fulfillment\n\u2013 Order management\u2014Enabling consumers to create and manage orders\n\u2013 Restaurant order management \u2014Managing the preparation of orders at a\nrestaurant\n\u2013L o g i s t i c s\n\u2013Courier availability management \u2014Managing the real-time availability of couri-\ners to delivery orders\n\u2013 Delivery management\u2014Delivering orders to consumers\n\uf0a1 Accounting\n\u2013 Consumer accounting\u2014Managing billing of consumers\n\u2013 Restaurant accounting\u2014Managing payments to restaurants\n\u2013 Courier accounting\u2014Managing payments to couriers\n\uf0a1 \u2026\nThe top-level capabilities include Suppl ier management, Consumer management,\nOrder taking and fulfillment, and Accounting. There will likely be many other top-\nlevel capabilities, including marketing-related capabilities. Most top-level capabilities\nare decomposed into sub-capabilities. For example, Order taking and fulfillment is\ndecomposed into five sub-capabilities.\n On interesting aspect of this capability hierarchy is that there are three restaurant-\nrelated capabilities: Restaurant informat ion management, Restaurant order manage-\nment, and Restaurant accounting. That\u2019s because they represent three very different\naspects of restaurant operations.\n Next we\u2019ll look at how to use business capabilities to define services. \nFROM BUSINESS CAPABILITIES TO SERVICES\nOnce you\u2019ve identified the business capab ilities, you then define a service for each\ncapability or group of related capabilities. Figure 2.8 shows the mapping from capabil-\nities to services for the FTGO application. Some top-level capabilities, such as the\nAccounting capability, are mapped to servic es. In other cases, sub-capabilities are\nmapped to services.\n The decision of which level of the capab ility hierarchy to map to services, because\nis somewhat subjective. My justification for this particular mapping is as follows:\n\uf0a1 I mapped the sub-capabilities of Supplier management to two services, because\nRestaurants and Couriers are very different types of suppliers.\n\uf0a1 I mapped the Order taking and fulfillment capability to three services that are\neach responsible for different phases of  the process. I combined the Courier\navailability management and Delivery  management capabilities and mapped\nthem to a single service because they\u2019re deeply intertwined.\n\uf0a1 I mapped the Accounting capability to its own service, because the different\ntypes of accounting seem similar.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2487, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6dc2eff7-3bdb-4564-9fd6-ae9fd83afae9": {"__data__": {"id_": "6dc2eff7-3bdb-4564-9fd6-ae9fd83afae9", "embedding": null, "metadata": {"page_label": "53", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "547ea586-f8d5-4b13-80a5-256b16b8e00e", "node_type": "4", "metadata": {"page_label": "53", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "348ee5cae501c08569afb6fe6352b82b42945e902ff486b989446fc81e0c43c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "53Defining an application\u2019s microservice architecture\nLater on, it may make sense to separate payments (of Restaurants and Couriers) and\nbilling (of Consumers).\n A key benefit of organizing services around  capabilities is that because they\u2019re sta-\nble, the resulting architecture will also be relatively stable. The individual components\nof the architecture may evolve as the how aspect of the business changes, but the archi-\ntecture remains unchanged.\n Having said that, it\u2019s important to remember that the services shown in figure 2.8\nare merely the first attempt at defining the architecture. They may evolve over time as\nwe learn more about the application domain. In particular, an important step in the\narchitecture definition process is investigating how the services collaborate in each of\nthe key architectural services. You might, for example, discover that a particular\ndecomposition is inefficient due to exce ssive interprocess communication and that\nyou must combine services. Co nversely, a service might gr ow in complexity to the\nCourier ServiceCourier management\nConsumer management\nSupplier management\nCapability hierarchy Services\nCouriers and restaurants\nare very different\nkinds of suppliers\n= > different services.\nThree different services\nhandling different\nphases of the order\ntaking and ful\ufb01llment\nTreat payments and\nbilling the same for now.\nRestaurant ServiceRestaurant information\nmanagement\nOrder ServiceOrder management\nOrder taking and ful\ufb01llment\nAccounting\nKitchen ServiceRestaurant order\nticket management\nConsumer Service\nDelivery Service\nConsumer accounting\nRestaurant accounting\nCourier accounting\nAccounting Service\nLogistics\nDelivery management\nCourier availability\nmanagement\nFigure 2.8 Mapping FTGO business capabilities to se rvices. Capabilities at various levels of the \ncapability hierarchy are mapped to services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1861, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "38325b9d-6ed2-4649-b27a-8baa9b1d342c": {"__data__": {"id_": "38325b9d-6ed2-4649-b27a-8baa9b1d342c", "embedding": null, "metadata": {"page_label": "54", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f907adbe-7bbf-4fec-b075-e3eb0a5a7987", "node_type": "4", "metadata": {"page_label": "54", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "57f98622a2e80e3b6df0a85f725f45a3e0d1b6a89e390ca4ee4562dd3f1a7ac6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "54 CHAPTER 2 Decomposition strategies\npoint where it becomes worthwhile to split it into multiple services. What\u2019s more, in\nsection 2.2.5, I describe several obstacle s to decomposition that might cause you to\nrevisit your decision.\n Let\u2019s take a look at another way to decompose an application that is based on\ndomain-driven design. \n2.2.3 Defining services by applying the Decompose by \nsub-domain pattern\nDDD, as described in the excellent book Domain-driven design by Eric Evans\n(Addison-Wesley Professional, 2003), is an  approach for building complex software\napplications that is centered on the development of an object-oriented domain\nmodel. A domain mode  captures knowledge about a do main in a form that can be\nused to solve problems within that domain. It defines the vocabulary used by the\nteam, what DDD calls the Ubiquitous Language . The domain model is closely mir-\nrored in the design and implementation of the application. DDD has two concepts\nthat are incredibly useful when applying  the microservice architecture: subdomains\nand bounded contexts.\nDDD is quite different than the traditiona l approach to enterprise modeling, which\ncreates a single model for the entire enterp rise. In such a model there would be, for\nexample, a single definition of each busi ness entity, such as customer, order, and so\non. The problem with this kind of modeling is  that getting different parts of an orga-\nnization to agree on a single model is a monumental task. Also, it means that from the\nperspective of a given part of the organization, the model is overly complex for their\nneeds. Moreover, the domain model can be confusing because different parts of the\norganization might use either the same term for different concepts or different terms\nfor the same concept. DDD avoids these problems by defining multiple domain mod-\nels, each with an explicit scope.\n DDD defines a separate domain model for each subdomain. A subdomain is a part\nof the domain, DDD\u2019s term for the application\u2019s problem space. Subdomains are iden-\ntified using the same approach as identifying business capabilities: analyze the busi-\nness and identify the different areas of expertise. The end result is very likely to be\nsubdomains that are similar to the business capabilities. The examples of subdomains\nin FTGO include Order taking, Order ma nagement, Kitchen management, Delivery,\nand Financials. As you can see, these subdomains are very similar to the business capa-\nbilities described earlier.\nPattern: Decompose by subdomain\nDefine services corresponding to DDD subdomains. See http://microservices.io\n/patterns/decomposition/decompose-by-subdomain.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2652, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fcb631fc-ab69-4b28-b880-8c64187bdada": {"__data__": {"id_": "fcb631fc-ab69-4b28-b880-8c64187bdada", "embedding": null, "metadata": {"page_label": "55", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6cd6b5e6-c7b6-4b33-85fd-be2fb5c50fde", "node_type": "4", "metadata": {"page_label": "55", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8b7a9b09f030c5c97acc86a09b0dc979bf703d488d442d83a69809b9b9236363", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "55Defining an application\u2019s microservice architecture\n DDD calls the scope of a domain model a bounded context . A bounded context\nincludes the code artifacts that implemen t the model. When using the microservice\narchitecture, each bounded context is a serv ice or possibly a set of services. We can\ncreate a microservice architecture by a pplying DDD and defining a service for each\nsubdomain. Figure 2.9 shows how the subdom ains map to services, each with its own\ndomain model.\nDDD and the microservice architecture ar e in almost perfect alignment. The DDD\nconcept of subdomains and bounded contexts maps nicely to services within a micro-\nservice architecture. Also, the microservice architecture\u2019s concept of autonomous\nteams owning services is completely aligned with the DDD\u2019s concept of each domain\nmodel being owned and developed by a single team. Even better, as I describe later in\nthis section, the concept of a subdomain wi th its own domain model is a great way to\neliminate god classes and thereby make decomposition easier.\n Decompose by subdomain and Decompose by business capability are the two main\npatterns for defining an application\u2019s microservice architecture. There are, however,\nsome useful guidelines for decomposition that have their roots in object-oriented\ndesign. Let\u2019s take a look at them. \nAccounting Service\nAccounting\ndomain model\nKitchen Service\n.... Service\nOrder taking\nsubdomain\nMaps to\nMaps to\nMaps to\nMaps to\nMaps to\nKitchen\nsubdomain\nAccounting\nsubdomain\nDelivery\nsubdomain\n....\nsubdomain\nKitchen\ndomain model\nDelivery Service\nDelivery\ndomain model\nOrder Service\nFTGO domain\nOrder\ndomain model\nFigure 2.9 From subdomains to services: each subdomain of the FTGO application domain \nis mapped to a service, which has its own domain model.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1779, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1eb7f313-aeff-4ed9-9f3d-07bb561cc3d1": {"__data__": {"id_": "1eb7f313-aeff-4ed9-9f3d-07bb561cc3d1", "embedding": null, "metadata": {"page_label": "56", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab6dbb42-a600-48b1-b2a8-6515863c1cc6", "node_type": "4", "metadata": {"page_label": "56", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3ff1ae7d1629cf14f1e484f873b084eadeb3cf31941d3c6c7fce98dcec813656", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "56 CHAPTER 2 Decomposition strategies\n2.2.4 Decomposition guidelines\nSo far in this chapter, we\u2019ve looked at the main ways to define a microservice architec-\nture. We can also adapt and use a couple of principles from object-oriented design\nwhen applying the microservice architectu re pattern. These principles were created\nby Robert C. Martin and described in his classic book Designing Object Oriented C++\nApplications Using The Booch Method (Prentice Hall, 1995). The first principle is the Sin-\ngle Responsibility Principle (SRP), for defining the responsibilities of a class. The sec-\nond principle is the Common Closure Prin ciple (CCP), for organizing classes into\npackages. Let\u2019s take a look at these principles and see how they can be applied to the\nmicroservice architecture.\nSINGLE RESPONSIBILITY PRINCIPLE\nOne of the main goals of software architecture and design is determining the respon-\nsibilities of each software element. The Single Responsibility Principle is as follows:\nA class should have only one reason to change.\n                                                                      Robert C. Martin\nEach responsibility that a class has is a pote ntial reason for that class to change. If a\nclass has multiple responsibilities that change independently, the class won\u2019t be stable.\nBy following the SRP, you define classes th at each have a single responsibility and\nhence a single reason for change.\n We can apply SRP when defining a microservice architecture and create small,\ncohesive services that each have a single responsibility. This will reduce the size of the\nservices and increase their stability. The new FTGO architecture is an example of SRP\nin action. Each aspect of getting food to a consumer\u2014order taking, order prepara-\ntion, and delivery\u2014is the responsi bility of a separate service. \nCOMMON CLOSURE PRINCIPLE\nThe other useful principle is the Common Closure Principle:\nThe classes in a package should  be closed together against the same kinds of changes. A\nchange that affects a package affects all the classes in that package.\nRobert C. Martin\nThe idea is that if two classes change in lockstep because of the same underlying rea-\nson, then they belong in the same package. Perhaps, for example, those classes imple-\nment a different aspect of a particular business rule. The goal is that when that\nbusiness rule changes, developers only ne ed to change code in a small number of\npackages (ideally only one). Adhering to the CCP significantly improves the maintain-\nability of an application.\n We can apply CCP when creating a microservice architecture and package compo-\nnents that change for the same reason into the same service. Doing this will minimize", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2704, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1cf3baa1-a5a9-48b4-880a-5dee45859bbb": {"__data__": {"id_": "1cf3baa1-a5a9-48b4-880a-5dee45859bbb", "embedding": null, "metadata": {"page_label": "57", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "913c20e0-a69a-4eb2-b52c-9f13eda40906", "node_type": "4", "metadata": {"page_label": "57", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ecd320371e49fc84031dbe13bcba784621865a53be41512fa0034918f5df2414", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "57Defining an application\u2019s microservice architecture\nthe number of services that need to be  changed and deployed when some require-\nment changes. Ideally, a change will only affect a single team and a single service. CCP\nis the antidote to the distributed monolith anti-pattern.\n SRP and CCP are 2 of the 11 principles developed by Bob Martin. They\u2019re particu-\nlarly useful when developing a microservice  architecture. The remaining nine princi-\nples are used when designing classes and packages. For more information about SRP,\nCCP, and the other OOD principles, see the article \u201cThe Principles of Object Ori-\nented Design\u201d on Bob Martin\u2019s website (http://butunclebob.com/ArticleS.UncleBob\n.PrinciplesOfOod).\n Decomposition by business capability and by subdomain along with SRP and CCP\nare good techniques for decomposing an app lication into services. In order to apply\nthem and successfully develop a microservice architecture, you must solve some trans-\naction management and interprocess communication issues. \n2.2.5 Obstacles to decomposing an application into services\nOn the surface, the strategy of creating a microservice architecture by defining ser-\nvices corresponding to business capabilities or subdomains looks straightforward. You\nmay, however, encounter several obstacles:\n\uf0a1 Network latency\n\uf0a1 Reduced availability due to synchronous communication\n\uf0a1 Maintaining data consistency across services\n\uf0a1 Obtaining a consistent view of the data\n\uf0a1 God classes preventing decomposition\nLet\u2019s take a look at each obstacle, starting with network latency.\nNETWORK LATENCY\nNetwork latency is an ever-present concern in a distributed system. You might discover\nthat a particular decomposition into services  results in a large number of round-trips\nbetween two services. Sometimes, you can reduce the latency to an acceptable amount\nby implementing a batch API for fetching multiple objects in a single round trip. But\nin other situations, the solution is to co mbine services, replacing expensive IPC with\nlanguage-level method or function calls. \nSYNCHRONOUS INTERPROCESS COMMUNICATION REDUCES AVAILABILITY\nAnother problem is how to implement in terservice communication in a way that\ndoesn\u2019t reduce availability. For example, the most straightforward way to implement\nthe createOrder() operation is for the Order Service to synchronously invoke the\nother services using REST. The drawback of  using a protocol like REST is that it\nreduces the availability of the Order Service. It won\u2019t be able to create an order if any\nof those other services are unavailable. Sometimes this is a worthwhile trade-off, but in\nchapter 3 you\u2019ll learn that using asynchronous messaging, which eliminates tight cou-\npling and improves availability, is often a better choice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2764, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "16dba468-a1b9-4fc1-9a78-4dae36e42418": {"__data__": {"id_": "16dba468-a1b9-4fc1-9a78-4dae36e42418", "embedding": null, "metadata": {"page_label": "58", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b58aa14a-7243-43ad-8563-24112a760d44", "node_type": "4", "metadata": {"page_label": "58", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e39c2426c3e6e7a5c85189aaaecef3de7a77a775035fb887167e2c0c6debafed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "58 CHAPTER 2 Decomposition strategies\nMAINTAINING DATA CONSISTENCY ACROSS SERVICES\nAnother challenge is maintaining data consistency across services. Some system opera-\ntions need to update data in multiple services. For example, when a restaurant accepts\nan order, updates must occur in both the Kitchen Service and the Delivery Service.\nThe Kitchen Service changes the status of the Ticket. The Delivery Service sched-\nules delivery of the order. Both of these updates must be done atomically.\n The traditional solution is to use a tw o-phase, commit-based, distributed trans-\naction management mechanism. But as you\u2019 ll see in chapter 4, this is not a good\nchoice for modern applications, and you must  use a very different approach to trans-\naction management, a saga. A saga is a sequence of local transactions that are coordi-\nnated using messaging. Sagas are more complex than traditional ACID transactions\nbut they work well in many situations. One limitation of sagas is that they are eventu-\nally consistent. If you need to update some data atomically, then it must reside within\na single service, which can be an obstacle to decomposition. \nOBTAINING A CONSISTENT VIEW OF THE DATA\nAnother obstacle to decomposition is the inab ility to obtain a truly consistent view of\ndata across multiple databases. In a mono lithic application, the properties of ACID\ntransactions guarantee that a query will return a consistent view of the database. In\ncontrast, in a microservice architecture, even though each service\u2019s database is consis-\ntent, you can\u2019t obtain a globally consistent view of the data. If you need a consistent\nview of some data, then it must reside in a single service, which can prevent decompo-\nsition. Fortunately, in practice this is rarely a problem. \nGOD CLASSES PREVENT DECOMPOSITION\nAnother obstacle to decomposition is the existence of so-called god classes. God classes\nare the bloated classes that are used throughout an application ( http://wiki.c2.com/\n?GodClass). A god class typically implements business logic for many different aspects\nof the application. It normally has a larg e number of fields mapped to a database\ntable with many columns. Most applications  have at least one of these classes, each\nrepresenting a concept that\u2019s central to th e domain: accounts in  banking, orders in\ne-commerce, policies in insurance, and so  on. Because a god class bundles together\nstate and behavior for many different aspects of an application, it\u2019s an insurmountable\nobstacle to splitting any business logic that uses it into services.\n The Order class is a great example of a god class in the FTGO application. That\u2019s\nnot surprising\u2014after all, the purpose of FTGO  is to deliver food orders to customers.\nMost parts of the system involve orders. If the FTGO application had a single domain\nmodel, the Order class would be a very large class.  It would have state and behavior\ncorresponding to many different parts of the application. Figure 2.10 shows the struc-\nture of this class that would be created using traditional modeling techniques.\n As you can see, the Order class has fields and methods corresponding to order pro-\ncessing, restaurant order management, delive ry, and payments. This class also has a\ncomplex state model, due to the fact that one model has to describe state transitions", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3329, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8dd17eda-f333-4735-9962-ab940812be4c": {"__data__": {"id_": "8dd17eda-f333-4735-9962-ab940812be4c", "embedding": null, "metadata": {"page_label": "59", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "287dde2f-3b33-4de7-835c-45e583660864", "node_type": "4", "metadata": {"page_label": "59", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "417234f13ec937775229d889d04658240bbc2a0a8c2731a1fd64e05fd4e66bfb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "59Defining an application\u2019s microservice architecture\nfrom disparate parts of the application. In its current form, this class makes it extremely\ndifficult to split code into services.\n One solution is to package the Order class into a library and create a central Order\ndatabase. All services that process orders use this library and access the access data-\nbase. The trouble with this approach is that it violates one of the key principles of the\nmicroservice architecture and results in undesirable, tight coupling. For example, any\nchange to the Order schema requires the teams to update their code in lockstep.\n Another solution is to encapsulate the Order database in an Order Service, which\nis invoked by the other services to retrieve and update orders. The problem with that\ndesign is that the Order Service would be a data service with an anemic domain\nmodel containing little or no business logic. Neither of these options is appealing, but\nfortunately, DDD provides a solution.\n A much better approach is to apply DDD and treat each service as a separate sub-\ndomain with its own domain model. This means that each of the services in the FTGO\napplication that has anything to do with orders has its own domain model with its\nversion of the Order class. A great example of the benefit of multiple domain mod-\nels is the Delivery Service. Its view of an Order, shown in figure 2.11, is extremely\nsimple: pickup address, pickup time, delive ry address, and delivery time. Moreover,\nrather than call it an Order, the Delivery Service uses the more appropriate name of\nDelivery.\nOrder\nOrderLineItem\nAddress Courier Consumer Restaurant PaymentInfo\nOrderTotal\ndeliveryTime\nstatus\n<<delivery>>\npickupTime\n<<billing>>\ntransactionid\n<<orderTaking>>\ncreate()\ncancel()\n<<restaurant>>\naccept()\nreject()\nnoteReadyForPickup()\n<<delivery>>\nassignCourier()\nnotePickedUp()\nnoteDelivered()\nFigure 2.10 The Order god class is bloated with numerous responsibilities.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1957, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "994c9bc2-96fe-41ad-9e04-f56e352370ba": {"__data__": {"id_": "994c9bc2-96fe-41ad-9e04-f56e352370ba", "embedding": null, "metadata": {"page_label": "60", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "087710e8-7a88-43b5-8792-38eb61eec1b3", "node_type": "4", "metadata": {"page_label": "60", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "87ed5053515f3177b45aaa96cf3ee474a1f834d96603dadcee3ebceef5d2948e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "60 CHAPTER 2 Decomposition strategies\nThe Delivery Service isn\u2019t interested in any of the other attributes of an order.\n The Kitchen Service also has a much simpler view of an order. Its version of an\nOrder is called a Ticket. As figure 2.12 shows, a Ticket simply consist of a status, the\nrequestedDeliveryTime, a prepareByTime, and a list of line items that tell the\nrestaurant what to prepare. It\u2019s unconcerned with the consumer, payment, delivery,\nand so on.\nThe Order service has the most complex view of an order, shown in figure 2.13. Even\nthough it has quite a few fields and methods,  it\u2019s still much simpler than the original\nversion.\nThe Order class in each domain model represents different aspects of the same Order\nbusiness entity. The FTGO application must maintain consistency between these differ-\nent objects in different services. For example, once the Order Service has authorized\nDelivery Address\nPickup location\nDelivery location\nAssigned to\nCourier\nstatus\nscheduledPickupTime\nScheduledDeliveryTime\nFigure 2.11 The Delivery Service domain model\nTicket\nstatus\nrequestedDeliveryTime\npreparedByTime\nTicketLineItem\nquantity\nitem\nFigure 2.12 The Kitchen Service domain model\nOrder\nOrderLineItem\nAddress Consumer RestaurantPaymentInfo\nstatus\norderTotal\ndeliveryTime\n...\nFigure 2.13 The Order Service domain model", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1328, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1d85c877-0a29-4447-be72-c6715f817f1a": {"__data__": {"id_": "1d85c877-0a29-4447-be72-c6715f817f1a", "embedding": null, "metadata": {"page_label": "61", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "038ac4c7-07a2-4a88-b6de-3a04667acc2e", "node_type": "4", "metadata": {"page_label": "61", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "103fcdc194978559b5ce9033342c046c1030b4cecf6ba7ef8f61e009f3087e76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "61Defining an application\u2019s microservice architecture\nthe consumer\u2019s credit card, it must trigger the creation of the Ticket in the Kitchen\nService. Similarly, if the restaurant rejects the order via the Kitchen Service, it must\nbe cancelled in the Order Service service, and the customer credited in the billing\nservice. In chapter 4, you\u2019ll learn how to maintain consistency between services, using\nthe previously mentioned event-driven mechanism sagas.\n As well as creating technical challenges, having multiple domain models also\nimpacts the implementation of the user ex perience. An application must translate\nbetween the user experience, which is its own domain model, and the domain models\nof each of the services. In the FT GO application, for example, the Order status dis-\nplayed to a consumer is derived from Order information stored in multiple services.\nThis translation is often handled by the AP I gateway, discussed in chapter 8. Despite\nthese challenges, it\u2019s essential that you identify and eliminate god classes when defin-\ning a microservice architecture.\n We\u2019ll now look at how to define the service APIs. \n2.2.6 Defining service APIs\nSo far, we have a list of system operations  and a list of a potential services. The next\nstep is to define each service\u2019s API: its operations and events. A service API operation\nexists for one of two reasons: some operations correspond to system operations. They\nare invoked by external clients and perhap s by other services. The other operations\nexist to support collaboration between services. These operations are only invoked by\nother services.\n A service publishes events primarily to enable it to collaborate with other ser-\nvices. Chapter 4 describes how events can be used to implement sagas, which main-\ntain data consistency across services. And chapter 7 discusses how events can be used\nto update CQRS views, which support effici ent querying. An application can also use\nevents to notify external clients. For ex ample, it could use WebSockets to deliver\nevents to a browser.\n The starting point for defining the service APIs is to map each system operation to\na service. After that, we decide whether a service needs to collaborate with others to\nimplement a system operation. If collabor ation is required, we then determine what\nAPIs those other services must provide in order to support the collaboration. Let\u2019s\nbegin by looking at how to assign system operations to services.\nASSIGNING SYSTEM OPERATIONS TO SERVICES\nThe first step is to decide which service is the initial entry point for a request. Many\nsystem operations neatly map to a service, but sometimes the mapping is less obvious.\nConsider, for example, the noteUpdatedLocation() operation, which updates the\ncourier location. On one hand, because it\u2019s related to couriers, this operation should\nbe assigned to the Courier service. On the other hand, it\u2019s the Delivery Service\nthat needs the courier location. In this ca se, assigning an operation to a service that\nneeds the information provided by the operation is a better choice. In other situations,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3091, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69b1f450-d53a-485c-9609-f81b4610164a": {"__data__": {"id_": "69b1f450-d53a-485c-9609-f81b4610164a", "embedding": null, "metadata": {"page_label": "62", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27319c0d-c6c3-4dbf-9d48-53d239f6a19e", "node_type": "4", "metadata": {"page_label": "62", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b3959ca3ee3f4361dbd988886fbfb439a28a6168d2507da8a8b314cb906f54fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "62 CHAPTER 2 Decomposition strategies\nit might make sense to assign an operation to the service that has the information nec-\nessary to handle it.\n Table 2.2 shows which services in the FT GO application are responsible for which\noperations.\nAfter having assigned operations to services, the next step is to decide how the services\ncollaborate in order to handle each system operation. \nDETERMINING THE APIS REQUIRED TO SUPPORT COLLABORATION BETWEEN SERVICES\nSome system operations are handled entirely by a single service. For example, in the\nFTGO application, the Consumer Service handles the createConsumer() operation\nentirely by itself. But other system operations span multiple services. The data needed\nto handle one of these requests might, for instance, be scattered around multiple ser-\nvices. For example, in order to implement the createOrder() operation, the Order\nService must invoke the following services in  order to verify its preconditions and\nmake the post-conditions become true:\n\uf0a1 Consumer Service\u2014Verify that the consumer can place an order and obtain their\npayment information.\n\uf0a1 Restaurant Service\u2014Validate the order line item s, verify that the delivery\naddress/time is within the restaurant\u2019s  service area, verify order minimum is\nmet, and obtain prices for the order line items.\n\uf0a1 Kitchen Service\u2014Create the Ticket.\n\uf0a1 Accounting Service\u2014Authorize the consumer\u2019s credit card.\nSimilarly, in order to implement the acceptOrder() system operation, the Kitchen\nService must invoke the Delivery Service to schedule a courier to deliver the order.\nTable 2.3 shows the services, their revised APIs, and their collaborators. In order to\nfully define the service APIs, you need to analyze each system operation and deter-\nmine what collaboration is required.\nTable 2.2 Mapping system operations to services in the FTGO application\nService Operations\nConsumer Service createConsumer()\nOrder Service createOrder()\nRestaurant Service findAvailableRestaurants()\nKitchen Service \uf0a1 acceptOrder()\n\uf0a1 noteOrderReadyForPickup()\nDelivery Service \uf0a1 noteUpdatedLocation()\n\uf0a1 noteDeliveryPickedUp()\n\uf0a1 noteDeliveryDelivered()", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2128, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c5fc5b82-390c-46a2-910d-ef83ffb972ac": {"__data__": {"id_": "c5fc5b82-390c-46a2-910d-ef83ffb972ac", "embedding": null, "metadata": {"page_label": "63", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c985e782-94a2-44d8-a3a6-0559b1965f64", "node_type": "4", "metadata": {"page_label": "63", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b1900a79d5148209da462a435ea1bd816876c0ce0aec47bda89a7ecce4fe6512", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "63Defining an application\u2019s microservice architecture\nSo far, we\u2019ve identified the services and the operations that each service implements.\nBut it\u2019s important to remember that the architecture we\u2019ve sketched out is very\nabstract. We\u2019ve not selected any specific IPC technology. Moreover, even though the\nterm operation suggests some kind of synchronous request/response-based IPC mecha-\nnism, you\u2019ll see that asynchronous messaging plays a significant role. Throughout this\nbook I describe architecture and design concepts that influence how these services\ncollaborate.\n Chapter 3 describes specific IPC technologies, including synchronous communica-\ntion mechanisms such as REST, and asynchronous messaging using a message broker.\nI discuss how synchronous communication can impact availability and introduce the\nconcept of a self-contained service, which doesn\u2019t invoke other services synchronously.\nOne way to implement a self-contained service is to use the CQRS pattern, covered in\nchapter 7. The Order Service could, for example, maintain a replica of the data owned\nby the Restaurant Service in order to eliminate the need for it to synchronously\ninvoke the Restaurant Service to validate an order. It keeps the replica up-to-date by\nsubscribing to events published by the Restaurant Service whenever it updates\nits data.\n Chapter 4 introduces the saga concept and how it uses asynchronous messaging\nfor coordinating the services that particip ate in the saga. As well as reliably updating\nTable 2.3 The services, their revised APIs, and their collaborators\nService Operations Collaborators\nConsumer Service verifyConsumerDetails() \u2014\nOrder Service createOrder() \uf0a1 Consumer Service\nverifyConsumerDetails()\n\uf0a1 Restaurant Service\nverifyOrderDetails()\n\uf0a1 Kitchen Service\ncreateTicket()\n\uf0a1 Accounting Service\nauthorizeCard()\nRestaurant \nService\n\uf0a1 findAvailableRestaurants()\n\uf0a1 verifyOrderDetails()\n\u2014\nKitchen Service \uf0a1 createTicket()\n\uf0a1 acceptOrder()\n\uf0a1 noteOrderReadyForPickup()\n\uf0a1 Delivery Service\nscheduleDelivery()\nDelivery Service \uf0a1 scheduleDelivery()\n\uf0a1 noteUpdatedLocation()\n\uf0a1 noteDeliveryPickedUp()\n\uf0a1 noteDeliveryDelivered()\n\u2014\nAccounting \nService\n\uf0a1 authorizeCard() \u2014", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2168, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cabe1a65-bbd7-4ab0-bc83-c6033317c426": {"__data__": {"id_": "cabe1a65-bbd7-4ab0-bc83-c6033317c426", "embedding": null, "metadata": {"page_label": "64", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87ad69ae-6995-4ec2-a5f6-f9930c6b3811", "node_type": "4", "metadata": {"page_label": "64", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "dc2d7fdede76fad2f1be152bd7435da80682698cc2ab85e9ba19f35544e7d933", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "64 CHAPTER 2 Decomposition strategies\ndata scattered across multiple services, a saga is also a way to implement a self-contained\nservice. For example, I describe how the createOrder() operation is implemented\nusing a saga, which invokes services such as the Consumer Service, Kitchen Service,\nand Accounting Service using asynchronous messaging.\n Chapter 8 describes the concept of an API gateway, which exposes an API to exter-\nnal clients. An API gateway might implement a query operation using the API compo-\nsition pattern, described in chapter 7, rather than simply route it to the service. Logic\nin the API gateway gathers the data needed by the query by calling multiple services\nand combining the results. In this situation,  the system operation is assigned to the\nAPI gateway rather than a service. The services need to implement the query opera-\ntions needed by the API gateway. \nSummary\n\uf0a1 Architecture determines your application\u2019s -ilities, including maintainability,\ntestability, and deployability, which directly impact development velocity.\n\uf0a1 The microservice architecture is an arch itecture style that gives an application\nhigh maintainability, testability, and deployability.\n\uf0a1 Services in a microservice architecture are organized around business concerns\u2014\nbusiness capabilities or subdomains\u2014rather than technical concerns.\n\uf0a1 There are two patterns for decomposition:\n\u2013 Decompose by business capability, which has its origins in business archi-\ntecture\n\u2013 Decompose by subdomain, based on concepts from domain-driven design\n\uf0a1 You can eliminate god classes, which cause tangled dependencies that prevent\ndecomposition, by applying DDD and de fining a separate domain model for\neach service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1710, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04989f81-5293-4687-99af-e88868bd7f40": {"__data__": {"id_": "04989f81-5293-4687-99af-e88868bd7f40", "embedding": null, "metadata": {"page_label": "65", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdeec5f3-52aa-4f43-9be2-0e5bfd8a65a1", "node_type": "4", "metadata": {"page_label": "65", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "960b662bf2e325d1334660b820c723473125c3a4837ed888ba5ede2861d9f584", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "65\nInterprocess\ncommunication in\na microservice architecture\nMary and her team, like most other develo pers, had some experience with inter-\nprocess communication (IPC) mechanisms. The FTGO application has a REST API\nthat\u2019s used by mobile applications and browser-side JavaSc ript. It also uses various\nThis chapter covers\n\uf0a1 Applying the communication patterns: Remote \nprocedure invocation, Circuit breaker, Client-side \ndiscovery, Self registration, Server-side discovery, \nThird party registration, Asynchronous messaging, \nTransactional outbox, Transaction log tailing, \nPolling publisher\n\uf0a1 The importance of interprocess communication in \na microservice architecture\n\uf0a1 Defining and evolving APIs\n\uf0a1 The various interprocess communication options \nand their trade-offs\n\uf0a1 The benefits of services that communicate using \nasynchronous messaging\n\uf0a1 Reliably sending messages as part of a database \ntransaction", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 908, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1e9a4fbc-de54-493d-a44e-b5e569d4067f": {"__data__": {"id_": "1e9a4fbc-de54-493d-a44e-b5e569d4067f", "embedding": null, "metadata": {"page_label": "66", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52987080-6542-4b57-832c-67cd8b1a590d", "node_type": "4", "metadata": {"page_label": "66", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d5b8e82debc9b85ae61d1cb179f53836031dc33f9242e6582f7dc31f36225fa8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "66 CHAPTER 3 Interprocess communication in a microservice architecture\ncloud services, such as the Twilio messaging  service and the Stripe payment service.\nBut within a monolithic application like FTGO, modules invoke one another via\nlanguage-level method or function calls.  FTGO developers generally don\u2019t need to\nthink about IPC unless they\u2019re working on the REST API or the modules that inte-\ngrate with cloud services.\n In contrast, as you saw in chapter 2, th e microservice architecture structures an\napplication as a set of services. Those servic es must often collaborate in order to han-\ndle a request. Because service instances are typically processes running on multiple\nmachines, they must interact using IPC. It  plays a much more important role in a\nmicroservice architecture than it does in  a monolithic application. Consequently, as\nthey migrate their application to microservices, Mary and the rest of the FTGO devel-\nopers will need to spend a lot more time thinking about IPC.\n There\u2019s no shortage of IPC mechanisms  to chose from. Today, the fashionable\nchoice is REST (with JSON). It\u2019s important, though, to remember that there are no\nsilver bullets. You must carefully consider the options. This chapter explores various\nIPC options, including REST and messaging, and discusses the trade-offs.\n The choice of IPC mechanism is an important architectural decision. It can impact\napplication availability. What\u2019s more, as I explain in this chapter and the next, IPC\neven intersects with transaction manageme nt. I favor an architecture consisting of\nloosely coupled services that communicate with one another using asynchronous mes-\nsaging. Synchronous protocols such as RE ST are used mostly to communicate with\nother applications.\n I begin this chapter with an overview  of interprocess communication in micro-\nservice architecture. Next, I describe remote procedure invocation-based IPC, of which\nREST is the most popular example. I cover important topics including service discov-\nery and how to handle partial failure. Afte r that, I describe asynchronous messaging-\nbased IPC. I also talk about scaling cons umers while preserving message ordering,\ncorrectly handling duplicate messages, and transactional messaging. Finally, I go\nthrough the concept of self-contained services that handle synchronous requests with-\nout communicating with other services in order to improve availability.\n3.1 Overview of interprocess communication in a \nmicroservice architecture\nThere are lots of different IPC technologies to choose from. Services can use\nsynchronous request/response-based commu nication mechanisms, such as HTTP-\nbased REST or gRPC. Alternatively, they  can use asynchronous, message-based com-\nmunication mechanisms such as AMQP or STOMP. There are also a variety of differ-\nent messages formats. Services can use human-readable, text-based formats such as JSON\nor XML. Alternatively, they could use a more  efficient binary format such as Avro or\nProtocol Buffers.\n Before getting into the details of specif ic technologies, I want to bring up several\ndesign issues you should consider. I start th is section with a discussion of interaction", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3176, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe64041f-5a0b-424a-815a-0584726c1e02": {"__data__": {"id_": "fe64041f-5a0b-424a-815a-0584726c1e02", "embedding": null, "metadata": {"page_label": "67", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84700511-722a-4727-927b-1a6b113394e1", "node_type": "4", "metadata": {"page_label": "67", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c02f4314f67b17f7071a661fd944ed87dd50431fc618073c0b4612f66ba4c700", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "67Overview of interprocess communication in a microservice architecture\nstyles, which are a technology-independent way of describing how clients and services\ninteract. Next I discuss the importance of precisely defi ning APIs in a microservice\narchitecture, including the concept of AP I-first design. After that, I discuss the\nimportant topic of API evolution. Finally, I discuss different options for message for-\nmats and how they can determine ease of API evolution. Let\u2019s begin by looking at\ninteraction styles.\n3.1.1 Interaction styles\nIt\u2019s useful to first think about the style of interaction between a service and its clients\nbefore selecting an IPC mechanism for a service\u2019s API. Thinking first about the inter-\naction style will help you focus on the re quirements and avoid getting mired in the\ndetails of a particular IPC technology. Also, as described in section 3.4, the choice of\ninteraction style impacts the availability of your application. Furthermore, as you\u2019ll see\nin chapters 9 and 10, it helps you select the appropriate integration testing strategy.\n There are a variety of client-service intera ction styles. As table 3.1 shows, they can\nbe categorized in two dimensions. The firs t dimension is whether the interaction is\none-to-one or one-to-many:\n\uf0a1 One-to-one\u2014Each client request is processed by exactly one service.\n\uf0a1 One-to-many\u2014Each request is processed by multiple services.\nThe second dimension is whether the interaction is synchronous or asynchronous:\n\uf0a1 Synchronous\u2014The client expects a timely resp onse from the service and might\neven block while it waits.\n\uf0a1 Asynchronous\u2014The client doesn\u2019t block, and th e response, if any, isn\u2019t necessar-\nily sent immediately.\nThe following are the different types of one-to-one interactions:\n\uf0a1 Request/response\u2014A service client makes a request to a service and waits for a\nresponse. The client expects the response to arrive in a timely fashion. It might\nevent block while waiting. This is an in teraction style that generally results in\nservices being tightly coupled.\n\uf0a1 Asynchronous request/response\u2014A service client sends a request to a service, which\nreplies asynchronously. The client doesn\u2019t block while waiting, because the ser-\nvice might not send the response for a long time.\nTable 3.1 The various interaction styles can be characterized in two dimensions: one-to-one vs one-to-\nmany and synchronous vs asynchronous.\none-to-one one-to-many\nSynchronous Request/response \u2014\nAsynchronous Asynchronous request/response\nOne-way notifications\nPublish/subscribe\nPublish/async responses", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2560, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df66d969-93d3-477d-87cd-4f2762cbccda": {"__data__": {"id_": "df66d969-93d3-477d-87cd-4f2762cbccda", "embedding": null, "metadata": {"page_label": "68", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3efbff9e-dfdd-4472-8372-8bf431a48169", "node_type": "4", "metadata": {"page_label": "68", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fd2d820dfa0cad6c8e6b53a2aabda09014172546927139c065e78511ea87e8e9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "68 CHAPTER 3 Interprocess communication in a microservice architecture\n\uf0a1 One-way notifications\u2014A service client sends a request to a service, but no reply\nis expected or sent.\nIt\u2019s important to remember that the synchronous request/response interaction style is\nmostly orthogonal to IPC technologies. A service can, for example, interact with\nanother service using request/response style interaction with either REST or messag-\ning. Even if two services are communicating using a message broker, the client service\nmight be blocked waiting for a response. It  doesn\u2019t necessarily mean they\u2019re loosely\ncoupled. That\u2019s something I revisit later in this chapter when discussing the impact of\ninter-service communication on availability.\n The following are the different types of one-to-many interactions:\n\uf0a1 Publish/subscribe\u2014A client publishes a notificati on message, which is consumed\nby zero or more interested services.\n\uf0a1 Publish/async responses\u2014A client publishes a request message and then waits for\na certain amount of time for responses from interested services.\nEach service will typically use a combination of these interaction styles. Many of the\nservices in the FTGO application have bo th synchronous and asynchronous APIs for\noperations, and many also publish events.\n Let\u2019s look at how to define a service\u2019s API. \n3.1.2 Defining APIs in a microservice architecture\nAPIs or interfaces are central to software development. An application is comprised of\nmodules. Each module has an interface that  defines the set of operations that mod-\nule\u2019s clients can invoke. A well-designed in terface exposes useful functionality while\nhiding the implementation. It enables the implementation to change without impact-\ning clients.\n In a monolithic application, an interf ace is typically specified using a program-\nming language construct such as a Java in terface. A Java interface specifies a set of\nmethods that a client can invoke. The implementation class is hidden from the client.\nMoreover, because Java is a statically type d language, if the interface changes to be\nincompatible with the client, the application won\u2019t compile.\n APIs and interfaces are equally importan t in a microservice architecture. A ser-\nvice\u2019s API is a contract between the service and its clients. As described in chapter 2, a\nservice\u2019s API consists of operations, whic h clients can invoke, and events, which are\npublished by the service. An operation has a name, parameters, and a return type. An\nevent has a type and a set of fields and is, as described in section 3.3, published to a\nmessage channel.\n The challenge is that a service API isn\u2019t defined using a simple programming lan-\nguage construct. By definition, a service and its clients aren\u2019t compiled together. If a\nnew version of a service is deployed with an incompatible API, there\u2019s no compilation\nerror. Instead, there will be runtime failures.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2894, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7ecd1f4-01e2-44ab-b230-4070899c5c0c": {"__data__": {"id_": "e7ecd1f4-01e2-44ab-b230-4070899c5c0c", "embedding": null, "metadata": {"page_label": "69", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b542e02d-8146-4b62-9327-8bc2f7c4587c", "node_type": "4", "metadata": {"page_label": "69", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9dfe607dd2c62ba199f6102bf5c648751a8deee53f1707d340bcc4e12d0f8f11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "69Overview of interprocess communication in a microservice architecture\n Regardless of which IPC mechanism you choose, it\u2019s important to precisely define\na service\u2019s API using some kind of interface definition language (IDL). Moreover, there\nare good arguments for using an API-firs t approach to defining services (see www\n.programmableweb.com/news/how-to-design-great-apis-api-first-design-and-raml/how-to/\n2015/07/10 for more). First you write the interf ace definition. Then you review the\ninterface definition with the client develope rs. Only after iterating on the API defini-\ntion do you then implement the service. Doing this up-front design increases your\nchances of building a service that meets the needs of its clients.\nThe nature of the API definition depends on which IPC mechanism you\u2019re using. For\nexample, if you\u2019re using messaging, the API consists of the message channels, the mes-\nsage types, and the message formats. If yo u\u2019re using HTTP, the API consists of the\nURLs, the HTTP verbs, and the request and response formats. Later in this chapter,\nI explain how to define APIs.\n A service\u2019s API is rarely set in stone. It will likely evolve over time. Let\u2019s take a look\nat how to do that and consider the issues you\u2019ll face. \n3.1.3 Evolving APIs\nAPIs invariably change over time as new fe atures are added, existing features are\nchanged, and (perhaps) old features are removed. In a monolithic application, it\u2019s rel-\natively straightforward to change an API and update all the callers. If you\u2019re using a\nstatically typed language, the compiler helps by giving a list of compilation errors. The\nonly challenge may be the scope of the change. It might take a long time to change a\nwidely used API.\n In a microservices-based application, chan ging a service\u2019s API is a lot more diffi-\ncult. A service\u2019s clients are other services, which are often developed by other teams.\nThe clients may even be other applications  outside of the organization. You usually\ncan\u2019t force all clients to upgrade in lockst ep with the service. Also, because modern\napplications are usually never down for maintenance, you\u2019ll typically perform a rolling\nu p g r a d e  o f  y o u r  s e r v i c e ,  s o  b o t h  o l d  a n d  n e w  v e r s i o n s  o f  a  s e r v i c e  w i l l  b e  r u n n i n g\nsimultaneously.\n It\u2019s important to have a strategy for dealing with these challenges. How you handle\na change to an API depends on the nature of the change.\nAPI-first design is essential\nEven in small projects, I\u2019ve seen problems occur because components don\u2019t agree\non an API. For example, on one project the backend Java developer and the AngularJS\nfrontend developer both said they had completed development. The application, how-\never, didn\u2019t work. The REST and WebSocket API used by the frontend application to\ncommunicate with the backend was poorly defined. As a result, the two applications\ncouldn\u2019t communicate!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2920, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "62933227-5f2f-42a5-b005-3b8fc79c7863": {"__data__": {"id_": "62933227-5f2f-42a5-b005-3b8fc79c7863", "embedding": null, "metadata": {"page_label": "70", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be535713-c8ef-4280-9c78-d2e2e720ff19", "node_type": "4", "metadata": {"page_label": "70", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "77c5870598a19d50988e180f8b0d77972362615023bb8230283e0cf6a4a412b0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "70 CHAPTER 3 Interprocess communication in a microservice architecture\nUSE SEMANTIC VERSIONING\nThe Semantic Versioning specification ( http://semver.org) is a useful guide to ver-\nsioning APIs. It\u2019s a set of rules that spec ify how version numbers are used and incre-\nmented. Semantic versioning was originally  intended to be used for versioning of\nsoftware packages, but you can use it for versioning APIs in a distributed system.\n The Semantic Versioning specification (Semvers) requires a version number to\nconsist of three parts: MAJOR.MINOR.PATCH. You must increment each part of a version\nnumber as follows:\n\uf0a1 MAJOR\u2014When you make an incompatible change to the API\n\uf0a1 MINOR\u2014When you make backward-compatible enhancements to the API\n\uf0a1 PATCH\u2014When you make a backward-compatible bug fix\nThere are a couple of places you can use the version number in an API. If you\u2019re\nimplementing a REST API, you can, as mentioned below, use the major version as\nthe first element of the URL path. Alternat ively, if you\u2019re implementing a service\nthat uses messaging, you can include the version number in the messages that it\npublishes. The goal is to properly versio n APIs and to evolve them in a controlled\nfashion. Let\u2019s look at how to handle minor and major changes. \nMAKING MINOR, BACKWARD-COMPATIBLE CHANGES\nIdeally, you should strive to only make  backward-compatible changes. Backward-\ncompatible changes are additive changes to an API:\n\uf0a1 Adding optional attributes to request\n\uf0a1 Adding attributes to a response\n\uf0a1 Adding new operations\nIf you only ever make these kinds of changes, older clients will work with newer services,\nprovided that they observe the Robustness principle ( https://en.wikipedia.org/wiki/\nRobustness_principle), which states: \u201cBe conservative in what you do, be liberal in\nwhat you accept from others.\u201d Services should provide default values for missing\nrequest attributes. Similarly, clients should  ignore any extra response attributes. In\norder for this to be painless, clients and se rvices must use a request and response for-\nmat that supports the Robustness principle. La ter in this section, I describe how text-\nbased formats such as JSON and XML generally make it easier to evolve APIs. \nMAKING MAJOR, BREAKING CHANGES\nSometimes you must make major, incompatible changes to an API. Because you can\u2019t\nforce clients to upgrade immediately, a se rvice must simultaneously support old and\nnew versions of an API for some period of time. If you\u2019re using an HTTP-based IPC\nmechanism, such as REST, one approach is to embed the major version number in the\nURL. For example, version 1 paths are prefixed with '/v1/\u2026', and version 2 paths\nwith '/v2/\u2026'.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2671, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fdd24628-a5f4-43f2-a81f-d538e5e81d55": {"__data__": {"id_": "fdd24628-a5f4-43f2-a81f-d538e5e81d55", "embedding": null, "metadata": {"page_label": "71", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "47845812-fbc3-4a8b-a094-2f07bf4b7f6f", "node_type": "4", "metadata": {"page_label": "71", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "46bf470d5005b95c06b307c60e89d3255aea4882eea735a654967d1e1875cc89", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "71Overview of interprocess communication in a microservice architecture\n Another option is to use HTTP\u2019s content negotiation mechanism and include the\nversion number in the MIME type. For example, a client would request version 1.x of\nan Order using a request like this:\nGET /orders/xyz HTTP/1.1\nAccept: application/vnd.example.resource+json; version=1\n...\nThis request tells the Order Service that the client expects a version 1.x response.\n In order to support multiple versions of an API, the service\u2019s adapters that imple-\nment the APIs will contain logic that tran slates between the old and new versions.\nAlso, as described in chapter 8, the API gateway will almost certainly use versioned\nAPIs. It may even have to support numerous older versions of an API.\n Now we\u2019ll look at the issue of message formats, the choice of which can impact how\neasy evolving an API will be. \n3.1.4 Message formats\nThe essence of IPC is the exchange of messages. Messages usually contain data, and so\nan important design decision is the format of that data. The choice of message format\ncan impact the efficiency of IPC, the usability of the API, and its evolvability. If you\u2019re\nusing a messaging system or protocols such as HTTP, you get to pick your message for-\nmat. Some IPC mechanisms\u2014such as gRPC, which you\u2019ll learn about shortly\u2014might\ndictate the message format. In either case, it\u2019s essential to use a cross-language mes-\nsage format. Even if you\u2019re writing your microservices in a single language today, it\u2019s\nlikely that you\u2019ll use other languages in th e future. You shouldn\u2019t, for example, use\nJava serialization.\n There are two main categories of message formats: text and binary. Let\u2019s look at\neach one.\nTEXT-BASED MESSAGE FORMATS\nThe first category is text-based formats such as JSON and XML. An advantage of these\nformats is that not only are they human readable, they\u2019re self describing. A JSON mes-\nsage is a collection of named properties. Similarly, an XML message is effectively a col-\nlection of named elements and values. This  format enables a consumer of a message\nto pick out the values of interest and ig nore the rest. Consequently, many changes to\nthe message schema can easily be backward-compatible.\n The structure of XML documents is  specified by an XML schema ( www.w3.org/\nXML/Schema). Over time, the developer community has come to realize that JSON also\nneeds a similar mechanism. One popular option is to use the JSON Schema standard\n(http://json-schema.org). A JSON schema defines the names and types of a message\u2019s\nproperties and whether they\u2019re optional or required. As well as being useful documenta-\ntion, a JSON schema can be used by an application to validate incoming messages.\n A downside of using a text-based messages format is that the messages tend to be\nverbose, especially XML. Every message has the overhead of containing the names of", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "800a98b7-461b-4f55-8eeb-c03e00b6a580": {"__data__": {"id_": "800a98b7-461b-4f55-8eeb-c03e00b6a580", "embedding": null, "metadata": {"page_label": "72", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "779ed14c-2443-4a40-be6b-a9730723f25a", "node_type": "4", "metadata": {"page_label": "72", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "28acf2e4416b3bbf5c811936e218117f821f3fe23faff815c4de76c59b2d8537", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "72 CHAPTER 3 Interprocess communication in a microservice architecture\nthe attributes in addition to their values. Another drawback is the overhead of parsing\ntext, especially when messages are large. Consequently, if efficiency and performance\nare important, you may want to consider using a binary format. \nBINARY MESSAGE FORMATS\nThere are several different binary formats to choose from. Popular formats include\nProtocol Buffers ( https://developers.google.com/protocol-buffers/docs/overview)\nand Avro ( https://avro.apache.org). Both formats provide a typed IDL for defining\nthe structure of your messages. A compiler then generates the code that serializes and\ndeserializes the messages. You\u2019re forced to  take an API-first approach to service\ndesign! Moreover, if you write your client in a statically typed language, the compiler\nchecks that it uses the API correctly.\n One difference between these two binary  formats is that Protocol Buffers uses\ntagged fields, whereas an Avro consumer needs to know the schema in order to inter-\npret messages. As a result, handling API evolution is easier with Protocol Buffers\nthan with Avro. This blog post (http://martin.kleppmann.com/2012/12/05/schema-\nevolution-in-avro-protocol-buffers-thrift.html) is an excellent comparison of Thrift,\nProtocol Buffers, and Avro.\n Now that we\u2019ve looked at message formats, let\u2019s look at specific IPC mechanisms\nthat transport the messages, starting with  the Remote procedure invocation (RPI)\npattern. \n3.2 Communicating using the synchronous Remote \nprocedure invocation pattern\nWhen using a remote procedure invocation -based IPC mechanism, a client sends a\nrequest to a service, and the service proces ses the request and sends back a response.\nSome clients may block waiting for a response, and others might have a reactive, non-\nblocking architecture. But unlike when us ing messaging, the client assumes that the\nresponse will arrive in a timely fashion.\n Figure 3.1 shows how RPI works. The business logic in the client invokes a proxy\ninterface , implemented by an RPI proxy adapter class. The RPI proxy makes a request to\nthe service. The request is handled by an RPI server adapter class, which invokes the\nservice\u2019s business logic via an interfac e. It then sends back a reply to the RPI proxy,\nwhich returns the result to the client\u2019s business logic.\nThe proxy interface  usually encapsulates the underlying communication protocol.\nThere are numerous protocols to choose from . In this section, I describe REST and\nPattern: Remote procedure invocation\nA client invokes a service using a sy nchronous, remote procedure invocation-based\nprotocol, such as REST ( http://microservices.io/patterns/communication-style/\nmessaging.html).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2728, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c973c2fa-42fc-4ac2-82ba-6b8ff03bdda7": {"__data__": {"id_": "c973c2fa-42fc-4ac2-82ba-6b8ff03bdda7", "embedding": null, "metadata": {"page_label": "73", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7e0fce0-de95-4f3e-b816-d23bab1672ed", "node_type": "4", "metadata": {"page_label": "73", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f190f4e59780b14cab8659d9fe9fdebb1e9e31f8611863e1260a3f519432316b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "73Communicating using the synchronous Remote procedure invocation pattern\ngRPC. I cover how to improve the availabilit y of your services by properly handling\npartial failure and explain why a microservi ces-based application that uses RPI must\nuse a service discovery mechanism.\n Let\u2019s first take a look at REST.\n3.2.1 Using REST\nToday, it\u2019s fashionable to develop APIs in the RESTful style ( https://en.wikipedia\n.org/wiki/Representational_state_transfer). REST is an IPC mechanism that (almost\nalways) uses HTTP. Roy Fielding, the creator of REST, defines REST as follows:\nREST provides a set of architectural constraints that, when applied as a whole, emphasizes\nscalability of component interactions, generality of interfaces, independent deployment of\ncomponents, and intermediary components to reduce interaction latency, enforce security,\nand encapsulate legacy systems.\nwww.ics.uci.edu/~fielding/pubs/dissertation/top.htm\nA key concept in REST is a resource, which typically represents a single business\nobject, such as a Customer or Product, or a collection of business objects. REST\nuses the HTTP verbs for manipulating re sources, which are referenced using a\nURL. For example, a GET request returns th e representation of a resource, which is\noften in the form of an XML document or JSON object, although other formats\nsuch as binary can be used. A POST re quest creates a new resource, and a PUT\nrequest updates a resource. The Order Service, for example, has a POST /orders\nendpoint for creating an Order and a GET /orders/{orderId}  endpoint for retriev-\ning an Order.\nBusiness logic\ninvokes\nBusiness logic\nProxy interface Service interface\nClient Service\nRPI\nproxy\nRequest\nReply\nRPI\nserver\nFigure 3.1 The client\u2019s business logic invokes an interface that is implemented by an RPI proxy \nadapter class. The RPI proxy class makes a request to the service. The RPI server adapter class \nhandles the request by invoking the service\u2019s business logic.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1962, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eb82397d-301d-4e9b-ad27-f7284aa18a21": {"__data__": {"id_": "eb82397d-301d-4e9b-ad27-f7284aa18a21", "embedding": null, "metadata": {"page_label": "74", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "128deab1-0a77-463b-b0cb-3f18bdad8eb6", "node_type": "4", "metadata": {"page_label": "74", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "dbdc0a77f944bb2da58dc168d5316e35ce4cf04b33cd46864a407ade2d17cff0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "74 CHAPTER 3 Interprocess communication in a microservice architecture\n Many developers claim their HTTP-based  APIs are RESTful. But as Roy Fielding\ndescribes in a blog post, not all of them actually are (http://roy.gbiv.com/untangled/\n2008/rest-apis-must-be-hypertext-driven ). To understand why, let\u2019s take a look at the\nREST maturity model.\nTHE REST MATURITY MODEL\nLeonard Richardson (no relation to your author) defines a very useful maturity model\nfor REST (http://martinfowler.com/articles/richardsonMaturityModel.html) that con-\nsists of the following levels:\n\uf0a1 Level 0 \u2014Clients of a level 0 service invoke  the service by making HTTP POST\nrequests to its sole URL endpoint. Each request specifies the action to perform,\nthe target of the action (for example, the business object), and any parameters.\n\uf0a1 Level 1\u2014A level 1 service supports the idea of resources. To perform an action\non a resource, a client makes a POST request that specifies the action to per-\nform and any parameters.\n\uf0a1 Level 2\u2014A level 2 service uses HTTP verbs to  perform actions: GET to retrieve,\nPOST to create, and PUT to update. The request query parameters and body, if\nany, specify the actions' parameters. This enables services to use web infrastruc-\nture such as caching for GET requests.\n\uf0a1 Level 3 \u2014The design of a level 3 service is based on the terribly named\nHATEOAS (Hypertext As The Engine Of  Application State) principle. The\nbasic idea is that the representation of a resource returned by a GET request\ncontains links for performing actions on that resource. For example, a client\ncan cancel an order using a link in th e representation returned by the GET\nrequest that retrieved the order. The benefits of HATEOAS include no longer\nhaving to hard-wire URLs into client code ( www.infoq.com/news/2009/04/\nhateoas-restful-api-advantages).\nI encourage you to review the REST APIs at your organization to see which level they\ncorrespond to. \nSPECIFYING REST APIS\nAs mentioned earlier in section 3.1, you must define your APIs using an interface defi-\nnition language (IDL). Unlike older communication protocols like CORBA and\nSOAP, REST did not originally have an ID L. Fortunately, the developer community\nhas rediscovered the value of an IDL for RESTful APIs. The most popular REST IDL is\nthe Open API Specification ( www.openapis.org), which evolved from the Swagger\nopen source project. The Sw agger project is a set of tools for developing and docu-\nmenting REST APIs. It includes tools that generate client stubs and server skeletons\nfrom an interface definition. \nTHE CHALLENGE OF FETCHING MULTIPLE RESOURCES IN A SINGLE REQUEST\nREST resources are usually oriented around business objects, such as Consumer and\nOrder. Consequently, a common problem wh en designing a REST API is how to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2785, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "85037c67-6f40-4686-9336-a7c88863eaa4": {"__data__": {"id_": "85037c67-6f40-4686-9336-a7c88863eaa4", "embedding": null, "metadata": {"page_label": "75", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50e508f1-0fca-476d-9c93-4fed86689305", "node_type": "4", "metadata": {"page_label": "75", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "afb42520ea75cbb54c4727190d11596354e14c67a9294ec7bf8c94324491b3c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "75Communicating using the synchronous Remote procedure invocation pattern\nenable the client to retrieve multiple related objects in a single request. For example,\nimagine that a REST client wanted to retrieve an Order and the Order's Consumer. A\npure REST API would require the client to make at least two requests, one for the\nOrder and another for its Consumer. A more complex scenario would require even\nmore round-trips and suffer from excessive latency.\n One solution to this problem is for an AP I to allow the client to retrieve related\nresources when it gets a resource. For example, a client could retrieve an Order and its\nConsumer using GET /orders/order-id-1345?expand=consumer. The query parame-\nter specifies the related resources to return with the Order. This approach works well\nin many scenarios but it\u2019s often insufficie nt for more complex scenarios. It\u2019s also\npotentially time consuming to implement. This has led to the increasing popularity of\nalternative API technologies such as GraphQL (http://graphql.org) and Netflix Falcor\n(http://netflix.github.io/falcor/), which are designed to support efficient data fetching. \nTHE CHALLENGE OF MAPPING OPERATIONS TO HTTP VERBS\nAnother common REST API design problem is how to map the operations you want\nto perform on a business object to an H TTP verb. A REST API should use PUT for\nupdates, but there may be multiple ways to update an order, including cancelling it,\nrevising the order, and so on. Also, an up date might not be idempotent, which is a\nrequirement for using PUT. One solution is  to define a sub-resource for updating a\nparticular aspect of a resource. The Order Service, for example, has a POST /orders/\n{orderId}/cancel endpoint for cancelling orders, and a POST /orders/{orderId}/\nrevise endpoint for revising orders. Another so lution is to specify a verb as a URL\nquery parameter. Sadly, neither solution is particularly RESTful.\n This problem with mapping operations to HTTP verbs has led to the growing pop-\nularity of alternatives to REST, such as gP RC, discussed shortly in section 3.2.2. But\nfirst let\u2019s look at the benefits and drawbacks of REST. \nBENEFITS AND DRAWBACKS OF REST\nThere are numerous benefits to using REST:\n\uf0a1 It\u2019s simple and familiar.\n\uf0a1 You can test an HTTP API from within a browser using, for example, the Post-\nman plugin, or from the command line  using curl (assuming JSON or some\nother text format is used).\n\uf0a1 It directly supports request/response style communication.\n\uf0a1 HTTP is, of course, firewall friendly.\n\uf0a1 It doesn\u2019t require an intermediate broker, which simplifies the system\u2019s archi-\ntecture.\nThere are some drawbacks to using REST:\n\uf0a1 It only supports the request/response style of communication.\n\uf0a1 Reduced availability. Because the client and service communicate directly with-\nout an intermediary to buffer messages,  they must both be running for the\nduration of the exchange.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2904, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "560b4764-d8b6-4f6c-86d3-9212dc0b9d8f": {"__data__": {"id_": "560b4764-d8b6-4f6c-86d3-9212dc0b9d8f", "embedding": null, "metadata": {"page_label": "76", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac9fb681-468f-4b2c-8154-8a733f3f561f", "node_type": "4", "metadata": {"page_label": "76", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cafe890897fbb52ad352503658691781b71ada27150104161605e93ccbb21182", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "76 CHAPTER 3 Interprocess communication in a microservice architecture\n\uf0a1 Clients must know the locations (URLs) of the service instances(s). As described\nin section 3.2.4, this is a nontrivial problem in a modern application. Clients must\nuse what is known as a service discovery mechanism to locate service instances.\n\uf0a1 Fetching multiple resources in a single request is challenging.\n\uf0a1 It\u2019s sometimes difficult to map multiple update operations to HTTP verbs.\nDespite these drawbacks, REST seems to be  the de facto standard for APIs, though\nthere are a couple of interesting altern atives. GraphQL, for example, implements\nflexible, efficient data fetching. Chapte r 8 discusses GraphQL and covers the API\ngateway pattern.\n gRPC is another alternative to REST. Let\u2019s take a look at how it works. \n3.2.2 Using gRPC\nAs mentioned in the preceding section, one challenge with using REST is that\nbecause HTTP only provides a limited number of verbs, it\u2019s not always straightforward\nto design a REST API that supports multiple update operations. An IPC technology\nthat avoids this issue is gRPC (www.grpc.io), a framework for writing cross-language\nclients and servers (see https://en.wikipedia.org/wiki/Remote_procedure_call for\nmore). gRPC is a binary message-based protocol, and this means\u2014as mentioned ear-\nlier in the discussion of binary message fo rmats\u2014you\u2019re forced to take an API-first\napproach to service design. You define your gRPC APIs using a Protocol Buffers-based\nIDL, which is Google\u2019s language-neutral mechanism for serializing structured data.\nYou use the Protocol Buffer compiler to generate client-side stubs and server-side skel-\netons. The compiler can generate code for a variety of languages, including Java, C#,\nNodeJS, and GoLang. Clients and servers exchange binary messages in the Protocol\nBuffers format using HTTP/2.\n A gRPC API consists of one or more services and request/response message defini-\ntions. A service definition is analogous to a Java interface and is a collection of strongly\ntyped methods. As well as supporting simp le request/response RPC, gRPC support\nstreaming RPC. A server can reply with a stream of messages to the client. Alterna-\ntively, a client can send a stream of messages to the server.\n gRPC uses Protocol Buffers as the messa ge format. Protocol Buffers is, as men-\ntioned earlier, an efficient, compact, binary format. It\u2019s a tagged format. Each field of\na Protocol Buffers message is numbered and has a type code. A message recipient can\nextract the fields that it needs and skip over  the fields that it doesn\u2019t recognize. As a\nresult, gRPC enables APIs to evolve while remaining backward-compatible.\n Listing 3.1 shows an excerpt of the gRPC API for the Order Service. It defines sev-\neral methods, including createOrder(). This method takes a CreateOrderRequest as\na parameter and returns a CreateOrderReply.\nservice OrderService {\nrpc createOrder(CreateOrderRequest) returns (CreateOrderReply) {}\nListing 3.1 An excerpt of the gRPC API for the Order Service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3024, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8c6e8b8-f2d3-4740-85fb-01741eed1aad": {"__data__": {"id_": "d8c6e8b8-f2d3-4740-85fb-01741eed1aad", "embedding": null, "metadata": {"page_label": "77", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cff133aa-3843-4699-a15e-ecb2ebc1eea7", "node_type": "4", "metadata": {"page_label": "77", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4993794b84a1f0bd8e93abe9d5f9e25dbf23ff39bb59a4c5a13d969a67e2a462", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "77Communicating using the synchronous Remote procedure invocation pattern\nrpc cancelOrder(CancelOrderRequest) returns (CancelOrderReply) {}\nrpc reviseOrder(ReviseOrderRequest) returns (ReviseOrderReply) {}\n...\n}\nmessage CreateOrderRequest {\nint64 restaurantId = 1;\nint64 consumerId = 2;\nrepeated LineItem lineItems = 3;\n...\n}\nmessage LineItem {\nstring menuItemId = 1;\nint32 quantity = 2;\n}\nmessage CreateOrderReply {\nint64 orderId = 1;\n}\n...\nCreateOrderRequest and CreateOrderReply are typed messages. For example, Create-\nOrderRequest message has a restaurantId field of type int64. The field\u2019s tag value is 1.\n gRPC has several benefits:\n\uf0a1 It\u2019s straightforward to design an API that has a rich set of update operations.\n\uf0a1 It has an efficient, compact IPC mechan ism, especially when exchanging large\nmessages.\n\uf0a1 Bidirectional streaming enables both RPI and messaging styles of communication.\n\uf0a1 It enables interoperability between clients and services written in a wide range\nof languages.\ngRPC also has several drawbacks:\n\uf0a1 It takes more work for JavaScript c lients to consume gRPC-based API than\nREST/JSON-based APIs.\n\uf0a1 Older firewalls might not support HTTP/2.\ngRPC is a compelling alternative to REST, but like REST, it\u2019s a synchronous communi-\ncation mechanism, so it also suffers from the problem of partial failure. Let\u2019s take a\nlook at what that is and how to handle it. \n3.2.3 Handling partial failure using the Circuit breaker pattern\nIn a distributed system, whenever a servic e makes a synchronous request to another\nservice, there is an ever-present risk of partial failure. Because the client and the ser-\nvice are separate processes, a service may no t be able to respond in a timely way to a\nclient\u2019s request. The service could be down because of a failure or for maintenance.\nOr the service might be overloaded and re sponding extremely slowly to requests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bae1cf84-6e2a-4efa-8511-bf7af2d2142b": {"__data__": {"id_": "bae1cf84-6e2a-4efa-8511-bf7af2d2142b", "embedding": null, "metadata": {"page_label": "78", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b019fa7b-d2c4-48cc-882f-6b539445bd02", "node_type": "4", "metadata": {"page_label": "78", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f204de4b077674e81976fe00b7378f7657262fce76fcd693283dad3df770996c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "78 CHAPTER 3 Interprocess communication in a microservice architecture\nBecause the client is blocked waiting for a response, the danger is that the failure\ncould cascade to the client\u2019s clients and so on and cause an outage.\nConsider, for example, the scenario  shown in figure 3.2, where the Order Service is\nunresponsive. A mobile client makes a REST request to an API gateway, which, as dis-\ncussed in chapter 8, is the entry point into  the application for API clients. The API\ngateway proxies the request to the unresponsive Order Service.\nA naive implementation of the OrderServiceProxy would block indefinitely, waiting\nfor a response. Not only would that result in a poor user experience, but in many\napplications it would consume a precious resource, such as a thread. Eventually the\nAPI gateway would run out of resources and become unable to handle requests. The\nentire API would be unavailable.\n It\u2019s essential that you design your services to prevent partial failures from cascading\nthroughout the application. There are two parts to the solution:\n\uf0a1 You must use design RPI proxies, such as OrderServiceProxy, to handle unre-\nsponsive remote services.\n\uf0a1 You need to decide how to recover from a failed remote service.\nFirst we\u2019ll look at how to write robust RPI proxies.\nPattern: Circuit breaker\nAn RPI proxy that immediately rejects invocations for a timeout period after the num-\nber of consecutive failures exceeds a specified threshold. See http://microservices\n.io/patterns/reliability/circuit-breaker.html.\nAPI\ngateway\nUnresponsive remote service\nMobile\napp\nOrder\nService\nOrder\nService\nproxy\nCreate\norder\nendpoint\nPOST/orders POST/orders\nFigure 3.2 An API gateway must protect itself  from unresponsive services, such as the Order \nService.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1759, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "280ec291-c365-4724-9c5e-04b4531f29da": {"__data__": {"id_": "280ec291-c365-4724-9c5e-04b4531f29da", "embedding": null, "metadata": {"page_label": "79", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ee74cc8-21be-44b7-965b-14e4cf953b43", "node_type": "4", "metadata": {"page_label": "79", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6132914a6120a7b2ece82d025ac91946bf6b28778dd43b9f16749059ef879e6a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "79Communicating using the synchronous Remote procedure invocation pattern\nDEVELOPING ROBUST RPI PROXIES\nWhenever one service synchronously invokes another service, it should protect itself\nusing the approach described by Netflix ( http://techblog.netflix.com/2012/02/fault-\ntolerance-in-high-volume.html). This approach consists of a combination of the fol-\nlowing mechanisms:\n\uf0a1 Network timeouts \u2014Never block indefinitely and always use timeouts when wait-\ning for a response. Using timeouts ensures that resources are never tied up\nindefinitely.\n\uf0a1 Limiting the number of outstanding requests from a client to a service\u2014Impose an upper\nbound on the number of outstanding requ ests that a client can make to a par-\nticular service. If the limit has been re ached, it\u2019s probably pointless to make\nadditional requests, and those attempts should fail immediately.\n\uf0a1 Circuit breaker pattern \u2014Track the number of successful and failed requests,\nand if the error rate exceeds some thre shold, trip the circuit breaker so that\nfurther attempts fail immediately. A la rge number of requests failing suggests\nthat the service is unavailable and that  sending more requests is pointless.\nAfter a timeout period, the c lient should try again, and, if successful, close the\ncircuit breaker.\nNetflix Hystrix ( https://github.com/Netflix/Hystrix) is an open source library that\nimplements these and other patterns. If yo u\u2019re using the JVM, you should definitely\nconsider using Hystrix when implementing RPI proxies. And if you\u2019re running in a\nnon-JVM environment, you should use an eq uivalent library. For example, the Polly\nlibrary is popular in the .NET community (https://github.com/App-vNext/Polly). \nRECOVERING FROM AN UNAVAILABLE SERVICE\nUsing a library such as Hystrix is only part of the solution. You must also decide on a\ncase-by-case basis how your services should  recover from an unresponsive remote ser-\nvice. One option is for a service to simply return an error to its client. For example,\nthis approach makes sense for the scenario shown in figu re 3.2, where the request to\ncreate an Order fails. The only option is for the API gateway to return an error to the\nmobile client.\n In other scenarios, returning a fallback va lue, such as either a default value or a\ncached response, may make sense. For example, chapter 7 describes how the API gate-\nway could implement the findOrder() query operation by using the API composition\npattern. As figure 3.3 shows, its implementation of the GET /orders/{orderId} end-\npoint invokes several services, including the Order Service, Kitchen Service, and\nDelivery Service, and combines the results.\n It\u2019s likely that each service\u2019s data isn\u2019t equally important to the client. The data\nfrom the Order Service is essential. If this service is unavailable, the API gateway\nshould return either a cached version of its data or an error. The data from the other\nservices is less critical. A client can, for example, display useful information to the user\neven if the delivery status was unavailable. If the Delivery Service is unavailable,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3077, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fec30406-5e7b-4f7c-a588-246f0e04ca0e": {"__data__": {"id_": "fec30406-5e7b-4f7c-a588-246f0e04ca0e", "embedding": null, "metadata": {"page_label": "80", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7721b23-53c4-4b7f-8e5e-4278ee03a5f0", "node_type": "4", "metadata": {"page_label": "80", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e822c7aefad9944f775a159077cd798e4520b5086ffc2a01b6f6fdf1ff75939d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "80 CHAPTER 3 Interprocess communication in a microservice architecture\nthe API gateway should return either a cached  version of its data or omit it from the\nresponse.\n It\u2019s essential that you design your servic es to handle partial failure, but that\u2019s not\nthe only problem you need to solve when using RPI. Another problem is that in order\nfor one service to invoke another service using RPI, it needs to know the network\nlocation of a service instance. On the surface this sounds simple, but in practice it\u2019s\na challenging problem. You must use a serv ice discovery mechanism. Let\u2019s look at\nhow that works. \n3.2.4 Using service discovery\nSay you\u2019re writing some code that invokes a service that has a REST API. In order to\nmake a request, your code needs to know the network location (IP address and port)\nof a service instance. In a traditional appl ication running on physical hardware, the\nnetwork locations of service instances are usually static. For example, your code could\nread the network locations from a configurat ion file that\u2019s occasionally updated. But\nin a modern, cloud-based microservices applic ation, it\u2019s usually not that simple. As is\nshown in figure 3.4, a modern application is much more dynamic.\n Service instances have dynamically assigned network locations. Moreover, the set of\nservice instances changes dynamically because of autoscaling, failures, and upgrades.\nConsequently, your client code must use a service discovery.\nAPI\ngateway\nHow to handle each\nunresponsive service?\nUnresponsive\nservice\nMobile\napp\nGet\norder\nendpoint\nGet/orders/xyz\nOrder\nService\nOrder\nService\nproxy\nGET/orders/xyz\nKitchen\nService\nKitchen\nService\nproxy\nGET/tickets?orderId=xyz\nDelivery\nService\nDelivery\nService\nproxy\nGET/deliveries?orderId-xyz\n...\nService\n...\nService\nproxy\nFigure 3.3 The API gateway implements the GET /orders/{orderId} endpoint using API \ncomposition. It calls several services, aggregates their responses, and sends a response to the \nmobile app. The code that implements the endpoint must have a strategy for handling the failure \nof each service that it calls.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2090, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1236d172-41e1-4f41-be81-fd671286ee8f": {"__data__": {"id_": "1236d172-41e1-4f41-be81-fd671286ee8f", "embedding": null, "metadata": {"page_label": "81", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a242dd55-d696-485f-83df-fc3e614083e8", "node_type": "4", "metadata": {"page_label": "81", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "374c3ed92df034989fdfa23b62f7556155fe07a203852ed7adb292d321c3cab7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "81Communicating using the synchronous Remote procedure invocation pattern\nOVERVIEW OF SERVICE DISCOVERY\nAs you\u2019ve just seen, you can\u2019t statically configure a client with the IP addresses of the\nservices. Instead, an application must use a dynamic service discovery mechanism. Ser-\nvice discovery is conceptually quite simple : its key component is a service registry,\nwhich is a database of the network locations of an application\u2019s service instances.\n The service discovery mechanism updates the service registry when service instances\nstart and stop. When a client invokes a se rvice, the service discovery mechanism que-\nries the service registry to obtain a list of  available service instances and routes the\nrequest to one of them.\n There are two main ways to implement service discovery:\n\uf0a1 The services and their clients interact directly with the service registry.\n\uf0a1 The deployment infrastructure handles service discovery. (I talk more about\nthat in chapter 12.)\nLet\u2019s look at each option. \nAPPLYING THE APPLICATION-LEVEL SERVICE DISCOVERY PATTERNS\nOne way to implement service discovery is fo r the application\u2019s services and their cli-\nents to interact with the service registry. Figure 3.5 shows how this works. A service\ninstance registers its network location with the service registry. A service client invokes\na service by first querying the service registry  to obtain a list of service instances. It\nthen sends a request to one of those instances.\nService\ninstance 1\nOrder service\n10.232.23.1\n10.232.23.2\n10.232.23.3\nService\ninstance 2\nService\nclient\nService\ninstance 3\n?\nDynamically\nassigned IP\nDynamically created\nand destroyed\nFigure 3.4 Service instances have dynamically assigned IP addresses.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1716, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "252b2cdd-e35d-40eb-af23-34921acc85ce": {"__data__": {"id_": "252b2cdd-e35d-40eb-af23-34921acc85ce", "embedding": null, "metadata": {"page_label": "82", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f54d7ba3-f556-46ff-a3ab-cd5f619f1b1b", "node_type": "4", "metadata": {"page_label": "82", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0949b41d3ea5754e7ae10d74b528e4ea25de9f1bb4b7f42c47306ae356d373d7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "82 CHAPTER 3 Interprocess communication in a microservice architecture\nThis approach to service discovery is a combination of two patterns. The first pat-\ntern is the Self registration pattern. A service instance invokes the service registry\u2019s\nregistration API to register its network lo cation. It may also supply a health check\nURL, described in more detail in chapter 11. The health check  URL is an API end-\npoint that the service registry invokes periodically to verify that the service instance\nis healthy and available to handle requests . A service registry may require a service\ninstance to periodically invoke a \u201cheartbe at\u201d API in order to prevent its registration\nfrom expiring.\nThe second pattern is the Client-side discovery pattern. When a service client wants to\ninvoke a service, it queries the service registry to obtain a list of the service\u2019s instances.\nTo improve performance, a client might cache the service instances. The service client\nPattern: Self registration\nA service instance registers itself with the service registry. See http://microser-\nvices.io/patterns/self-registration.html.\nService\ninstance 1\nOrder service\n10.232.23.1\nLoad balance request\n10.232.23.1\n10.232.23.2\n10.232.23.3\n10.232.23.2\nRegister(\"order-service\", \"10.232.23.1\")\nQuery(\"order-service\")\nQuery API Registration API\n10.232.23.3\nService\ninstance 2\nService\ninstance 3\nService\ndiscovery library\nService\nclient\nService\norder-service\norder-service\norder-service\n...\nService registry\nIP address\n10.232.23.1\n10.232.23.2\n10.232.23.3\n...\nRPC/rest\nclient Service\ndiscovery libraryService\ndiscovery library\nService\ndiscovery library\nClient-side discovery\nSelf registration pattern\nFigure 3.5 The service registry keeps track of the service instances. Clients query the service \nregistry to find network locations of available service instances.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1836, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c59d01fd-7fa0-43b1-a45b-1a527e9474c3": {"__data__": {"id_": "c59d01fd-7fa0-43b1-a45b-1a527e9474c3", "embedding": null, "metadata": {"page_label": "83", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8fde44c6-d210-4a83-9a32-0467516aed7e", "node_type": "4", "metadata": {"page_label": "83", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "586be1005f2fea9f0f4bb41b583ab90649ce497461cceb9a9b6a2001a58d9c81", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "83Communicating using the synchronous Remote procedure invocation pattern\nthen uses a load-balancing algorithm, such as a round-robin or random, to select a ser-\nvice instance. It then makes a request to a select service instance.\nApplication-level service discovery has been popularized by Netflix and Pivotal. Netflix\ndeveloped and open sourced several compon ents: Eureka, a highly available service\nregistry, the Eureka Java client, and Ribbon, a sophisticated HTTP client that supports\nthe Eureka client. Pivotal developed Spri ng Cloud, a Spring-based framework that\nmakes it remarkably easy to use the Netf lix components. Spring Cloud-based services\nautomatically register with Eureka, and Spring Cloud-based clients automatically use\nEureka for service discovery.\n One benefit of application-level service discovery is that it handles the scenario\nwhen services are deployed on multiple deployment platforms. Imagine, for example,\nyou\u2019ve deployed only some of services on Kubernetes, discussed in chapter 12, and the\nrest is running in a legacy environment.  Application-level service discovery using\nEureka, for example, works across both environments, whereas Kubernetes-based ser-\nvice discovery only works within Kubernetes.\n One drawback of application-level service discovery is that you need a service dis-\ncovery library for every language\u2014and possibly framework\u2014that you use. Spring\nCloud only helps Spring deve lopers. If you\u2019re using some other Java framework or a\nnon-JVM language such as NodeJS or GoLang, you must find some other service dis-\ncovery framework. Another drawback of a pplication-level service discovery is that\nyou\u2019re responsible for setting up and managing the service registry, which is a distrac-\ntion. As a result, it\u2019s usually better to use a service discovery mechanism that\u2019s pro-\nvided by the deployment infrastructure. \nAPPLYING THE PLATFORM-PROVIDED SERVICE DISCOVERY PATTERNS\nL a t e r  i n  c h a p t e r  1 2  y o u \u2019 l l  l e a r n  t h a t  m a n y  m o d e r n  d e p l o y m e n t  p l a t f o r m s  s u c h  a s\nDocker and Kubernetes have a built-in service registry and service discovery mecha-\nnism. The deployment platform gives each service a DNS name, a virtual IP (VIP)\naddress, and a DNS name that resolves to the VIP address. A service client makes a\nrequest to the DNS name/VIP, and the deployment platform automatically routes the\nrequest to one of the available service instan ces. As a result, service registration, ser-\nvice discovery, and request routing are enti rely handled by the deployment platform.\nFigure 3.6 shows how this works.\n The deployment platform includes a service registry that tracks the IP addresses of\nthe deployed services. In this example, a client accesses the Order Service using the\nPattern: Client-side discovery\nA service client retrieves the list of available service instances from the service reg-\nistry and load balances across them. See http://microservices.io/patterns/client-\nside-discovery.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3002, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c617b38d-1f39-481e-9a9c-d5782e28ca59": {"__data__": {"id_": "c617b38d-1f39-481e-9a9c-d5782e28ca59", "embedding": null, "metadata": {"page_label": "84", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2bec580f-f045-413e-88f0-fcb8917ca263", "node_type": "4", "metadata": {"page_label": "84", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "61f2f5c469ec27d917aa7992464c0d1bb87bd25b00b7be4a1050bed1162e62f7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "84 CHAPTER 3 Interprocess communication in a microservice architecture\nDNS name order-service, which resolves to the virtual IP address 10.1.3.4. The\ndeployment platform automatically load ba lances requests across the three instances\nof the Order Service.\n This approach is a combination of two patterns:\n\uf0a1 3rd party registration pattern \u2014Instead of a service registering itself with the ser-\nvice registry, a third party called the registrar, which is typically part of the\ndeployment platform, handles the registration.\n\uf0a1 Server-side discovery pattern \u2014Instead of a client querying the service registry, it\nmakes a request to a DNS name, which resolves to a request router that queries\nthe service registry and load balances requests.\nService\norder-service\norder-service\norder-service\n...\nService registry\nIP address\n10.232.23.1\n10.232.23.2\n10.232.23.3\n...\nService\nclient\nGET http://order-service/...\nDeployment platform\nRPC/rest\nclient\nService\ninstance 1\nOrder service\nObserves\n10.232.23.1\n10.232.24.99\nService\ninstance 2\nService\ninstance 3\nPlatform\nrouter\nQueries Updates\n10.232.23.2\n10.232.23.3\nRegistrar\n3rd party registrationServer-side discovery\nService DNS name\nresolves to service VIP\nService virtual IP address (VIP)\nFigure 3.6 The platform is responsible for service registration, discovery, and request routing. Service \ninstances are registered with the service registry by the registrar. Each service has a network location, \na DNS name/virtual IP address. A client makes a request to the service\u2019s network location. The router \nqueries the service registry and load balances requests across the available service instances.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1640, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "605e61ab-cb4a-484a-9e0a-b0b633193b5a": {"__data__": {"id_": "605e61ab-cb4a-484a-9e0a-b0b633193b5a", "embedding": null, "metadata": {"page_label": "85", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3aa50719-4a89-45ff-b4f7-efc373863d9a", "node_type": "4", "metadata": {"page_label": "85", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "60d1021a067c03fe4ec433960853be906ac1974949395863c0e75e8866bdc7c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "85Communicating using the Asynchronous messaging pattern\nThe key benefit of platform-provided service discovery is that all aspects of service dis-\ncovery are entirely handled by the deployment platform. Neither the services nor the\nclients contain any service discovery code. Consequently, the service discovery mecha-\nnism is readily available to all services and clients regardless of which language or\nframework they\u2019re written in.\n One drawback of platform-provided servic e discovery is that it only supports the\ndiscovery of services that have been de ployed using the platform. For example, as\nmentioned earlier when describing applicat ion-level discovery, Kubernetes-based dis-\ncovery only works for services running on Kubernetes. Despite this limitation, I rec-\nommend using platform-provided service discovery whenever possible.\n Now that we\u2019ve looked at synchronous IPC using REST or gRPC, let\u2019s take a look at\nthe alternative: asynchronous, message-based communication. \n3.3 Communicating using the Asynchronous messaging \npattern\nWhen using messaging, services communic ate by asynchronously exchanging mes-\nsages. A messaging-based a pplication typically uses a message broker, which acts as an\nintermediary between the services, although  another option is to use a brokerless\narchitecture, where the services communicate directly with each other. A service client\nmakes a request to a service by sending it a message. If the service instance is expected\nto reply, it will do so by sending a sepa rate message back to the client. Because the\ncommunication is asynchronous, the client doesn\u2019t block waiting for a reply. Instead,\nthe client is written assuming that the reply won\u2019t be received immediately.\nI start this section with an overview of messaging. I show how to describe a messaging\narchitecture independently of messaging technology. Next I compare and contrast\nPattern: 3rd party registration\nService instances are automatically registered with the service registry by a third party.\nSee http://microservices.io/patterns/3rd-party-registration.html.\nPattern: Server-side discovery\nA client makes a request to a router, which is responsible for service discovery. See\nhttp://microservices.io/patterns/server-side-discovery.html.\nPattern: Messaging\nA client invokes a service using asynchronous messaging. See http://microservices\n.io/patterns/communication-style/messaging.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2406, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "857e0c77-798f-4c2d-9816-92587dd7c341": {"__data__": {"id_": "857e0c77-798f-4c2d-9816-92587dd7c341", "embedding": null, "metadata": {"page_label": "86", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e7e35d0-f9a2-4668-9105-1ba735e4ebdf", "node_type": "4", "metadata": {"page_label": "86", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0b148d6fcb870e33e96e2c7386e3d81ceaa423d090153bfa389d1aa81c176f4e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "86 CHAPTER 3 Interprocess communication in a microservice architecture\nbrokerless and broker-based architectures an d describe the criteria for selecting a\nmessage broker. I then discuss several im portant topics, including scaling consum-\ners while preserving message ordering, de tecting and discarding duplicate messages,\nand sending and receiving messages as part of a database transaction. Let\u2019s begin by\nlooking at how messaging works.\n3.3.1 Overview of messaging\nA useful model of messaging is defined in the book Enterprise Integration Patterns\n(Addison-Wesley Professional, 2003) by Gr egor Hohpe and Bobby Woolf. In this\nmodel, messages are exchanged over messag e channels. A sender (an application or\nservice) writes a message to a channel, and a receiver (an application or service) reads\nmessages from a channel. Let\u2019s look at messages and then look at channels.\nABOUT MESSAGES\nA message consists of a header and a message body (www.enterpriseintegrationpatterns\n.com/Message.html). The header i s  a  c o l l e c t i o n  o f  n a m e - v a l u e  p a i r s ,  m e t a d a t a  t h a t\ndescribes the data being sent. In addition to name-value pairs provided by the mes-\nsage\u2019s sender, the message header contains name-value pairs, such as a unique message\nid generated by either the sender or the messaging infrastructure, and an optional\nreturn address, which specifies the message channel that a reply should be written to.\nThe message body is the data being sent, in either text or binary format.\n There are several different kinds of messages:\n\uf0a1 Document\u2014A generic message that contains only data. The receiver decides how\nto interpret it. The reply to a command is an example of a document message.\n\uf0a1 Command\u2014A message that\u2019s the equivalent of  an RPC request. It specifies the\noperation to invoke and its parameters.\n\uf0a1 Event\u2014A message indicating that somethin g notable has occurred in the sender.\nAn event is often a domain event, which represents a state change of a domain\nobject such as an Order, or a Customer.\nThe approach to the microservice architecture described in this book uses commands\nand events extensively.\n Let\u2019s now look at channels, the mechanism by which services communicate. \nABOUT MESSAGE CHANNELS\nAs figure 3.7 shows, messages are exchanged over channels ( www.enterpriseintegra-\ntionpatterns.com/MessageChannel.html). The business logic in the sender invokes a\nsending port interface, which encapsulates the underlying communication mechanism.\nThe sending port is implemented by a message sender adapter class, which sends a mes-\nsage to a receiver via a message channel. A message channel  is an abstraction of the\nmessaging infrastructure. A message handler adapter class in the receiver is invoked to\nhandle the message. It invokes a receiving port interface implemented by the consumer\u2019s", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2837, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f2caa6a-23fe-488a-9f40-aff0b08aff2c": {"__data__": {"id_": "2f2caa6a-23fe-488a-9f40-aff0b08aff2c", "embedding": null, "metadata": {"page_label": "87", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a23d09ce-4a73-4fdf-b330-f388c9fc96c4", "node_type": "4", "metadata": {"page_label": "87", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "56d7821b2df394c8a9ad1c6c1d8f69be2cb41b2d98471f9a13ea140cb7e3751a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "87Communicating using the Asynchronous messaging pattern\nbusiness logic. Any number of senders can send messages to a channel. Similarly, any\nnumber of receivers can receive messages from a channel.\n There are two kinds of channels: point-to-point (www.enterpriseintegrationpatterns\n.com/PointToPointChannel.html) and publish-subscribe (www.enterpriseintegration-\npatterns.com/PublishSubscribeChannel.html):\n\uf0a1 A point-to-point channel delivers a message to exactly one of the consumers that\nis reading from the channel. Services use point-to-point channels for the one-\nto-one interaction styles described earlier. For example, a command message is\noften sent over a point-to-point channel.\n\uf0a1 A publish-subscribe channel delivers each message to all of the attached consum-\ners. Services use publish-subscribe channels for the one-to-many interaction\nstyles described earlier. For example, an event message is usually sent over a\npublish-subscribe channel. \n3.3.2 Implementing the interaction styles using messaging\nOne of the valuable features of messaging is that it\u2019s flexible enough to support all the\ninteraction styles described in section 3.1.1. Some interaction styles are directly imple-\nmented by messaging. Others must be implemented on top of messaging.\n Let\u2019s look at how to implement each interaction style, starting with request/response\nand asynchronous request/response.\nIMPLEMENTING REQUEST/RESPONSE AND ASYNCHRONOUS REQUEST/RESPONSE\nWhen a client and service interact using either request/response or asynchronous\nrequest/response, the client sends a reques t and the service sends back a reply. The\nBusiness\nlogic\ninvokes\ninvokes\nBusiness logic\nSending port Receiving port\nSender Receiver\nMessage\nsender\nMessage\nMessage\nchannel\nReceivesSends\nHeader\nBody\nMessaging\ninfrastructure\nMessage\nhandler\nService\nFigure 3.7 The business logic in the sender invokes a sending port interface, which is implemented by a  message \nsender adapter. The message sender sends a message to a receiver via a message channel. The message channel \nis an abstraction of messaging infrastructure. A message handler adapter in the receiver is invoked to handle the \nmessage. It invokes the receiving port interface implemented by the receiver\u2019s business logic.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2255, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cea4cab-3753-4658-b598-02d0158662f0": {"__data__": {"id_": "4cea4cab-3753-4658-b598-02d0158662f0", "embedding": null, "metadata": {"page_label": "88", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb3d1630-781b-45fd-865e-37b21fe53a95", "node_type": "4", "metadata": {"page_label": "88", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "83374e698226fcdacb077c2a50754b1dd3aa68884fdd87514f3410306df150c8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "88 CHAPTER 3 Interprocess communication in a microservice architecture\ndifference between the two interaction styles is that with request/response the client\nexpects the service to respond immediately, whereas with asynchronous request/\nresponse there is no such expectation. Messaging is inherently asynchronous, so only\nprovides asynchronous request/response. But a client could block until a reply is\nreceived.\n The client and service implement the as ynchronous request/response style inter-\naction by exchanging a pair of messages. As  figure 3.8 shows, the client sends a com-\nmand message, which specifies the operation to perform, and parameters, to a point-\nto-point messaging channel owned by a se rvice. The service processes the requests\nand sends a reply message, which contains th e outcome, to a point-to-point channel\nowned by the client.\nThe client must tell the service where to send a reply message and must match reply mes-\nsages to requests. Fortunately, solving these two problems isn\u2019t that difficult. The client\nsends a command message that has a reply channel header. The server writes the reply mes-\nsage, which contains a correlation id that has the same value as message identifier, to the reply\nchannel. The client uses the correlation id to match the reply message with the request.\n Because the client and service commun icate using messaging, the interaction is\ninherently asynchronous. In theory, a messag ing client could block until it receives a\nreply, but in practice the client will pr ocess replies asynchronously. What\u2019s more,\nreplies are typically processed by any one of the client\u2019s instances. \nRequest\nSends\nReads\nReads\nSends\nMessageId: msgId\nReturnAddress: ReplyChannel\nBody\nCorrelationId:msgId\nBody\nRequest channel\nReply channel\nReplySpeci\ufb01es\nClient Service\nClient sends message containing\nmsgId and a reply channel.\nService sends reply to the speci\ufb01ed reply\nchannel. The reply contains a correlationId,\nwhich is the request\u2019s msgId.\nFigure 3.8 Implementing asynchronous request/response by including a reply channel and message \nidentifier in the request message. The receiver processes the message and sends the reply to the \nspecified reply channel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2198, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5d5be1a-7093-49b7-a77a-c34001335d73": {"__data__": {"id_": "a5d5be1a-7093-49b7-a77a-c34001335d73", "embedding": null, "metadata": {"page_label": "89", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "211aad95-fd45-4fc3-8bf7-d5ce4f6a786b", "node_type": "4", "metadata": {"page_label": "89", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d89aaa27a3bc236b07796162b1e1560cf102da4c37028fb7fad31a221485dfc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "89Communicating using the Asynchronous messaging pattern\nIMPLEMENTING ONE-WAY NOTIFICATIONS\nImplementing one-way notifications is straightforward using asynchronous messaging.\nThe client sends a message, typically a command message, to a point-to-point channel\nowned by the service. The service subscribes to the channel and processes the mes-\nsage. It doesn\u2019t send back a reply. \nIMPLEMENTING PUBLISH/SUBSCRIBE\nMessaging has built-in support for the publis h/subscribe style of interaction. A client\npublishes a message to a publish-subscribe ch annel that is read by multiple consum-\ne r s .  A s  d e s c r i b e d  i n  c h a p t e r s  4  a n d  5 ,  services use publish/subscribe to publish\ndomain events, which represent changes to domain objects. The service that publishes\nthe domain events owns a publish-subscribe channel, whose name is derived from the\ndomain class. For example, the Order Service publishes Order events to an Order\nchannel, and the Delivery Service publishes Delivery events to a Delivery chan-\nnel. A service that\u2019s interested in a particular domain object\u2019s events only has to sub-\nscribe to the appropriate channel. \nIMPLEMENTING PUBLISH/ASYNC RESPONSES\nThe publish/async responses interaction style is a higher-level style of interaction that\u2019s\nimplemented by combining elements of publish/subscribe and request/response. A cli-\nent publishes a message that specifies a reply channel  header to a publish-subscribe\nchannel. A consumer writes a reply message containing a correlation id to the reply\nchannel. The client gathers the responses by using the correlation id to match the reply\nmessages with the request.\n Each service in your application that has an asynchronous API will use one or\nmore of these implementation techniques. A service that has an asynchronous API for\ninvoking operations will have a message channel for requests. Similarly, a service that\npublishes events will publish them to an event message channel.\n As described in section 3.1.2, it\u2019s important to write an API specification for a ser-\nvice. Let\u2019s look at how to do that for an asynchronous API. \n3.3.3 Creating an API specification for a messaging-based service API\nThe specification for a service\u2019s asynchronous  API must, as figure 3.9 shows, specify\nthe names of the message channels, the message types that are exchanged over each\nchannel, and their formats. You must also describe the format of the messages using a\nstandard such as JSON, XML, or Protobuf. But unlike with REST and Open API, there\nisn\u2019t a widely adopted standard for documenting the channels and the message types.\nInstead, you need to write an informal document.\n A service\u2019s asynchronous API consists of operations, invoked by clients, and events,\npublished by the services. They\u2019re documented in different ways. Let\u2019s take a look at\neach one, starting with operations.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2861, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4222a643-09bf-4e11-9737-0f513163765f": {"__data__": {"id_": "4222a643-09bf-4e11-9737-0f513163765f", "embedding": null, "metadata": {"page_label": "90", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f0ff3fa-9f68-4224-a929-b150c5cf4ba9", "node_type": "4", "metadata": {"page_label": "90", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e37d5ade77c1cd1b141f8ca366a8cf1d25e0364b51bb5878fc7b3ff884825dd6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "90 CHAPTER 3 Interprocess communication in a microservice architecture\nDOCUMENTING ASYNCHRONOUS OPERATIONS\nA service\u2019s operations can be invoked using one of two different interaction styles:\n\uf0a1 Request/async response-style API\u2014This consists of the service\u2019s command message\nchannel, the types and formats of the command message types that the service\naccepts, and the types and formats of the reply messages sent by the service.\n\uf0a1 One-way notification-style API \u2014This consists of the service\u2019s command message\nchannel and the types and format of the command message types that the ser-\nvice accepts.\nA service may use the same request channel for both asynchronous request/response\nand one-way notification. \nDOCUMENTING PUBLISHED EVENTS\nA service can also publish events using a publish/subscribe interaction style. The spec-\nification of this style of API consists of the event channel and the types and formats of\nthe event messages that are published by the service to the channel.\n The messages and channels model of messaging is a great abstraction and a good\nway to design a service\u2019s asynchronous API. But in order to implement a service you\nneed to choose a messaging technology and determine how to implement your design\nusing its capabilities. Let\u2019s take a look at what\u2019s involved. \n3.3.4 Using a message broker\nA messaging-based application typically uses a message broker, an infrastructure service\nthrough which the service communicates. Bu t a broker-based architecture isn\u2019t the\nonly messaging architecture. You can also use a brokerless-based messaging architec-\nture, in which the services communicate with one another directly. The two approaches,\nshown in figure 3.10, have different trade-offs, but usually a broker-based architecture\nis a better approach.\nService\nCommand\nquery\nAPI\nService API\nReplies\nR R\nEvents\nR\nEvent\npublisher\n\u00abCommand channel\u00bb\n\u00abEvent channel\u00bb\n\u00abReply channel\u00bb\nCommands\nC C C\nFigure 3.9 A service\u2019s asynchronous API consists of message channels and command, reply, and \nevent message types.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2032, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bdda2e19-f949-430e-9e45-5d1e398f338e": {"__data__": {"id_": "bdda2e19-f949-430e-9e45-5d1e398f338e", "embedding": null, "metadata": {"page_label": "91", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "021c7e77-2dd4-40b2-95a5-b0a6a7dcd9ac", "node_type": "4", "metadata": {"page_label": "91", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5f60ed1ab784ed346359c9d833586163796f0b9f556932827a83eb7e6c76c93e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "91Communicating using the Asynchronous messaging pattern\nThis book focuses on broker-based architecture, but it\u2019s worthwhile to take a quick look\nat the brokerless architecture, because there may be scenarios where you find it useful.\nBROKERLESS MESSAGING\nIn a brokerless architecture, services can exchange messages directly. ZeroMQ (http://\nzeromq.org) is a popular brokerless messaging te chnology. It\u2019s both a specification\nand a set of libraries for different languages. It supports a variety of transports, includ-\ning TCP, UNIX-style domain sockets, and multicast.\n The brokerless architecture has some benefits:\n\uf0a1 Allows lighter network traffic and bette r latency, because messages go directly\nfrom the sender to the receiver, instead of  having to go from the sender to the\nmessage broker and from there to the receiver\n\uf0a1 Eliminates the possibility of the messa ge broker being a performance bottle-\nneck or a single point of failure\n\uf0a1 Features less operational complexity, because there is no message broker to set\nup and maintain\nAs appealing as these benefits may seem, brokerless messaging has significant drawbacks:\n\uf0a1 Services need to know about each other\u2019s locations and must therefore use one\nof the discovery mechanisms describer earlier in section 3.2.4.\n\uf0a1 It offers reduced availability, because both the sender and receiver of a message\nmust be available while the message is being exchanged.\n\uf0a1 Implementing mechanisms, such as guaranteed delivery, is more challenging.\nService\nService\nService\nService\nService\nService\nMessage brokerVs.\nBrokerless architecture Broker-based architecture\nFigure 3.10 The services in brokerless architect ure communicate directly, whereas the services \nin a broker-based architecture communicate via a message broker.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1769, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84084b2b-9f93-45d3-8f3f-3b4ab5b107ab": {"__data__": {"id_": "84084b2b-9f93-45d3-8f3f-3b4ab5b107ab", "embedding": null, "metadata": {"page_label": "92", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8433ed5-cb3c-462c-b7a0-145c4d450329", "node_type": "4", "metadata": {"page_label": "92", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3afee2e4ef07bf4c139b097ab70d1ea2df511b04835bf9aea1b9d100656b5237", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "92 CHAPTER 3 Interprocess communication in a microservice architecture\nIn fact, some of these drawbacks, such as reduced availability and the need for service\ndiscovery, are the same as when using synchronous, response/response.\n Because of these limitations, most enterp rise applications use a message broker-\nbased architecture. Let\u2019s look at how that works. \nOVERVIEW OF BROKER-BASED MESSAGING\nA message broker is an intermediary through which all messages flow. A sender writes\nthe message to the message broker, and the message broker delivers it to the receiver.\nAn important benefit of using a message br oker is that the sender doesn\u2019t need to\nknow the network location of the consumer. Another benefit is that a message broker\nbuffers messages until the consumer is able to process them.\n There are many message brokers to chose from. Examples of popular open source\nmessage brokers include the following:\n\uf0a1 ActiveMQ (http://activemq.apache.org)\n\uf0a1 RabbitMQ (https://www.rabbitmq.com)\n\uf0a1 Apache Kafka (http://kafka.apache.org)\nThere are also cloud-based messaging services, such as AWS Kinesis (https://aws.amazon\n.com/kinesis/) and AWS SQS (https://aws.amazon.com/sqs/).\n When selecting a message broker, you have  various factors to consider, including\nthe following:\n\uf0a1 Supported programming languages\u2014You probably should pick one that supports a\nvariety of programming languages.\n\uf0a1 Supported messaging standards\u2014Does the message broker support any standards,\nsuch as AMQP and STOMP, or is it proprietary?\n\uf0a1 Messaging ordering\u2014Does the message broker preserve ordering of messages?\n\uf0a1 Delivery guarantees\u2014What kind of delivery guarantees does the broker make?\n\uf0a1 Persistence\u2014Are messages persisted to disk an d able to survive broker crashes?\n\uf0a1 Durability\u2014If a consumer reconnects to the message broker, will it receive the\nmessages that were sent while it was disconnected?\n\uf0a1 Scalability\u2014How scalable is the message broker?\n\uf0a1 Latency\u2014What is the end-to-end latency?\n\uf0a1 Competing consumers\u2014Does the message broker support competing consumers?\nEach broker makes different trade-offs. For example, a very low-latency broker might\nnot preserve ordering, make no guarantees  to deliver messages, and only store mes-\nsages in memory. A messaging broker that guarantees delivery and reliably stores\nmessages on disk will probably have higher latency. Which kind of message broker is\nthe best fit depends on your application\u2019s requirements. It\u2019s even possible that differ-\nent parts of your application will have different messaging requirements.\n It\u2019s likely, though, that messaging ordering and scalability are essential. Let\u2019s now\nlook at how to implement message channels using a message broker.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2699, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0eea6d1d-88d8-4ab9-a531-a71c6e956b0a": {"__data__": {"id_": "0eea6d1d-88d8-4ab9-a531-a71c6e956b0a", "embedding": null, "metadata": {"page_label": "93", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4ba51fe-0905-443a-99b1-99a3b9fc5db7", "node_type": "4", "metadata": {"page_label": "93", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3039b861010d538defdab319c073a6a270aea17344fa25548c1bb5fdd167c3c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "93Communicating using the Asynchronous messaging pattern\nIMPLEMENTING MESSAGE CHANNELS USING A MESSAGE BROKER\nEach message broker implements the message channel concept in a different way. As\ntable 3.2 shows, JMS message brokers such  as ActiveMQ have queues and topics.\nAMQP-based message brokers such as RabbitMQ have exchanges and queues. Apache\nKafka has topics, AWS Kinesis has streams,  and AWS SQS has queues. What\u2019s more,\nsome message brokers offer more flexible  messaging than the message and channels\nabstraction described in this chapter.\nAlmost all the message brokers described here support both point-to-point and publish-\nsubscribe channels. The one exception is AWS SQS, which only supports point-to-point\nchannels.\n Now let\u2019s look at the benefits and drawbacks of broker-based messaging. \nBENEFITS AND DRAWBACKS OF BROKER-BASED MESSAGING\nThere are many advantages to using broker-based messaging:\n\uf0a1 Loose coupling \u2014A client makes a request by simply sending a message to the\nappropriate channel. The client is completely unaware of the service instances.\nIt doesn\u2019t need to use a discovery mechanism to determine the location of a ser-\nvice instance.\n\uf0a1 Message buffering\u2014The message broker buffers messages until they can be pro-\ncessed. With a synchronous request/response protocol such as HTTP, both the\nclient and service must be available for the duration of the exchange. With mes-\nsaging, though, messages will queue up until they can be processed by the con-\nsumer. This means, for example, that an online store can accept orders from\ncustomers even when the order-fulfillmen t system is slow or unavailable. The\nmessages will simply queue up until they can be processed.\n\uf0a1 Flexible communication \u2014Messaging supports all the interaction styles described\nearlier.\n\uf0a1 Explicit interprocess communication\u2014RPC-based mechanism attempts to make invok-\ning a remote service look the same as calling a local service. But due to the laws\nof physics and the possibility of partial failure, they\u2019re in fact quite different.\nTable 3.2 Each message broker implements the message channel concept in a different way.\nMessage broker Point-to-point channel Publish-subscribe channel\nJMS Queue Topic\nApache Kafka Topic Topic\nAMQP-based brokers, such as \nRabbitMQ\nExchange + Queue Fanout exchange and a queue per \nconsumer\nAWS Kinesis Stream Stream\nAWS SQS Queue \u2014", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2369, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "65e0a00e-7054-4891-95d6-04f57d982cf1": {"__data__": {"id_": "65e0a00e-7054-4891-95d6-04f57d982cf1", "embedding": null, "metadata": {"page_label": "94", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca704ce1-cdc3-460e-8d0f-cbcfc66e5b2f", "node_type": "4", "metadata": {"page_label": "94", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "eac98879df09a59dce973bf8a4ec1f61e87c73ed4b8a13f613200184663314aa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "94 CHAPTER 3 Interprocess communication in a microservice architecture\nMessaging makes these differences very explicit, so developers aren\u2019t lulled into\na false sense of security.\nThere are some downsides to using messaging:\n\uf0a1 Potential performance bottleneck\u2014There is a risk that the message broker could be\na performance bottleneck. Fortunately, many modern message brokers are\ndesigned to be highly scalable.\n\uf0a1 Potential single point of failure \u2014It\u2019s essential that the message broker is highly\navailable\u2014otherwise, system reliability wi ll be impacted. Fortunately, most mod-\nern brokers have been designed to be highly available.\n\uf0a1 Additional operational complexity \u2014The messaging system is yet another system\ncomponent that must be installed, configured, and operated.\nLet\u2019s look at some design issues you might face. \n3.3.5 Competing receivers and message ordering\nOne challenge is how to scale out message receivers while preserving message order-\ning. It\u2019s a common requirement to have multiple instances of a service in order to pro-\ncess messages concurrently. Moreover, even a single service instance will probably use\nthreads to concurrently process multiple messages. Using multiple threads and service\ninstances to concurrently process messages increases the throughput of the applica-\ntion. But the challenge with processing me ssages concurrently is ensuring that each\nmessage is processed once and in order.\n For example, imagine that there are thre e instances of a service reading from the\nsame point-to-point channel and that a sender publishes Order Created, Order Updated,\nand Order Cancelled event messages sequentially. A simplistic messaging implementa-\ntion could concurrently deliver each message to a different receiver. Because of delays\ndue to network issues or garbage collections, messages might be processed out of order,\nwhich would result in strange behavior. In theory, a service instance might process the\nOrder Cancelled message before another service processes the Order Created message!\n A common solution, used by modern message brokers like Apache Kafka and AWS\nK i n e s i s ,  i s  t o  u s e  sharded (partitioned) channels. Figure 3.11 shows how this works.\nThere are three parts to the solution:\n1 A sharded channel consists of two or more shards, each of which behaves like\na channel.\n2 The sender specifies a shard key in the message\u2019s header, which is typically an\narbitrary string or sequence of bytes. The message broker uses a shard key to\nassign the message to a particular shard/partition. It might, for example, select\nthe shard by computing the hash of the shard key modulo the number of shards.\n3 The messaging broker groups together multiple instances of a receiver and\ntreats them as the same logical receiver . Apache Kafka, for example, uses the\nterm consumer group. The message broker assigns each shard to a single receiver.\nIt reassigns shards when receivers start up and shut down.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2948, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2854f547-cf60-4a64-9332-b4079ba4bc5c": {"__data__": {"id_": "2854f547-cf60-4a64-9332-b4079ba4bc5c", "embedding": null, "metadata": {"page_label": "95", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49c88a0f-a9b9-48fc-b327-61c041a2105d", "node_type": "4", "metadata": {"page_label": "95", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "feff027f964fbc67c5fa7c1cbedad3a365f91fa2ce1408476aaa9108ee539bb8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "95Communicating using the Asynchronous messaging pattern\nIn this example, each Order event message has the orderId as its shard key. Each event\nfor a particular order is published to the same shard, which is read by a single consumer\ninstance. As a result, these messages are guaranteed to be processed in order. \n3.3.6 Handling duplicate messages\nAnother challenge you must tackle when using messaging is dealing with duplicate\nmessages. A message broker should ideally deliver each message only once, but guar-\nanteeing exactly-once messaging is usually too costly. Instead, most message brokers\npromise to deliver a message at least once.\n When the system is working normally, a message broker that guarantees at-least-\nonce delivery will deliver each message only once. But a failure of a client, network, or\nmessage broker can result in a message be ing delivered multiple times. Say a client\ncrashes after processing a message and updating its database\u2014but before acknowledg-\ning the message. The message broker will deliver the unacknowledged message again,\neither to that client when it restarts or to another replica of the client.\n Ideally, you should use a message broker  that preserves ordering when redeliver-\ning messages. Imagine that the client processes an Order Created event followed by\nan Order Cancelled event for the same Order, and that somehow the Order Created\nevent wasn\u2019t acknowledged. The message broker should redeliver both the Order Cre-\nated and Order Cancelled events. If it only redelivers the Order Created, the client\nmay undo the cancelling of the Order.\n There are a couple of different ways to handle duplicate messages:\n\uf0a1 Write idempotent message handlers.\n\uf0a1 Track messages and discard duplicates.\nLet\u2019s look at each option.\nRoutes based on a\nhash of the shard-key\nReceiver A\ninstance 1\nReceiver A\ninstance 2\nReceiver\nShard\nassignment\nReceiver\n...\nRouter\nShard 0\nChannel\nLogical receiver A\nShard 1\nShard ...\nCreate order\nrequest\nShard-key:orderId\nSender\nFigure 3.11 Scaling consumers while preserving message  ordering by using a sharded (partitioned) message \nchannel. The sender includes the shard key in the message. The message broker writes the message to a shard \ndetermined by the shard key. The message broker assigns each partition to an instance of the replicated receiver.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "453a22ed-c443-4dcb-8cbd-89c5224ba8d5": {"__data__": {"id_": "453a22ed-c443-4dcb-8cbd-89c5224ba8d5", "embedding": null, "metadata": {"page_label": "96", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4163bc87-2d68-473e-bde6-f530c956be93", "node_type": "4", "metadata": {"page_label": "96", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "10cbc842ffb31a2a7920d5e296820dde561551c915d310aaf262a12433bef875", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "96 CHAPTER 3 Interprocess communication in a microservice architecture\nWRITING IDEMPOTENT MESSAGE HANDLERS\nIf the application logic that processes me ssages is idempotent, then duplicate mes-\nsages are harmless. Application logic is idempotent if calling it multiple times with the\nsame input values has no additional effect. For instance, cancelling an already-cancelled\norder is an idempotent operation. So is cr eating an order with a client-supplied ID.\nAn idempotent message handler can be safely executed multiple times, provided that\nthe message broker preserves ordering when redelivering messages.\n Unfortunately, application logic is ofte n not idempotent. Or you may be using a\nmessage broker that doesn\u2019t preserve ordering when redelivering messages. Duplicate\nor out-of-order messages can cause bugs. In this situation, you must write message\nhandlers that track messages and discard duplicate messages. \nTRACKING MESSAGES AND DISCARDING DUPLICATES\nConsider, for example, a message handler th at authorizes a consumer credit card. It\nmust authorize the card exactly once for each order. This example of application logic\nhas a different effect each time it\u2019s invoked. If duplicate messages caused the message\nhandler to execute this logic multiple times, the application would behave incorrectly.\nThe message handler that executes this kind  of application logic must become idem-\npotent by detecting and discarding duplicate messages.\n A simple solution is for a message consum er to track the messages that it has pro-\ncessed using the message id and discard any duplicates. It  could, for example, store\nthe message id o f  e a c h  m e s s a g e  t h a t  i t  c o n s u m e d  i n  a  d a t a b a s e  t a b l e .  F i g u r e  3 . 1 2\nshows how to do this using a dedicated table.\nWhen a consumer handles a message, it records the message id in the database table as\npart of the transaction that creates and updates business entities. In this example, the\nconsumer inserts a row containing the message id into a PROCESSED_MESSAGES table. If a\nmessage is a duplicate, the INSERT will fail and the consumer can discard the message.\nMSG_ID\nPROCESSED_MESSAGEtable\nINSERT\nINSERT will fail for\nduplicate messages.\nUPDATE ... ...\nApplication table\nxyz\nTransaction\nMessage\nid: xyz\nConsumer\nFigure 3.12 A consumer detects and discards duplicate messages by recording the IDs of \nprocessed messages in a database table. If a message has been processed before, the INSERT \ninto the PROCESSED_MESSAGES table will fail.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2525, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4d7b32ea-f952-4131-8388-431e83f6782d": {"__data__": {"id_": "4d7b32ea-f952-4131-8388-431e83f6782d", "embedding": null, "metadata": {"page_label": "97", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74ba657b-c222-4ca0-a98d-761eab13596b", "node_type": "4", "metadata": {"page_label": "97", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "13059762bff0d86b9dd329b5587537cebd56e4efd21d3ef099d04763ebb5f4a7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "97Communicating using the Asynchronous messaging pattern\n Another option is for a  message handler to record message ids in an application\ntable instead of a dedicated table. This appr oach is particularly useful when using a\nNoSQL database that has a limited transact ion model, so it doesn\u2019t support updat-\ning two tables as part of a database tran saction. Chapter 7 shows an example of this\napproach. \n3.3.7 Transactional messaging\nA service often needs to publish messages as  part of a transaction that updates the\ndatabase. For instance, throughout this book you see examples of services that publish\ndomain events whenever they create or update business entities. Both the database\nupdate and the sending of the message must happen within a transaction. Otherwise,\na service might update the database and then  crash, for example, before sending the\nmessage. If the service doesn\u2019t perform th ese two operations atomically, a failure\ncould leave the system in an inconsistent state.\n The traditional solution is to use a dist ributed transaction that spans the database\nand the message broker. But as you\u2019ll lear n in chapter 4, distributed transactions\naren\u2019t a good choice for modern applications. Moreover, many modern brokers such\nas Apache Kafka don\u2019t support distributed transactions.\n As a result, an application must use a different mechanism to reliably publish mes-\nsages. Let\u2019s look at how that works.\nUSING A DATABASE TABLE AS A MESSAGE QUEUE\nLet\u2019s imagine that your application is usin g a relational database. A straightforward\nway to reliably publish messages is to apply the Transactional outbox pattern. This\npattern uses a database table as a temporar y message queue. As figure 3.13 shows, a\nservice that sends messages has an OUTBOX database table. As part of the database\nOrder\nService\nRead\nOUTBOX\ntable\nPublish\n... ...\nORDERtable\nINSERT,\nUPDATE,DELETE\nINSERT\nDatabase\nMessage\nrelay\nTransaction\nOUTBOXtable\nMessage\nbroker\nFigure 3.13 A service reliably publishes a message by inserting it into an OUTBOX table as part of the transaction \nthat updates the database. The Message Relay reads the OUTBOX table and publishes the messages to a \nmessage broker.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69d5065f-91a9-4fed-bbd0-e0427c4372ac": {"__data__": {"id_": "69d5065f-91a9-4fed-bbd0-e0427c4372ac", "embedding": null, "metadata": {"page_label": "98", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52520531-3c4a-4baf-a77c-3d6ec1cb638d", "node_type": "4", "metadata": {"page_label": "98", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fa55a53d693753873b7c73b16046c32182a73eb1ebcbf3e01d6a7f6dc40fa3a7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "98 CHAPTER 3 Interprocess communication in a microservice architecture\ntransaction that creates, updates, and dele tes business objects, the service sends mes-\nsages by inserting them into the OUTBOX table. Atomicity is guaranteed because this is a\nlocal ACID transaction.\n The OUTBOX table acts a temporary message queue. The MessageRelay is a compo-\nnent that reads the OUTBOX table and publishes the messages to a message broker.\nYou can use a similar approach with some  NoSQL databases. Each business entity\nstored as a record in the database has an attribute th at is a list of messages that need\nto be published. When a service updates an entity in the database, it appends a mes-\nsage to that list. This is atomic because it\u2019s done with a single database operation. The\nchallenge, though, is efficiently finding those business entities that have events and\npublishing them.\n There are a couple of different ways to  move messages from the database to the\nmessage broker. We\u2019ll look at each one. \nPUBLISHING EVENTS BY USING THE POLLING PUBLISHER PATTERN\nIf the application uses a relational database, a very simple way to publish the messages\ninserted into the OUTBOX table is for the MessageRelay to poll the table for unpub-\nlished messages. It periodically queries the table:\nSELECT * FROM OUTBOX ORDERED BY ... ASC\nNext, the MessageRelay publishes those messages to the message broker, sending one\nto its destination message channel. Finally, it deletes those messages from the OUTBOX\ntable:\nBEGIN\nDELETE FROM OUTBOX WHERE ID in (....)\nCOMMIT\nPolling the database is a simple approach that works reasonably well at low scale. The\ndownside is that frequently polling the database can be expensive. Also, whether you\ncan use this approach with a NoSQL database depends on its querying capabilities.\nThat\u2019s because rather than querying an OUTBOX table, the application must query the\nPattern: Transactional outbox\nPublish an event or message as part of a database transaction by saving it in an OUT-\nBOX in the database. See http://microservices.io/patterns/data/transactional-out-\nbox.html.\nPattern: Polling publisher\nPublish messages by polling t he outbox in the database. See http://microser-\nvices.io/patterns/data/polling-publisher.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2251, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "742265a8-89cd-48a7-8628-43db803195ac": {"__data__": {"id_": "742265a8-89cd-48a7-8628-43db803195ac", "embedding": null, "metadata": {"page_label": "99", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "397ba1ef-f45f-464e-9537-6409762367c4", "node_type": "4", "metadata": {"page_label": "99", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d8262dff463964d53b6ba542ef0821cd5a0b5a0acacda442f66e7f1b467bd81f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "99Communicating using the Asynchronous messaging pattern\nbusiness entities, and that may or may not be possible to do efficiently. Because of\nthese drawbacks and limitations, it\u2019s ofte n better\u2014and in some cases, necessary\u2014to\nuse the more sophisticated and performant approach of tailing the database transac-\ntion log. \nPUBLISHING EVENTS BY APPLYING THE TRANSACTION LOG TAILING PATTERN\nA sophisticated solution is for MessageRelay to tail the database transaction log (also\ncalled the commit log). Every committed update made by an application is repre-\nsented as an entry in the database\u2019s transaction log. A transaction log miner can read\nthe transaction log and publish each change as a message to the message broker. Fig-\nure 3.14 shows how this approach works.\nThe Transaction Log Miner reads the transaction log entries. It converts each relevant\nlog entry corresponding to an inserted message into a message and publishes that mes-\nsage to the message broker. This approach can be used to publish messages written to\nan OUTBOX table in an RDBMS or messages appended to records in a NoSQL database.\nPattern: Transaction log tailing\nPublish changes made to the database by tailing the transaction log. See http://micro-\nservices.io/patterns/data/transaction-log-tailing.html.\nDatabase\nOUTBOXtable\nTransaction log Transaction log\nminer\nINSERT INTO OUTBOX ...\nMessage\nbroker\nChanges Publish\nOrder\nService\nCommitted inserts into\nthe OUTBOX table are\nrecorded in the database\u2019s\ntransaction log.\nReads the transaction log\nFigure 3.14 A service publishes messages inserted into the OUTBOX table by mining \nthe database\u2019s transaction log.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "013ad195-55fb-4724-937e-7434e0cdb349": {"__data__": {"id_": "013ad195-55fb-4724-937e-7434e0cdb349", "embedding": null, "metadata": {"page_label": "100", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c3c873f-ae6e-42d2-8f8f-18bcbfc00875", "node_type": "4", "metadata": {"page_label": "100", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "44969d2085cf6f15f5345f5991eb1be494d71b6bf90f1148f85b34cef910448e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "100 CHAPTER 3 Interprocess communication in a microservice architecture\nThere are a few examples of this approach in use:\n\uf0a1 Debezium ( http://debezium.io)\u2014An open source project that publishes data-\nbase changes to the Apache Kafka message broker.\n\uf0a1 LinkedIn Databus (https://github.com/linkedin/databus)\u2014An open source proj-\nect that mines the Oracle transaction log and publishes the changes as events.\nLinkedIn uses Databus to synchronize various derived data stores with the sys-\ntem of record.\n\uf0a1 DynamoDB streams  ( http://docs.aws.amazon.com/amazondynamodb/latest/\ndeveloperguide/Streams.html)\u2014DynamoDB streams contain the time-ordered\nsequence of changes (creates, updates, and deletes) made to the items in a\nDynamoDB table in the last 24 hours. An application can read those changes\nfrom the stream and, for example, publish them as events.\n\uf0a1 Eventuate Tram (https://github.com/eventuate-tram/eventuate-tram-core)\u2014Your\nauthor\u2019s very own open source transaction messaging library that uses MySQL\nbinlog protocol, Postgres WAL, or polling to read changes made to an OUTBOX\ntable and publish them to Apache Kafka.\nA l t h o u g h  t h i s  a p p r o a c h  i s  o b s c u r e ,  i t  w o r k s  r e m a r k a b l y  w e l l .  T h e  c h a l l e n g e  i s  t h a t\nimplementing it requires some development effort. You could, for example, write low-\nlevel code that calls database-specific APIs. Alternatively, you could use an open source\nframework such as Debezium that publishes changes made by an application to MySQL,\nPostgres, or MongoDB to Apache Kafka. The drawback of using Debezium is that its\nfocus is capturing changes at the database level and that APIs for sending and receiving\nmessages are outside of its scope. That\u2019s why I created the Eventuate Tram framework,\nwhich provides the messaging APIs as well as transaction tailing and polling. \n3.3.8 Libraries and frameworks for messaging\nA service needs to use a library to send an d receive messages. One approach is to use\nthe message broker\u2019s client library, althou gh there are several problems with using\nsuch a library directly:\n\uf0a1 The client library couples business logic that publishes messages to the message\nbroker APIs.\n\uf0a1 A message broker\u2019s client library is typically low level and requires many lines of\ncode to send or receive a message. As a developer, you don\u2019t want to repeatedly\nwrite boilerplate code. Also, as the author of this book I don\u2019t want the example\ncode cluttered with low-level boilerplate.\n\uf0a1 The client library usually provides only the basic mechanism to send and\nreceive messages and doesn\u2019t support the higher-level interaction styles.\nA better approach is to use a higher-level library or framework that hides the low-level\ndetails and directly supports the higher-lev el interaction styles. For simplicity, the\nexamples in this book use my Eventuate Tram framework. It has a simple, easy-to-\nunderstand API that hides the complexity of using the message broker. Besides an API", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2985, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed715ed1-47b4-4285-b60d-b224f9f255ab": {"__data__": {"id_": "ed715ed1-47b4-4285-b60d-b224f9f255ab", "embedding": null, "metadata": {"page_label": "101", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6a392b2-bcc6-42d0-a72d-ed81875af65a", "node_type": "4", "metadata": {"page_label": "101", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a6d9f0722cbcb4d62fa81fa4082c1d2435006615094d17656e692e03e7e088e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "101Communicating using the Asynchronous messaging pattern\nfor sending and receiving messages, Eventuate Tram also supports higher-level inter-\naction styles such as asynchronous request/response and domain event publishing.\nEventuate Tram also implements two important mechanisms:\n\uf0a1 Transactional messaging\u2014It publishes messages as part of a database transaction.\n\uf0a1 Duplicate message detection\u2014The Eventuate Tram message consumer detects and\ndiscards duplicate messages, which is e ssential for ensuring that a consumer\nprocesses messages exactly once, as discussed in section 3.3.6.\nLet\u2019s take a look at the Eventuate Tram APIs.\nBASIC MESSAGING\nThe basic messaging API consists of two Java interfaces: MessageProducer and Message-\nConsumer. A producer service uses the MessageProducer interface to publish messages\nto message channels. Here\u2019s an example of using this interface:\nMessageProducer messageProducer = ...;\nString channel = ...;\nString payload = ...;\nmessageProducer.send(destination, MessageBuilder.withPayload(payload).build())\nA consumer service uses the MessageConsumer interface to subscribe to messages:\nMessageConsumer messageConsumer;\nmessageConsumer.subscribe(subscriberId, Collections.singleton(destination), \nmessage -> { ... })\nMessageProducer and MessageConsumer are the foundation of the higher-level APIs\nfor asynchronous request/response and domain event publishing.\n Let\u2019s talk about how to publish and subscribe to events. \nWhat!? Why the Eventuate frameworks?\nThe code samples in this book use the open source Eventuate frameworks I\u2019ve devel-\noped for transactional messaging, event sourcing, and sagas. I chose to use my\nframeworks because, unlike with, say, d ependency injection and the Spring frame-\nwork, there are no widely adopted frameworks for many of the features the microser-\nvice architecture requires. Without the Eventuate Tram framework, many examples\nwould have to use the low-level messaging APIs directly, making them much more\ncomplicated and obscuring important concepts. Or they would use a framework that\nisn\u2019t widely adopted, which would also provoke criticism.\nInstead, the examples use the Eventuat e Tram frameworks, which have a simple,\neasy-to-understand API that hides the im plementation details. You can use these\nframeworks in your applications. Alternat ively, you can study the Eventuate Tram\nframeworks and reimplement the concepts yourself.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2408, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0138bafc-86bd-49b8-b8e3-29186b6d4014": {"__data__": {"id_": "0138bafc-86bd-49b8-b8e3-29186b6d4014", "embedding": null, "metadata": {"page_label": "102", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6413e33-4a7c-4373-b8d4-429672129b66", "node_type": "4", "metadata": {"page_label": "102", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0da5ed1532f0ed60f6982d7ca7de8a7324c508eb7adf38f450d322c8531d9277", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "102 CHAPTER 3 Interprocess communication in a microservice architecture\nDOMAIN EVENT PUBLISHING\nEventuate Tram has APIs for publishing an d consuming domain events. Chapter 5\nexplains that domain events are events that are emitted by an aggregate (business\nobject) when it\u2019s created, updated, or de leted. A service publishes a domain event\nusing the DomainEventPublisher interface. Here is an example:\nDomainEventPublisher domainEventPublisher;\nString accountId = ...;\nDomainEvent domainEvent = new AccountDebited(...);\ndomainEventPublisher.publish(\"Account\", accountId, Collections.singletonList(\ndomainEvent));\nA service consumes domain events using the DomainEventDispatcher. An example\nfollows:\nDomainEventHandlers domainEventHandlers = DomainEventHandlersBuilder\n.forAggregateType(\"Order\")\n.onEvent(AccountDebited.class, domainEvent -> { ... })\n.build();\nnew DomainEventDispatcher(\"eventDispatcherId\",\ndomainEventHandlers,\nmessageConsumer);\nEvents aren\u2019t the only high-level messaging pattern supported by Eventuate Tram. It\nalso supports command/reply-based messaging. \nCOMMAND/REPLY-BASED MESSAGING\nA client can send a command message to a service using the CommandProducer inter-\nface. For example\nCommandProducer commandProducer = ...;\nMap<String, String> extraMessageHeaders = Collections.emptyMap();\nString commandId = commandProducer.send(\"CustomerCommandChannel\",\nnew DoSomethingCommand(),\n\"ReplyToChannel\",\nextraMessageHeaders);\nA service consumes command messages using the CommandDispatcher class. Command-\nDispatcher uses the MessageConsumer interface to subscribe to specified events. It dis-\npatches each command message to the appropriate handler method. Here\u2019s an example:\nCommandHandlers commandHandlers =CommandHandlersBuilder\n.fromChannel(commandChannel)\n.onMessage(DoSomethingCommand.class, (command) -\n> { ... ; return withSuccess(); })\n.build();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1873, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b53a8db5-0203-4986-ac2e-d4cc44db2cbe": {"__data__": {"id_": "b53a8db5-0203-4986-ac2e-d4cc44db2cbe", "embedding": null, "metadata": {"page_label": "103", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a83924d-7d0a-4448-af4d-f86dff8e5f11", "node_type": "4", "metadata": {"page_label": "103", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8fed24ba92feb568a8a7d476a5ee9ba2b8107ef768ef1489f726700f43f161b6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "103Using asynchronous messaging to improve availability\nCommandDispatcher dispatcher = new CommandDispatcher(\"subscribeId\", \ncommandHandlers, messageConsumer, messageProducer);\nThroughout this book, you\u2019ll see code examples that use these APIs for sending and\nreceiving messages.\n As you\u2019ve seen, the Eventuate Tram framework implements transactional messag-\ning for Java applications. It provides a low-level API for sending and receiving messages\ntransactionally. It also provides the high er-level APIs for publishing and consuming\ndomain events and for sending and processing commands.\n Let\u2019s now look at a service design appr oach that uses asynchronous messaging to\nimprove availability. \n3.4 Using asynchronous messaging to improve availability\nAs you\u2019ve seen, a variety of IPC mechanisms have different trade-offs. One particular\ntrade-off is how your choice of IPC mechanism impacts availability. In this section,\nyou\u2019ll learn that synchronous communication with other serv ices as part of request\nhandling reduces application availability. As a result, you should design your services\nto use asynchronous messaging whenever possible.\n Let\u2019s first look at the problem with  synchronous communication and how it\nimpacts availability.\n3.4.1 Synchronous communication reduces availability\nREST is an extremely popular IPC mechanism. You may be tempted to use it for inter-\nservice communication. The problem with RE ST, though, is that it\u2019s a synchronous\nprotocol: an HTTP client must wait for the service to send a response. Whenever\nservices communicate using a synchronous protocol, the availability of the applica-\ntion is reduced.\n To see why, consider the scen ario shown in figure 3.15. The Order Service has a\nREST API for creating an Order. It invokes the Consumer Service and the Restaurant\nService to validate the Order. Both of those services also have REST APIs.\nClient Order\nService\nConsumer\nService\nRestaurant\nService\nPOST/orders\nGET/consumers/id\nGET/restaurant/id\nFigure 3.15 The Order Service invokes other services using REST. It\u2019s straightforward, but it \nrequires all the services to be simultaneously available, which reduces the availability of the API.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2181, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "048c6997-964b-4b66-83e3-b8a7290b6a3c": {"__data__": {"id_": "048c6997-964b-4b66-83e3-b8a7290b6a3c", "embedding": null, "metadata": {"page_label": "104", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7386cb8-6dbb-44e6-bb49-c26db4f4816d", "node_type": "4", "metadata": {"page_label": "104", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4aaa6fd36a9a22c70289164ead30c62ecbf4377b89565742f788492c2fa5f50c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "104 CHAPTER 3 Interprocess communication in a microservice architecture\nThe sequence of steps for creating an order is as follows:\n1 Client makes an HTTP POST /orders request to the Order Service.\n2 Order Service retrieves consumer information by making an HTTP GET\n/consumers/id request to the Consumer Service.\n3 Order Service retrieves restaurant information by making an HTTP GET\n/restaurant/id request to the Restaurant Service.\n4 Order Taking validates the request using the consumer and restaurant infor-\nmation.\n5 Order Taking creates an Order.\n6 Order Taking sends an HTTP response to the client.\nBecause these services use HTTP, they must all be simultaneously available in order\nfor the FTGO application to process the CreateOrder request. The FTGO application\ncouldn\u2019t create orders if any one of these three services is down. Mathematically\nspeaking, the availability of a system operation is the product of the availability of the\nservices that are invoked by that operation. If the Order Service and the two services\nthat it invokes are 99.5% available,  the overall availability is 99.5% 3 = 98.5%, which is\nsignificantly less. Each additional service that participates in handling a request fur-\nther reduces availability.\n This problem isn\u2019t specific to REST-based communication. Availability is reduced\nwhenever a service can only respond to it s client after receiving a response from\nanother service. This problem exists even  if services communicate using request/\nresponse style interaction over asynchronous messaging. For example, the availability\nof the Order Service would be reduced if it sent a message to the Consumer Service\nvia a message broker and then waited for a response.\n If you want to maximize availability, you must minimize the amount of synchro-\nnous communication. Let\u2019s look at how to do that. \n3.4.2 Eliminating synchronous interaction\nThere are a few different ways to reduce the amount of synchronous communication\nwith other services while handling synchronous requests. One solution is to avoid the\np r o b l e m  e n t i r e l y  b y  d e f i n i n g  s e r v i c e s  t h a t  o n l y  h a v e  a s y n c h r o n o u s  A P I s .  T h a t \u2019 s  n o t\nalways possible, though. For example, pu blic APIs are commonly RESTful. Services\nare therefore sometimes required to have synchronous APIs.\n Fortunately, there are ways to handle synchronous requests without making syn-\nchronous requests. Let\u2019s talk about the options.\nUSE ASYNCHRONOUS INTERACTION STYLES\nIdeally, all interactions should be done using the asynchronous interaction styles\ndescribed earlier in this chapter. For exam ple, say a client of the FTGO application\nused an asynchronous request/asynchronous  response style of interaction to create\norders. A client creates an order by  sending a request message to the Order Service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2845, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db164c0f-7a2a-4e17-a1d5-d83a469994a2": {"__data__": {"id_": "db164c0f-7a2a-4e17-a1d5-d83a469994a2", "embedding": null, "metadata": {"page_label": "105", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f1c6249-4061-490d-b196-3bd5882223b6", "node_type": "4", "metadata": {"page_label": "105", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0c3f1fed710e79d4172ceb43aa3355950ac7cdaf687895ae175a9a766938d71c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "105Using asynchronous messaging to improve availability\nThis service then asynchronously exchanges messages with other services and eventu-\nally sends a reply message to the client. Figure 3.16 shows the design.\nThe client and the services communicate asynchronously by sending messages via\nmessaging channels. No participant in this interaction is ever blocked waiting for a\nresponse.\n Such an architecture would be extrem ely resilient, because the message broker\nbuffers messages until they can be consumed . The problem, however, is that services\noften have an external API that uses a synchronous protocol such as REST, so it must\nrespond to requests immediately.\n If a service has a synchronous API, one wa y to improve availability is to replicate\ndata. Let\u2019s see how that works. \nREPLICATE DATA\nOne way to minimize synchronous requests during request processing is to replicate\ndata. A service maintains a replica of the data  that it needs when processing requests.\nIt keeps the replica up-to-date by subscribin g to events published by the services that\nown the data. For example, Order Service could maintain a replica of data owned by\nConsumer Service and Restaurant Service. This would enable Order Service to\nhandle a request to create an order withou t having to interact with those services.\nFigure 3.17 shows the design.\n Consumer Service and Restaurant Service publish events whenever their data\nchanges. Order Service subscribes to those events and updates its replica.\n In some situations, replicating data is a useful approach. For example, chapter 5\ndescribes how Order Service replicates data from Restaurant Service so that it can\nvalidate and price menu items. One drawback of replication is that it can sometimes\nrequire the replication of large amounts of data, which is inefficient. For example, it\nmay not be practical for Order Service to maintain a replica of the data owned by\nConsumer Service, due to the large number of consumers. Another drawback of\nClient\nConsumer\nService\nRestaurant\nService\nOrder request\nchannel\nConsumer request\nchannel\nOrder Service\nreply channel\nRestaurant request\nchannel\nCreate order\nrequest\nCreate order\nresponse\nOrder\nService\nClient reply\nchannel\nFigure 3.16 The FTGO application has higher availabil ity if its services communicate using asynchronous \nmessaging instead of synchronous calls.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2353, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c63a324-7b28-47d3-a0dc-912ec2677119": {"__data__": {"id_": "3c63a324-7b28-47d3-a0dc-912ec2677119", "embedding": null, "metadata": {"page_label": "106", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7049e14-f128-4c3b-bd23-12891487a547", "node_type": "4", "metadata": {"page_label": "106", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3aeabf5d8f0fa56175c8ff647d82895e77958c0b633e789cc0388546b21eaf31", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "106 CHAPTER 3 Interprocess communication in a microservice architecture\nreplication is that it doesn\u2019t solve the problem of how a service updates data owned by\nother services.\n One way to solve that prob lem is for a service to delay interacting with other ser-\nvices until after it responds to its client. We\u2019ll next look at how that works.\nFINISH PROCESSING AFTER RETURNING A RESPONSE\nAnother way to eliminate synchronous comm unication during request processing is\nfor a service to handle a request as follows:\n1 Validate the request using only the data available locally.\n2 Update its database, including inserting messages into the OUTBOX table.\n3 Return a response to its client.\nWhile handling a request, the service doesn\u2019t synchronously interact with any other\nservices. Instead, it asynchronously sends messages to other services. This approach\nensures that the services are loosely coupled. As you\u2019ll learn in the next chapter, this is\noften implemented using a saga.\n For example, if Order Service uses this approach, it creates an order in a PENDING\nstate and then validates the order asynchronously by exchanging messages with other\nservices. Figure 3.18 shows what happens when the createOrder() operation is\ninvoked. The sequence of events is as follows:\n1 Order Service creates an Order in a PENDING state.\n2 Order Service returns a response to its client containing the order ID.\n3 Order Service sends a ValidateConsumerInfo message to Consumer Service.\nServices publish events\nwhen their data changes.\nReplicated data enables Order Service to\nhandle the createOrder() request without\nsynchronously invoking services.\nRestaurant\nService\nConsumer event\nchannel\nRestaurant event\nchannel\nOrder\nService\nConsumer\nService\nConsumer Service database\n\u00abtable\u00bb\nCONSUMERS\ncreateOrder()\nRestaurant Service database\n\u00abtable\u00bb\nRESTAURANTS\nOrder Service database\n\u00abtable\u00bb\nORDERS\n\u00abtable\u00bb\nCONSUMERS\n\u00abtable\u00bb\nRESTAURANTS\nFigure 3.17 Order Service is self-contained because it has replicas of the consumer and restaurant data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2020, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "073fd465-b334-40c1-8cb9-2aaf39be136f": {"__data__": {"id_": "073fd465-b334-40c1-8cb9-2aaf39be136f", "embedding": null, "metadata": {"page_label": "107", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58cd8407-99eb-444d-ad58-c1305be12e0d", "node_type": "4", "metadata": {"page_label": "107", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "48d922abb8e5f012eef4468d12d3a145f8cb69cf6dc049d99e0ffc05a90525b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "107Using asynchronous messaging to improve availability\n4 Order Service sends a ValidateOrderDetails message to Restaurant Service.\n5 Consumer Service receives a ValidateConsumerInfo message, verifies the con-\nsumer can place an order, and sends a ConsumerValidated message to Order\nService.\n6 Restaurant Service receives a ValidateOrderDetails message, verifies the\nmenu item are valid and that the restaurant can deliver to the order\u2019s delivery\naddress, and sends an OrderDetailsValidated message to Order Service.\n7 Order Service receives ConsumerValidated and OrderDetailsValidated and\nchanges the state of the order to VALIDATED.\n8 \u2026\nOrder Service can receive the ConsumerValidated and OrderDetailsValidated mes-\nsages in either order. It keeps track of whic h message it receives first by changing the\nstate of the order. If it receives the ConsumerValidated first, it changes the state of the\norder to CONSUMER_VALIDATED, whereas if it receives the OrderDetailsValidated mes-\nsage first, it changes its state to ORDER_DETAILS_VALIDATED. Order Service changes\nthe state of the Order to VALIDATED when it receives the other message.\nSynchronous\nKey\nAsynchronous Order Service\nClient\nConsumer Service Restaurant Service ...\ncreateOrder\nAsynchronousSynchronous\ncreate order\nupdate order\nupdate order\ncreateOrder\nValidateConsumerInfo\nValidateOrderDetails\nConsumerValidated\nOrderDetailsValidated\n...\nFigure 3.18 Order Service creates an order without invoking any other service. It then asynchronously \nvalidates the newly created Order by exchanging messages with other services, including Consumer Service \nand Restaurant Service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1633, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82cd9fe8-c2b0-46b2-8ce8-b413259a49fd": {"__data__": {"id_": "82cd9fe8-c2b0-46b2-8ce8-b413259a49fd", "embedding": null, "metadata": {"page_label": "108", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79589276-87b2-43b5-8d31-5b23582cc573", "node_type": "4", "metadata": {"page_label": "108", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ea3986c2940b07c3dea3cdc590da50866f48ea280e85d752c03cee87eb982947", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "108 CHAPTER 3 Interprocess communication in a microservice architecture\n After the Order has been validated, Order Service completes the rest of the order-\ncreation process, discussed in the next ch apter. What\u2019s nice about this approach is\nthat even if Consumer Service is down, for example, Order Service still creates orders\nand responds to its clients. Eventually, Consumer Service will come back up and pro-\ncess any queued messages, and orders will be validated.\n A drawback of a service responding befo re fully processing a request is that it\nmakes the client more complex. For example, Order Service makes minimal guaran-\ntees about the state of a newly created order when it returns a response. It creates the\norder and returns immediately before valid ating the order and authorizing the con-\nsumer\u2019s credit card. Consequently, in order for the client to know whether the order\nwas successfully created, either it must periodically poll or Order Service must send it\na  n o t i f i c a t i o n  m e s s a g e .  A s  c o m p l e x  a s  i t  s o u n d s ,  i n  m a n y  s i t u a t i o n s  t h i s  i s  t h e  p r e -\nferred approach\u2014especially because it also  addresses the distributed transaction man-\nagement issues I discuss in the next chapte r. In chapters 4 and 5, for example, I\ndescribe how Order Service uses this approach. \nSummary\n\uf0a1 The microservice architecture is a di stributed architecture, so interprocess\ncommunication plays a key role.\n\uf0a1 It\u2019s essential to carefully manage the evolution of a service\u2019s API. Backward-\ncompatible changes are the easiest to make because they don\u2019t impact clients. If\nyou make a breaking change to a service\u2019s API, it will typically need to support\nboth the old and new versions until its clients have been upgraded.\n\uf0a1 There are numerous IPC technologies, ea ch with different trade-offs. One key\ndesign decision is to choose either a synchronous remote procedure invocation\npattern or the asynchronous Messaging  pattern. Synchronous remote proce-\ndure invocation-based protocols, such as  REST, are the easiest to use. But ser-\nvices should ideally communicate using asynchronous messaging in order to\nincrease availability.\n\uf0a1 In order to prevent failures from casc ading through a system, a service client\nthat uses a synchronous protocol must be  designed to handle partial failures,\nwhich are when the invoked service is either down or exhibiting high latency. In\nparticular, it must use timeouts when making requests, limit the number of out-\nstanding requests, and use the Circuit breaker pattern to avoid making calls to a\nfailing service.\n\uf0a1 An architecture that uses synchronous protocols must include a service discov-\nery mechanism in order for clients to determine the network location of a ser-\nvice instance. The simplest approach is to use the service discovery mechanism\nimplemented by the deployment platform: the Server-side discovery and 3rd\nparty registration patterns. But an alternative approach is to implement service\ndiscovery at the application level: the Client-side discovery and Self registration", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3089, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c4faff0e-718e-4798-a4ad-2adf3c4b2fe5": {"__data__": {"id_": "c4faff0e-718e-4798-a4ad-2adf3c4b2fe5", "embedding": null, "metadata": {"page_label": "109", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9ac9b14-d0a0-4951-97ff-a5ddf3cc0616", "node_type": "4", "metadata": {"page_label": "109", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e8ab34e895c72c981d420433fa7110bcc14f3a20ea16900cb1273cccfaa0436d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "109Summary\npatterns. It\u2019s more work, but it does handle the scenario where services are run-\nning on multiple deployment platforms.\n\uf0a1 A good way to design a messaging-based architecture is to use the messages and\nchannels model, which abstracts the details of the underlying messaging system.\nYou can then map that design to a spec ific messaging infrastructure, which is\ntypically message broker\u2013based.\n\uf0a1 One key challenge when using messaging is atomically updating the database\nand publishing a message. A good solution is to use the Transactional outbox\npattern and first write the message to the database as part of the database trans-\naction. A separate process then retrieve s the message from the database using\neither the Polling publisher pattern or the Transaction log tailing pattern and\npublishes it to the message broker.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 835, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a889abfb-a530-416b-b650-13842f919275": {"__data__": {"id_": "a889abfb-a530-416b-b650-13842f919275", "embedding": null, "metadata": {"page_label": "110", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89e4cd78-3995-4145-b39a-228330a023c5", "node_type": "4", "metadata": {"page_label": "110", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "18f2d916f841410c5190de796e8a835d237e8eec06151f047b6b30b6f56e0210", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "110\nManaging transactions\nwith sagas\nWhen Mary started investigating the microservice architecture, one of her biggest\nconcerns was how to implement transactions  that span multiple services. Transac-\ntions are an essential ingredient of ever y enterprise application. Without transac-\ntions it would be impossible to maintain data consistency.\n ACID (Atomicity, Consistency, Isolation, Durability) transactions greatly simplify\nthe job of the developer by providing the illusion that each transaction has exclu-\nsive access to the data. In a microservice architecture, transactions that are within a\nsingle service can still use ACID transactions. The challenge, however, lies in imple-\nmenting transactions for operations that update data owned by multiple services.\nThis chapter covers\n\uf0a1 Why distributed transactions aren\u2019t a good fit for \nmodern applications\n\uf0a1 Using the Saga pattern to maintain data \nconsistency in a microservice architecture\n\uf0a1 Coordinating sagas using choreography and \norchestration\n\uf0a1 Using countermeasures to deal with the lack of \nisolation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1067, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69ee6c80-194a-4f26-a3c4-c86651b84035": {"__data__": {"id_": "69ee6c80-194a-4f26-a3c4-c86651b84035", "embedding": null, "metadata": {"page_label": "111", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "217e9b6c-cf1d-4f8b-a560-819bebee2df9", "node_type": "4", "metadata": {"page_label": "111", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0f233f8f9d1d41658c95bf978c3182791168598fb288b0a49c03621c763f6278", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "111Transaction management in a microservice architecture\nFor example, as described in chapter 2, the createOrder() operation spans numer-\nous services, including Order Service, Kitchen Service, and Accounting Service.\nOperations such as these need a transa ction management mechanism that works\nacross services.\n Mary discovered that, as mentioned in ch apter 2, the traditional approach to dis-\ntributed transaction management isn\u2019t a good choice for modern applications.\nInstead of an ACID transactions, an oper ation that spans services must use what\u2019s\nknown as a saga, a message-driven sequence of lo cal transactions, to maintain data\nconsistency. One challenge with sagas is that they are ACD (Atomicity, Consistency,\nDurability). They lack the isolation featur e of traditional ACID transactions. As a\nresult, an application must use what are known as countermeasures , design techniques\nthat prevent or reduce the impact of co ncurrency anomalies caused by the lack of\nisolation.\n In many ways, the biggest obstacle that Mary and the FTGO developers will face\nwhen adopting microservices is moving from a single database with ACID transactions\nto a multi-database architecture with ACD sagas. They\u2019re used to the simplicity of the\nACID transaction model. But in reality, even monolithic applications such as the FTGO\napplication typically don\u2019t use textbook ACID transactions. For example, many appli-\ncations use a lower transaction isolation leve l in order to improve performance. Also,\nmany important business processes, such as  transferring money between accounts at\ndifferent banks, are eventually consistent. Not even Starbucks uses two-phase commit\n(www.enterpriseintegrationpatterns.com/ramblings/18_starbucks.html).\n I begin this chapter by looking at the challenges of transaction management in the\nmicroservice architecture and explain why the traditional approach to distributed\ntransaction management isn\u2019t an option. Next I explain how to maintain data consis-\ntency using sagas. After that I look at th e two different ways of coordinating sagas:\nchoreography, where participants exchange events without a centralized point of con-\ntrol, and orchestration, where a centralized controller te lls the saga participants what\noperation to perform. I discuss how to use countermeasures to prevent or reduce the\nimpact of concurrency anomalies caused by the lack of isolation between sagas. Finally, I\ndescribe the implementation of an example saga.\n Let\u2019s start by taking a look at the chal lenge of managing transactions in a micro-\nservice architecture.\n4.1 Transaction management in a microservice \narchitecture\nAlmost every request handled by an enterpri se application is executed within a data-\nbase transaction. Enterprise application developers use frameworks and libraries that\nsimplify transaction management. Some frameworks and libraries provide a program-\nmatic API for explicitly beginning, committin g, and rolling back transactions. Other\nframeworks, such as the Spring framework,  provide a declarative mechanism. Spring\nprovides an @Transactional annotation that arranges for method invocations to be", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3138, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5fb37d8-71f0-4897-8511-1f8b922cd20f": {"__data__": {"id_": "e5fb37d8-71f0-4897-8511-1f8b922cd20f", "embedding": null, "metadata": {"page_label": "112", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6afd8bf-b9ca-4f4f-a2d1-fc34290cb157", "node_type": "4", "metadata": {"page_label": "112", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6dfccffcf619958813bafe6b551382aa3348f4cb992d86884c8affbb711eb57a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "112 CHAPTER 4 Managing transactions with sagas\nautomatically executed within a transaction. As a result, it\u2019s straightforward to write\ntransactional business logic.\n Or, to be more precise, transaction management is straightforward in a monolithic\napplication that accesses a single database. Transaction management is more chal-\nlenging in a complex monolithic application that uses multiple databases and mes-\nsage brokers. And in a microservice architec ture, transactions span multiple services,\neach of which has its own database. In this  situation, the application must use a more\nelaborate mechanism to manage transactions. As you\u2019ll learn, the traditional approach\nof using distributed transactions isn\u2019t a viable option for modern applications. Instead, a\nmicroservices-based application must use sagas.\n Before I explain sagas, let\u2019s first look at why transaction management is challeng-\ning in a microservice architecture.\n4.1.1 The need for distributed transactions in a microservice \narchitecture\nImagine that you\u2019re the FTGO developer responsible for implementing the create-\nOrder() system operation. As described in chap ter 2, this operation must verify that\nthe consumer can place an order, verify the order details, authorize the consumer\u2019s\ncredit card, and create an Order in the database. It\u2019s re latively straightforward to\nimplement this operation in the monolithic FTGO application. All the data required\nto validate the order is readily accessible. What\u2019s more, you can use an ACID transac-\ntion to ensure data consistency. You might use Spring\u2019s @Transactional annotation\non the createOrder() service method.\n In contrast, implementing the same oper ation in a microservice architecture is\nm u c h  m o r e  c o m p l i c a t e d .  A s  f i g u r e  4 . 1  s h o w s ,  t h e  n e e d e d  d a t a  i s  s c a t t e r e d  a r o u n d\nmultiple services. The createOrder() operation accesses data in numerous services.\nIt reads data from Consumer Service and updates data in Order Service, Kitchen\nService, and Accounting Service.\n Because each service has its own database, you need to use a mechanism to main-\ntain data consistency across those databases. \n4.1.2 The trouble with distributed transactions\nThe traditional approach to maintaining data consistency across multiple services,\ndatabases, or message brokers is to use distributed transactions. The de facto standard\nfor distributed transaction management is  the X/Open Distributed Transaction Pro-\ncessing (DTP) Model (X/Open XA\u2014see https://en.wikipedia.org/wiki/X/Open_XA).\nXA uses two-phase commit (2PC) to ensure that all part icipants in a transaction either\ncommit or rollback. An XA-compliant technology stack consists of XA-compliant data-\nbases and message brokers, database drivers, and messaging APIs, and an interprocess\ncommunication mechanism that propagates the XA global transaction ID. Most SQL\ndatabases are XA compliant, as are some message brokers. Java EE applications can,\nfor example, use JTA to perform distributed transactions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3041, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd2f7117-74fc-4ea9-9031-6ade7d746d53": {"__data__": {"id_": "dd2f7117-74fc-4ea9-9031-6ade7d746d53", "embedding": null, "metadata": {"page_label": "113", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2adf6d9a-21fe-4d05-8103-02f3f4fd65e8", "node_type": "4", "metadata": {"page_label": "113", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c11244f16997dd2268bba101a6f48f65eb9945a01318d7cf47be5413ab155f8d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "113Transaction management in a microservice architecture\nAs simple as this sounds, there are a vari ety of problems with distributed transac-\ntions. One problem is that many modern  technologies, including NoSQL databases\nsuch as MongoDB and Cassandra, don\u2019t support them. Also, distributed transactions\naren\u2019t supported by modern message brok ers such as RabbitMQ and Apache Kafka.\nAs a result, if you insist on using distributed transactions, you can\u2019t use many mod-\nern technologies.\n Another problem with distributed transactio ns is that they are a form of synchro-\nnous IPC, which reduces availability. In order for a distributed transaction to commit,\nall the participating services must be available. As described in chapter 3, the availabil-\nity is the product of the availability of all of the participants in the transaction. If a dis-\ntributed transaction involves two services that are 99.5% available, then the overall\navailability is 99%, which is significantly less. Each additional service involved in a dis-\ntributed transaction further reduces availability. There is even Eric Brewer\u2019s CAP theo-\nrem, which states that a syst em can only have two of the following three properties:\nAccountTicketConsumer\nData consistency required\nWritesWrites\ncreateOrder()\nReads\nAccounting ServiceKitchen Service\nOrder\nOrder Service\nConsumer Service\nThe createOrder() operation reads from\nConsumer Service and updates data\nin Order Service, Kitchen Service,\nand Accounting Service.Order\ncontroller\nFigure 4.1 The createOrder() operation updates data in several services. It must use a \nmechanism to maintain data consistency across those services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1650, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "202bfb89-adc1-49c8-a440-454097f35b5c": {"__data__": {"id_": "202bfb89-adc1-49c8-a440-454097f35b5c", "embedding": null, "metadata": {"page_label": "114", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e9a631a-2bc4-4fa0-b970-6cb3e8611fcd", "node_type": "4", "metadata": {"page_label": "114", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a09c417dec99abb810ec6225647fe4000b827c7d04f6a5969b441471d70d2092", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "114 CHAPTER 4 Managing transactions with sagas\nconsistency, availability, and partition tolerance ( https://en.wikipedia.org/wiki/CAP\n_theorem). Today, architects prefer to have a system that\u2019s available rather than one\nthat\u2019s consistent.\n On the surface, distributed transactions are appealing. From a developer\u2019s per-\nspective, they have the same programming model as local transactions. But because of\nthe problems mentioned so far, distributed transactions aren\u2019t a viable technology for\nmodern applications. Chapter 3 described how to send messages as part of a database\ntransaction without using distributed transa ctions. To solve the more complex prob-\nlem of maintaining data consistency in a microservice architecture, an application\nmust use a different mechanism that builds  on the concept of loosely coupled, asyn-\nchronous services. This is where sagas come in. \n4.1.3 Using the Saga pattern to maintain data consistency\nSagas are mechanisms to maintain data cons istency in a microservice architecture\nwithout having to use distributed transactions. You define a saga for each system com-\nmand that needs to update data in multiple services. A saga is a sequence of local\ntransactions. Each local transaction updates data within a single service using the\nfamiliar ACID transaction frameworks and libraries mentioned earlier.\nThe system operation initiates the first step  of the saga. The completion of a local\ntransaction triggers the execution of the next  local transaction. Later, in section 4.2,\nyou\u2019ll see how coordination of the steps is implemented using asynchronous messag-\ni n g .  A n  i m p o r t a n t  b e n e f i t  o f  a s y n c h r o n o u s  m e s s a g i n g  i s  t h a t  i t  e n s u r e s  t h a t  a l l  t h e\nsteps of a saga are executed, even if one or more of the saga\u2019s participants is temporar-\nily unavailable.\n Sagas differ from ACID transactions in a couple of important ways. As I describe in\ndetail in section 4.3, they lack the isolation property of ACID transactions. Also, because\neach local transaction commits its changes, a saga must be rolled back using compensat-\ning transactions. I talk more about compensating transactions later in this section. Let\u2019s\ntake a look at an example saga.\nAN EXAMPLE SAGA: THE CREATE ORDER SAGA\nThe example saga used throughout this chapter is the Create Order Saga, which is\nshown in figure 4.2. The Order Service implements the createOrder() operation\nusing this saga. The saga\u2019s first local transaction is initiated by the external request to\ncreate an order. The other five local transactions are each triggered by completion of\nthe previous one.\nPattern: Saga\nMaintain data consistency across servic es using a sequence of local transactions\nthat are coordinated using asynchronous messaging. See http://microservices.io/\npatterns/data/saga.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2844, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "275a12f1-4722-41e5-a1f1-2cab3d808e99": {"__data__": {"id_": "275a12f1-4722-41e5-a1f1-2cab3d808e99", "embedding": null, "metadata": {"page_label": "115", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "431e80fa-41f0-46e0-9d9b-b0cc8a551426", "node_type": "4", "metadata": {"page_label": "115", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8576f687a0761025a65d885adaf322d512439a596cf354caa259516c5f958480", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "115Transaction management in a microservice architecture\nThis saga consists of the following local transactions:\n1 Order Service\u2014Create an Order in an APPROVAL_PENDING state.\n2 Consumer Service\u2014Verify that the consumer can place an order.\n3 Kitchen Service\u2014Validate order details and create a Ticket in the CREATE\n_PENDING.\n4 Accounting Service\u2014Authorize consumer\u2019s credit card.\n5 Kitchen Service\u2014Change the state of the Ticket to AWAITING_ACCEPTANCE.\n6 Order Service\u2014Change the state of the Order to APPROVED.\nLater, in section 4.2, I describe how the services that participate in a saga communi-\ncate using asynchronous messaging. A service publishes a message when a local trans-\naction completes. This message then triggers the next step in the saga. Not only does\nusing messaging ensure the saga participants are loosely coupled, it also guarantees\nthat a saga completes. That\u2019s because if the recipient of a message is temporarily\nunavailable, the message broker buffers the message until it can be delivered.\n On the surface, sagas seem straightforward, but there are a few challenges to using\nthem. One challenge is the lack of isolatio n between sagas. Section 4.3 describes how\nto handle this problem. Another challeng e is rolling back changes when an error\noccurs. Let\u2019s take a look at how to do that. \nSAGAS USE COMPENSATING TRANSACTIONS TO ROLL BACK CHANGES\nA great feature of traditional ACID transact ions is that the business logic can easily\nroll back a transaction if it detects the violation of a business rule. It executes a ROLL-\nBACK statement, and the database undoes all the changes made so far. Unfortunately,\nsagas can\u2019t be automatically rolled back, because each step commits its changes to the\nlocal database. This means, for example, th at if the authorization of the credit card\nfails in the fourth step of the Create Order Saga, the FTGO application must explicitly\nOrder Service\nSaga\nCreate order\nTxn:1\nApprove order\nTxn:6\nConsumer Service\nCreate order\nTxn:1\nVerify consumer\nTxn:2\nKitchen Service\nCreate ticket\nTxn:3\nApprove ticket\nTxn:5\nAccounting Service\nAuthorize card\nTxn:4\nFigure 4.2 Creating an Order using a saga. The createOrder() operation is implemented by a \nsaga that consists of local transactions in several services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2264, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2fd077dc-490e-4261-bfda-30c9c3364fcc": {"__data__": {"id_": "2fd077dc-490e-4261-bfda-30c9c3364fcc", "embedding": null, "metadata": {"page_label": "116", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67e79bcd-c546-4bc1-9048-81765b455dad", "node_type": "4", "metadata": {"page_label": "116", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8ae5acdb242caf9ff5bcab8461c0600980d0e0c0b19e79d10d9634d6cf67877b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "116 CHAPTER 4 Managing transactions with sagas\nundo the changes made by the first three steps. You must write what are known as com-\npensating transactions.\n Suppose that the (n + 1)th transaction of a saga fails. The effects of the previous n\ntransactions must be undone. Conceptually, each of those steps, Ti, has a correspond-\ning compensating transaction, C i, which undoes the effects of the T i. To undo the\neffects of those first n steps, the saga must execute each C i in reverse order. The\nsequence of steps is T 1 \u2026 T n, Cn \u2026 C 1, as shown in figure 4.3. In this example, T n+1\nfails, which requires steps T1 \u2026 T n to be undone.\nThe saga executes the compensation transa ctions in reverse order of the forward\ntransactions: Cn \u2026 C 1. The mechanics of sequencing the Cis aren\u2019t any different than\nsequencing the Tis. The completion of Ci must trigger the execution of Ci-1.\n Consider, for example, the Create Order Saga. This saga can fail for a variety of\nreasons:\n\uf0a1 The consumer information is invalid or the consumer isn\u2019t allowed to create\norders.\n\uf0a1 The restaurant information is invalid or the restaurant is unable to accept orders.\n\uf0a1 The authorization of the consumer\u2019s credit card fails.\nIf a local transaction fails, the saga\u2019s coordination mechanism must execute compen-\nsating transactions that reject the Order and possibly the Ticket. Table 4.1 shows the\ncompensating transactions for each step of the Create Order Saga. It\u2019s important to\nnote that not all steps need compensating transactions. Read-only steps, such as verify-\nConsumerDetails(), don\u2019t need compensating tran sactions. Nor do steps such as\nauthorizeCreditCard() that are followed by steps that always succeed.\n Section 4.3 discusses how the first three steps of the Create Order Saga are termed\ncompensatable transactions  because they\u2019re followed by steps that can fail, how the\nfourth step is termed the saga\u2019s pivot transaction  because it\u2019s followed by steps that\nSaga\nT1 ... Tn\nTn+1\nFAILS Cn ... C\nThe changes made by T1...Tn\nhave been committed.\nThe compensating transactions undo\nthe changes made by T1...Tn.\n1\nFigure 4.3 When a step of a saga fails because of a business rule violation, the saga must explicitly \nundo the updates made by previous steps by executing compensating transactions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "000097a2-f78e-477f-a06d-e69e6fa54e1b": {"__data__": {"id_": "000097a2-f78e-477f-a06d-e69e6fa54e1b", "embedding": null, "metadata": {"page_label": "117", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b1860f2-ef2c-46c3-8e2f-48a2c65b2e6b", "node_type": "4", "metadata": {"page_label": "117", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "17542c59cad63b9c940627e364662dfe15fc926d95d83b1f7cf5831bdf0e031e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "117Coordinating sagas\nnever fail, and how the last two steps are termed retriable transactions  because they\nalways succeed.\n To see how compensating transactions are used, imagine a scenario where the\nauthorization of the consumer\u2019s credit card fails. In this scenario, the saga executes\nthe following local transactions:\n1 Order Service\u2014Create an Order in an APPROVAL_PENDING state.\n2 Consumer Service\u2014Verify that the consumer can place an order.\n3 Kitchen Service\u2014Validate order details and create a Ticket in the CREATE\n_PENDING state.\n4 Accounting Service\u2014Authorize consumer\u2019s credit card, which fails.\n5 Kitchen Service\u2014Change the state of the Ticket to CREATE_REJECTED.\n6 Order Service\u2014Change the state of the Order to REJECTED.\nThe fifth and sixth steps are compensating transactions that undo the updates made\nby Kitchen Service and Order Service, respectively. A saga\u2019s coordination logic is\nresponsible for sequencing the execution of  forward and compensating transactions.\nLet\u2019s look at how that works. \n4.2 Coordinating sagas\nA saga\u2019s implementation consists of logi c that coordinates the steps of the saga.\nWhen a saga is initiated by system comman d, the coordination logic must select and\ntell the first saga participant to execute a local transaction. Once that transaction\ncompletes, the saga\u2019s sequencing coordi nation selects and invokes the next saga\nparticipant. This process continues until th e saga has executed all the steps. If any\nlocal transaction fails, the saga must execute the compensating transactions in\nreverse order. There are a couple of differ ent ways to structure a saga\u2019s coordina-\ntion logic:\n\uf0a1 Choreography\u2014Distribute the decision making and sequencing among the saga\nparticipants. They primarily communicate by exchanging events.\nTable 4.1 The compensating transactions for the Create Order Saga\nStep Service Transaction Compensating transaction\n1 Order Service createOrder() rejectOrder()\n2 Consumer Service verifyConsumerDetails() \u2014\n3 Kitchen Service createTicket() rejectTicket()\n4 Accounting Service authorizeCreditCard() \u2014\n5 Kitchen Service approveTicket() \u2014\n6 Order Service approveOrder() \u2014", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2143, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f0b978d2-6900-4891-a257-00dc7b348cd5": {"__data__": {"id_": "f0b978d2-6900-4891-a257-00dc7b348cd5", "embedding": null, "metadata": {"page_label": "118", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a54db99-6b15-4df9-a2b7-034618c88018", "node_type": "4", "metadata": {"page_label": "118", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "034d7421adf8a187354ca871a82ceded7f1f4d8e7ec442cc2bf61d9897e3d8e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "118 CHAPTER 4 Managing transactions with sagas\n\uf0a1 Orchestration\u2014Centralize a saga\u2019s coordination logic in a saga orchestrator class.\nA saga orchestrator sends command messages to saga participants telling them\nwhich operations to perform.\nLet\u2019s look at each option, starting with choreography.\n4.2.1 Choreography-based sagas\nOne way you can implement a saga is by using choreography. When using choreogra-\nphy, there\u2019s no central coordinator telling the saga participants what to do. Instead,\nthe saga participants subscribe to each other\u2019s events and respond accordingly. To\nshow how choreography-based sagas work, I\u2019ll first describe an example. After that, I\u2019ll\ndiscuss a couple of design issues that you must address. Then I\u2019ll discuss the benefits\nand drawbacks of using choreography.\nIMPLEMENTING THE CREATE ORDER SAGA USING CHOREOGRAPHY\nFigure 4.4 shows the design of the choreography-based version of the Create Order\nSaga. The participants communicate by exchanging events. Each participant, starting\nwith the Order Service, updates its database and publishes an event that triggers the\nnext participant.\nAccounting Service\n4. createPendingAuthorization()\n6. authorizeCard()\nKitchen Service\n3. createTicket()\n6. approveTicket()\nOrder\nService\n1. createOrder()\n7. approveOrder()\nConsumer Service\n2. verifyConsumerDetails()\nOrder events\nMessage broker\nConsumer veri\ufb01ed\nPublish\nKey\nSubscribe\nConsumer events\nTicket events\nCredit card events\n2\nOrder created\n1\nTicket created\n3\nCredit card authorized\n5\n6\n4\n5a7\n5b\nFigure 4.4 Implementing the Create Order Saga using choreography. The saga participants communicate by \nexchanging events.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1638, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c5e06154-07e1-4ac1-8d23-ae3e66d2c3ef": {"__data__": {"id_": "c5e06154-07e1-4ac1-8d23-ae3e66d2c3ef", "embedding": null, "metadata": {"page_label": "119", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f37144aa-3ced-4359-8cc6-6a64e0806b27", "node_type": "4", "metadata": {"page_label": "119", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7c4d456574f7eb7addbdca4c0ad2d77c5aeb2ac36341a8a745cea200ca201dce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "119Coordinating sagas\nThe happy path through this saga is as follows:\n1 Order Service creates an Order in the APPROVAL_PENDING state and publishes\nan OrderCreated event.\n2 Consumer Service consumes the OrderCreated event, verifies that the con-\nsumer can place the order, and publishes a ConsumerVerified event.\n3 Kitchen Service consumes the OrderCreated event, validates the Order, cre-\nates a Ticket in a CREATE_PENDING state, and publishes the TicketCreated event.\n4 Accounting Service consumes the OrderCreated event and creates a Credit-\nCardAuthorization in a PENDING state.\n5 Accounting Service consumes the TicketCreated and ConsumerVerified\nevents, charges the consumer\u2019s credit card, and publishes the CreditCard-\nAuthorized event.\n6 Kitchen Service consumes the CreditCardAuthorized event and changes the\nstate of the Ticket to AWAITING_ACCEPTANCE.\n7 Order Service receives the CreditCardAuthorized events, changes the state of\nthe Order to APPROVED, and publishes an OrderApproved event.\nThe Create Order Saga must also handle the scenario where a saga participant rejects\nthe Order and publishes some kind of failure event. For example, the authorization of\nthe consumer\u2019s credit card might fail. The saga must execute the compensating trans-\nactions to undo what\u2019s already been done. Figure 4.5 shows the flow of events when\nthe AccountingService can\u2019t authorize the consumer\u2019s credit card.\n The sequence of events is as follows:\n1 Order Service creates an Order in the APPROVAL_PENDING state and publishes\nan OrderCreated event.\n2 Consumer Service consumes the OrderCreated event, verifies that the con-\nsumer can place the order, and publishes a ConsumerVerified event.\n3 Kitchen Service consumes the OrderCreated event, validates the Order, creates\na Ticket in a CREATE_PENDING state, and publishes the TicketCreated event.\n4 Accounting Service consumes the OrderCreated event and creates a Credit-\nCardAuthorization in a PENDING state.\n5 Accounting Service consumes the TicketCreated and ConsumerVerified\nevents, charges the consumer\u2019s  credit card, and publishes a Credit Card\nAuthorization Failed event.\n6 Kitchen Service consumes the Credit Card Authorization Failed event and\nchanges the state of the Ticket to REJECTED.\n7 Order Service consumes the Credit Card Authorization Failed event and\nchanges the state of the Order to REJECTED.\nAs you can see, the participants of choreo graphy-based sagas interact using publish/\nsubscribe. Let\u2019s take a closer look at some issues you\u2019ll need to consider when imple-\nmenting publish/subscribe-based communication for your sagas.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2594, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d53380bf-ef41-4f1c-b3d4-d70aaa5988cd": {"__data__": {"id_": "d53380bf-ef41-4f1c-b3d4-d70aaa5988cd", "embedding": null, "metadata": {"page_label": "120", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ad85d98-0f5d-4a6f-bde4-40141f7631f8", "node_type": "4", "metadata": {"page_label": "120", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5dd6776fd4236409630085083601a357ee4809032e9baeac074f850c6f3eae10", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "120 CHAPTER 4 Managing transactions with sagas\nRELIABLE EVENT-BASED COMMUNICATION\nThere are a couple of interservice communic ation-related issues that you must con-\nsider when implementing choreography-based sagas. The first issue is ensuring that a\nsaga participant updates its database and publishes an event as part of a database\ntransaction. Each step of a choreography -based saga updates the database and pub-\nlishes an event. For example, in the Create Order Saga, Kitchen Service receives a\nConsumer Verified event, creates a Ticket, and publishes a Ticket Created event.\nIt\u2019s essential that the database update and the publishing of the event happen atomi-\ncally. Consequently, to communicate reliably , the saga participants must use transac-\ntional messaging, described in chapter 3.\n The second issue you need to consider is ensuring that a saga participant must\nbe able to map each event that it rece ives to its own data. For example, when Order\nService receives a Credit Card Authorized event, it must be able to look up the\ncorresponding Order. The solution is for a saga pa rticipant to publish events con-\ntaining a correlation id , which is data that enables other participants to perform the\nmapping.\nAccounting Service\n4. createPendingAuthorization()\n6. authorizeCard()\nKitchen Service\n3. createTicket()\n6. rejectTicket()\nOrder\nService\n1. createOrder()\n7. rejectOrder()\nConsumer Service\n2. verifyConsumerDetails()\nOrder events\nMessage broker\nConsumer veri\ufb01ed\nPublish\nKey\nSubscribe\nConsumer events\nTicket events\nCredit card events\n2\nOrder created\n1\nTicket created\n3\nCredit card authorization failed\n5\n6\n4\n5a7\n5b\nFigure 4.5 The sequence of events in the Create Order Saga when the authorization of the consumer\u2019s credit \ncard fails. Accounting Service publishes the Credit Card Authorization Failed event, which causes \nKitchen Service to reject the Ticket, and Order Service to reject the Order.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1916, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb37d5b1-609e-4d15-a627-fce46fe36361": {"__data__": {"id_": "fb37d5b1-609e-4d15-a627-fce46fe36361", "embedding": null, "metadata": {"page_label": "121", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b960caa5-a7f1-4a76-a7a3-853f79ca0efa", "node_type": "4", "metadata": {"page_label": "121", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5b5cadc6af33a52eba72e55950bcfe036ec225412f41b092383284d92bdbf390", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "121Coordinating sagas\n For example, the participants of the Create Order Saga can use the orderId as a\ncorrelation ID that\u2019s passed from one participant to the next. Accounting Service pub-\nlishes a Credit Card Authorized event containing the orderId from the Ticket-\nCreated event. When Order Service receives a Credit Card Authorized event, it uses\nthe orderId to retrieve the corresponding Order. Similarly, Kitchen Service uses the\norderId from that event to retrieve the corresponding Ticket. \nBENEFITS AND DRAWBACKS OF CHOREOGRAPHY-BASED SAGAS\nChoreography-based sagas have several benefits:\n\uf0a1 Simplicity\u2014Services publish events when they create, update, or delete business\nobjects.\n\uf0a1 Loose coupling \u2014The participants subscribe to events and don\u2019t have direct knowl-\nedge of each other.\nAnd there are some drawbacks:\n\uf0a1 More difficult to understand\u2014Unlike with orchestration, there isn\u2019t a single place\nin the code that defines the saga. Inst ead, choreography distributes the imple-\nmentation of the saga among the services. Consequently, it\u2019s sometimes difficult\nfor a developer to understand how a given saga works.\n\uf0a1 Cyclic dependencies between the services \u2014The saga participants subscribe to each\nother\u2019s events, which often creates cyclic dependencies. For example, if you\ncarefully examine figure 4.4, you\u2019ll see that there are cyclic dependencies, such\nas Order Service \uf0ae Accounting Service \uf0ae Order Service. Although this isn\u2019t\nnecessarily a problem, cyclic dependencies are considered a design smell.\n\uf0a1 Risk of tight coupling\u2014Each saga participant needs to subscribe to all events that\naffect them. For example, Accounting Service must subscribe to all events that\ncause the consumer\u2019s credit card to be charged or refunded. As a result, there\u2019s\na risk that it would need to be update d in lockstep with the order lifecycle\nimplemented by Order Service.\nChoreography can work well for simple sa gas, but because of these drawbacks it\u2019s\noften better for more complex sagas to use orchestration. Let\u2019s look at how orches-\ntration works. \n4.2.2 Orchestration-based sagas\nOrchestration is another way to implemen t sagas. When using orchestration, you\ndefine an orchestrator class whose sole resp onsibility is to tell the saga participants\nwhat to do. The saga orchestrator communicates with the participants using command/\nasync reply-style interaction. To execute a saga step, it sends a command message to a\nparticipant telling it what operation to pe rform. After the saga participant has per-\nformed the operation, it sends a reply me ssage to the orchestrator. The orchestrator\nthen processes the message and determines which saga step to perform next.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df963388-2959-4735-b6ea-24af02db438d": {"__data__": {"id_": "df963388-2959-4735-b6ea-24af02db438d", "embedding": null, "metadata": {"page_label": "122", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd38be3f-4f6b-41a1-9d43-0c3129b258e5", "node_type": "4", "metadata": {"page_label": "122", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f78995921355444a306ed7ca7f247a08dde9b6476c62e9c0d54b6b071808f7b0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "122 CHAPTER 4 Managing transactions with sagas\n To show how orchestration-based sagas wo rk, I\u2019ll first describe an example. Then\nI\u2019ll describe how to model orchestration-based sagas as state machines. I\u2019ll discuss how\nto make use of transactional messaging to  ensure reliable communication between\nthe saga orchestrator and the saga particip ants. I\u2019ll then describe the benefits and\ndrawbacks of using orchestration-based sagas.\nIMPLEMENTING THE CREATE ORDER SAGA USING ORCHESTRATION\nFigure 4.6 shows the design of the orchestration-based version of the Create Order\nSaga. The saga is orchestrated by the CreateOrderSaga class, which invokes the saga\nparticipants using asynchronous request/response. This class keeps track of the pro-\ncess and sends command messages to saga participants, such as Kitchen Service and\nConsumer Service. The CreateOrderSaga class reads reply messages from its reply\nchannel and then determines the next step, if any, in the saga.\nAccounting\nService\nKitchen\nService\nConsumer\nServiceConsumer Service\nrequest channel Consumer veri\ufb01ed\n2\n4\n6\nVerify consumer\n1\nApprove\nrestaurant\norder\n7\nApprove\norder\n8\nCreate\nticket\n3\nAuthorize\ncard\n5\nCard\nauthorized\nMessage broker\nOrder Service\nCommand message\nKey\nReply message\nCreate order\nsaga reply channel\nKitchen Service\nrequest channel\nAccounting Service\nrequest channel\nOrder Service\nrequest channel\nCreate\norder saga\norchestrator\nTicket created\nFigure 4.6 Implementing the Create Order Saga using orchestration. Order Service \nimplements a saga orchestrator, which invokes the saga participants using asynchronous request/\nresponse.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1607, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c34398f7-258b-472f-9ae9-4c5c0a6e26a2": {"__data__": {"id_": "c34398f7-258b-472f-9ae9-4c5c0a6e26a2", "embedding": null, "metadata": {"page_label": "123", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a6c22e2-4b66-47fb-83b3-0b639c166f57", "node_type": "4", "metadata": {"page_label": "123", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "65e5465032f2c253c6a59646ae33edebdfc6433f2188c215c5a771ccfab146f5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "123Coordinating sagas\nOrder Service first creates an Order and a Create Order Saga orchestrator. After that,\nthe flow for the happy path is as follows:\n1 The saga orchestrator sends a Verify Consumer command to Consumer Service.\n2 Consumer Service replies with a Consumer Verified message.\n3 The saga orchestrator sends a Create Ticket command to Kitchen Service.\n4 Kitchen Service replies with a Ticket Created message.\n5 The saga orchestrator sends an Authorize Card message to Accounting Service.\n6 Accounting Service replies with a Card Authorized message.\n7 The saga orchestrator sends an Approve Ticket command to Kitchen Service.\n8 The saga orchestrator sends an Approve Order command to Order Service.\nNote that in final step, the saga or chestrator sends a command message to Order\nService, even though it\u2019s a component of Order Service. In principle, the Create\nOrder Saga could approve the Order by updating it directly. But in order to be consis-\ntent, the saga treats Order Service as just another participant.\n Diagrams such as figure 4.6 each depict one scenario for a saga, but a saga is likely\nto have numerous scenarios. For example, the Create Order Saga has four scenarios.\nIn addition to the happy path, the saga  can fail due to a failure in either Consumer\nService, Kitchen Service, or Accounting Service. It\u2019s useful, therefore, to model a\nsaga as a state machine, because it describes all possible scenarios. \nMODELING SAGA ORCHESTRATORS AS STATE MACHINES\nA good way to model a saga orches trator is as a state machine. A state machine  con-\nsists of a set of states and a set of tran sitions between states that are triggered by\nevents. Each transition can have an action , which for a saga is the invocation of a\nsaga participant. The transitions between states are triggered by the completion of a\nlocal transaction performed by a saga participant. The current state and the specific\noutcome of the local transaction determine the state transition and what action, if\nany, to perform. There are also effective testing strategies for state machines. As a\nresult, using a state machine model makes designing, implementing, and testing\nsagas easier.\n Figure 4.7 shows the state machine model for the Create Order Saga. This state\nmachine consists of numerous states, including the following:\n\uf0a1 Verifying Consumer\u2014The initial state. When in this state, the saga is waiting\nfor the Consumer Service to verify that the consumer can place the order.\n\uf0a1 Creating Ticket\u2014The saga is waiting for a reply to the Create Ticket command.\n\uf0a1 Authorizing Card\u2014Waiting for Accounting Service to authorize the con-\nsumer\u2019s credit card.\n\uf0a1 Order Approved\u2014A final state indicating that the saga completed successfully.\n\uf0a1 Order Rejected\u2014A final state indicating that the Order was rejected by one of\nthe participants.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2821, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96bfb559-5459-4fc2-a575-0423e3e1b06b": {"__data__": {"id_": "96bfb559-5459-4fc2-a575-0423e3e1b06b", "embedding": null, "metadata": {"page_label": "124", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2ec86096-ee3f-4003-ba4e-e86569859412", "node_type": "4", "metadata": {"page_label": "124", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "46e0cffe97f438ccc3385dac80aa4f04fa15783c16eaa7ac05c821697498b02b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "124 CHAPTER 4 Managing transactions with sagas\nThe state machine also defines numerous state transitions. For example, the state\nmachine transitions from the Creating Ticket state to either the Authorizing Card\nor the Rejected Order state. It transitions to the Authorizing Card state when it\nreceives a successful reply to the Create Ticket command. Alternatively, if Kitchen\nService couldn\u2019t create the Ticket, the state machine transitions to the Rejected\nOrder state.\n The state machine\u2019s initial action is to send the VerifyConsumer command to\nConsumer Service. The response from Consumer Service triggers the next state tran-\nsition. If the consumer was successfully verified, the saga creates the Ticket and tran-\nsitions to the Creating Ticket state. But if the consumer verification failed, the saga\nrejects the Order and transitions to the Rejecting Order state. The state machine\nundergoes numerous other state transitions, driven by the responses from saga partici-\npants, until it reaches a final state of either Order Approved or Order Rejected. \nVeri\ufb01ng\nconsumer\nRejecting\norder\nCreating\nticket\nAuthorizing\ncard\nRejecting\nticket\nApproving\nticket\nApproving\norder\nOrder\napproved\nOrder\nrejected\n/Send VerifyConsumer\nConsumerVeri\ufb01cationFailed/\nsend RejectOrder\nTicket creation failed/\nsend RejectOrder\nConsumerVeri\ufb01ed/\nsend CreateRestaurantOrder\nTicket created/\nsend AuthorizeCard\nCard authorized/\nsend ApproveTicket\nTicket approved/\nsend ApproveOrder\nOrder approved\nCard authorization failed/\nsend RejectTicket\nFigure 4.7 The state machine model for the Create Order Saga", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1583, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1cf8f03-5d48-4ff7-acea-5954d5ffba58": {"__data__": {"id_": "a1cf8f03-5d48-4ff7-acea-5954d5ffba58", "embedding": null, "metadata": {"page_label": "125", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14e56610-9479-44f7-a240-6e4e823d8726", "node_type": "4", "metadata": {"page_label": "125", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "68d4f1448a1c33e9cc1320fde8ca871c3d1df6c2cf47914c2ba05e5d99388c26", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "125Coordinating sagas\nSAGA ORCHESTRATION AND TRANSACTIONAL MESSAGING\nEach step of an orchestration-based saga  consists of a service updating a database\nand publishing a message. For example, Order Service persists an Order and a\nCreate Order Saga orchestrator and sends a message to the first saga participant. A\nsaga participant, such as Kitchen Service, handles a command message by updat-\ning its database and sending a reply message. Order Service processes the partici-\npant\u2019s reply message by updating the state of the saga orchestrator and sending a\ncommand message to the next saga participan t. As described in chapter 3, a service\nmust use transactional mess aging in order to atomically update the database and\npublish messages. Later on in section 4.4,  I\u2019ll describe the implementation of the\nCreate Order Saga orchestrator in more detail, in cluding how it uses transaction\nmessaging.\n Let\u2019s take a look at the benefits and drawbacks of using saga orchestration. \nBENEFITS AND DRAWBACKS OF ORCHESTRATION-BASED SAGAS\nOrchestration-based sagas have several benefits:\n\uf0a1 Simpler dependencies \u2014One benefit of orchestration is that it doesn\u2019t introduce\ncyclic dependencies. The saga orchestrator invokes the saga participants, but\nthe participants don\u2019t invoke the orchestrator. As a result, the orchestrator\ndepends on the participants but not vi ce versa, and so there are no cyclic\ndependencies.\n\uf0a1 Less coupling \u2014Each service implements an API that is invoked by the orches-\ntrator, so it does not need to know about the events published by the saga\nparticipants.\n\uf0a1 Improves separation of concerns and simplifies the business logic \u2014The saga coordina-\ntion logic is localized in the saga orch estrator. The domain objects are simpler\nand have no knowledge of the sagas that they participate in. For example, when\nusing orchestration, the Order class has no knowledge of any of the sagas, so it\nhas a simpler state machine model. During the execution of the Create Order\nSaga, it transitions directly from the APPROVAL_PENDING state to the APPROVED\nstate. The Order class doesn\u2019t have any intermediate states corresponding to the\nsteps of the saga. As a result, the business is much simpler.\nOrchestration also has a drawback: the risk of centralizing too much business logic in\nthe orchestrator. This results in a design where the smart orchestrator tells the dumb\nservices what operations to do. Fortunately, you can avoid this problem by designing\norchestrators that are solely responsible for sequencing and don\u2019t contain any other\nbusiness logic.\n I recommend using orchestration for all but the simplest sagas. Implementing the\ncoordination logic for your sagas is just one of the design problems you need to solve.\nAnother, which is perhaps the biggest challe nge that you\u2019ll face when using sagas, is\nhandling the lack of isolation. Let\u2019s take a look at that problem and how to solve it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2906, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b3cebce-c75e-4f95-b39e-46724b2d30fa": {"__data__": {"id_": "7b3cebce-c75e-4f95-b39e-46724b2d30fa", "embedding": null, "metadata": {"page_label": "126", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ea10a54-a0fc-4c84-8243-a9fca6af0ac1", "node_type": "4", "metadata": {"page_label": "126", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4dde7fa6ad04cfb3aa4b54542a9343117cb6747cb60528f5b84b2322473f9033", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "126 CHAPTER 4 Managing transactions with sagas\n4.3 Handling the lack of isolation\nThe I in ACID stands for isolation. The isolation property of ACID transactions ensures\nthat the outcome of executing multiple transactions concurrently is the same as if they\nwere executed in some serial order. The database provides the illusion that each ACID\ntransaction has exclusive access to the data. Isolation makes it a lot easier to write busi-\nness logic that executes concurrently.\n The challenge with using sagas is that they lack the isolation property of ACID\ntransactions. That\u2019s because the updates made by each of a saga\u2019s local transactions\nare immediately visible to other sagas once  that transaction commits. This behavior\ncan cause two problems. First, other sagas can change the data accessed by the saga\nwhile it\u2019s executing. And other sagas can read its data before the saga has completed\nits updates, and consequently can be expose d to inconsistent data. You can, in fact,\nconsider a saga to be ACD:\n\uf0a1 Atomicity\u2014The saga implementation ensures that all transactions are executed\nor all changes are undone.\n\uf0a1 Consistency\u2014Referential integrity within a service is handled by local databases.\nReferential integrity across services is handled by the services.\n\uf0a1 Durability\u2014Handled by local databases.\nThis lack of isolation potentially causes what the database literature calls anomalies. An\nanomaly is when a transaction reads or writes data in a way that it wouldn\u2019t if transac-\ntions were executed one at time. When an anomaly occurs, the outcome of executing\nsagas concurrently is different than if they were executed serially.\n On the surface, the lack of isolation so unds unworkable. But in practice, it\u2019s com-\nmon for developers to accept reduced isolation in return for higher performance. An\nRDBMS lets you specify the isolation level for each transaction ( https://dev.mysql\n.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html). The default iso-\nlation level is usually an isolation level that \u2019s weaker than full isolation, also known as\nserializable transactions. Real-world data base transactions are often different from\ntextbook definitions of ACID transactions.\n The next section discusses a set of saga de sign strategies that deal with the lack of\nisolation. These strategies are known as countermeasures. Some countermeasures imple-\nment isolation at the application level.  Other countermeasure s reduce the business\nrisk of the lack of isolation. By using countermeasures, you can write saga-based busi-\nness logic that works correctly.\n I\u2019ll begin the section by describing the anomalies that are caused by the lack of iso-\nlation. After that, I\u2019ll talk about countermeasures that either eliminate those anoma-\nlies or reduce their business risk.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2787, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "649d1fed-593d-49c4-82ce-68f11218e5f5": {"__data__": {"id_": "649d1fed-593d-49c4-82ce-68f11218e5f5", "embedding": null, "metadata": {"page_label": "127", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27911c6d-42dd-4c7c-985b-6eea07ab82e7", "node_type": "4", "metadata": {"page_label": "127", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "44f365b3f5b03726bbb2dfdd607789c77e07bca4a3fde922da0c65898ccc938a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "127Handling the lack of isolation\n4.3.1 Overview of anomalies\nThe lack of isolation can cause the following three anomalies:\n\uf0a1 Lost updates\u2014One saga overwrites without reading changes made by another saga.\n\uf0a1 Dirty reads \u2014A transaction or a saga reads the updates made by a saga that has\nnot yet completed those updates.\n\uf0a1 Fuzzy/nonrepeatable reads\u2014Two different steps of a saga read the same data and\nget different results because another saga has made updates.\nAll three anomalies can occur, but the first two are the most common and the most\nchallenging. Let\u2019s take a look at those two types of anomaly, starting with lost updates.\nLOST UPDATES\nA lost update anomaly occurs when one saga  overwrites an update made by another\nsaga. Consider, for example, the following scenario:\n1 The first step of the Create Order Saga creates an Order.\n2 While that saga is executing, the Cancel Order Saga cancels the Order.\n3 The final step of the Create Order Saga approves the Order.\nIn this scenario, the Create Order Saga ignores the update made by the Cancel Order\nSaga and overwrites it. As a result, the FTGO application will ship an order that the\ncustomer had cancelled. Later in this section, I\u2019ll show how to prevent lost updates. \nDIRTY READS\nA dirty read occurs when one saga reads data that\u2019s in the middle of being updated by\nanother saga. Consider, for example, a vers ion of the FTGO application store where\nconsumers have a credit limit. In this application, a saga that cancels an order consists\nof the following transactions:\n\uf0a1 Consumer Service\u2014Increase the available credit.\n\uf0a1 Order Service\u2014Change the state of the Order to cancelled.\n\uf0a1 Delivery Service\u2014Cancel the delivery.\nLet\u2019s imagine a scenario that interleaves the execution of the Cancel Order and Create\nOrder Sagas, and the Cancel Order Saga is rolled back because it\u2019s too late to cancel\nthe delivery. It\u2019s possible that the sequence of transactions that invoke the Consumer\nService is as follows:\n1 Cancel Order Saga\u2014Increase the available credit.\n2 Create Order Saga\u2014Reduce the available credit.\n3 Cancel Order Saga\u2014A compensating transaction that reduces the available credit.\nIn this scenario, the Create Order Saga does a dirty read of the available credit that\nenables the consumer to place an order that exceeds their credit limit. It\u2019s likely that\nthis is an unacceptable risk to the business.\n Let\u2019s look at how to prevent this and other kinds of anomalies from impacting an\napplication.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2467, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7162eac3-6d6a-4760-a397-0bbfb9213d41": {"__data__": {"id_": "7162eac3-6d6a-4760-a397-0bbfb9213d41", "embedding": null, "metadata": {"page_label": "128", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "026253c5-92e8-4236-9e23-5b46842bb608", "node_type": "4", "metadata": {"page_label": "128", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6dc73ca7463a10c5726dfb4caa7010af234977f235138b1c033dcb4ec8a2d3b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "128 CHAPTER 4 Managing transactions with sagas\n4.3.2 Countermeasures for handling the lack of isolation\nThe saga transaction model is ACD, and its lack of isolation can result in anomalies\nthat cause applications to misbehave. It\u2019s the responsibility of the developer to write\nsagas in a way that either prevents the an omalies or minimizes their impact on the\nbusiness. This may sound like a daunting task, but you\u2019ve already seen an example of a\nstrategy that prevents anomalies. An Order\u2019s use of *_PENDING states, such as APPROVAL\n_PENDING, is an example of one such strategy. Sagas that update Orders, such as the\nCreate Order Saga, begin by setting the state of an Order to *_PENDING. The *_PENDING\nstate tells other transactions that the Order is being updated by a saga and to act\naccordingly.\n An Order\u2019s use of *_PENDING states is an example of what the 1998 paper \u201cSeman-\ntic ACID properties in multidatabases using remote procedure calls and update prop-\nagations\u201d by Lars Frank and Torben U. Zahle calls a semantic lock countermeasure\n(https://dl.acm.org/citation.cfm?id=284472.284478). The paper describes how to deal\nwith the lack of transaction isolation in multi-database architectures that don\u2019t use dis-\ntributed transactions. Many of its ideas are useful when designing sagas. It describes a\nset of countermeasures for handling anomalies caused by lack of isolation that either\nprevent one or more anomalies or minimize their impact on the business. The counter-\nmeasures described by this paper are as follows:\n\uf0a1 Semantic lock\u2014An application-level lock.\n\uf0a1 Commutative updates\u2014Design update operations to be executable in any order.\n\uf0a1 Pessimistic view\u2014Reorder the steps of a saga to minimize business risk.\n\uf0a1 Reread value\u2014Prevent dirty writes by rereading data to verify that it\u2019s unchanged\nbefore overwriting it.\n\uf0a1 Version file\u2014Record the updates to a record so that they can be reordered.\n\uf0a1 By value \u2014Use each request\u2019s business risk to dynamically select the concur-\nrency mechanism.\nLater in this section, I describe each of  these countermeasures, but first I want to\nintroduce some terminology for describing the structure of  a saga that\u2019s useful when\ndiscussing countermeasures.\nTHE STRUCTURE OF A SAGA\nThe countermeasures paper mentioned in the last section defines a useful model for\nthe structure of a saga. In this model, shown in figure 4.8, a saga consists of three types\nof transactions:\n\uf0a1 Compensatable transactions\u2014Transactions that can potentially be rolled back using\na compensating transaction.\n\uf0a1 Pivot transaction \u2014The go/no-go point in a saga. If the pivot transaction com-\nmits, the saga will run until completion. A pivot transaction can be a transaction\nthat\u2019s neither compensatable nor retriable. Alternatively, it can be the last com-\npensatable transaction or the first retriable transaction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2840, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b921209e-0e6d-47c3-9c47-9102dd061774": {"__data__": {"id_": "b921209e-0e6d-47c3-9c47-9102dd061774", "embedding": null, "metadata": {"page_label": "129", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6df83b9c-39fc-4f5a-9d24-699b883d9943", "node_type": "4", "metadata": {"page_label": "129", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e8452a900c6631fc6b417332e62f3477f1bdde9ca9e17e1e508f5ec53a07e7a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "129Handling the lack of isolation\n\uf0a1 Retriable transactions\u2014Transactions that follow the pivot transaction and are guar-\nanteed to succeed.\nIn the Create Order Saga, the createOrder(), verifyConsumerDetails(), and create-\nTicket() steps are compensatable transactions. The createOrder() and create-\nTicket() transactions have compensating transactions that undo their updates. The\nverifyConsumerDetails() transaction is read-only, so doesn\u2019t need a compensating\ntransaction. The authorizeCreditCard() transaction is this saga\u2019s pivot transaction. If\nthe consumer\u2019s credit card can be authorized, this saga is guaranteed to complete. The\napproveTicket() and approveOrder() steps are retriable transactions that follow the\npivot transaction.\n The distinction between compensatable tr ansactions and retriable transactions is\nespecially important. As you\u2019ll see, each type of transaction plays a different role in the\ncountermeasures. Chapter 13 states that wh en migrating to microservices, the mono-\nlith must sometimes participate in sagas and that it\u2019s significantly simpler if the mono-\nlith only ever needs to execute retriable transactions.\n Let\u2019s now look at each countermeasure, starting with the semantic lock counter-\nmeasure.\nCOUNTERMEASURE: SEMANTIC LOCK\nWhen using the semantic lock countermeasure, a saga\u2019s compensatable transaction\nsets a flag in any record that it creates or updates. The flag indicates that the record\nStep\n1\n2\n3\n4\n5\n6\nService\nOrder Service\nConsumer Service\nKitchen Service\nAccounting Service\nRestaurant Order Service\nOrder Service\nTransaction\ncreateOrder()\nverifyConsumerDetails()\ncreateTicket()\nauthorizeCreditCard()\napproveRestaurantOrder()\napproveOrder()\nCompensation Transaction\nrejectOrder()\n-\nrejectTicket()\n-\n-\n-\nCompensatable transactions:\nMust support roll back\nPivot transactions:\nThe saga\u2019s go/no-go transaction.\nIf it succeeds, then the saga runs\nto completion.\nRetriable transactions:\nGuaranteed to complete\nFigure 4.8 A saga consists of three different types of transactions: compensatable transactions, \nwhich can be rolled back, so have a compensating transaction, a pivot transaction, which is the \nsaga\u2019s go/no-go point, and retriable transactions, which are transactions that don\u2019t need to be \nrolled back and are guaranteed to complete.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "37e19d7d-1cdb-4584-b1a1-300839ecb6bc": {"__data__": {"id_": "37e19d7d-1cdb-4584-b1a1-300839ecb6bc", "embedding": null, "metadata": {"page_label": "130", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95a0c38c-6d33-4a41-964b-2c3fd70da37d", "node_type": "4", "metadata": {"page_label": "130", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ecabc7a2a73c2e9bd88c8a219add937da97e0c7d16ec0c1019c5b3b5e3f8792e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "130 CHAPTER 4 Managing transactions with sagas\nisn\u2019t committed and could potentially change. The flag can either be a lock that prevents\nother transactions from accessing the record  or a warning that indicates that other\ntransactions should treat that record with su spicion. It\u2019s cleared by either a retriable\ntransaction\u2014saga is completing successfu lly\u2014or by a compensating transaction: the\nsaga is rolling back.\n The Order.state field is a great example of a semantic lock. The *_PENDING states,\nsuch as APPROVAL_PENDING and REVISION_PENDING, implement a semantic lock. They\ntell other sagas that access an Order that a saga is in the process of updating the Order.\nFor instance, the first step of the Create Order Saga, which is a compensatable trans-\naction, creates an Order in an APPROVAL_PENDING state. The final step of the Create\nOrder Saga, which is a retriable transaction, changes the field to APPROVED. A compen-\nsating transaction changes the field to REJECTED.\n Managing the lock is only half the problem. You also need to decide on a case-by-\ncase basis how a saga should deal with a record that has been locked. Consider, for\nexample, the cancelOrder() system command. A client might invoke this operation\nto cancel an Order that\u2019s in the APPROVAL_PENDING state.\n There are a few different ways to handle this scenario. One option is for the cancel-\nOrder() system command to fail and tell the client to try again later. The main benefit\nof this approach is that it\u2019s simple to implement. The drawback, however, is that it\nmakes the client more complex because it has to implement retry logic.\n Another option is for cancelOrder() to block until the lock  is released. A benefit\nof using semantic locks is that they essentially recreate the isolation provided by ACID\ntransactions. Sagas that update the same re cord are serialized, which significantly\nreduces the programming effort. Another benefit is that they remove the burden of\nretries from the client. The drawback is that the application must manage locks. It\nmust also implement a deadlock detection algorithm that performs a rollback of a\nsaga to break a deadlock and re-execute it. \nCOUNTERMEASURE: COMMUTATIVE UPDATES\nOne straightforward countermeasure is to design the update operations to be com-\nmutative. Operations are commutative if they can be executed in any order. An\nAccount\u2019s debit() and credit() operations are commutative (if you ignore overdraft\nchecks). This countermeasure is useful because it eliminates lost updates.\n Consider, for example, a scenario where a saga needs to be rolled back after a com-\npensatable transaction has debited (or credited) an account. The compensating trans-\naction can simply credit (or debit) th e account to undo the update. There\u2019s no\npossibility of overwriting updates made by other sagas. \nCOUNTERMEASURE: PESSIMISTIC VIEW\nAnother way to deal with the lack of isolation is the pessimistic view countermeasure. It\nreorders the steps of a saga to minimize business risk due to a dirty read. Consider, for\nexample, the scenario earlier used to describe the dirty read anomaly. In that scenario,\nthe Create Order Saga performed a dirty read of the available credit and created an", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3210, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6e774807-4b4d-48cc-a0ea-c332d2326cd2": {"__data__": {"id_": "6e774807-4b4d-48cc-a0ea-c332d2326cd2", "embedding": null, "metadata": {"page_label": "131", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "169306d0-9f5f-486b-91f1-182f7df1fc76", "node_type": "4", "metadata": {"page_label": "131", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "71a3c80d1df0eadcd4d0197cde930256c814d782e3ec5ae931e5d085e775428a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "131Handling the lack of isolation\norder that exceeded the consumer credit limit. To reduce the risk of that happening,\nthis countermeasure would reorder the Cancel Order Saga:\n1 Order Service\u2014Change the state of the Order to cancelled.\n2 Delivery Service\u2014Cancel the delivery.\n3 Customer Service\u2014Increase the available credit.\nIn this reordered version of the saga, the av ailable credit is increased in a retriable\ntransaction, which eliminates the possibility of a dirty read. \nCOUNTERMEASURE: REREAD VALUE\nThe reread value countermeasure prevents lost updat es. A saga that uses this counter-\nmeasure rereads a record before updating it, verifies that it\u2019s unchanged, and then\nupdates the record. If the record has changed, the saga aborts and possibly restarts. This\ncountermeasure is a form of the Optimistic Offline Lock pattern (https://martinfowler\n.com/eaaCatalog/optimisticOfflineLock.html).\n The Create Order Saga could use this countermeasure to handle the scenario\nwhere the Order is cancelled while it\u2019s in the process of being approved. The transac-\ntion that approves the Order verifies that the Order is unchanged since it was created\nearlier in the saga. If it\u2019s unchanged, the transaction approves the Order. But if the\nOrder has been cancelled, the transaction aborts the saga, which causes its compensat-\ning transactions to be executed. \nCOUNTERMEASURE: VERSION FILE\nThe version file countermeasure is so named because it records the operations that are\nperformed on a record so that it can reorder them. It\u2019s a way to turn noncommutative\noperations into commutative operations. To see how this countermeasure works, con-\nsider a scenario where the Create Order Saga executes concurrently with a Cancel\nOrder Saga. Unless the sagas use the semantic lock countermeasure, it\u2019s possible that\nthe Cancel Order Saga cancels the authorization of the consumer\u2019s credit card before\nthe Create Order Saga authorizes the card.\n One way for the Accounting Service to handle these out-of-order requests is for it\nto record the operations as they arrive and then execute them in the correct order. In\nthis scenario, it would first record the Cancel Authorization request. Then, when the\nAccounting Service receives the subsequent Authorize Card request, it would notice\nthat it had already received the Cancel Authorization request and skip authorizing\nthe credit card. \nCOUNTERMEASURE: BY VALUE\nThe final countermeasure is the by value countermeasure. It\u2019s a strategy for selecting\nconcurrency mechanisms based on business risk. An application that uses this\ncountermeasure uses the properties of ea ch request to decide between using sagas\nand distributed transactions. It executes lo w-risk requests using sagas, perhaps apply-\ning the countermeasures described in the preceding section. But it executes high-risk\nrequests involving, for example, large amounts of money, using distributed transactions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2913, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "268f11ef-7207-4cb3-b407-e79a6862b6a0": {"__data__": {"id_": "268f11ef-7207-4cb3-b407-e79a6862b6a0", "embedding": null, "metadata": {"page_label": "132", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2b6c2aa3-2db3-4dca-9e56-1d803f414ea4", "node_type": "4", "metadata": {"page_label": "132", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6ed5155c98980d7d02be58a4226e32cf679027999c87fb99e4f362d1c9b067df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "132 CHAPTER 4 Managing transactions with sagas\nThis strategy enables an application to dynamically make trade-offs about business\nrisk, availability, and scalability.\n I t \u2019 s  l i k e l y  t h a t  y o u \u2019 l l  n e e d  t o  u s e  one or more of these countermeasures when\nimplementing sagas in your application. Le t\u2019s look at the detailed design and imple-\nmentation of the Create Order Saga, which uses the semantic lock countermeasure. \n4.4 The design of the Order Service and \nthe Create Order Saga\nNow that we\u2019ve looked at various saga design and implementation issues, let\u2019s see an\nexample. Figure 4.9 shows the design of Order Service. The service\u2019s business logic\nconsists of traditional busi ness logic classes, such as Order Service and the Order\nDe\ufb01nes the Restaurant Order\nService\u2019s messaging API\nSends commands to\nsaga participants\nOrchestrator for the\nCreate Order Saga\nProcesses replies from\nsaga participants\nHandles commands sent by the the\nCreate Order Saga to the Order Service\nOrderServiceRequests\nAccountingServiceRequests\nConsumerServiceRequests\nKitchenServiceRequests\ncreateOrder()\ncancelOrder()\n...\nOrder Service\ncontroller\nOrder\ncommand\nhandlers\nCommand\nmessage\npublisher\nCreateOrderSagaReplies\nReply\nconsumer\nOrderService\nCreateOrder\nSaga\nOrderService\nProxy\nKitchenService\nProxy\nOrder\ncreateOrder()\ncancelOrder()\napproveOrder()\nrejectOrder()\n...\nOrderRepository\nsave()\n\ufb01ndById()\n...\nFigure 4.9 The design of the Order Service and its sagas", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1468, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ba093aac-f002-4be3-8167-12465d426fef": {"__data__": {"id_": "ba093aac-f002-4be3-8167-12465d426fef", "embedding": null, "metadata": {"page_label": "133", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "81a15016-a368-4998-9127-894dcbacf33d", "node_type": "4", "metadata": {"page_label": "133", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2aaacf415f12fdf251a2d627db2054f879ac8b1f6764a0392e11494329b2b512", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "133The design of the Order Service and the Create Order Saga\nentity. There are also saga orch estrator classes, including the CreateOrderSaga class,\nwhich orchestrates Create Order Saga. Also, because Order Service participates in its\nown sagas, it has an OrderCommandHandlers adapter class that handles command mes-\nsages by invoking OrderService.\n Some parts of Order Service should look familiar. As in a traditional application,\nthe core of the business logic is implemented by the OrderService, Order, and Order-\nRepository classes. In this chapter, I\u2019ll briefly describe these classes. I describe them\nin more detail in chapter 5.\n What\u2019s less familiar about Order Service are the saga-related classes. This service is\nboth a saga orchestrator and a saga participant. Order Service has several saga orches-\ntrators, such as CreateOrderSaga. The saga orchestrators send command messages to a\nsaga participant using a saga participant proxy class, such as KitchenServiceProxy and\nOrderServiceProxy. A saga participant proxy define s a saga participant\u2019s messaging\nAPI. Order Service also has an OrderCommandHandlers class, which handles the com-\nmand messages sent by sagas to Order Service.\n Let\u2019s look in more detail at the design, starting with the OrderService class.\n4.4.1 The OrderService class\nThe OrderService class is a domain service called by the service\u2019s API layer. It\u2019s\nresponsible for creating and managing orders. Figure 4.10 shows OrderService and\nsome of its collaborators. OrderService creates and updates Orders, invokes the\nOrderRepository to persist Orders, and creates sagas, such as the CreateOrderSaga,\nusing the SagaManager. The SagaManager class is one of the classes provided by the\nEventuate Tram Saga framework, which is a framework for writing saga orchestrators\nand participants, and is discussed a little later in this section.\ncreateOrder()\n...\nOrderService\nsave()\n\ufb01ndOne()\n...\nOrderRepository\ncreate(..)\nSagaManager\nOrder\nCreateOrder\nSaga\nFigure 4.10 OrderService creates and updates Orders, invokes the \nOrderRepository to persist Orders, and creates sagas, including the \nCreateOrderSaga.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2129, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd700137-7b24-4ead-91fa-1ca1459a7a85": {"__data__": {"id_": "bd700137-7b24-4ead-91fa-1ca1459a7a85", "embedding": null, "metadata": {"page_label": "134", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "203f4ced-483b-4e62-ba43-90d1992ef1a2", "node_type": "4", "metadata": {"page_label": "134", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fb146f3eb12dd1d5d174471c6639748aeb631c443be75248b3a2df99d0f3fa51", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "134 CHAPTER 4 Managing transactions with sagas\nI\u2019ll discuss this class in more detail in chapter 5. For now, let\u2019s focus on the create-\nOrder() method. The following listing shows OrderService\u2019s createOrder() method.\nThis method first creates an Order and then creates an CreateOrderSaga to validate\nthe order.\n@Transactional\npublic class OrderService {\n@Autowired\nprivate SagaManager<CreateOrderSagaState> createOrderSagaManager;\n@Autowired\nprivate OrderRepository orderRepository;\n@Autowired\nprivate DomainEventPublisher eventPublisher;\npublic Order createOrder(OrderDetails orderDetails) {\n...\nResultWithEvents<Order> orderAndEvents = Order.createOrder(...);  \nOrder order = orderAndEvents.result;\norderRepository.save(order);\neventPublisher.publish(Order.class,\nLong.toString(order.getId()),\norderAndEvents.events);\nCreateOrderSagaState data =\nnew CreateOrderSagaState(order.getId(), orderDetails);   \ncreateOrderSagaManager.create(data, Order.class, order.getId());\nreturn order;\n}\n...\n}\nThe createOrder() method creates an Order by calling the factory method Order\n.createOrder(). It then persists the Order using the OrderRepository, which is a JPA-\nbased repository. It creates the CreateOrderSaga by calling SagaManager.create(),\npassing a CreateOrderSagaState containing the ID of the newly saved Order and the\nOrderDetails. The SagaManager instantiates the saga orchestrator, which causes it to\nsend a command message to the first saga participant, and persists the saga orchestra-\ntor in the database.\n Let\u2019s look at the CreateOrderSaga and its associated classes. \nListing 4.1 The OrderService class and its createOrder() method\nEnsure that service \nmethods are transactional.\nCreate the\nOrder.\nPersist the Order \nin the database.\nPublish domain \nevents.\nCreate a\nCreateOrderSaga.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1793, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9074bd00-9782-43bd-b463-fdb6b9933533": {"__data__": {"id_": "9074bd00-9782-43bd-b463-fdb6b9933533", "embedding": null, "metadata": {"page_label": "135", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84ff9427-ab7b-4ed8-9aae-d20f2c00f3fd", "node_type": "4", "metadata": {"page_label": "135", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7b489047870026094d92dfcb0325c451f9c7a5a3eee5080c59dbd100827b2433", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "135The design of the Order Service and the Create Order Saga\n4.4.2 The implementation of the Create Order Saga\nFigure 4.11 shows the classes that implement the Create Order Saga. The responsibil-\nities of each class are as follows:\n\uf0a1 CreateOrderSaga\u2014A singleton class that defines the saga\u2019s state machine. It\ninvokes the CreateOrderSagaState to create command messages and sends\nthem to participants using message channels specified by the saga participant\nproxy classes, such as KitchenServiceProxy.\nEventuate tram sagas\ncreate()\n...\nSagaManager\n\u00abinterface\u00bb\nSimpleSaga\nSagaDe\ufb01nition\nCommandEndpoint\nSagaDe\ufb01nition\ngetSagaDe\ufb01nition()\n\u00abtable\u00bb\nSAGA_INSTANCE Eventuate tram\nUses\nImplements\nCreates\nManages\nInvokes\nOrder database\nCreateOrderSaga\nreplies\nOrderService\nrequests\nStores the state\nof saga instances\nThe state of a saga\nDescribes a\nmessage channel\nDescribes the\nsteps of a saga\nAbstract superclass\nfor saga\norchestrators\norderId\norderDetails\n...\nCreateOrder\nSagaState\nCreateOrder\nSaga\nKitchen\nServiceProxy\nthis.sagaDe\ufb01nition=\nstep()\n.withCompensation(...)\n.step()\n.invokeParticipant(...)\n.step()\n.invokeParticipant(...)\n.onReply(...)\n.withCompensation(...)\nOrderService\nProxy\nOrderService\nThe SagaManager handles persisting a saga,\nsending the command messages that it\ngenerates, subscribing to reply messages,\nand invoking the saga to handle replies.\nFigure 4.11 The OrderService's sagas, such as Create Order Saga, are implemented using \nthe Eventuate Tram Saga framework.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1481, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0bdc71bb-fbf7-4142-946b-335f81ec0836": {"__data__": {"id_": "0bdc71bb-fbf7-4142-946b-335f81ec0836", "embedding": null, "metadata": {"page_label": "136", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6c11e9d-e0c1-4c19-8467-e54fe7e561ed", "node_type": "4", "metadata": {"page_label": "136", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3eba4a8713894d970a7179de8152bec6c2dd28bbf4c0d6f5c714ac56de3f8a5a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "136 CHAPTER 4 Managing transactions with sagas\n\uf0a1 CreateOrderSagaState\u2014A saga\u2019s persistent state, which creates command\nmessages.\n\uf0a1 Saga participant proxy classes, such as KitchenServiceProxy\u2014Each proxy class\ndefines a saga participant\u2019s messaging API, which consists of the command\nchannel, the command message types, and the reply types.\nThese classes are written using the Eventuate Tram Saga framework.\n The Eventuate Tram Saga framework provides a domain-specific language (DSL) for\ndefining a saga\u2019s state machine. It executes the saga\u2019s state machine and exchanges mes-\nsages with saga participants using the Eventuate Tram framework. The framework also\npersists the saga\u2019s state in the database.\n Let\u2019s take a closer look at the implementation of Create Order Saga, starting with\nthe CreateOrderSaga class.\nTHE CREATEORDERSAGA ORCHESTRATOR\nThe CreateOrderSaga class implements the state machine shown earlier in figure 4.7.\nThis class implements SimpleSaga, a base interface for sagas. The heart of the Create-\nOrderSaga class is the saga definition shown in the following listing. It uses the DSL\nprovided by the Eventuate Tram Saga framework to define the steps of the Create\nOrder Saga.\npublic class CreateOrderSaga implements SimpleSaga<CreateOrderSagaState> {\nprivate SagaDefinition<CreateOrderSagaState> sagaDefinition;\npublic CreateOrderSaga(OrderServiceProxy orderService,\nConsumerServiceProxy consumerService,\nKitchenServiceProxy kitchenService,\nAccountingServiceProxy accountingService) {\nthis.sagaDefinition =\nstep()\n.withCompensation(orderService.reject,\nCreateOrderSagaState::makeRejectOrderCommand)\n.step()\n.invokeParticipant(consumerService.validateOrder,\nCreateOrderSagaState::makeValidateOrderByConsumerCommand)\n.step()\n.invokeParticipant(kitchenService.create,\nCreateOrderSagaState::makeCreateTicketCommand)\n.onReply(CreateTicketReply.class,\nCreateOrderSagaState::handleCreateTicketReply)\n.withCompensation(kitchenService.cancel,\nCreateOrderSagaState::makeCancelCreateTicketCommand)\n.step()\n.invokeParticipant(accountingService.authorize,\nCreateOrderSagaState::makeAuthorizeCommand)\n.step()\n.invokeParticipant(kitchenService.confirmCreate,\nCreateOrderSagaState::makeConfirmCreateTicketCommand)\nListing 4.2 The definition of the CreateOrderSaga", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2268, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "801ed341-366c-42f3-a6a7-07bcfc0e41b3": {"__data__": {"id_": "801ed341-366c-42f3-a6a7-07bcfc0e41b3", "embedding": null, "metadata": {"page_label": "137", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "020cfe55-eeb0-45b0-811e-aba74eb2f3d4", "node_type": "4", "metadata": {"page_label": "137", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "70b12c736bc01ee6d614e123bf8d8d33dcfe86ab75cef91d8b7f3cfc20f5f288", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "137The design of the Order Service and the Create Order Saga\n.step()\n.invokeParticipant(orderService.approve,\nCreateOrderSagaState::makeApproveOrderCommand)\n.build();\n}\n@Override\npublic SagaDefinition<CreateOrderSagaState> getSagaDefinition() {\nreturn sagaDefinition;\n}\nThe CreateOrderSaga\u2019s constructor creates the saga definition and stores it in the\nsagaDefinition field. The getSagaDefinition() method returns the saga definition.\n To see how CreateOrderSaga works, let\u2019s look at the definition of the third step of\nthe saga, shown in the following listing. This step of the saga invokes the Kitchen Ser-\nvice t o  c r e a t e  a  Ticket. Its compensating transaction cancels that Ticket. The\nstep(), invokeParticipant(), onReply(), and withCompensation() methods are\npart of the DSL provided by Eventuate Tram Saga.\npublic class CreateOrderSaga ...\npublic CreateOrderSaga(..., KitchenServiceProxy kitchenService,\n...) {\n...\n.step()\n.invokeParticipant(kitchenService.create,\nCreateOrderSagaState::makeCreateTicketCommand)\n.onReply(CreateTicketReply.class,\nCreateOrderSagaState::handleCreateTicketReply)\n.withCompensation(kitchenService.cancel,   \nCreateOrderSagaState::makeCancelCreateTicketCommand)\n...\n;\nThe call to invokeParticipant() defines the forward transaction. It creates the Create-\nTicket command message by calling CreateOrderSagaState.makeCreateTicket-\nCommand() and sends it to the channel specified by kitchenService.create. The call\nto onReply() specifies that CreateOrderSagaState.handleCreateTicketReply()\nshould be called when a successful reply is received from Kitchen Service. This\nmethod stores the returned ticketId in the CreateOrderSagaState. The call to\nwithCompensation() defines the compensating transaction. It creates a RejectTicket-\nCommand command message by calling CreateOrderSagaState.makeCancelCreate-\nTicket() and sends it to the channel specified by kitchenService.create.\n The other steps of the saga are defined in a similar fashion. The CreateOrder-\nSagaState creates each message, which is sent by the saga to the messaging endpoint\nListing 4.3 The definition of the third step of the saga\nDefine the forward \ntransaction.\nCall handleCreateTicketReply() when\na successful reply is received.\nDefine the compensating\ntransaction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4d729166-e05e-4032-80ea-7e9157ec35e3": {"__data__": {"id_": "4d729166-e05e-4032-80ea-7e9157ec35e3", "embedding": null, "metadata": {"page_label": "138", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2c71f0e-fd46-4a5d-900f-90aef7e5987b", "node_type": "4", "metadata": {"page_label": "138", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "72104617cc965cb59b85818832fe978e5c6ca21a76365bb3ccb9288e674b4f6e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "138 CHAPTER 4 Managing transactions with sagas\ndefined by a KitchenServiceProxy. Let\u2019s take a look at each of those classes, starting\nwith CreateOrderSagaState. \nTHE CREATEORDERSAGASTATE CLASS\nThe CreateOrderSagaState class, shown in the following listing, represents the state\nof a saga instance. An instance of this class is created by OrderService and is persisted\nin the database by the Eventuate Tram Saga framework. Its primary responsibility is to\ncreate the messages that are sent to saga participants.\npublic class CreateOrderSagaState {\nprivate Long orderId;\nprivate OrderDetails orderDetails;\nprivate long ticketId;\npublic Long getOrderId() {\nreturn orderId;\n}\nprivate CreateOrderSagaState() {\n}\npublic CreateOrderSagaState(Long orderId, OrderDetails orderDetails) {  \nthis.orderId = orderId;\nthis.orderDetails = orderDetails;\n}\nCreateTicket makeCreateTicketCommand() {\nreturn new CreateTicket(getOrderDetails().getRestaurantId(),\ngetOrderId(), makeTicketDetails(getOrderDetails()));\n}\nvoid handleCreateTicketReply(CreateTicketReply reply) {   \nlogger.debug(\"getTicketId {}\", reply.getTicketId());\nsetTicketId(reply.getTicketId());\n}\nCancelCreateTicket makeCancelCreateTicketCommand() {   \nreturn new CancelCreateTicket(getOrderId());\n}\n...\nThe CreateOrderSaga invokes the CreateOrderSagaState to create the command\nmessages. It sends those command messages to the endpoints defined by the Saga-\nParticipantProxy classes. Let\u2019s take a look at one of those classes: KitchenService-\nProxy. \nListing 4.4 CreateOrderSagaState stores the state of a saga instance\nInvoked by the\nOrderService to\ninstantiate a\nCreateOrderSagaState\nCreates a CreateTicket \ncommand message\nSaves the ID \nof the newly \ncreated Ticket\nCreates \nCancelCreateTicket \ncommand message", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1762, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "514f47d7-a57e-4f44-885c-b7a63366d1ed": {"__data__": {"id_": "514f47d7-a57e-4f44-885c-b7a63366d1ed", "embedding": null, "metadata": {"page_label": "139", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "089352ee-6054-4ce9-8d5c-37044a4725c6", "node_type": "4", "metadata": {"page_label": "139", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f64080a5eb6825eb1bc84a564b26d65c8dc2c92b378e92ee3663d297556bfaca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "139The design of the Order Service and the Create Order Saga\nTHE KITCHENSERVICEPROXY CLASS\nThe KitchenServiceProxy class, shown in listing 4.5, defines the command message\nendpoints for Kitchen Service. There are three endpoints:\n\uf0a1 create\u2014Creates a Ticket\n\uf0a1 confirmCreate\u2014Confirms the creation\n\uf0a1 cancel\u2014Cancels a Ticket\nEach CommandEndpoint specifies the command type, the command message\u2019s destina-\ntion channel, and the expected reply types.\npublic class KitchenServiceProxy {\npublic final CommandEndpoint<CreateTicket> create =\nCommandEndpointBuilder\n.forCommand(CreateTicket.class)\n.withChannel(\nKitchenServiceChannels.kitchenServiceChannel)\n.withReply(CreateTicketReply.class)\n.build();\npublic final CommandEndpoint<ConfirmCreateTicket> confirmCreate =\nCommandEndpointBuilder\n.forCommand(ConfirmCreateTicket.class)\n.withChannel(\nKitchenServiceChannels.kitchenServiceChannel)\n.withReply(Success.class)\n.build();\npublic final CommandEndpoint<CancelCreateTicket> cancel =\nCommandEndpointBuilder\n.forCommand(CancelCreateTicket.class)\n.withChannel(\nKitchenServiceChannels.kitchenServiceChannel)\n.withReply(Success.class)\n.build();\n}\nProxy classes, such as KitchenServiceProxy, aren\u2019t strictly necessary. A saga could sim-\nply send command messages directly to participants. But proxy classes have two import-\nant benefits. First, a proxy class defines static typed endpoints, which reduces the chance\nof a saga sending the wrong message to a service. Second, a proxy class is a well-defined\nAPI for invoking a service that makes the code easier to understand and test. For exam-\nple, chapter 10 describes how to write tests for KitchenServiceProxy that verify that\nOrder Service correctly invokes Kitchen Service. Without KitchenServiceProxy, it\nwould be impossible to write such a narrowly scoped test. \nListing 4.5 KitchenServiceProxy defines the command message endpoints for \n Kitchen Service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1896, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2a998c05-b606-4ea7-8f22-f4644070d05c": {"__data__": {"id_": "2a998c05-b606-4ea7-8f22-f4644070d05c", "embedding": null, "metadata": {"page_label": "140", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b18a1c4-ad18-4ab1-bcaa-1451991fbc7f", "node_type": "4", "metadata": {"page_label": "140", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e31b360c7322b664f0386b31d8d9621be4218dfdb91dd0944ed68e7c1912b83e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "140 CHAPTER 4 Managing transactions with sagas\nTHE EVENTUATE TRAM SAGA FRAMEWORK\nThe Eventuate Tram Saga, shown in figure 4.12, is a framework for writing both saga\norchestrators and saga participants. It uses transactional messaging capabilities of Even-\ntuate Tram, discussed in chapter 3.\nThe saga orchestration package is the most complex part of the framework. It pro-\nvides SimpleSaga, a base interface for sagas, and a SagaManager class, which creates\nand manages saga instances. The SagaManager handles persisting a saga, sending the\ncommand messages that it generates, subscribing to reply messages, and invoking\nthe saga to handle replies. Figure 4.13 shows the sequence of events when OrderService\ncreates a saga. The sequence of events is as follows:\n1 OrderService creates the CreateOrderSagaState.\n2 It creates an instance of a saga by invoking the SagaManager.\n3 The SagaManager executes the first step of the saga definition.\n4 The CreateOrderSagaState is invoked to generate a command message.\nParticipantOrchestration\ncreate(sagaState)\n...\nSagaManager\nSimpleSaga\nSagaDe\ufb01nition\nCommandEndpoint\nSagaCommand\nDispatcher\nSagaCommand\nHandlersBuilder\nSagaDe\ufb01nition\ngetSagaDe\ufb01nition()\n\u00abtable\u00bb\nSAGA_INSTANCE Eventuate tram\nEventuate tram saga framework\nUses\nSends\nand receives\nOrder database\nChannels\nThe SagaManager handles persisting a\nsaga, sending the command messages\nthat it generates, subscribing to reply\nmessages, and invoking the saga to\nhandle replies.\nAbstract superclass\nfor saga orchestrators\nDescribes a\nmessage channel\nRoutes command\nmessages to\nmessage handlers\nDescribes the\nsteps of a saga\nStores the state of\nsaga instances\nFigure 4.12 Eventuate Tram Saga is a framewor k for writing both saga orchestrators and saga \nparticipants.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1760, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5a0b32f5-abfe-435f-b355-481f27fc236c": {"__data__": {"id_": "5a0b32f5-abfe-435f-b355-481f27fc236c", "embedding": null, "metadata": {"page_label": "141", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1fdae6da-b05a-4f08-a347-7ce75d6f2988", "node_type": "4", "metadata": {"page_label": "141", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2598bf240f4b8a870de2523bb94423f1b4a1bf027af3b03a81102f9f076556dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "141The design of the Order Service and the Create Order Saga\n5 The SagaManager sends the command message to the saga participant (the\nConsumer Service).\n6 The SagaManager saves the saga instance in the database.\nFigure 4.14 shows the sequence of events when SagaManager receives a reply from\nConsumer Service.\nThe sequence of events is as follows:\n1 Eventuate Tram invokes SagaManager with the reply from Consumer Service.\n2 SagaManager retrieves the saga instance from the database.\n3 SagaManager executes the next step of the saga definition.\nOrderService CreateOrderSagaState SagaManager CreateOrderSaga SagaDe\ufb01nition EventuateTram Database\nnew()\ncreate(sagaState)\ngetSagaDe\ufb01nition()\nexecuteFirstStep(sagaState)\nmakeValidateOrderByConsumerCommand()\nsendMessage(command)\nsaveSagaInstance(sagaState)\nFigure 4.13 The sequence of events when OrderService creates an instance of Create Order Saga\nCreateOrderSagaStateSagaManager CreateOrderSaga SagaDe\ufb01nitionEventuateTram Database\nhandleMessage()\nloadSagaInstance()\ngetSagaDe\ufb01nition()\nexecuteFirstStep(sagaState)\nmakeValidateOrderByConsumerCommand()\nsendMessage\n(command)\nsaveSagaInstance\n(sageState)\nFigure 4.14 The sequence of events when the SagaManager receives a reply message from a saga participant", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1253, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1e5295f-4155-40b0-838b-560af26cca9b": {"__data__": {"id_": "f1e5295f-4155-40b0-838b-560af26cca9b", "embedding": null, "metadata": {"page_label": "142", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a24561b3-e15a-4ef3-b834-2b25083d49ed", "node_type": "4", "metadata": {"page_label": "142", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f2d7cff319cc60a49bf7802a3470ccf159b15190ca3abd08828e1065aff7678d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "142 CHAPTER 4 Managing transactions with sagas\n4 CreateOrderSagaState is invoked to generate a command message.\n5 SagaManager sends the command message to the specified saga participant\n(Kitchen Service).\n6 SagaManager saves the update saga instance in the database.\nIf a saga participant fails, SagaManager executes the compensating transactions in\nreverse order.\n The other part of the Eventuate Tram Saga framework is the saga participant\npackage. It provides the SagaCommandHandlersBuilder and SagaCommandDispatcher\nclasses for writing saga participants. Th ese classes route command messages to han-\ndler methods, which invoke the saga participants\u2019 business logic and generate reply\nmessages. Let\u2019s take a look at how these classes are used by Order Service. \n4.4.3 The OrderCommandHandlers class\nOrder Service participates in its own sagas. For example, CreateOrderSaga invokes\nOrder Service to either approve or reject an Order. The OrderCommandHandlers class,\nshown in figure 4.15, defines the handler methods for the command messages sent by\nthese sagas.\n Each handler method invokes OrderService to update an Order and makes a\nreply message. The SagaCommandDispatcher class routes the command messages to\nthe appropriate handler method and sends the reply.\napproveOrder()\nrejectOrder()\n...\nOrderCommandHandlers\nEventuate\nTram Sagas\napproveOrder()\nrejectOrder()\n...\nOrderService\nInvokes\nInvokes\nUses\nReads\nSends\nSagaCommand\nDispatcher\nEventuate tram\nOrderService\nrequests\nCreateOrderSaga\nreplies\nRoutes command messages to\nhandlers and sends replies\nFigure 4.15 OrderCommandHandlers implements command handlers for the commands that are \nsent by the various Order Service sagas.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1688, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4670bc3e-5311-4ddd-86a6-bade97b222ca": {"__data__": {"id_": "4670bc3e-5311-4ddd-86a6-bade97b222ca", "embedding": null, "metadata": {"page_label": "143", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6473d621-09a3-4d8d-bff9-de7644800416", "node_type": "4", "metadata": {"page_label": "143", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "72ccbcca20eefb38dfe40a8059dcdf0fef9f2e775cfb382d2d258518ac05366e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "143The design of the Order Service and the Create Order Saga\nThe following listing shows the OrderCommandHandlers class. Its commandHandlers()\nmethod maps command message types to handler methods. Each handler method\ntakes a command message as a parameter, invokes OrderService, and returns a reply\nmessage.\npublic class OrderCommandHandlers {\n@Autowired\nprivate OrderService orderService;\npublic CommandHandlers commandHandlers() {   \nreturn SagaCommandHandlersBuilder\n.fromChannel(\"orderService\")\n.onMessage(ApproveOrderCommand.class, this::approveOrder)\n.onMessage(RejectOrderCommand.class, this::rejectOrder)\n...\n.build();\n}\npublic Message approveOrder(CommandMessage<ApproveOrderCommand> cm) {\nlong orderId = cm.getCommand().getOrderId();\norderService.approveOrder(orderId);\nreturn withSuccess();\n}\npublic Message rejectOrder(CommandMessage<RejectOrderCommand> cm) {\nlong orderId = cm.getCommand().getOrderId();\norderService.rejectOrder(orderId);\nreturn withSuccess();\n}\nThe approveOrder() and rejectOrder() methods update the specified Order by\ninvoking OrderService. The other services that participate in sagas have similar com-\nmand handler classes that update their domain objects. \n4.4.4 The OrderServiceConfiguration class\nThe Order Service uses the Spring framework. The following listing is an excerpt of\nthe OrderServiceConfiguration class, which is an @Configuration class that instanti-\nates and wires together the Spring @Beans.\n@Configuration\npublic class OrderServiceConfiguration {\n@Bean\npublic OrderService orderService(RestaurantRepository restaurantRepository,\nListing 4.6 The command handlers for Order Service\nListing 4.7 The OrderServiceConfiguration is a Spring @Configuration\n class that defines the Spring @Beans for the Order Service.\nRoute each command \nmessage to the appropriate \nhandler method.\nChange the state \nof the Order to \nauthorized.Return a generic \nsuccess message.\nChange the state of \nthe Order to rejected.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1954, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7a4ef0d-7108-4f2d-8be4-2b35a68e6866": {"__data__": {"id_": "a7a4ef0d-7108-4f2d-8be4-2b35a68e6866", "embedding": null, "metadata": {"page_label": "144", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "079146f7-2d47-412f-afcd-c31f1434e6c8", "node_type": "4", "metadata": {"page_label": "144", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4a492df26c3c50fbf6e816957cc3967f813be0b6f5fa20089e3d00d0f5c98a35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "144 CHAPTER 4 Managing transactions with sagas\n...\nSagaManager<CreateOrderSagaState>\ncreateOrderSagaManager,\n...) {\nreturn new OrderService(restaurantRepository,\n...\ncreateOrderSagaManager\n...);\n}\n@Bean\npublic SagaManager<CreateOrderSagaState> createOrderSagaManager(CreateOrderS\naga saga) {\nreturn new SagaManagerImpl<>(saga);\n}\n@Bean\npublic CreateOrderSaga createOrderSaga(OrderServiceProxy orderService,\nConsumerServiceProxy consumerService,\n...) {\nreturn new CreateOrderSaga(orderService, consumerService, ...);\n}\n@Bean\npublic OrderCommandHandlers orderCommandHandlers() {\nreturn new OrderCommandHandlers();\n}\n@Bean\npublic SagaCommandDispatcher orderCommandHandlersDispatcher(OrderCommandHan\ndlers orderCommandHandlers) {\nreturn new SagaCommandDispatcher(\"orderService\", orderCommandHandlers.comma\nndHandlers());\n}\n@Bean\npublic KitchenServiceProxy kitchenServiceProxy() {\nreturn new KitchenServiceProxy();\n}\n@Bean\npublic OrderServiceProxy orderServiceProxy() {\nreturn new OrderServiceProxy();\n}\n...\n}\nThis class defines several Spring @Beans including orderService, createOrder-\nSagaManager, createOrderSaga, orderCommandHandlers, and orderCommandHandlers-\nDispatcher. It also defines Spring @Beans for the various proxy classes, including\nkitchenServiceProxy and orderServiceProxy.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1286, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9cf65ad-90ed-40de-a5bd-3056fa45143d": {"__data__": {"id_": "d9cf65ad-90ed-40de-a5bd-3056fa45143d", "embedding": null, "metadata": {"page_label": "145", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c7c7663-3233-4041-b833-566fb60891ed", "node_type": "4", "metadata": {"page_label": "145", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9a3967fd531a90a4d1bc041a549dddd9ddd663abada166174f7a260cc7876b83", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "145Summary\n CreateOrderSaga is only one of Order Service\u2019s many sagas. Many of its other sys-\ntem operations also use sagas. For example, the cancelOrder() operation uses a Can-\ncel Order Saga, and the reviseOrder() operation uses a Revise Order Saga. As a\nresult, even though many services have an external API that uses a synchronous proto-\ncol, such as REST or gRPC, a large amount  of interservice communication will use\nasynchronous messaging.\n As you can see, transaction management and some aspects of business logic design\nare quite different in a microservice archit ecture. Fortunately, saga orchestrators are\nusually quite simple state machines, and you can use a saga framework to simplify your\ncode. Nevertheless, transaction management is certainly more complicated than in a\nmonolithic architecture. But that\u2019s usually  a small price to pay for the tremendous\nbenefits of microservices. \nSummary\n\uf0a1 Some system operations need to update data scattered across multiple services.\nTraditional, XA/2PC-based distributed tr ansactions aren\u2019t a good fit for mod-\nern applications. A better approach is to use the Saga pattern. A saga is sequence\nof local transactions that are coordinated using messaging. Each local transac-\ntion updates data in a single service. Because each local transaction commits its\nchanges, if a saga must roll back due to the violation of a business rule, it must\nexecute compensating transactions to explicitly undo changes.\n\uf0a1 You can use either choreography or orchestration to coordinate the steps of a\nsaga. In a choreography-based saga, a local transaction publishes events that trig-\nger other participants to execute local transactions. In an orchestration-based\nsaga, a centralized saga orchestrator sends command messages to participants\ntelling them to execute local transactions. You can simplify development and test-\ning by modeling saga orchestrators as state machines. Simple sagas can use chore-\nography, but orchestration is usually a better approach for complex sagas.\n\uf0a1 Designing saga-based business logic can be challenging because, unlike ACID\ntransactions, sagas aren\u2019t isolated from one another. You must often use counter-\nmeasures, which are design strategies  that prevent concurrency anomalies\nc a u s e d  b y  t h e  A C D  t r a n s a c t i o n  m o d e l .  A n  a p p l i c a t i o n  m a y  e v e n  n e e d  t o  u s e\nlocking in order to simplify the business logic, even though that risks deadlocks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2470, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "260bc70f-b845-4614-a081-4ac3f508fde2": {"__data__": {"id_": "260bc70f-b845-4614-a081-4ac3f508fde2", "embedding": null, "metadata": {"page_label": "146", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03b3f4d0-afc1-4077-9cdb-d4f7046c5ac1", "node_type": "4", "metadata": {"page_label": "146", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8d8ef2f04b38f2d56384c40efa5bd22bb19ba067bcfad9f2307ab9d1d7a6dcb8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "146\nDesigning\nbusiness logic in\na microservice architecture\nThe heart of an enterprise application is  the business logic, which implements the\nbusiness rules. Developing complex business logic is always challenging. The FTGO\napplication\u2019s business logic implements some quite complex business logic, espe-\ncially for order management and delivery management. Mary had encouraged her\nteam to apply object-oriented design principles, because in her experience this was\nthe best way to implement complex business logic. Some of the business logic used\nthe procedural Transcription script pattern. But the majority of the FTGO applica-\ntion\u2019s business logic is implemented in an object-oriented domain model that\u2019s\nmapped to the database using JPA.\n Developing complex business logic is ev en more challenging in a microservice\narchitecture where the business logic is sp read over multiple services. You need to\nThis chapter covers\n\uf0a1 Applying the business logic organization patterns: \nTransaction script pattern and Domain model \npattern\n\uf0a1 Designing business logic with the Domain-driven \ndesign (DDD) aggregate pattern\n\uf0a1 Applying the Domain event pattern in a \nmicroservice architecture", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1186, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bda002b0-8b94-45da-b3fe-ef866b13a265": {"__data__": {"id_": "bda002b0-8b94-45da-b3fe-ef866b13a265", "embedding": null, "metadata": {"page_label": "147", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "973c7b0e-dc4c-4273-b9e1-6daed962c57c", "node_type": "4", "metadata": {"page_label": "147", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1eb39828b03da8eab0102c6032632328b7bb9c71bd58577e9b236919d652e2cc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "147Business logic organization patterns\naddress two key challenges. First, a typical domain model is a tangled web of intercon-\nnected classes. Although this isn\u2019t a problem in a monolithic application, in a micro-\nservice architecture, where classes are scattered around different services, you need to\neliminate object references that would otherwise span service boundaries. The second\nchallenge is designing business logic that  works within the transaction management\nconstraints of a microservice architecture . Your business logic can use ACID transac-\ntions within services, but as described in chapter 4, it must us e the Saga pattern to\nmaintain data consistency across services.\n Fortunately, we can address these issu es by using the Aggregate pattern from\nDDD. The Aggregate pattern structures a serv ice\u2019s business logic as a collection of\naggregates. An aggregate is a cluster of objects that ca n be treated as a unit. There are\ntwo reasons why aggregates are useful when  developing business logic in a micro-\nservice architecture:\n\uf0a1 Aggregates avoid any possibility of object references spanning service boundar-\nies, because an inter-aggregate referenc e is a primary key value rather than an\nobject reference.\n\uf0a1 Because a transaction can only create or  update a single aggregate, aggregates\nfit the constraints of the microservices transaction model.\nAs a result, an ACID transaction is guaranteed to be within a single service.\n I begin this chapter by describing the di fferent ways of organizing business logic:\nthe Transcription script pattern and the Domain model pattern. Next I introduce the\nconcept of a DDD aggregate and explain why it\u2019s a good building block for a service\u2019s\nbusiness logic. After that, I describe the Domain event pattern events and explain why\nit\u2019s useful for a service to publish events. I end this chapter with a couple of examples\nof business logic from Kitchen Service and Order Service.\n Let\u2019s now look at business logic organization patterns.\n5.1 Business logic organization patterns\nFigure 5.1 shows the architecture of a typica l service. As described in chapter 2, the\nbusiness logic is the core of a hexagonal architecture. Surrounding the business logic\nare the inbound and outbound adapters. An inbound adapter handles requests from cli-\nents and invokes the business logic. An outbound adapter, which is invoked by the busi-\nness logic, invokes other services and applications.\n This service consists of the business logic and the following adapters:\n\uf0a1 REST API adapter\u2014An inbound adapter that implements a REST API which\ninvokes the business logic\n\uf0a1 OrderCommandHandlers\u2014An inbound adapter that consumes command mes-\nsages from a message channel and invokes the business logic\n\uf0a1 Database Adapter\u2014An outbound adapter that\u2019s invoked by the business logic\nto access the database\n\uf0a1 Domain Event Publishing Adapter\u2014An outbound adapter that publishes events\nto a message broker", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ded86d2-8b33-4c2b-957f-f2e10c221caf": {"__data__": {"id_": "5ded86d2-8b33-4c2b-957f-f2e10c221caf", "embedding": null, "metadata": {"page_label": "148", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa0557bd-72f2-45d3-ab41-2f50f76cb627", "node_type": "4", "metadata": {"page_label": "148", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1964f5d465d4a9b5256f7cf094ae6f34fd76bffc1cfa427c6cf183f2c9f44627", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "148 CHAPTER 5 Designing business logic in a microservice architecture\nThe business logic is typically the most complex part of the service. When develop-\ning business logic, you should consciously organize your business logic in the way\nthat\u2019s most appropriate for your applicatio n. After all, I\u2019m sure you\u2019ve experienced\nthe frustration of having to maintain so meone else\u2019s badly structured code. Most\nenterprise applications are written in an object-oriented language such as Java, so\nthey consist of classes and methods. But using an object-oriented language doesn\u2019t\nguarantee that the business logic has an object-oriented design. The key decision you\nmust make when developing business logi c is whether to use an object-oriented\napproach or a procedural approach. Th ere are two main patterns for organizing\nOutbound adapters\nInbound adapters\nOrder\nService requests\nPOST/orders\nGET/order/Id\nREST API\nOrder database\nOrder Service\nbusiness logic\nOrder\ncommand\nhandlers\nOrder events\nDomain event\npublisher adapter\nDatabase\nadapter\nFigure 5.1 The Order Service has a hexagonal architecture. It consists of the business logic \nand one or more adapters that interface with external applications and other services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1216, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4777b330-c7a4-4403-bba8-5cc87f00e80d": {"__data__": {"id_": "4777b330-c7a4-4403-bba8-5cc87f00e80d", "embedding": null, "metadata": {"page_label": "149", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7db59a5-11a8-46e0-b89b-7e2029544ef0", "node_type": "4", "metadata": {"page_label": "149", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8e0b670eddc1be7b812988d93f35ac843c7ae55654e4b3bcc9a1e669dc6bb560", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "149Business logic organization patterns\nbusiness logic: the procedural Transact ion script pattern, and the object-oriented\nDomain model pattern.\n5.1.1 Designing business logic using the Transaction script pattern\nAlthough I\u2019m a strong advocate of the object-oriented approach, there are some situa-\ntions where it is overkill, such as when you are developing simple business logic. In such\na situation, a better approach is to write procedural code and use what the book Patterns\nof Enterprise Application Architecture by Martin Fowler (Addison-Wesley Professional, 2002)\ncalls the Transaction script pattern. Rather than doing any object-oriented design, you\nwrite a method called a transaction script to handle each request from the presentation\ntier. As figure 5.2 shows, an important characteristic of this approach is that the classes\nthat implement behavior are separate from those that store state.\nWhen using the Transaction script pattern, the scripts are usually located in service\nclasses, which in this example is the OrderService class. A service class has one\nmethod for each request/system operation. The method implements the business\nlogic for that request. It accesses the data base using data access objects (DAOs), such\nas the OrderDao. The data objects, which in this example is the Order class, are pure\ndata with little or no behavior.\nThis style of design is highly procedural and relies on few of the capabilities of object-\noriented programming (OOP) languages. This what you would create if you were writ-\ning the application in C or another non-OOP language. Nevertheless, you shouldn\u2019t be\nPattern: Transaction script\nOrganize the business logic as a collection of procedural transaction scripts, one for\neach type of request.\ncreateOrder()\nreviseOrder()\ncancelOrder()\n...\nOrderService\nClasses with\nbehavior\nClasses\nwith state\nsave(Order)\n\ufb01ndOrderById()\n...\nOrderDao\norderId\norderLineItems\n...\nOrder\nFigure 5.2 Organizing business logic \nas transaction scripts. In a typical \ntransaction script\u2013based design, one \nset of classes implements behavior \nand another set stores state. The \ntransaction scripts are organized into \nclasses that typically have no state. \nThe scripts use data classes, which \ntypically have no behavior.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2257, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7657b98c-62b9-43bb-b74c-2fab974fd059": {"__data__": {"id_": "7657b98c-62b9-43bb-b74c-2fab974fd059", "embedding": null, "metadata": {"page_label": "150", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16c69326-909f-4d43-bb66-8aaa483f8b20", "node_type": "4", "metadata": {"page_label": "150", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7114ec75a7702cdde0ed3a3ced6269d14d511c7c360b4f21b61c22f69d4abc1d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "150 CHAPTER 5 Designing business logic in a microservice architecture\nashamed to use a procedural design when it \u2019s appropriate. This approach works well\nfor simple business logic. The drawback is that this tends not to be a good way to\nimplement complex business logic. \n5.1.2 Designing business logic using the Domain model pattern\nThe simplicity of the procedural approach can be quite seductive. You can write code with-\nout having to carefully consider how to organize the classes. The problem is that if your\nbusiness logic becomes complex, you can end up with code that\u2019s a nightmare to main-\ntain. In fact, in the same way that a monolithic application has a habit of continually grow-\ning, transaction scripts have the same problem. Consequently, unless you\u2019re writing an\nextremely simple application, you should resist the temptation to write procedural code\nand instead apply the Domain model pattern and develop an object-oriented design.\nIn an object-oriented design, the business logic consists of an object model, a network\nof relatively small classes. These classes typically correspond directly to concepts from\nthe problem domain. In such a design some classes have only either state or behavior,\nbut many contain both, which is the hallma rk of a well-designed class. Figure 5.3\nshows an example of the Domain model pattern.\nPattern: Domain model\nOrganize the business logic as an object model consisting of classes that have state\nand behavior.\ncreateOrder()\nreviseOrder()\ncancelOrder()\n...\nOrderService\ndeliveryTime\ndeliveryAddress\nDeliveryInformation\n\ufb01ndOrderById()\n...\nOrderRepository\nSome classes have only state.\nMany classes have\nstate and behavior.\nUses\nSome classes have only behavior.\n\u00abprivate\u00bb\norderId\norderLineItems\n...\nrevise()\ncancel()\n\u00abstatic\u00bb\ncreate()\nOrder\nFigure 5.3 Organizing business logic as a domain model. The majority of \nthe business logic consists of classes that have state and behavior.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eb7f4556-04fe-4f0c-a590-408c5a9a9dc1": {"__data__": {"id_": "eb7f4556-04fe-4f0c-a590-408c5a9a9dc1", "embedding": null, "metadata": {"page_label": "151", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa5a35f6-0013-48e1-9714-5e1d15e28982", "node_type": "4", "metadata": {"page_label": "151", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "74b7ff95c67f90547178a02f980ae9ba89cf1b2e17331b273125536660a76db3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "151Business logic organization patterns\nAs with the Transaction script pattern, an OrderService class has a method for each\nrequest/system operation. But when using the Domain model pattern, the service\nmethods are usually simple. That\u2019s because a service method almost always delegates\nto persistent domain objects, which contai n the bulk of the business logic. A service\nmethod might, for example, load a domain  object from the database and invoke one\nof its methods. In this example, the Order class has both state and behavior. Moreover,\nits state is private and can only be accessed indirectly via its methods.\n Using an object-oriented design has a nu mber of benefits. First, the design is\neasy to understand and maintain. Instead of consisting of one big class that does\neverything, it consists of a number of sma ll classes that each have a small number of\nresponsibilities. In addition, classes such as Account, BankingTransaction, and\nOverdraftPolicy closely mirror the real world, which makes their role in the design\neasier to understand. Second, our object-orien ted design is easier to test: each class\ncan and should be tested independently. Finally, an object-oriented design is easier to\nextend because it can use well-known design patterns, such as the Strategy pattern and\nthe Template method pattern, that define  ways of extending a component without\nmodifying the code.\n The Domain model pattern works well, bu t there are a number of problems with\nthis approach, especially in a microservice architecture. To address those problems,\nyou need to use a refinement of OOD known as DDD. \n5.1.3 About Domain-driven design\nDDD, which is described in the book Domain-Driven Design by Eric Evans (Addison-\nWesley Professional, 2003), is a refinement of OOD and is an approach for developing\ncomplex business logic. I introduced DDD in  chapter 2 when discussing the useful-\nness of DDD subdomains when decomposing an application into services. When using\nDDD, each service has its own domain model,  which avoids the problems of a single,\napplication-wide domain model. Subdomains and the associated concept of Bounded\nContext are two of the strategic DDD patterns.\n DDD also has some tactical patterns that  are building blocks for domain models.\nEach pattern is a role that a class plays in a domain model and defines the characteris-\ntics of the class. The building blocks th at have been widely adopted by developers\ninclude the following:\n\uf0a1 Entity\u2014An object that has a persistent identity. Two entities whose attributes\nhave the same values are still different ob jects. In a Java EE application, classes\nthat are persisted using JPA @Entity are usually DDD entities.\n\uf0a1 Value object \u2014An object that is a collection of values. Two value objects whose\nattributes have the same values can be used interchangeably. An example of a\nvalue object is a Money class, which consists of a currency and an amount.\n\uf0a1 Factory\u2014An object or method that implements  object creation logic that\u2019s too\nc o m p l e x  t o  b e  d o n e  d i r e c t l y  b y  a  c o n structor. It can also hide the concrete", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3109, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0d7f7547-5de5-4f1c-9edc-ca99487ca5d2": {"__data__": {"id_": "0d7f7547-5de5-4f1c-9edc-ca99487ca5d2", "embedding": null, "metadata": {"page_label": "152", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55ac7574-7e8c-43c6-b92f-b5956a1d3e27", "node_type": "4", "metadata": {"page_label": "152", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6d432c8611bf080733da2d95378acbacb568a2a3aadff4e13ee5ab4f6f6824ec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "152 CHAPTER 5 Designing business logic in a microservice architecture\nclasses that are instantiated. A factory might be implemented as a static method\nof a class.\n\uf0a1 Repository\u2014An object that provides access to persistent entities and encapsu-\nlates the mechanism for accessing the database.\n\uf0a1 Service\u2014An object that implements busine ss logic that doesn\u2019t belong in an\nentity or a value object.\nThese building blocks are used by many developers. Some are supported by frame-\nworks such as JPA and the Spring framewor k. There is one more building block that\nhas been generally ignored (myself included!) except by DDD purists: aggregates. As\nit turns out, aggregates are an extremely useful concept when developing microser-\nvices. Let\u2019s first look at some subtle problems with classic OOD that are solved by\nusing aggregates. \n5.2 Designing a domain model using the \nDDD aggregate pattern\nIn traditional object-oriented design, a doma in model is a collection of classes and\nrelationships between classes. The classes are usually organized into packages. For\nexample, figure 5.4 shows part of a domain model for the FTGO application. It\u2019s a typ-\nical domain model consisting of a web of interconnected classes.\nThis example has several classes co rresponding to business objects: Consumer, Order,\nRestaurant, and Courier. But interestingly, the explicit boundaries of each business\nobject are missing from this kind of traditional domain model. It doesn\u2019t specify, for\nConsumer Order\nstate\n...\ncreditcardId\n...\ndeliveryTime quantity name\nprice\nstreet1\nstreet2\ncity\nstate\nzip\nname\n...\navailable\n...\nlat\nlon\nRestaurant Courier Location\nPaymentInfo DeliveryInfo OrderLineItem MenuItem Address\nPlaced by For\nAssigned to\nPaid usingPays using\nFigure 5.4 A traditional domain model is a web of in terconnected classes. It doesn\u2019t explicitly specify the \nboundaries of business objects, such as Consumer and Order.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1907, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "20d8d808-9d08-4864-aca2-8f15fd83e0f3": {"__data__": {"id_": "20d8d808-9d08-4864-aca2-8f15fd83e0f3", "embedding": null, "metadata": {"page_label": "153", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "50ab5b4d-84a7-45e5-af65-ea768a436253", "node_type": "4", "metadata": {"page_label": "153", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2e6b54ecb6372878b384b69e55cdcfe16a680238da878efb093d03732eee7060", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "153Designing a domain model using the DDD aggregate pattern\nexample, which classes are part of the Order business object. This lack of boundaries\ncan sometimes cause problems, especially in microservice architecture.\n I begin this section with an example problem caused by the lack of explicit bound-\naries. Next I describe the concept of an aggregate and how it has explicit boundaries.\nAfter that, I describe the rules that aggregates must obey and how they make aggre-\ngates a good fit for the microservice archit ecture. I then describe how to carefully\nchoose the boundaries of your aggregates and why it matters. Finally, I discuss how to\ndesign business logic using aggregates. Let\u2019s first take a look at the problems caused\nby fuzzy boundaries.\n5.2.1 The problem with fuzzy boundaries\nImagine, for example, that you want to perform an operation, such as a load or delete,\non an Order business object. What exactly does that mean? What is the scope an oper-\nation? You would certainly load or delete the Order object. But in reality there\u2019s more\nto an Order than simply the Order object. There are also the order line items, the pay-\nment information, and so on. Figure 5.4 le aves the boundaries of a domain object to\nthe developer\u2019s intuition.\n Besides a conceptual fuzziness, the lack of explicit boundaries causes problems\nwhen updating a business object. A typical business object has invariants, business\nrules that must be enforced at all times. An Order has a minimum order amount, for\nexample. The FTGO application must ensu re that any attempt to update an order\ndoesn\u2019t violate an invariant such as the minimum order amount. The challenge is that\nin order to enforce invariants, you must design your business logic carefully.\n For example, let\u2019s look at how to ensure the order minimum is met when multiple\nconsumers work together to create an  order. Two consumers\u2014Sam and Mary\u2014are\nworking together on an order and simultaneously decide that the order exceeds their\nbudget. Sam reduces the quantity of samosa s, and Mary reduces the quantity of naan\nbread. From the application\u2019s perspective, both consumers retrieve the order and its\nline items from the database. Both consumer s then update a line item to reduce the\ncost of the order. From each consumer\u2019s perspective the order minimum is preserved.\nHere\u2019s the sequence of database transactions.\nConsumer - Mary Consumer - Sam\nBEGIN TXN\nSELECT ORDER_TOTAL FROM ORDER\nWHERE ORDER ID = X\nSELECT * FROM ORDER_LINE_ITEM\nWHERE ORDER_ID = X\n...\nEND TXN\nBEGIN TXN\nSELECT ORDER_TOTAL FROM ORDER\nWHERE ORDER ID = X\nSELECT * FROM ORDER_LINE_ITEM\nWHERE ORDER_ID = X\n...\nEND TXN\nVerify minimum is met", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2660, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "09820be6-c6a8-4b19-a516-b9f07632756c": {"__data__": {"id_": "09820be6-c6a8-4b19-a516-b9f07632756c", "embedding": null, "metadata": {"page_label": "154", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1aafa4c-2a42-49f2-9169-5bc9e5cff21f", "node_type": "4", "metadata": {"page_label": "154", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e17619c901443a62599fb3b905fe0a06b503a78eb58fdd305536dd2978028011", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "154 CHAPTER 5 Designing business logic in a microservice architecture\nEach consumer changes a line item using a sequence of two transactions. The first\ntransaction loads the order and its line items. The UI verifies that the order minimum\nis satisfied before executing the second transaction. The second transaction updates\nthe line item quantity using an optimistic of fline locking check that verifies that the\norder line is unchanged since it was loaded by the first transaction.\n In this scenario, Sam reduces the order total by $X and Mary reduces it by $Y. As a\nresult, the Order is no longer valid, even though the application verified that the order\nstill satisfied the order minimum after each consumer\u2019s update. As you can see, directly\nupdating part of a business object can result in the violation of the business rules. DDD\naggregates are intended to solve this problem. \n5.2.2 Aggregates have explicit boundaries\nAn aggregate is a cluster of domain objects within  a boundary that can be treated as a\nunit. It consists of a root entity and po ssibly one or more other entities and value\nobjects. Many business objects are modeled as aggregates. For example, in chapter 2\nwe created a rough domain model by anal yzing the nouns used in the requirements\nand by domain experts. Many of these nouns, such as Order, Consumer, and Restau-\nrant, are aggregates.\nFigure 5.5 shows the Order aggregate and its boundary. An Order aggregate consists of\nan Order entity, one or more OrderLineItem value objects, and other value objects\nsuch as a delivery Address and PaymentInformation.\nBEGIN TXN\nUPDATE ORDER_LINE_ITEM\nSET VERSION=..., QUANTITY=...\nWHERE VERSION = <loaded version>\nAND ID = ...\nEND TXN\nVerify minimum is met\nBEGIN TXN\nUPDATE ORDER_LINE_ITEM\nSET VERSION=..., QUANTITY=...\nWHERE VERSION = <loaded version>\nAND ID = ...\nEND TXN\nPattern: Aggregate\nOrganize a domain model as a collection of aggregates, each of which is a graph of\nobjects that can be treated as a unit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1984, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b8175948-b8e0-4453-9072-76121f9008fa": {"__data__": {"id_": "b8175948-b8e0-4453-9072-76121f9008fa", "embedding": null, "metadata": {"page_label": "155", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dfd769f4-bf33-44fc-ac63-6d96f285f20e", "node_type": "4", "metadata": {"page_label": "155", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3361350790ba99fe53891be89c0d638fa92228b25bbdfa8a07b0e3189654b2e3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "155Designing a domain model using the DDD aggregate pattern\nAggregates decompose a domain model into chunks, which are individually easier to\nunderstand. They also clarify the scope of operations such as load, update, and delete.\nThese operations act on the entire aggregate rather than on parts of it. An aggregate\nis often loaded in its entirety from the database, thereby avoiding any complications of\nlazy loading. Deleting an aggregate removes all of its objects from a database.\nAGGREGATES ARE CONSISTENCY BOUNDARIES\nUpdating an entire aggregate rather than its parts solves the consistency issues, such\nas the example described earlier. Update operations are invoked on the aggregate\nroot, which enforces invariants. Also, concurrency is handled by locking the aggregate\nroot using, for example, a version number  or a database-level lock. For example,\ninstead of updating line items\u2019 quantities directly, a client must invoke a method on\nthe root of the Order aggregate, which enforces invariants such as the minimum order\namount. Note, though, that this approach doesn\u2019t require the entire aggregate to be\nupdated in the database. An application might, for example, only update the rows cor-\nresponding to the Order object and the updated OrderLineItem. \nIDENTIFYING AGGREGATES IS KEY\nIn DDD, a key part of designing a domain  model is identifying aggregates, their\nboundaries, and their roots. The details of the aggregates\u2019 internal structure is sec-\nondary. The benefit of aggregates, however,  goes far beyond modularizing a domain\nmodel. That\u2019s because aggregates must obey certain rules. \n5.2.3 Aggregate rules\nDDD requires aggregates to obey a set of rules. These rules ensure that an aggregate is\na self-contained unit that can enforce its invariants. Let\u2019s look at each of the rules.\n\u00ab\u00bb aggregate root\nOrder\nquantity\n\u00ab\u00bb aggregate root\nConsumer\nOrder aggregate\nConsumer aggregate\n...\n\u00ab\u00bb aggregate root\nRestaurant\n\u00ab\u00bb value object\nOrderLineItem\nRestaurant aggregate\n\u00ab\u00bb value object\nDeliveryInfo\n\u00ab\u00bb value object\nPaymentInfo\n\u00ab\u00bb value object\nDeliveryInfo\n\u00ab\u00bb value object\nPaymentInfo\nFigure 5.5 Structuring a domain model as a se t of aggregates makes the boundaries explicit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2187, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7092f885-dafa-4289-b6dd-c4d585b90d21": {"__data__": {"id_": "7092f885-dafa-4289-b6dd-c4d585b90d21", "embedding": null, "metadata": {"page_label": "156", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6787978f-f1c8-42dd-9b8b-53cc35e8fe4a", "node_type": "4", "metadata": {"page_label": "156", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0670984d8a24b7bc70c598f3f6d9a560ede4ea6f4e696486d781ce626af5fc9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "156 CHAPTER 5 Designing business logic in a microservice architecture\nRULE #1: REFERENCE ONLY THE AGGREGATE ROOT\nThe previous example illustrated the perils of updating OrderLineItems directly. The\ngoal of the first aggregate rule is to elimin ate this problem. It requires that the root\nentity be the only part of an aggregate that can be referenced by classes outside of the\naggregate. A client can only update an aggregate by invoking a method on the aggre-\ngate root.\n A service, for example, uses a repository  to load an aggregate from the database\nand obtain a reference to the aggregate root . It updates an aggregate by invoking a\nmethod on the aggregate root. This rule ensures that the aggregate can enforce its\ninvariant.\nRULE #2: INTER-AGGREGATE REFERENCES MUST USE PRIMARY KEYS\nAnother rule is that aggregates reference each other by identity (for example, primary\nkey) instead of object references. Fo r example, as figure 5.6 shows, an Order refer-\nences its Consumer using a consumerId rather than a reference to the Consumer object.\nSimilarly, an Order references a Restaurant using a restaurantId.\nThis approach is quite different from tr aditional object modeling, which considers\nforeign keys in the domain model to be a design smell. It has a number of benefits.\nThe use of identity rather than object references means that the aggregates are loosely\ncoupled. It ensures that the aggregate boundaries between aggregates are well\ndefined and avoids accidentally updating a different aggregate. Also, if an aggregate is\npart of another service, there isn\u2019t a problem of object references that span services.\n This approach also simplifies persistence since the aggregate is the unit of storage.\nIt makes it easier to store aggregates in a NoSQL database such as MongoDB. It also\nconsumerId\nrestaurantId\n...\n\u00ab\u00bb aggregate root\nOrder\nquantity\nOrderLineItem\nDeliveryInfo\n...\n\u00ab\u00bb aggregate root\nConsumer\nOrder aggregate\nConsumer aggregate\n...\n\u00ab\u00bb aggregate root\nRestaurant\nRestaurant aggregate\nPaymentInfo\nDeliveryInfo\nPaymentInfo\nFigure 5.6 References between aggregates are by  primary key rather than by object reference. The \nOrder aggregate has the IDs of the Consumer and Restaurant aggregates. Within an aggregate, \nobjects have references to one another.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f9dd6eb-e7df-44da-a032-03c5a0f639a9": {"__data__": {"id_": "5f9dd6eb-e7df-44da-a032-03c5a0f639a9", "embedding": null, "metadata": {"page_label": "157", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29f6b9b5-d5dd-4e33-bb2c-2ed675045b8f", "node_type": "4", "metadata": {"page_label": "157", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "761bfba5032d5f0504dc298118d36c9953a569ecf5391187e784bf47e4361d5a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "157Designing a domain model using the DDD aggregate pattern\neliminates the need for transparent lazy loading and its associated problems. Scaling\nthe database by sharding aggregates is relatively straightforward.\nRULE #3: ONE TRANSACTION CREATES OR UPDATES ONE AGGREGATE\nAnother rule that aggregates must obey is that a transaction can only create or update\na single aggregate. When I first read about it many years ago, this rule made no sense! At\nthe time, I was developing traditional monolithic applications that used an RDBMS, so\ntransactions could update multiple aggregates. Today, this constraint is perfect for the\nmicroservice architecture. It ensures that a transaction is contained within a service.\nThis constraint also matches the limited transaction model of most NoSQL databases.\n This rule makes it more complicated to implement operations that need to create\nor update multiple aggregates. But this is exactly the problem that sagas (described in\nchapter 4) are designed to solve. Each step  of the saga creates or updates exactly one\naggregate. Figure 5.7 shows how this works.\nIn this example, the saga consists of th ree transactions. The first transaction updates\naggregate X in service A. The other two transactions are both in service B. One transac-\ntion updates aggregate X, and the other updates aggregate Y.\n An alternative approach to maintainin g consistency across multiple aggregates\nwithin a single service is to cheat and update multiple aggregates within a transaction.\nFor example, service B could update aggregates Y and Z in a single transaction. This is\nonly possible when using a database, such as  an RDBMS, that supports a rich transac-\ntion model. If you\u2019re using a NoSQL data base that only has simple transactions,\nthere\u2019s no other option except to use sagas.\n O r  i s  t h e r e ?  I t  t u r n s  o u t  t h a t  a g g r e gate boundaries are not set in stone. When\ndeveloping a domain model, you get to ch oose where the boundaries lie. But like a\n20th century colonial power drawing national boundaries, you need to be careful. \nService A\nSaga\nLocal transaction 1\nCreate/update\nAggregate X\nService B\nLocal transaction 2\nAggregate Y\nLocal transaction 3\nAggregate Z\nCreate/update Create/update\nFigure 5.7 A transaction can only creat e or update a single aggregate, so an application uses a saga \nto update multiple aggregates. Each step of the saga creates or updates one aggregate.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2431, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0192b39b-5a03-4770-baa4-35859742cf65": {"__data__": {"id_": "0192b39b-5a03-4770-baa4-35859742cf65", "embedding": null, "metadata": {"page_label": "158", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15b86020-9877-43ad-b3a6-fa925ee4ff59", "node_type": "4", "metadata": {"page_label": "158", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0cfa35f060475de20fde373e753177f84a8a1f7721d74f02d5022ca06dff0de4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "158 CHAPTER 5 Designing business logic in a microservice architecture\n5.2.4 Aggregate granularity\nWhen developing a domain model, a key decision you must make is how large to\nmake each aggregate. On one hand, aggreg ates should ideally be small. Because\nupdates to each aggregate are serialized, more fine-grained aggregates will increase\nthe number of simultaneous requests that the application can handle, improving scal-\nability. It will also improve the user experi ence because it reduces the chance of two\nusers attempting conflicting updates of the same aggregate. On the other hand, because\nan aggregate is the scope of transaction, you may need to define a larger aggregate in\norder to make a particular update atomic.\n For example, earlier I mentioned how in  the FTGO application\u2019s domain model\nOrder and Consumer are separate aggregates. An alternative design is to make Order\npart of the Consumer aggregate. Figure 5.8 shows this alternative design.\nA benefit of this larger Consumer aggregate is that the application can atomically\nupdate a Consumer and one or more of its Orders. A drawback of this approach is that\nit reduces scalability. Transactions that update different orders for the same customer\nwould be serialized. Similarly, two users would conflict if they attempted to edit differ-\nent orders for the same customer.\n Another drawback of this approach in a mi croservice architecture is that it is an\nobstacle to decomposition. The business logic for Orders and Consumers, for exam-\nple, must be collocated in the same service, which makes the service larger. Because of\nthese issues, making aggregates as fine-grained as possible is best. \nrestaurantId\n...\nOrder\nquantity\nOrderLineItem\nDeliveryInfo\n...\n<<aggregate root>>\nConsumer\nConsumer aggregate\n...\n<<aggregate root>>\nRestaurant\nRestaurant aggregate\nPaymentInfo\nDeliveryInfo\nPaymentInfo\nFigure 5.8 An alternative design defines a Customer aggregate that contains the Customer and \nOrder classes. This design enables an application to atomically update a Consumer and one or more \nof its Orders.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2077, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b71213a-4fb0-4127-9dc9-ea5d54313630": {"__data__": {"id_": "4b71213a-4fb0-4127-9dc9-ea5d54313630", "embedding": null, "metadata": {"page_label": "159", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c4cc31b0-3f53-4465-b23a-ea6393447f6f", "node_type": "4", "metadata": {"page_label": "159", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "31d82f810c97e8ce616222302ba821296a3b9a4f97489d7b963e06bce19a3fcb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "159Designing a domain model using the DDD aggregate pattern\n5.2.5 Designing business logic with aggregates\nIn a typical (micro)service, the bulk of th e business logic consists of aggregates. The\nrest of the business logic resides in the domain services and the sagas. The sagas orches-\ntrate sequences of local transactions in order to enforce data consistency. The services\nare the entry points into the business logi c and are invoked by inbound adapters. A\nservice uses a repository to retrieve aggregates from the database or save aggregates to\nthe database. Each repository is implemented by an outbound adapter that accesses\nthe database. Figure 5.9 shows the aggregate-based design of the business logic for the\nOrder Service.\nThe business logic consists of the Order aggregate, the OrderService service class, the\nOrderRepository, and one or more sagas. The OrderService invokes the Order-\nRepository to save and load Orders. For simple requests that are local to the service,\nREST API\nDomain\nevent\npublisher\n\u00abservice\u00bb\nOrderService\n\u00absaga\u00bb\nCreateOrder\nSaga\n\u00absaga\u00bb\nReviseOrder\nSaga\ncreateOrder()\nreviseOrder()\ncancelOrder()\n\u00abvalue object\u00bb\nOrderLineItem\nquantity\nmenuItem\nname\nOrder\ncommand\nhandlers\nDatabase\nadapter\n\u00abaggregate\u00bb\nOrder\nid\n...\n\u00abrepository\u00bb\nOrderRepository\nvoidSave(Order)\nOrer \ufb01ndOne(id)\n...\nFigure 5.9 An aggregate-based design for the Order Service business logic", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1386, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f731183-7f17-4eca-a8b6-7aae2c057606": {"__data__": {"id_": "9f731183-7f17-4eca-a8b6-7aae2c057606", "embedding": null, "metadata": {"page_label": "160", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9784b06e-5e3d-4421-bb88-37a9122851a6", "node_type": "4", "metadata": {"page_label": "160", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "de0aac5b9e5e43b2b9ad458be6432b3e073a95ffab04ded8af3a3c676a8be35d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "160 CHAPTER 5 Designing business logic in a microservice architecture\nthe service updates an Order aggregate. If an update request spans multiple services,\nthe OrderService will also create a saga, as described in chapter 4.\n We\u2019ll take a look at the code\u2014but firs t, let\u2019s examine a concept that\u2019s closely\nrelated to aggregates: domain events. \n5.3 Publishing domain events\nMerriam-Webster (https://www.merriam-webster.com/dictionary/event) lists several\ndefinitions of the word event, including these:\n1 Something that happens\n2 A noteworthy happening\n3 A social occasion or activity\n4 An adverse or damaging medical occurrence, a heart attack or other cardiac event\nIn the context of DDD, a domain event is something that has happened to an aggre-\ngate. It\u2019s represented by a class in the domain model. An event usually represents a\nstate change. Consider, for example, an Order aggregate in the FTGO application. Its\nstate-changing events include Order Created, Order Cancelled, Order Shipped, and\nso forth. An Order aggregate might, if there are interested consumers, publish one of\nthe events each time it undergoes a state transition.\n5.3.1 Why publish change events?\nDomain events are useful because other pa rties\u2014users, other applications, or other\ncomponents within the same application\u2014 are often interested in knowing about an\naggregate\u2019s state changes. Here are some example scenarios:\n\uf0a1 Maintaining data consistency across services using choreography-based sagas,\ndescribed in chapter 4.\n\uf0a1 Notifying a service that maintains a replica that the source data has changed.\nThis approach is known as Command Query Responsibility Segregation (CQRS),\nand it\u2019s described in chapter 7.\n\uf0a1 Notifying a different application via a registered webhook or via a message bro-\nker in order to trigger the next step in a business process.\n\uf0a1 Notifying a different component of the same application in order, for example,\nto send a WebSocket message to a user\u2019s browser or update a text database such\nas ElasticSearch.\n\uf0a1 Sending notifications\u2014text messages or emails\u2014to users informing them that\ntheir order has shipped, their Rx prescr iption is ready for pick up, or their\nflight is delayed.\nPattern: Domain event\nAn aggregate publishes a domain event when it\u2019s created or undergoes some other\nsignificant change.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2310, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8681693-c20b-4e20-b59d-4f20d41eca90": {"__data__": {"id_": "d8681693-c20b-4e20-b59d-4f20d41eca90", "embedding": null, "metadata": {"page_label": "161", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0075b5ce-9a5a-47ea-acb4-ff9c4f7bbbf3", "node_type": "4", "metadata": {"page_label": "161", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ead120a21632110ca1d73dc951b6f945e8321fd310df93de5adf793a69c376fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "161Publishing domain events\n\uf0a1 Monitoring domain events to verify that the application is behaving correctly.\n\uf0a1 Analyzing events to model user behavior.\nThe trigger for the notification in all these scenarios is the state change of an aggre-\ngate in an application\u2019s database. \n5.3.2 What is a domain event?\nA domain event is a class with a name formed using a past-participle verb. It has proper-\nties that meaningfully convey the event. Each property is either a primitive value or a\nvalue object. For example, an OrderCreated event class has an orderId property.\n A domain event typically also has metadata, such as the event ID, and a timestamp.\nIt might also have the identity of the user who made the change, because that\u2019s useful\nfor auditing. The metadata can be part of  the event object, perhaps defined in a\nsuperclass. Alternatively, the event metadata can be in an envelope object that wraps\nthe event object. The ID of the aggregate that emitted the event might also be part of\nthe envelope rather than an explicit event property.\n The OrderCreated event is an example of a doma in event. It doesn\u2019t have any\nfields, because the Order\u2019s ID is part of the event envelope. The following listing\nshows the OrderCreated event class and the DomainEventEnvelope class.\ninterface DomainEvent {}\ninterface OrderDomainEvent extends DomainEvent {}\nclass OrderCreated implements OrderDomainEvent {}\nclass DomainEventEnvelope<T extends DomainEvent> {\nprivate String aggregateType;      \nprivate Object aggregateId;\nprivate T event;\n...\n}\nThe DomainEvent interface is a marker interface th at identifies a class as a domain\nevent. OrderDomainEvent is a marker interface for events, such as OrderCreated, which\nare published by the Order aggregate. The DomainEventEnvelope is a class that con-\ntains event metadata and the event object. It \u2019s a generic class that\u2019s parameterized by\nthe domain event type. \n5.3.3 Event enrichment\nLet\u2019s imagine, for example, that you\u2019re writing an event consumer that processes Order\nevents. The OrderCreated event class shown previously captures the essence of what has\nhappened. But your event consumer may ne ed the order details when processing an\nListing 5.1 The OrderCreated event and the DomainEventEnvelope class\nThe event\u2019s \nmetadata", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2274, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27e028b1-5519-458f-8e14-10176c46ac64": {"__data__": {"id_": "27e028b1-5519-458f-8e14-10176c46ac64", "embedding": null, "metadata": {"page_label": "162", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d7040fd-03cc-4605-b0e5-e78bc84766d9", "node_type": "4", "metadata": {"page_label": "162", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "85e447d96af144fc38778cecd533cfc2d7738858fb9d4c62df010b4a837666b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "162 CHAPTER 5 Designing business logic in a microservice architecture\nOrderCreated event. One option is for it to retrieve that information from the Order-\nService. The drawback of an event consumer querying the service for the aggregate is\nthat it incurs the overhead of a service request.\n An alternative approach known as event enrichment is for events to contain informa-\ntion that consumers need. It simplifies event consumers because they no longer need\nto request that data from the servic e that published the event. In the OrderCreated\nevent, the Order aggregate can enrich the event by including the order details. The\nfollowing listing shows the enriched event.\nclass OrderCreated implements OrderEvent {\nprivate List<OrderLineItem> lineItems;\nprivate DeliveryInformation deliveryInformation;       \nprivate PaymentInformation paymentInformation;\nprivate long restaurantId;\nprivate String restaurantName;\n...\n}\nBecause this version of the OrderCreated event contains the order details, an event\nconsumer, such as the Order History Service (discussed in chapter 7) no longer\nneeds to fetch that data when processing an OrderCreated event.\n Although event enrichment simplifies consumers, the drawback is that it risks mak-\ning the event classes less stable. An event class potentially needs to change whenever\nthe requirements of its consumers change. This can reduce maintainability because\nthis kind of change can impact multiple parts of the application. Satisfying every con-\nsumer can also be a futile effort. Fortunatel y, in many situations it\u2019s fairly obvious\nwhich properties to include in an event.\n Now that we\u2019ve covered the basics of doma in events, let\u2019s look at how to discover\nthem. \n5.3.4 Identifying domain events\nThere are a few different strategies for identifying domain events. Often the require-\nments will describe scenarios where notifications are required. The requirements\nmight include language such as \u201cWhen X happens do Y.\u201d For example, one require-\nment in the FTGO application is \u201cWhen an  Order is placed send the consumer an\nemail.\u201d A requirement for a notification suggests the existence of a domain event.\n Another approach, which is increasing in popularity, is to use event storming. Event\nstorming is an event-centric workshop format for understanding a complex domain. It\ninvolves gathering domain experts in a room, lots of sticky notes, and a very large sur-\nface\u2014a whiteboard or paper roll\u2014to stick the notes on. The result of event storming\nis an event-centric domain model consisting of aggregates and events.\n \nListing 5.2 The enriched OrderCreated event \nData that its \nconsumers \ntypically need", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2652, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "79eed254-9b84-4778-8288-42dd1bf7cd22": {"__data__": {"id_": "79eed254-9b84-4778-8288-42dd1bf7cd22", "embedding": null, "metadata": {"page_label": "163", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ea93022-b9a9-478b-9649-12bdcd0c7afd", "node_type": "4", "metadata": {"page_label": "163", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "805bddcfcf9cdba26ae07b56b6286625569cb89b35304269422acb04b2c91b4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "163Publishing domain events\n Event storming consist of three main steps:\n1 Brainstorm events \u2014Ask the domain experts to brainstorm the domain events.\nDomain events are represented by orange  sticky notes that are laid out in a\nrough timeline on the modeling surface.\n2 Identify event triggers \u2014Ask the domain experts to identify the trigger of each\nevent, which is one of the following:\n\u2013 User actions, represented as a command using a blue sticky note\n\u2013 External system, represented by a purple sticky note\n\u2013 Another domain event\n\u2013 Passing of time\n3 Identify aggregates\u2014Ask the domain experts to identify the aggregate that con-\nsumes each command and emits the corresponding event. Aggregates are rep-\nresented by yellow sticky notes.\nFigure 5.10 shows the result of an event-storming workshop. In just a couple of hours,\nthe participants identified numerous do main events, commands, and aggregates. It\nwas a good first step in the process of creating a domain model.\nEvent storming is a useful technique for quickly creating a domain model.\n Now that we\u2019ve covered the basics of domain events, let\u2019s look at the mechanics of\ngenerating and publishing them. \nEvent Command Aggregate Policy\nFigure 5.10 The result of an event-storming workshop that lasted a couple of hours. The sticky notes \nare events, which are laid out along a timeline; commands, which represent user actions; and \naggregates, which emit events in response to a command.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1444, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "447e7423-3fd2-401f-912a-0f13c1379d56": {"__data__": {"id_": "447e7423-3fd2-401f-912a-0f13c1379d56", "embedding": null, "metadata": {"page_label": "164", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b20ac86-916d-45ac-8c95-ff0101369cd7", "node_type": "4", "metadata": {"page_label": "164", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4249df47b384380249e8f5c2a33032993898feedc4a21aeabf25301c23b6a24a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "164 CHAPTER 5 Designing business logic in a microservice architecture\n5.3.5 Generating and publishing domain events\nCommunicating using domain events is a form of asynchronous messaging, discussed\nin chapter 3. But before the business logi c can publish them to a message broker, it\nmust first create them. Let\u2019s look at how to do that.\nGENERATING DOMAIN EVENTS\nConceptually, domain events are published by aggregates. An aggregate knows when\nits state changes and hence what event to publish. An aggregate could invoke a mes-\nsaging API directly. The drawback of this approach is that because aggregates can\u2019t\nuse dependency injection, the messaging AP I would need to be passed around as a\nmethod argument. That would intertwine infrastructure concerns and business logic,\nwhich is extremely undesirable.\n A better approach is to split responsibility between the aggregate and the service\n(or equivalent class) that invokes it. Services can use dependency injection to obtain a\nreference to the messaging API, easily publishing events. The aggregate generates the\nevents whenever its state changes and returns them to the service. There are a couple\nof different ways an aggregate can return events back to the service. One option is for\nthe return value of an aggregate method to include a list of events. For example, the\nfollowing listing shows how a Ticket aggregate\u2019s accept() method can return a Ticket-\nAcceptedEvent to its caller.\npublic class Ticket {\npublic List<DomainEvent> accept(ZonedDateTime readyBy) {\n...\nthis.acceptTime = ZonedDateTime.now();   \nthis.readyBy = readyBy;\nreturn singletonList(new TicketAcceptedEvent(readyBy));      \n}\n}\nThe service invokes the aggregate root\u2019s method, and then publishes the events. For\nexample, the following listing shows how KitchenService invokes Ticket.accept() and\npublishes the events.\npublic class KitchenService {\n@Autowired\nprivate TicketRepository ticketRepository;\n@Autowired\nprivate DomainEventPublisher domainEventPublisher;\nListing 5.3 The Ticket aggregate\u2019s accept() method\nListing 5.4 KitchenService calls Ticket.accept() \nUpdates \nthe Ticket\nReturns \nan event", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2130, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "66c20a2f-5924-4ea3-bd7e-3a56b883240c": {"__data__": {"id_": "66c20a2f-5924-4ea3-bd7e-3a56b883240c", "embedding": null, "metadata": {"page_label": "165", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c17c0e7-f9c2-4ed4-9cb6-40bcaa5d13e7", "node_type": "4", "metadata": {"page_label": "165", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cd56ce932bf4dcb4a3b7f55a64e408a1ee0c1ee0bb85863dbb092be1db320140", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "165Publishing domain events\npublic void accept(long ticketId, ZonedDateTime readyBy) {\nTicket ticket =\nticketRepository.findById(ticketId)\n.orElseThrow(() ->\nnew TicketNotFoundException(ticketId));\nList<DomainEvent> events = ticket.accept(readyBy);\ndomainEventPublisher.publish(Ticket.class, orderId, events);\n}\nThe accept() method first invokes the TicketRepository to load the Ticket from the\ndatabase. It then updates the Ticket by calling accept(). KitchenService then pub-\nlishes events returned by Ticket by calling DomainEventPublisher.publish(),\ndescribed shortly.\n This approach is quite simple. Methods that would otherwise have a void return\ntype now return List<Event>. The only potential drawback is that the return type of\nnon-void methods is now more complex. They must return an object containing the\noriginal return value and List<Event>. You\u2019ll see an example of such a method soon.\n Another option is for the aggregate root to accumulate events in a field. The ser-\nvice then retrieves the events and publishe s them. For example, the following listing\nshows a variant of the Ticket class that works this way.\npublic class Ticket extends AbstractAggregateRoot {\npublic void accept(ZonedDateTime readyBy) {\n...\nthis.acceptTime = ZonedDateTime.now();\nthis.readyBy = readyBy;\nregisterDomainEvent(new TicketAcceptedEvent(readyBy));\n}\n}\nTicket extends AbstractAggregateRoot, which defines a registerDomainEvent()\nmethod that records the event. A service would call AbstractAggregateRoot.get-\nDomainEvents() to retrieve those events.\n My preference is for the first option: th e method returning events to the service.\nBut accumulating events in the aggregate ro ot is also a viable option. In fact, the\nSpring Data Ingalls release train ( https://spring.io/blog/2017/01/30/what-s-new-in-\nspring-data-release-ingalls) implements a mechanism that automatically publishes\nevents to the Spring ApplicationContext. The main drawback is that to reduce code\nduplication, aggregate roots should extend a superclass such as AbstractAggregate-\nRoot, which might conflict with a requirement to extend some other superclass. Another\nissue is that although it\u2019s easy fo r the aggregate root\u2019s methods to call register-\nDomainEvent(), methods in other classes in the aggregate would find it challenging.\nThey would mostly likely need to somehow pass the events to the aggregate root. \nListing 5.5 The Ticket extends a superclass, which records domain events\nPublishes \ndomain \nevents", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2483, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8d052b9-7c49-4d0b-8206-fbc46817737b": {"__data__": {"id_": "d8d052b9-7c49-4d0b-8206-fbc46817737b", "embedding": null, "metadata": {"page_label": "166", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "12cc785f-8d99-4437-a08a-fabdba957e3e", "node_type": "4", "metadata": {"page_label": "166", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "af9c0c342ab3ae0be28c44557d658ed5e220f1b3f9878150886165c0a256d61f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "166 CHAPTER 5 Designing business logic in a microservice architecture\nHOW TO RELIABLY PUBLISH DOMAIN EVENTS?\nChapter 3 talks about how to reliably send messages as part of a local database transac-\ntion. Domain events are no different. A service must use transactional messaging to\npublish events to ensure that they\u2019re published as part of the transaction that updates\nthe aggregate in the database. The Eventuate Tram framework, described in chapter 3,\nimplements such a mechanism. It insert events into an OUTBOX table as part of the\nACID transaction that updates the database. After the transaction commits, the events\nthat were inserted into the OUTBOX table are then published to the message broker.\n The Tram framework provides a DomainEventPublisher interface, shown in the\nfollowing listing. It defines several overloaded publish() methods that take the aggre-\ngate type and ID as parameters, along with a list of domain events.\npublic interface DomainEventPublisher {\nvoid publish(String aggregateType, Object aggregateId, \nList<DomainEvent> domainEvents);\nIt uses the Eventuate Tram framework\u2019s MessageProducer interface to publish those\nevents transactionally.\n A service could call the DomainEventPublisher publisher directly. But one draw-\nback of doing so is that it doesn\u2019t ensure  that a service only publishes valid events.\nKitchenService, for example, should only publish events that implement Ticket-\nDomainEvent, which is the marker interface for the Ticket aggregate\u2019s events. A better\noption is for services to implement a subclass of AbstractAggregateDomainEvent-\nPublisher, which is shown in listing 5.7. AbstractAggregateDomainEventPublisher\nis an abstract class that provides a type-s afe interface for publishing domain events.\nIt\u2019s a generic class that has two type parameters, A, the aggregate type, and E, the\nmarker interface type for the domain events. A service publishes events by calling\nthe publish() method, which has two parameters: an aggregate of type A and a list of\nevents of type E.\npublic abstract class AbstractAggregateDomainEventPublisher<A, E extends Doma\ninEvent> {\nprivate Function<A, Object> idSupplier;\nprivate DomainEventPublisher eventPublisher;\nprivate Class<A> aggregateType;\nprotected AbstractAggregateDomainEventPublisher(\nDomainEventPublisher eventPublisher,\nClass<A> aggregateType,\nFunction<A, Object> idSupplier) {\nthis.eventPublisher = eventPublisher;\nthis.aggregateType = aggregateType;\nListing 5.6 The Eventuate Tram framework\u2019s DomainEventPublisher interface\nListing 5.7 The abstract superclass of type-safe domain event publishers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2597, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd3c060a-6a7e-425a-961c-afd9c3747583": {"__data__": {"id_": "dd3c060a-6a7e-425a-961c-afd9c3747583", "embedding": null, "metadata": {"page_label": "167", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb4961dd-98d0-4ad9-89f6-b8f3a0db486e", "node_type": "4", "metadata": {"page_label": "167", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c6201d815669d953bfe7c404adc1cc4d3b61df2d8c49ee66a185fa46976d0106", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "167Publishing domain events\nthis.idSupplier = idSupplier;\n}\npublic void publish(A aggregate, List<E> events) {\neventPublisher.publish(aggregateType, idSupplier.apply(aggregate), \n(List<DomainEvent>) events);\n}\n}\nThe publish() method retrieves the aggregate\u2019s ID and invokes DomainEventPublisher\n.publish(). The following listing shows the TicketDomainEventPublisher, which\npublishes domain events for the Ticket aggregate.\npublic class TicketDomainEventPublisher extends \nAbstractAggregateDomainEventPublisher<Ticket, TicketDomainEvent> {\npublic TicketDomainEventPublisher(DomainEventPublisher eventPublisher) {\nsuper(eventPublisher, Ticket.class, Ticket::getId);\n}\n}\nThis class only publishes events that are a subclass of TicketDomainEvent.\n Now that we\u2019ve looked at how to publ ish domain events, let\u2019s see how to con-\nsume them. \n5.3.6 Consuming domain events\nDomain events are ultimately published as messages to a message broker, such as\nApache Kafka. A consumer could use the broker\u2019s client API directly. But it\u2019s more\nconvenient to use a higher-level API such as the Eventuate Tram framework\u2019s Domain-\nEventDispatcher, described in chapter 3. A DomainEventDispatcher dispatches\ndomain events to the appropriate handle method. Listing 5.9 shows an example event\nhandler class. KitchenServiceEventConsumer subscribes to events published by\nRestaurant Service whenever a restaurant\u2019s menu is updated. It\u2019s responsible for\nkeeping Kitchen Service\u2019s replica of the data up-to-date.\npublic class KitchenServiceEventConsumer {\n@Autowired\nprivate RestaurantService restaurantService;\npublic DomainEventHandlers domainEventHandlers() {       \nreturn DomainEventHandlersBuilder\n.forAggregateType(\"net.chrisrichardson.ftgo.restaurantservice.Restaurant\")\n.onEvent(RestaurantMenuRevised.class, this::reviseMenu)\nListing 5.8 A type-safe interface for publishing Ticket aggregates' domain events\nListing 5.9 Dispatching events to event handler methods\nMaps events to \nevent handlers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1976, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4510124c-ade8-4990-812a-1b345d19b51c": {"__data__": {"id_": "4510124c-ade8-4990-812a-1b345d19b51c", "embedding": null, "metadata": {"page_label": "168", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0dc8cad-be8a-45c4-9fe7-187dfe4ef9c2", "node_type": "4", "metadata": {"page_label": "168", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f84b6421b4f3225a8ef88cdd323142b44ada274ed174afe267d70f23e1dc016c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "168 CHAPTER 5 Designing business logic in a microservice architecture\n.build();\n}\npublic void reviseMenu(DomainEventEnvelope<RestaurantMenuRevised> de) {  \nlong id = Long.parseLong(de.getAggregateId());\nRestaurantMenu revisedMenu = de.getEvent().getRevisedMenu();\nrestaurantService.reviseMenu(id, revisedMenu);\n}\n}\nThe reviseMenu() method handles RestaurantMenuRevised events. It calls restaurant-\nService.reviseMenu(), which updates the restaurant\u2019s menu. That method returns a\nlist of domain events, which are published by the event handler.\n Now that we\u2019ve looked at aggregates and domain events, it\u2019s time to consider some\nexample business logic that\u2019s implemented using aggregates. \n5.4 Kitchen Service business logic\nThe first example is Kitchen Service, which enables a restaurant to manage their\norders. The two main aggregates in this service are the Restaurant and Ticket aggre-\ngates. The Restaurant aggregate knows the restaurant\u2019s menu and opening hours\nand can validate orders. A Ticket represents an order that a restaurant must prepare\nfor pickup by a courier. Figure 5.11 shows these aggregates and other key parts of the\nservice\u2019s business logic, as well as the service\u2019s adapters.\n In addition to the aggregates, the other main parts of Kitchen Service\u2019s business\nlogic are KitchenService, TicketRepository, and RestaurantRepository. Kitchen-\nService is the business logic\u2019s entry. It de fines methods for creating and updating\nthe Restaurant and Ticket aggregates. TicketRepository and RestaurantRepository\ndefine methods for persisting Tickets and Restaurants respectively.\n The Kitchen Service service has three inbound adapters:\n\uf0a1 REST API\u2014The REST API invoked by the user interface used by workers at the\nrestaurant. It invokes KitchenService to create and update Tickets.\n\uf0a1 KitchenServiceCommandHandler\u2014The asynchronous request/response-based\nAPI that\u2019s invoked by sagas. It invokes KitchenService to create and update\nTickets.\n\uf0a1 KitchenServiceEventConsumer\u2014Subscribes to events published by Restaurant\nService. It invokes KitchenService to create and update Restaurants.\nThe service also has two outbound adapters:\n\uf0a1 DB adapter\u2014Implements the TicketRepository and the RestaurantRepository\ninterfaces and accesses the database.\n\uf0a1 DomainEventPublishingAdapter\u2014Implements the DomainEventPublisher inter-\nface and publishes Ticket domain events.\nAn event handler for the\nRestaurantMenuRevised\nevent", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2420, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7ca50aa-f039-46c6-ae0b-7e9d1743b743": {"__data__": {"id_": "e7ca50aa-f039-46c6-ae0b-7e9d1743b743", "embedding": null, "metadata": {"page_label": "169", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "059ffbea-c96a-4830-8bfd-77208657d06a", "node_type": "4", "metadata": {"page_label": "169", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "41895e0363698a9cb8c69a250711ebc826db523a75d1adfc08ed5f852e596a49", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "169Kitchen Service business logic\nLet\u2019s take a closer look at the design of KitchenService, starting with the Ticket\naggregate.\n5.4.1 The Ticket aggregate\nTicket is one of the aggregates of Kitchen Service. As described in chapter 2, when\ntalking about the concept of a Bounded Context, this aggregate represents the restau-\nrant kitchen\u2019s view of an order. It doesn\u2019t contain information about the consumer,\nsuch as their identity, the delivery inform ation, or payment details. It\u2019s focused on\nenabling a restaurant\u2019s kitchen to prepare the Order for pickup. Moreover, Kitchen-\nService doesn\u2019t generate a unique ID for this aggregate. Instead, it uses the ID sup-\nplied by OrderService.\n Let\u2019s first look at the structure of this class and then we\u2019ll examine its methods.\nKitchen Service\ncommand channel\nRestaurant Events\nchannel\nTicket events\nchannel\nKitchen Service\ndatabase\nCreate ticket\nCon\ufb01rm create ticket\nRestaurant created\nRestaurant menu revised\naccept\nreject\npreparing\nreadyForPickup\npickedUp\nREST API\nRestaurant\nKitchen\nService\nDomain event\npublisher\n\u00abaggregate\u00bb\nTicket\n\u00abaggregate\u00bb\nrestaurant\n\u00abrepository\u00bb\nTicket\nRepository\n\u00abrepository\u00bb\nRestaurant\nRepository\nKitchenService\nCommandHandler\nKitchenService\nEventConsumer\nDatabase\nadapter\nDomain event\npublishing adapter\nFigure 5.11 The design of Kitchen Service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1321, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "831f18df-95a8-491d-bcea-fa601a16a183": {"__data__": {"id_": "831f18df-95a8-491d-bcea-fa601a16a183", "embedding": null, "metadata": {"page_label": "170", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9159eb97-cc7d-48b5-8101-6e0d8f87a1ef", "node_type": "4", "metadata": {"page_label": "170", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6cc1f468a9ab2cda4c2ecc09f28fc512227a8fb4e9d5d7caf6116008f271b7aa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "170 CHAPTER 5 Designing business logic in a microservice architecture\nSTRUCTURE OF THE TICKET CLASS\nThe following listing shows an excerpt of the code for this class. The Ticket class is\nsimilar to a traditional domain class. The ma in difference is that references to other\naggregates are by primary key.\n@Entity(table=\"tickets\")\npublic class Ticket {\n@Id\nprivate Long id;\nprivate TicketState state;\nprivate Long restaurantId;\n@ElementCollection\n@CollectionTable(name=\"ticket_line_items\")\nprivate List<TicketLineItem> lineItems;\nprivate ZonedDateTime readyBy;\nprivate ZonedDateTime acceptTime;\nprivate ZonedDateTime preparingTime;\nprivate ZonedDateTime pickedUpTime;\nprivate ZonedDateTime readyForPickupTime;\n...\nThis class is persisted with JPA and is mapped to the TICKETS table. The restaurantId\nfield is a Long rather than an object reference to a Restaurant. The readyBy field\nstores the estimate of when the order will be ready for pickup. The Ticket class has\nseveral fields that track the history of the order, including acceptTime, preparing-\nTime, and pickupTime. Let\u2019s look at this class\u2019s methods. \nBEHAVIOR OF THE TICKET AGGREGATE\nThe Ticket aggregate defines several methods. As you saw earlier, it has a static create()\nmethod, which is a factory method that creates a Ticket. There are also some meth-\nods that are invoked when the restaurant updates the state of the order:\n\uf0a1 accept()\u2014The restaurant has accepted the order.\n\uf0a1 preparing()\u2014The restaurant has started preparing the order, which means the\norder can no longer be changed or cancelled.\n\uf0a1 readyForPickup()\u2014The order can now be picked up.\nThe following listing shows some of its methods.\n \n \n \n \nListing 5.10 Part of the Ticket class, which is a JPA entity", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1733, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "505a01e6-8fdb-460d-ad57-d9709e0a9e9f": {"__data__": {"id_": "505a01e6-8fdb-460d-ad57-d9709e0a9e9f", "embedding": null, "metadata": {"page_label": "171", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c343aec-c413-457a-bb2c-7ad70ccc06ba", "node_type": "4", "metadata": {"page_label": "171", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6edbd16a78f34673acaa2920070bd3d19eb7c2dd621fa3d2a5572e7bfcfd7d5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "171Kitchen Service business logic\npublic class Ticket {\npublic static ResultWithAggregateEvents<Ticket, TicketDomainEvent> \ncreate(Long id, TicketDetails details) {\nreturn new ResultWithAggregateEvents<>(new Ticket(id, details), new \nTicketCreatedEvent(id, details));\n}\npublic List<TicketPreparationStartedEvent> preparing() {\nswitch (state) {\ncase ACCEPTED:\nthis.state = TicketState.PREPARING;\nthis.preparingTime = ZonedDateTime.now();\nreturn singletonList(new TicketPreparationStartedEvent());\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\npublic List<TicketDomainEvent> cancel() {\nswitch (state) {\ncase CREATED:\ncase ACCEPTED:\nthis.state = TicketState.CANCELLED;\nreturn singletonList(new TicketCancelled());\ncase READY_FOR_PICKUP:\nthrow new TicketCannotBeCancelledException();\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\nThe create() method creates a Ticket. The preparing() method is called when the\nrestaurant starts preparing the order. It changes the state of the order to PREPARING,\nrecords the time, and publishes an event. The cancel() method is called when a user\nattempts to cancel an order. If the cance llation is allowed, this method changes the\nstate of the order and returns an event. Ot herwise, it throws an exception. These\nmethods are invoked in response to REST API requests as well as events and com-\nmand messages. Let\u2019s look at the classes that invoke the aggregate\u2019s method. \nTHE KITCHENSERVICE DOMAIN SERVICE\nKitchenService is invoked by the service\u2019s inbound adapters. It defines various meth-\nods for changing the state of an order, including accept(), reject(), preparing(), and\nothers. Each method loads the specifies aggregate, calls the corresponding method on\nthe aggregate root, and publishes any domain events. The following listing shows its\naccept() method.\nListing 5.11 Some of the Ticket's methods", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1881, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "017a0281-3012-418b-abb2-6afe0bf46d51": {"__data__": {"id_": "017a0281-3012-418b-abb2-6afe0bf46d51", "embedding": null, "metadata": {"page_label": "172", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f1e7b27-ae54-48b0-a038-2dd0a416090b", "node_type": "4", "metadata": {"page_label": "172", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "126a68936136c60320c364c3254b68f005a4bae6c5829225bbadee171d0aec3d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "172 CHAPTER 5 Designing business logic in a microservice architecture\npublic class KitchenService {\n@Autowired\nprivate TicketRepository ticketRepository;\n@Autowired\nprivate TicketDomainEventPublisher domainEventPublisher;\npublic void accept(long ticketId, ZonedDateTime readyBy) {\nTicket ticket =\nticketRepository.findById(ticketId)\n.orElseThrow(() ->\nnew TicketNotFoundException(ticketId));\nList<TicketDomainEvent> events = ticket.accept(readyBy);\ndomainEventPublisher.publish(ticket, events);          \n}\n}\nThe accept() method is invoked when the restaurant accepts a new order. It has two\nparameters:\n\uf0a1 orderId\u2014ID of the order to accept\n\uf0a1 readyBy\u2014Estimated time when the or der will be ready for pickup\nThis method retrieves the Ticket aggregate and calls its accept() method. It pub-\nlishes any generated events.\n Now let\u2019s look at the class that handles asynchronous commands. \nTHE KITCHENSERVICECOMMANDHANDLER CLASS\nThe KitchenServiceCommandHandler class is an adapter that\u2019s responsible for handling\ncommand messages sent by the various sagas implemented by Order Service. This class\ndefines a handler method for each command, which invokes KitchenService to create\nor update a Ticket. The following listing shows an excerpt of this class.\npublic class KitchenServiceCommandHandler {\n@Autowired\nprivate KitchenService kitchenService;\n public CommandHandlers commandHandlers() {   \nreturn CommandHandlersBuilder\n.fromChannel(\"orderService\")\n.onMessage(CreateTicket.class, this::createTicket)\n.onMessage(ConfirmCreateTicket.class,\nthis::confirmCreateTicket)\nListing 5.12 The service\u2019s accept() method updates Ticket\nListing 5.13 Handling command messages sent by sagas\nPublish \ndomain \nevents\nMaps  command messages \nto message handlers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1741, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a77b3169-a71d-4e72-9562-9522deec09fd": {"__data__": {"id_": "a77b3169-a71d-4e72-9562-9522deec09fd", "embedding": null, "metadata": {"page_label": "173", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85ccbd40-cf03-45ab-ba64-813655718169", "node_type": "4", "metadata": {"page_label": "173", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "db825761d673529c2d052975391d25cb8bd381f876fc05e0e4efad1fb377088e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "173Order Service business logic\n.onMessage(CancelCreateTicket.class,\nthis::cancelCreateTicket)\n.build();\n}\nprivate Message createTicket(CommandMessage<CreateTicket>\ncm) {\nCreateTicket command = cm.getCommand();\nlong restaurantId = command.getRestaurantId();\nLong ticketId = command.getOrderId();\nTicketDetails ticketDetails =\ncommand.getTicketDetails();\ntry {\nTicket ticket =    \nkitchenService.createTicket(restaurantId,\nticketId, ticketDetails);\nCreateTicketReply reply =\nnew CreateTicketReply(ticket.getId());\nreturn withSuccess(reply);   \n} catch (RestaurantDetailsVerificationException e) {\nreturn withFailure();\n}\n}\nprivate Message confirmCreateTicket\n(CommandMessage<ConfirmCreateTicket> cm) {   \nLong ticketId = cm.getCommand().getTicketId();\nkitchenService.confirmCreateTicket(ticketId);\nreturn withSuccess();\n}\n...\nAll the command handler methods invoke KitchenService and reply with either a\nsuccess or a failure reply.\n Now that you\u2019ve seen the business logic for a relatively simple service, we\u2019ll look at\na more complex example: Order Service. \n5.5 Order Service business logic\nAs mentioned in earlier chapters, Order Service provides an API for creating, updat-\ning, and canceling orders. This API is primarily invoked by the consumer. Figure 5.12\nshows the high-level design of the service. The Order aggregate is the central aggre-\ngate of Order Service. But there\u2019s also a Restaurant aggregate, which is a partial\nreplica of data owned by Restaurant Service. It enables Order Service to validate\nand price an Order\u2019s line items.\n In addition to the Order and Restaurant aggregates, the business logic consists of\nOrderService, OrderRepository, RestaurantRepository, and various sagas such as\nthe CreateOrderSaga described in chapter 4. OrderService is the primary entry\npoint into the business logic and defi nes methods for creating and updated Orders\nInvokes KitchenService \nto create the Ticket\nSends back a \nsuccessful reply\nSends back a \nfailure reply\nConfirms \nthe order", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1994, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48746ae0-5eca-4e35-bec5-cc7e27ad7013": {"__data__": {"id_": "48746ae0-5eca-4e35-bec5-cc7e27ad7013", "embedding": null, "metadata": {"page_label": "174", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "712d70c9-a0f1-43dd-95ec-15ed3e91af7b", "node_type": "4", "metadata": {"page_label": "174", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0e5a22dd2bd151b91cd8687b7053dc5e5b7c2a2a43760edbe5c311d705fe6ad5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "174 CHAPTER 5 Designing business logic in a microservice architecture\nand Restaurants. OrderRepository defines methods for persisting Orders, and\nRestaurantRepository has methods for persisting Restaurants. Order Service has\nseveral inbound adapters:\n\uf0a1 REST API\u2014The REST API invoked by the user  interface used by consumers. It\ninvokes OrderService to create and update Orders.\nRestaurant Events\nchannel\nOrder Service\ncommand channel\nConsumer Service\ncommand channel\nKitchen Service\ncommand channel\nAccounting Service\ncommand channel\nCreate order saga\nreply channel\nCancel order saga\nreply channel\nRevise order saga\nreply channel\nTicket events\nchannel\ncreateOrder()\ncancelOrder()\nreviseOrder()\nREST API\nConsumer\nOrderService\nDomain event\npublisher\nCommand\nproducer\n\u00abaggregate\u00bb\nRestaurant\n\u00abaggregate\u00bb\nOrder\n\u00abrepository\u00bb\nOrderRepository\n\u00abrepository\u00bb\nRestaurant\nRepository\nOrderEvent\nconsumer\nOrder\ncommand\nhandlers\nSagaReply\nmessage\nadapter\nDatabase\nadapter\nOutbound\ncommand\nmessage\nadapter\n\u00absaga\u00bb\n*OrderSaga\nOrder Service\ndatabase\nDomain event\npublishing\nadapter\nFigure 5.12 The design of the Order Service. It has a REST API for managing orders. It exchanges messages \nand events with other services via several message channels.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1229, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f4eee60-d904-4d0e-ba4a-44b39acc290a": {"__data__": {"id_": "6f4eee60-d904-4d0e-ba4a-44b39acc290a", "embedding": null, "metadata": {"page_label": "175", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fa49445-43b1-46aa-b7b5-765f1f6127e1", "node_type": "4", "metadata": {"page_label": "175", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f958bf5624ffdafb9cb48969e44e43904ec22140bff2cf446944051b2cbef805", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "175Order Service business logic\n\uf0a1 OrderEventConsumer\u2014Subscribes to events published by Restaurant Service. It\ninvokes OrderService to create and update its replica of Restaurants.\n\uf0a1 OrderCommandHandlers\u2014The asynchronous request/response-based API that\u2019s\ninvoked by sagas. It invokes OrderService to update Orders.\n\uf0a1 SagaReplyAdapter\u2014Subscribes to the saga reply channels and invokes the sagas.\nThe service also has some outbound adapters:\n\uf0a1 DB adapter\u2014Implements the OrderRepository interface and accesses the Order\nService database\n\uf0a1 DomainEventPublishingAdapter\u2014Implements the DomainEventPublisher inter-\nface and publishes Order domain events\n\uf0a1 OutboundCommandMessageAdapter\u2014Implements the CommandPublisher inter-\nface and sends command messages to saga participants\nLet\u2019s first take a closer look at the Order aggregate and then examine OrderService.\n5.5.1 The Order Aggregate\nThe Order aggregate represents an order placed by a consumer. We\u2019ll first look at the\nstructure of the Order aggregate and then check out its methods.\nTHE STRUCTURE OF THE ORDER AGGREGATE\nFigure 5.13 shows the structure of the Order aggregate. The Order class is the root of\nthe Order aggregate. The Order aggregate also consists of value objects such as Order-\nLineItem, DeliveryInfo, and PaymentInfo.\n\u00abvalue object\u00bb\nAddress\nstreet1\nstreet2\ncity\nstate\nzip\n\u00abaggregate\u00bb\nOrder\nstate\nconsumerId\nrestaurantId\n...\nPrice\nOrder minimum\n\u00abvalue object\u00bb\nOrderLineItem\nquantity\nmenuItem\nname\n\u00abvalue object\u00bb\nDeliveryInfo\ndeliveryTime\n\u00abvalue object\u00bb\nMoney\namount\n\u00abvalue object\u00bb\nPaymentInfo\npaymentMethodId\nFigure 5.13 The design of the Order aggregate, which consists of the Order aggregate root \nand various value objects.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1691, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4401a8a7-0aaa-4412-9e75-b608820a22ea": {"__data__": {"id_": "4401a8a7-0aaa-4412-9e75-b608820a22ea", "embedding": null, "metadata": {"page_label": "176", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7cd045b0-7bd2-464e-8581-649c62634755", "node_type": "4", "metadata": {"page_label": "176", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2ef1d91b0f15a0c123ae2c34cb0baa5f888722a3b820a094240fc0976d7a4fe0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "176 CHAPTER 5 Designing business logic in a microservice architecture\nThe Order class has a collection of OrderLineItems. Because the Order\u2019s Consumer\nand Restaurant are other aggregates, it references them by primary key value. The\nOrder class has a DeliveryInfo class, which stores the delivery address and the\ndesired delivery time, and a PaymentInfo, which stores the payment info. The follow-\ning listing shows the code.\n@Entity\n@Table(name=\"orders\")\n@Access(AccessType.FIELD)\npublic class Order {\n@Id\n@GeneratedValue\nprivate Long id;\n@Version\nprivate Long version;\nprivate OrderState state;\nprivate Long consumerId;\nprivate Long restaurantId;\n@Embedded\nprivate OrderLineItems orderLineItems;\n@Embedded\nprivate DeliveryInformation deliveryInformation;\n@Embedded\nprivate PaymentInformation paymentInformation;\n@Embedded\nprivate Money orderMinimum;\nThis class is persisted with JPA and is mapped to the ORDERS table. The id field is the\nprimary key. The version field is used for optimistic locking. The state of an Order is\nrepresented by the OrderState enumeration. The DeliveryInformation and Payment-\nInformation fields are mapped using the @Embedded annotation and are stored as col-\numns of the ORDERS table. The orderLineItems field is an embedded object that\ncontains the order line items. The Order aggregate consists of more than just fields. It\nalso implements business logic, which can be described by a state machine. Let\u2019s take\na look at the state machine. \nTHE ORDER AGGREGATE STATE MACHINE\nIn order to create or update an order, Order Service must collaborate with other ser-\nvices using sagas. Either OrderService or the first step of the saga invokes an Order\nmethod that verifies that the operation can be performed and changes the state of the\nOrder to a pending state. A pending state, as explained in chapter 4, is an example of\nListing 5.14 The Order class and its fields", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1897, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1939983-40d1-468c-971d-cbde5a91e1d1": {"__data__": {"id_": "e1939983-40d1-468c-971d-cbde5a91e1d1", "embedding": null, "metadata": {"page_label": "177", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "061b00a4-ffa3-4457-8699-455df15ac8a9", "node_type": "4", "metadata": {"page_label": "177", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1e39c6b2e09206938f40027ffb01f9b74ec47beed43d3f46b9ea992bfa35972f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "177Order Service business logic\na semantic lock countermeasure, which helps ensure that sagas are isolated from one\nanother. Eventually, once the saga has in voked the participating services, it then\nupdates the Order to reflect the outcome. For example, as described in chapter 4, the\nCreate Order Saga has multiple participant services, including Consumer Service,\nAccounting Service, and Kitchen Service. OrderService first creates an Order in an\nAPPROVAL_PENDING state, and then later changes its state to either APPROVED or\nREJECTED. The behavior of an Order can be modeled as the state machine shown in\nfigure 5.14.\nSimilarly, other Order Service operations such as revise() and cancel() first change\nthe Order to a pending state and use a saga to verify that the operation can be per-\nformed. Then, once the saga has verified that the operation ca n be performed, it\nchanges the Order transitions to some other state that reflects the successful outcome\nof the operation. If the verification of the operation fails, the Order reverts to the pre-\nvious state. For example, the cancel() operation first transitions the Order to the\nCANCEL_PENDING state. If the order can be cancelled, the Cancel Order Saga changes\nthe state of the Order to the CANCELLED state. Otherwise, if a cancel() operation is\nrejected because, for example, it\u2019s too late to cancel the order, then the Order transi-\ntions back to the APPROVED state.\n Let\u2019s now look at the how the Order aggregate implements this state machine. \nTHE ORDER AGGREGATE\u2019S METHODS\nThe Order class has several groups of methods, each of which corresponds to a saga.\nIn each group, one method is invoked at the start of the saga, and the other methods\nare invoked at the end. I\u2019ll first discuss the business logic that creates an Order. After\nthat we\u2019ll look at how an Order is updated. The following listing shows the Order\u2019s\nmethods that are invoked during the process of creating an Order.\nAPPROVAL_PENDING\nCANCEL_PENDING\ncancelRejected\ncancelCon\ufb01rmed\nreviserejected\nauthorized\ncancel\nreviseCon\ufb01rmed\nreviseRejected\nREVISION_PENDING\nAPPROVED\nCANCELLED\nREJECTED\n...\nInitial state\nFigure 5.14 Part of the state machine model of the Order aggregate", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2201, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7617176a-b065-4f9d-b567-ca875b51d5e9": {"__data__": {"id_": "7617176a-b065-4f9d-b567-ca875b51d5e9", "embedding": null, "metadata": {"page_label": "178", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10b048c2-392d-471f-87ac-df42a5eeb32b", "node_type": "4", "metadata": {"page_label": "178", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3e7b74a6082b7629748c30741570c7b39282394423c5139bfb55514757390845", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "178 CHAPTER 5 Designing business logic in a microservice architecture\npublic class Order { ...\npublic static ResultWithDomainEvents<Order, OrderDomainEvent>\n createOrder(long consumerId, Restaurant restaurant,\nList<OrderLineItem> orderLineItems) {\nOrder order = new Order(consumerId, restaurant.getId(), orderLineItems);\nList<OrderDomainEvent> events = singletonList(new OrderCreatedEvent(\nnew OrderDetails(consumerId, restaurant.getId(), orderLineItems,\norder.getOrderTotal()),\nrestaurant.getName()));\nreturn new ResultWithDomainEvents<>(order, events);\n}\npublic Order(OrderDetails orderDetails) {\nthis.orderLineItems = new OrderLineItems(orderDetails.getLineItems());\nthis.orderMinimum = orderDetails.getOrderMinimum();\nthis.state = APPROVAL_PENDING;\n}\n...\npublic List<DomainEvent> noteApproved() {\nswitch (state) {\ncase APPROVAL_PENDING:\nthis.state = APPROVED;\nreturn singletonList(new OrderAuthorized());\n...\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\npublic List<DomainEvent> noteRejected() {\nswitch (state) {\ncase APPROVAL_PENDING:\nthis.state = REJECTED;\nreturn singletonList(new OrderRejected());\n...\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\nThe createOrder() method is a static factory method that creates an Order and pub-\nlishes an OrderCreatedEvent. The OrderCreatedEvent is enriched with the details of\nthe Order, including the line items, the total amount, the restaurant ID, and the\nrestaurant name. Chapter 7 discusses how Order History Service uses Order events,\nincluding OrderCreatedEvent, to maintain an easily queried replica of Orders.\nListing 5.15 The methods that are invoked during order creation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72949651-b2a2-4688-b1b6-0c7060b2024c": {"__data__": {"id_": "72949651-b2a2-4688-b1b6-0c7060b2024c", "embedding": null, "metadata": {"page_label": "179", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ebe6a7c-60d5-4217-bce1-5417cffd9ed0", "node_type": "4", "metadata": {"page_label": "179", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "45cfdc803e3234f16142b1db2017f852d9f3a49fcf634ea19af58d98e4063fb4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "179Order Service business logic\n The initial state of the Order is APPROVAL_PENDING. When the CreateOrderSaga\ncompletes, it will invoke either noteApproved() or noteRejected(). The note-\nApproved() method is invoked when the consumer\u2019s credit card has been successfully\nauthorized. The noteRejected() method is called when one of the services rejects\nthe order or authorization fails. As you can see, the state of the Order aggregate\ndetermines the behavior of most of its methods. Like the Ticket aggregate, it also\nemits events.\n In addition to createOrder(), the Order class defines several update methods. For\nexample, the Revise Order Saga revises an order by first invoking the revise() method\nand then, once it\u2019s verified that the revision can be made, it invokes the confirm-\nRevised() method. The following listing shows these methods.\nclass Order ...\npublic List<OrderDomainEvent> revise(OrderRevision orderRevision) {\nswitch (state) {\ncase APPROVED:\nLineItemQuantityChange change =\norderLineItems.lineItemQuantityChange(orderRevision);\nif (change.newOrderTotal.isGreaterThanOrEqual(orderMinimum)) {\nthrow new OrderMinimumNotMetException();\n}\nthis.state = REVISION_PENDING;\nreturn singletonList(new OrderRevisionProposed(orderRevision,\nchange.currentOrderTotal, change.newOrderTotal));\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\npublic List<OrderDomainEvent> confirmRevision(OrderRevision orderRevision) {\nswitch (state) {\ncase REVISION_PENDING:\nLineItemQuantityChange licd =\norderLineItems.lineItemQuantityChange(orderRevision);\norderRevision\n.getDeliveryInformation()\n.ifPresent(newDi -> this.deliveryInformation = newDi);\nif (!orderRevision.getRevisedLineItemQuantities().isEmpty()) {\norderLineItems.updateLineItems(orderRevision);\n}\nthis.state = APPROVED;\nreturn singletonList(new OrderRevised(orderRevision,\nlicd.currentOrderTotal, licd.newOrderTotal));\nListing 5.16 The Order method for revising an Order", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1944, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff5ef41e-b0aa-4137-a51a-2d163ca29772": {"__data__": {"id_": "ff5ef41e-b0aa-4137-a51a-2d163ca29772", "embedding": null, "metadata": {"page_label": "180", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94b6e2b5-b6cd-4077-a5fc-179f1ed63f0e", "node_type": "4", "metadata": {"page_label": "180", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "47e607b4f3714442c36a5df01177ac05bfdc68f83aa0ac529f10357baea73c3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "180 CHAPTER 5 Designing business logic in a microservice architecture\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\n}\nThe revise() method is called to initiate the revision of an order. Among other\nthings, it verifies that the revised order won\u2019t violate the order minimum and changes\nthe state of the order to REVISION_PENDING. Once Revise Order Saga has successfully\nupdated Kitchen Service and Accounting Service, it then calls confirmRevision()\nto complete the revision.\n These methods are invoked by OrderService. Let\u2019s take a look at that class. \n5.5.2 The OrderService class\nThe OrderService class defines methods for creating and updating Orders. It\u2019s the\nmain entry point into the business logic an d is invoked by various inbound adapters,\nsuch as the REST API. Most of its methods create a saga to orchestrate the creation and\nupdating of Order aggregates. As a result, this service is more complicated than the\nKitchenService class discussed earlier. The following listing shows an excerpt of this\nclass. OrderService is injected with various dependencies, including OrderRepository,\nOrderDomainEventPublisher, and several saga managers. It defines several methods,\nincluding createOrder() and reviseOrder().\n@Transactional\npublic class OrderService {\n@Autowired\nprivate OrderRepository orderRepository;\n@Autowired\nprivate SagaManager<CreateOrderSagaState, CreateOrderSagaState>\ncreateOrderSagaManager;\n@Autowired\nprivate SagaManager<ReviseOrderSagaState, ReviseOrderSagaData>\nreviseOrderSagaManagement;\n@Autowired\nprivate OrderDomainEventPublisher orderAggregateEventPublisher;\npublic Order createOrder(OrderDetails orderDetails) {\nRestaurant restaurant = restaurantRepository.findById(restaurantId)\n.orElseThrow(() -\n> new RestaurantNotFoundException(restaurantId));\nListing 5.17 The OrderService class has methods for creating and managing orders", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1882, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db297ea0-abe3-4944-ae9f-7cdacb78f0cc": {"__data__": {"id_": "db297ea0-abe3-4944-ae9f-7cdacb78f0cc", "embedding": null, "metadata": {"page_label": "181", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c8cea40-fe56-46a0-873f-308b8ba08bca", "node_type": "4", "metadata": {"page_label": "181", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "56daea3db728fbd02cd7a9bdb1971e3172b089bb27ca731257736d8778b50a64", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "181Order Service business logic\nList<OrderLineItem> orderLineItems =   \nmakeOrderLineItems(lineItems, restaurant);\nResultWithDomainEvents<Order, OrderDomainEvent> orderAndEvents =\nOrder.createOrder(consumerId, restaurant, orderLineItems);\nOrder order = orderAndEvents.result;\norderRepository.save(order);\norderAggregateEventPublisher.publish(order,orderAndEvents.events);  \nOrderDetails orderDetails =\nnew OrderDetails(consumerId, restaurantId, orderLineItems,\norder.getOrderTotal());\nCreateOrderSagaState data = new CreateOrderSagaState(order.getId(),\norderDetails);\ncreateOrderSagaManager.create(data, Order.class, order.getId());  \nreturn order;\n}\npublic Order reviseOrder(Long orderId, Long expectedVersion,\nOrderRevision orderRevision) {\npublic Order reviseOrder(long orderId, OrderRevision orderRevision) {\nOrder order = orderRepository.findById(orderId)   \n.orElseThrow(() -> new OrderNotFoundException(orderId));\nReviseOrderSagaData sagaData =\nnew ReviseOrderSagaData(order.getConsumerId(), orderId,\nnull, orderRevision);\nreviseOrderSagaManager.create(sagaData);   \nreturn order;\n}\n}\nThe createOrder() method first creates and persists an Order aggregate. It then pub-\nlishes the domain events emitted by th e aggregate. Finally, it creates a CreateOrder-\nSaga. The reviseOrder() retrieves the Order and then creates a ReviseOrderSaga.\n In many ways, the business logic for a mi croservices-based application is not that\ndifferent from that of a monolithic applicatio n. It\u2019s comprised of classes such as ser-\nvices, JPA-backed entities, and repositori es. There are some differences, though. A\ndomain model is organized as a set of DD D aggregates that impose various design\nconstraints. Unlike in a traditional object model, references between classes in differ-\nent aggregates are in terms of primary key value rather than object references. Also, a\ntransaction can only create or update a single aggregate. It\u2019s also useful for aggregates\nto publish domain events when their state changes.\n Another major difference is that services  often use sagas to maintain data consis-\ntency across multiple services. For example, Kitchen Service merely participates in\nsagas, it doesn\u2019t initiate them. In contrast, Order Service relies heavily on sagas when\nCreates the Order \naggregate\nPersists the Order \nin the database\nPublishes\ndomain\nevents\nCreates the Create\nOrder Saga\nRetrieves\nthe Order\nCreates the \nRevise Order \nSaga", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2430, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71df8bd9-7c44-486f-a9c2-527c98a657b3": {"__data__": {"id_": "71df8bd9-7c44-486f-a9c2-527c98a657b3", "embedding": null, "metadata": {"page_label": "182", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46fe67e1-4cfc-431c-92a1-72b63a81c31a", "node_type": "4", "metadata": {"page_label": "182", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f100afe06d1fdd549ee293df83eaa6f0ac7284b0b3f96afa8c93b865749c4e24", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "182 CHAPTER 5 Designing business logic in a microservice architecture\ncreating and updating orders. That\u2019s because Orders must be transactionally consis-\ntent with data owned by other services. As a result, most OrderService methods create\na saga rather than update an Order directly.\n This chapter has covered how to impl ement business logic using a traditional\napproach to persistence. That has involv ed integrating messaging and event publish-\ning with database transaction management. The event publishing code is intertwined\nwith the business logic. The next chapter looks at event sourcing, an event-centric\napproach to writing business logic where even t generation is integral to the business\nlogic rather than being bolted on. \nSummary\n\uf0a1 The procedural Transaction script patt ern is often a good way to implement\nsimple business logic. But when implementing complex business logic you should\nconsider using the object-oriented Domain model pattern.\n\uf0a1 A good way to organize a service\u2019s business logic is as a collection of DDD aggre-\ngates. DDD aggregates are useful beca use they modularize the domain model,\neliminate the possibility of object refe rence between services, and ensure that\neach ACID transaction is within a service.\n\uf0a1 An aggregate should publish domain ev ents when it\u2019s created or updated.\nDomain events have a wide variety of uses. Chapter 4 discusses how they can\nimplement choreography-based sagas. An d, in chapter 7, I talk about how to\nuse domain events to update replicated data. Domain event subscribers can also\nnotify users and other applications, and publish WebSocket messages to a user\u2019s\nbrowser.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1640, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0d76b353-b631-42a2-9ec6-269a1efb9947": {"__data__": {"id_": "0d76b353-b631-42a2-9ec6-269a1efb9947", "embedding": null, "metadata": {"page_label": "183", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ee9d65c-b0b4-4f68-833f-9768807ceff3", "node_type": "4", "metadata": {"page_label": "183", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "27bb7a167a4f129d0e504beb350c2080b1215819cd4bd6d7466ef2f0b831bce0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "183\nDeveloping business\nlogic with event sourcing\nMary liked the idea, described in chapter 5, of structuring business logic as a collec-\ntion of DDD aggregates that publish doma in events. She could imagine the use of\nthose events being extremely useful in a microservice architecture. Mary planned\nto use events to implement choreography-based sagas, which maintain data consis-\ntency across services and are described in chapter 4. She also expected to use CQRS\nviews, replicas that support efficient querying that are described in chapter 7.\n She was, however, worried that the event publishing logic might be error prone.\nOn one hand, the event publishing logic is reasonably straightforward. Each of an\naggregate\u2019s methods that initializes or changes the state of the aggregate returns a\nlist of events. The domain service then publishes those events. But on the other\nThis chapter covers\n\uf0a1 Using the Event sourcing pattern to develop \nbusiness logic\n\uf0a1 Implementing an event store\n\uf0a1 Integrating sagas and event sourcing-based \nbusiness logic\n\uf0a1 Implementing saga orchestrators using event \nsourcing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1103, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dfd4aab0-2794-43d9-99b7-f7d5c6340fa7": {"__data__": {"id_": "dfd4aab0-2794-43d9-99b7-f7d5c6340fa7", "embedding": null, "metadata": {"page_label": "184", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72d9b5b2-2c2f-4274-9936-50799d67c548", "node_type": "4", "metadata": {"page_label": "184", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cae3e9efbc6d3fb401b7f8d314780784d8a319b0deef14405234a951406ad1bb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "184 CHAPTER 6 Developing business logic with event sourcing\nhand, the event publishing logic is bolted on to the business logic. The business logic\ncontinues to work even when the developer forgets to publish an event. Mary was con-\ncerned that this way of publishing events might be a source of bugs.\n Many years ago, Mary had learned about event sourcing, an event-centric way of writ-\ning business logic and persisting domain obje cts. At the time she was intrigued by its\nnumerous benefits, including how it preserves the complete history of the changes to\nan aggregate, but it remained a curiosit y. Given the importance of domain events\nin microservice architecture, she now wo nders whether it would be worthwhile to\nexplore using event sourcing in the FTGO application. After all, event sourcing elimi-\nnates a source of programming errors by guaranteeing that an event will be published\nwhenever an aggregate is created or updated.\n I begin this chapter by describing how event sourcing works and how you can use it\nto write business logic. I describe how ev ent sourcing persists each aggregate as a\nsequence of events in what is known as an event store. I discuss the benefits and draw-\nbacks of event sourcing and cover how to implement an event store. I describe a sim-\nple framework for writing event sourcing-bas ed business logic. After that, I discuss\nhow event sourcing is a good foundation fo r implementing sagas. Let\u2019s start by look-\ning at how to develop business logic with event sourcing.\n6.1 Developing business logic using event sourcing\nEvent sourcing is a different way of structuring the business logic and persisting aggre-\ngates. It persists an aggregate as a sequence of events. Each event represents a state\nchange of the aggregate. An application recreates the current state of an aggregate by\nreplaying the events.\nEvent sourcing has several important benefits. For example, it preserves the history of\naggregates, which is valuable for auditing  and regulatory purposes. And it reliably\npublishes domain events, which is particularly useful in a microservice architecture.\nEvent sourcing also has drawbacks. It involves a learning curve, because it\u2019s a different\nway to write your business logic. Also, querying the event store is often difficult, which\nrequires you to use the CQRS pattern, described in chapter 7.\n I begin this section by desc ribing the limitations of traditional persistence. I then\ndescribe event sourcing in detail and talk  about how it overcomes those limitations.\nAfter that, I show how to implement the Order aggregate using event sourcing. Finally,\nI describe the benefits and drawbacks of event sourcing.\n Let\u2019s first look at the limitations of the traditional approach to persistence.\nPattern: Event sourcing\nPersist an aggregate as a sequence of domain events that represent state changes.\nSee http://microservices.io/patterns/data/event-sourcing.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2919, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1504f86-38eb-4f9b-b85b-23746d04fca3": {"__data__": {"id_": "f1504f86-38eb-4f9b-b85b-23746d04fca3", "embedding": null, "metadata": {"page_label": "185", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4bf2f4ca-f81e-4723-8fa2-6a4f7fbd06b8", "node_type": "4", "metadata": {"page_label": "185", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2e6164ff88ccb78a46c3fe923590fc422dc3e5e6867efff5cbd29d3891056a46", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "185Developing business logic using event sourcing\n6.1.1 The trouble with traditional persistence\nThe traditional approach to persistence maps classes to database tables, fields of those\nclasses to table columns, and instances of those classes to rows in those tables. For\nexample, figure 6.1 shows how the Order aggregate, described in chapter 5, is mapped\nto the ORDER table. Its OrderLineItems are mapped to the ORDER_LINE_ITEM table.\nThe application persists an order instance as rows in the ORDER and ORDER_LINE_ITEM\ntables. It might do that using an ORM fram ework such as JPA or a lower-level frame-\nwork such as MyBATIS.\n This approach clearly works well becaus e most enterprise applications store data\nthis way. But it has several drawbacks and limitations:\n\uf0a1 Object-Relational impedance mismatch.\n\uf0a1 Lack of aggregate history.\n\uf0a1 Implementing audit logging is tedious and error prone.\n\uf0a1 Event publishing is bolted on to the business logic.\nLet\u2019s look at each of these problems, starting with the Object-Relational impedance\nmismatch problem.\nOBJECT-RELATIONAL IMPEDANCE MISMATCH\nOne age-old problem is the so-called Object-Relational impedance mismatch  problem.\nThere\u2019s a fundamental conceptual mismatch  between the tabular relational schema\nand the graph structure of a rich domain  model with its complex relationships.\nSome aspects of this problem are reflected in polarized debates over the suitability of\nObject/Relational mapping (ORM) framewor ks. For example, Ted Neward has said\nthat \u201cObject-Relational mapping is the Vietnam of Computer Science\u201d (http://blogs\n.tedneward.com/post/the-vietnam-of-computer-science/ ). To be fair, I\u2019ve used\n\u00abclass\u00bb\nOrder\nID\n1234\nCUSTOMER_ID\ncustomer-abc\nORDER_TOTAL\n1234.56\n...\n...\n\u00abclass\u00bb\nOrderLineItem\nID\n567\nORDER_ID\n1234\nORDERtable\nORDER_LINE_ITEMtable\nQUANTITY\n2\n...\n...\nFigure 6.1 The traditional approach to persistence m aps classes to tables and objects to rows in \nthose tables.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1939, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2364f45-292f-459d-880c-a8854fe1df6b": {"__data__": {"id_": "b2364f45-292f-459d-880c-a8854fe1df6b", "embedding": null, "metadata": {"page_label": "186", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d652bf09-54b0-4168-acc7-f150bfd03c93", "node_type": "4", "metadata": {"page_label": "186", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "69a016f794cf7264b9acf0f89d3462b60dc1feb05559b49d398e78ed8a24a03d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "186 CHAPTER 6 Developing business logic with event sourcing\nHibernate successfully to develop applications where the database schema has been\nderived from the object model. But the problems are deeper than the limitations of\nany particular ORM framework. \nLACK OF AGGREGATE HISTORY\nAnother limitation of traditional persistence is  that it only stores the current state of\nan aggregate. Once an aggregate has been updated, its previous state is lost. If an\napplication must preserve the history of an aggregate, perhaps for regulatory pur-\nposes, then developers must implement th is mechanism themselves. It is time con-\nsuming to implement an aggregate histor y mechanism and involves duplicating code\nthat must be synchronized with the business logic. \nIMPLEMENTING AUDIT LOGGING IS TEDIOUS AND ERROR PRONE\nAnother issue is audit logging. Many appl ications must maintain an audit log that\ntracks which users have changed an aggregate. Some applications require auditing for\nsecurity or regulatory purposes. In other applications, the history of user actions is an\nimportant feature. For example, issue tr ackers and task-management applications\nsuch as Asana and JIRA display the history of changes to tasks and issues. The chal-\nlenge of implementing auditing is that besides being a time-consuming chore, the\nauditing logging code and the business logic can diverge, resulting in bugs. \nEVENT PUBLISHING IS BOLTED ON TO THE BUSINESS LOGIC\nAnother limitation of traditional persistence is that it usually doesn\u2019t support publishing\ndomain events. Domain events, discussed in chapter 5, are events that are published by\nan aggregate when its state changes. They\u2019re a useful mechanism for synchronizing data\nand sending notifications in microservice architecture. Some ORM frameworks, such\nas Hibernate, can invoke application-prov ided callbacks when data objects change.\nBut there\u2019s no support for automatically pub lishing messages as part of the transac-\ntion that updates the data. Consequently, as with history and auditing, developers\nmust bolt on event-generation logic, which risks not being synchronized with the busi-\nness logic. Fortunately, there\u2019s a solution to these issues: event sourcing. \n6.1.2 Overview of event sourcing\nEvent sourcing is an event-centric technique for implementing business logic and per-\nsisting aggregates. An aggregate is stored in the database as a series of events. Each\nevent represents a state change of the aggregate. An aggregate\u2019s business logic is struc-\ntured around the requirement to produce and consume these events. Let\u2019s see how\nthat works.\nEVENT SOURCING PERSISTS AGGREGATES USING EVENTS\nEarlier, in section 6.1.1, I discussed how traditional persistence maps aggregates to\ntables, their fields to columns, and their instances to rows. Event sourcing is a very\ndifferent approach to persisting aggregat es that builds on the concept of domain\nevents. It persists each aggregate as a se quence of events in the database, known as\nan event store.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3002, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "19e42cf9-6898-4f39-a9b2-b008220c12e5": {"__data__": {"id_": "19e42cf9-6898-4f39-a9b2-b008220c12e5", "embedding": null, "metadata": {"page_label": "187", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b72b372f-9d68-48c3-980c-12136c316df3", "node_type": "4", "metadata": {"page_label": "187", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e4305ce01f0b5815334d2a685fb785dbfa84f379414c897c7d5e4ba6fe78dc2c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "187Developing business logic using event sourcing\n Consider, for example, the Order aggregate. As figure 6.2 shows, rather than store\neach Order as a row in an ORDER table, event sourcing persists each Order aggregate as\none or more rows in an EVENTS table. Each row is a domain event, such as Order\nCreated, Order Approved, Order Shipped, and so on.\nWhen an application creates or updates an aggregate, it inserts the events emitted by\nthe aggregate into the EVENTS table. An application loads an aggregate from the event\nstore by retrieving its events and replaying them. Specifically, loading an aggregate\nconsists of the following three steps:\n1 Load the events for the aggregate.\n2 Create an aggregate instance by using its default constructor.\n3 Iterate through the events, calling apply().\nFor example, the Eventuate Client framework, covered later in section 6.2.2, uses code\nsimilar to the following to reconstruct an aggregate:\nClass aggregateClass = ...;\nAggregate aggregate = aggregateClass.newInstance();\nfor (Event event : events) {\naggregate = aggregate.applyEvent(event);\n}\n// use aggregate...\nIt creates an instance of the class and it erates through the events, calling the aggre-\ngate\u2019s applyEvent() method. If you\u2019re familiar with  functional programming, you\nmay recognize this as a fold or reduce operation.\nevent_id\n102\n103\n104\n105\n...\nEVENTS table\nevent_type\nOrder\nCreated\nOrder\nApproved\nOrder\nShipped\nOrder\nDelivered\n...\nentity_type\nOrder\nOrder\nOrder\nOrder\n...\nentity_id\n101\n101\n101\n101\n...\nevent_data\n{...}\n{...}\n{...}\n{...}\n...\nUnique event ID The type of the event Identi\ufb01es the aggregate The serialized event,\nsuch as JSON\nFigure 6.2 Event sourcing persists each ag gregate as a sequence of events. A RDBMS-based \napplication can, for example, store the events in an EVENTS table.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c5514212-3dd8-435e-b03b-b3416f86d891": {"__data__": {"id_": "c5514212-3dd8-435e-b03b-b3416f86d891", "embedding": null, "metadata": {"page_label": "188", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c5e91c0-9fe8-482a-a482-8bbc3dfbb485", "node_type": "4", "metadata": {"page_label": "188", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d598971d98c7c19475a774d67201d0fd3ddaa96ec702d5d1e7cfd5eadc3079e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "188 CHAPTER 6 Developing business logic with event sourcing\n It may be strange and unfamiliar to reconstruct the in-memory state of an aggre-\ngate by loading the events and replaying events. But in some ways, it\u2019s not all that dif-\nferent from how an ORM framework such as JPA or Hibernate loads an entity. An\nORM framework loads an object by executing one or more SELECT statements to\nretrieve the current persisted state, instan tiating objects using their default construc-\ntors. It uses reflection to initialize those objects. What\u2019s different about event sourcing\nis that the reconstruction of the in-memory state is accomplished using events.\n Let\u2019s now look at the requirements event sourcing places on domain events. \nEVENTS REPRESENT STATE CHANGES\nChapter 5 defines domain events as a mechanism for notifying subscribers of changes\nto aggregates. Events can either contain mi nimal data, such as just the aggregate ID,\nor can be enriched to contain data that\u2019s useful to a typical consumer. For example,\nthe Order Service can publish an OrderCreated event when an order is created. An\nOrderCreated event may only contain the orderId. Alternatively, the event could con-\ntain the complete order so consumers of that event don\u2019t have to fetch the data from\nthe Order Service. Whether events are published an d what those events contain are\ndriven by the needs of the consumers. With event sourcing, though, it\u2019s primarily the\naggregate that determines the events and their structure.\n Events aren\u2019t optional when using event sourcing. Every state change of an aggre-\ngate, including its creation, is represented by a domain event. Whenever the aggregate\u2019s\nstate changes, it must emit an event. For example, an Order aggregate must emit an\nOrderCreated event when it\u2019s created, and an Order* event whenever it is updated.\nThis is a much more stringent requirement than before, when an aggregate only emit-\nted events that were of interest to consumers.\n What\u2019s more, an event must contain the data that the aggregate needs to perform\nthe state transition. The state of an aggregate consists of the values of the fields of the\nobjects that comprise the aggregate. A state change might be as simple as changing\nthe value of the field of an object, such as Order.state. Alternatively, a state change\ncan involve adding or removing objects, such as revising an Order\u2019s line items.\n Suppose, as figure 6.3 shows, that the current state of the aggregate is S and the\nnew state is S'. An event E that represents the state change must contain the data such\nthat when an Order is in state S, calling order.apply(E) will update the Order to state\nS'. In the next section you\u2019ll see that apply() is a method that performs the state\nchange represented by an event.\n Some events, such as the Order Shipped event, contain little or no data and just\nrepresent the state transition. The apply() method handles an Order Shipped event\nby changing the Order\u2019s status field to SHIPPED. Other events, however, contain a lot\nof data. An OrderCreated event, for example, must contain all the data needed by the\napply() method to initialize an Order, including its line items, payment information,\ndelivery information, and so on. Because even ts are used to persist an aggregate, you\nno longer have the option of using a minimal OrderCreated event that contains the\norderId.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3357, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6431af44-2d52-454b-862f-a66b73f777c5": {"__data__": {"id_": "6431af44-2d52-454b-862f-a66b73f777c5", "embedding": null, "metadata": {"page_label": "189", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42266558-3359-4a22-b4bf-24f94cc9c2b8", "node_type": "4", "metadata": {"page_label": "189", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "253d394b629b1421a3fa8ef106019cc39d32e75d656099e6dd312d8ee73beff9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "189Developing business logic using event sourcing\nAGGREGATE METHODS ARE ALL ABOUT EVENTS\nThe business logic handles a request to upd ate an aggregate by calling a command\nmethod on the aggregate root. In a tradit ional application, a command method typi-\ncally validates its arguments and then update s one or more of the aggregate\u2019s fields.\nCommand methods in an event sourcing-bas ed application work because they must\ngenerate events. As figure 6.4 shows, th e outcome of invoking an aggregate\u2019s com-\nmand method is a sequence of events that  represent the state changes that must be\nmade. These events are persisted in the database and applied to the aggregate to\nupdate its state.\nThe requirement to generate events and a pply them requires a restructuring\u2014albeit\nmechanical\u2014of the business logic. Event sourcing refactors a command method into\ntwo or more methods. The first method takes a command object parameter, which\nrepresents the request, and determines what  state changes need to be performed. It\nvalidates its arguments, and without changing the state of the aggregate, returns a list\nof events representing the state changes. This method typically throws an exception if\nthe command cannot be performed.\nObjects and \ufb01eld values Updated objects\nand \ufb01eld values\n\u00abaggregate\u00bb\nOrder\nS\nEvent\napply()\n\u00abaggregate\u00bb\nOrder\nS\u2019\nFigure 6.3 Applying event E \nwhen the Order is in state S \nmust change the Order state to \nS'. The event must contain the \ndata necessary to perform the \nstate change.\n\u00abaggregate\u00bb\nOrder\nS\nEvent\napply()\nProcess(command)\n\u00abaggregate\u00bb\nOrder\nS\u2019\n\u00abaggregate\u00bb\nOrder\nS\nEvent\nFigure 6.4 Processing a command \ngenerates events without changing \nthe state of the aggregate. An \naggregate is updated by applying \nan event.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1741, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51cf8cea-7247-4877-b8d6-50f9e4a8d72c": {"__data__": {"id_": "51cf8cea-7247-4877-b8d6-50f9e4a8d72c", "embedding": null, "metadata": {"page_label": "190", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d88a53fd-eeff-47d9-97bc-6c9a977e8f4b", "node_type": "4", "metadata": {"page_label": "190", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "bbe84797e25073e9e12e77e4a681356583bb3aa92986640ac8039eb4f4947ccb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "190 CHAPTER 6 Developing business logic with event sourcing\n The other methods each take a particul ar event type as a parameter and update\nthe aggregate. There\u2019s one of these method s for each event. It\u2019s important to note\nthat these methods can\u2019t fail, because an event represents a state change that has hap-\npened. Each method updates the aggregate based on the event.\n The Eventuate Client framework, an event-sourcing framework described in more\ndetail in section 6.2.2, names these methods process() and apply(). A process()\nmethod takes a command object, which contains the arguments of the update\nrequest, as a parameter and returns a list of events. An apply() method takes an event\nas a parameter and returns void. An aggreg ate will define multiple overloaded ver-\nsions of these methods: one process() method for each command class and one\napply() method for each event type emitted by the aggregate. Figure 6.5 shows an\nexample.\nReturns events without updating the Order Applies events to update the Order\npublic class Order {\npublic List<Event> process(ReviseOrder command) {\nOrderRevision orderRevision = command.getOrderRevision();\nswitch (state) {\ncase AUTHORIZED:\nLineItemQuantityChange change =\norderLineItems.lineItemQuantityChange(orderRevision);\nif (change.newOrderTotal.isGreaterThanOrEqual(orderMinimum)) {\nthrow new OrderMinimumNotMetException();\n}\nreturn singletonList(\nnew OrderRevisionProposed(\norderRevision, change.currentOrderTotal,\nchange.newOrderTotal));\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\npublic class Order {\npublic void apply(OrderRevisionProposed event) {\nthis.state = REVISION_PENDING;\n}\npublic class Order {\npublic List<DomainEvent> revise(OrderRevision orderRevision) {\nswitch (state) {\ncase AUTHORIZED:\nLineItemQuantityChange change =\norderLineItems.lineItemQuantityChange(orderRevision);\nif (change.newOrderTotal.isGreaterThanOrEqual(orderMinimum)) {\nthrow new OrderMinimumNotMetException();\n}\nthis.state = REVISION_PENDING;\nreturn \u2026;\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\nFigure 6.5 Event sourcing splits a met hod that updates an aggregate into a process() method, which takes \na command and returns events, and one or more apply() methods, which take an event and update the \naggregate.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2293, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "028e2fe8-f139-4c5d-9ae7-bedf9ac34dd1": {"__data__": {"id_": "028e2fe8-f139-4c5d-9ae7-bedf9ac34dd1", "embedding": null, "metadata": {"page_label": "191", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75caf562-7a06-406b-8eb7-74c648fcc5ed", "node_type": "4", "metadata": {"page_label": "191", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b5ea930d1547f055c49cd3c4f8b11660feb0029e9342efd9211211a7856209b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "191Developing business logic using event sourcing\nIn this example, the reviseOrder() method is replaced by a process() method and\nan apply() method. The process() method takes a ReviseOrder command as a\nparameter. This command class is defined by applying Introduce Parameter Object refactor-\ning (https://refactoring.com/catalog/introduceParameterObject.html) to the revise-\nOrder() method. The process() method either returns an OrderRevisionProposed\nevent, or throws an exception if it\u2019s too late to revise the Order or if the proposed revi-\nsion doesn\u2019t meet the order minimum. The apply() method for the OrderRevision-\nProposed event changes the state of the Order to REVISION_PENDING.\n An aggregate is created using the following steps:\n1 Instantiate aggregate root using its default constructor.\n2 Invoke process() to generate the new events.\n3 Update the aggregate by iterating through the new events, calling its apply().\n4 Save the new events in the event store.\nAn aggregate is updated using the following steps:\n1 Load aggregate\u2019s events from the event store.\n2 Instantiate the aggregate root using its default constructor.\n3 Iterate through the loaded events, calling apply() on the aggregate root.\n4 Invoke its process() method to generate new events.\n5 Update the aggregate by iterating through the new events, calling apply().\n6 Save the new events in the event store.\nTo see this in action, let\u2019s now look at the event sourcing version of the Order aggregate. \nEVENT SOURCING-BASED ORDER AGGREGATE\nListing 6.1 shows the Order aggregate\u2019s fields and the methods responsible for creat-\ning it. The event sourcing version of the Order aggregate has some similarities to the\nJPA-based version shown in chapter 5. Its fields are almost identical, and it emits simi-\nlar events. What\u2019s different is that its bu siness logic is implemented in terms of pro-\ncessing commands that emit events and applying those events, which updates its state.\nEach method that creates or updates the JPA-based aggregate, such as createOrder()\nand reviseOrder(), is replaced in the event sourcing version by process() and\napply() methods.\npublic class Order {\nprivate OrderState state;\nprivate Long consumerId;\nprivate Long restaurantId;\nprivate OrderLineItems orderLineItems;\nprivate DeliveryInformation deliveryInformation;\nprivate PaymentInformation paymentInformation;\nprivate Money orderMinimum;\nListing 6.1 The Order aggregate\u2019s fields and its methods that initialize an instance", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2477, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "892f2d77-57f7-42e4-bc66-d574863f844d": {"__data__": {"id_": "892f2d77-57f7-42e4-bc66-d574863f844d", "embedding": null, "metadata": {"page_label": "192", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68dbcd2c-8984-465d-b58d-67665b72d84a", "node_type": "4", "metadata": {"page_label": "192", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "09dbc8087e2976e5ecce51b8ed7da78217d0fc703812cda4dd72ef6a25eeb557", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "192 CHAPTER 6 Developing business logic with event sourcing\npublic Order() {\n}\npublic List<Event> process(CreateOrderCommand command) {   \n... validate command ...\nreturn events(new OrderCreatedEvent(command.getOrderDetails()));\n}\npublic void apply(OrderCreatedEvent event) {   \nOrderDetails orderDetails = event.getOrderDetails();\nthis.orderLineItems = new OrderLineItems(orderDetails.getLineItems());\nthis.orderMinimum = orderDetails.getOrderMinimum();\nthis.state = APPROVAL_PENDING;\n}\nThis class\u2019s fields are similar to those of the JPA-based Order. The only difference is\nthat the aggregate\u2019s id isn\u2019t stored in the aggregate. The Order\u2019s methods are quite\ndifferent. The createOrder() factory method has been replaced by process() and\napply() methods. The process() method takes a CreateOrder command and emits\nan OrderCreated event. The apply() method takes the OrderCreated and initializes\nthe fields of the Order.\n We\u2019ll now look at the slightly more co mplex business logic for revising an order.\nPreviously this business logic consisted of three methods: reviseOrder(), confirm-\nRevision(), and rejectRevision(). The event sourcing version replaces these three\nmethods with three process() methods and some apply() methods. The following list-\ning shows the event sourcing version of reviseOrder() and confirmRevision().\npublic class Order {\npublic List<Event> process(ReviseOrder command) {   \nOrderRevision orderRevision = command.getOrderRevision();\nswitch (state) {\ncase APPROVED:\nLineItemQuantityChange change =\norderLineItems.lineItemQuantityChange(orderRevision);\nif (change.newOrderTotal.isGreaterThanOrEqual(orderMinimum)) {\nthrow new OrderMinimumNotMetException();\n}\nreturn singletonList(new OrderRevisionProposed(orderRevision,\nchange.currentOrderTotal, change.newOrderTotal));\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\npublic void apply(OrderRevisionProposed event) {   \nthis.state = REVISION_PENDING;\n}\nListing 6.2 The process() and apply() methods that revise an Order aggregate\nValidates the command and\nreturns an OrderCreatedEvent\nApply the OrderCreatedEvent by\ninitializing the fields of the Order.\nVerify that the Order \ncan be revised and \nthat the revised \norder meets the \norder minimum.\nChange the state of the Order \nto REVISION_PENDING.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2296, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6cc277ef-5fd9-4f4f-acb3-00ea06174cbb": {"__data__": {"id_": "6cc277ef-5fd9-4f4f-acb3-00ea06174cbb", "embedding": null, "metadata": {"page_label": "193", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac117449-6a55-41ee-987f-4d3f8d38b010", "node_type": "4", "metadata": {"page_label": "193", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0611cfbbfef0d684fe926ade4337ca58b9b54dbc7f2cf945c1f22419850c0f57", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "193Developing business logic using event sourcing\npublic List<Event> process(ConfirmReviseOrder command) {   \nOrderRevision orderRevision = command.getOrderRevision();\nswitch (state) {\ncase REVISION_PENDING:\nLineItemQuantityChange licd =\norderLineItems.lineItemQuantityChange(orderRevision);\nreturn singletonList(new OrderRevised(orderRevision,\nlicd.currentOrderTotal, licd.newOrderTotal));\ndefault:\nthrow new UnsupportedStateTransitionException(state);\n}\n}\npublic void apply(OrderRevised event) {\nOrderRevision orderRevision = event.getOrderRevision();\nif (!orderRevision.getRevisedLineItemQuantities().isEmpty()) {\norderLineItems.updateLineItems(orderRevision);\n}\nthis.state = APPROVED;\n}\nAs you can see, each method has been replaced by a process() method and one or\nmore apply() methods. The reviseOrder() method has been replaced by process\n(ReviseOrder) and apply(OrderRevisionProposed). Similarly, confirmRevision()\nhas been replaced by process(ConfirmReviseOrder) and apply(OrderRevised). \n6.1.3 Handling concurrent updates using optimistic locking\nIt\u2019s not uncommon for two or more requ ests to simultaneously update the same\naggregate. An application that uses traditio nal persistence often uses optimistic lock-\ning to prevent one transaction from  overwriting another\u2019s changes. Optimistic locking\ntypically uses a version column to detect  whether an aggregate has changed since it\nwas read. The application maps the aggregate root to a table that has a VERSION col-\numn, which is incremented whenever the aggregate is updated. The application\nupdates the aggregate using an UPDATE statement like this:\nUPDATE AGGREGATE_ROOT_TABLE\nSET VERSION = VERSION+1. . .\nWHERE VERSION = <original version>\nThis UPDATE statement will only succeed if the version is unchanged from when the\napplication read the aggregate. If two transa ctions read the same aggregate, the first\none that updates the aggregate will succeed. The second one will fail because the ver-\nsion number has changed, so it won\u2019t accidentally overwrite the first transaction\u2019s\nchanges.\n An event store can also use optimistic locking to handle concurrent updates. Each\naggregate instance has a version that\u2019s read along with the events. When the applica-\ntion inserts events, the event store verifies  that the version is unchanged. A simple\nVerify that the \nrevision can be \nconfirmed and \nreturn an Order-\nRevised event.\nRevise the \nOrder.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2414, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f6442e0-8cf9-4e85-bc5a-6007fb3198d2": {"__data__": {"id_": "0f6442e0-8cf9-4e85-bc5a-6007fb3198d2", "embedding": null, "metadata": {"page_label": "194", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "04c82f54-7421-40d9-866a-b02704549018", "node_type": "4", "metadata": {"page_label": "194", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f94868690e148eebfe4dac29be8e25239079b30aa3eb8b719bf85fba4e04c926", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "194 CHAPTER 6 Developing business logic with event sourcing\napproach is to use the number of events as the version number. Alternatively, as you\u2019ll\nsee below in section 6.2, an event store could maintain an explicit version number. \n6.1.4 Event sourcing and publishing events\nStrictly speaking, event sourcing persists aggregates as events and reconstructs the cur-\nrent state of an aggregate from those events. You can also use event sourcing as a reli-\nable event publishing mechanism. Saving an event in the event store is an inherently\natomic operation. We need to implement a mechanism to deliver all persisted events\nto interested consumers.\n Chapter 3 describes a couple of different mechanisms\u2014polling and transaction log\ntailing\u2014for publishing messages that are inserted into the database as part of a transac-\ntion. An event sourcing-based application can publish events using one of these mecha-\nnisms. The main difference is that it permanently stores events in an EVENTS table rather\nthan temporarily saving events in an OUTBOX table and then deleting them. Let\u2019s take a\nlook at each approach, starting with polling.\nUSING POLLING TO PUBLISH EVENTS\nIf events are stored in the EVENTS table shown in figure 6.6, an event publisher can\npoll the table for new events by executing a SELECT statement and publish the events\nto a message broker. The challenge is dete rmining which events are new. For exam-\nple, imagine that eventIds are monotonically increasing. The superficially appealing\napproach is for the event publisher to record the last eventId that it has processed. It\nwould then retrieve new events using a query like this: SELECT * FROM EVENTS where\nevent_id > ? ORDER BY event_id ASC.\n The problem with this approach is that transactions can commit in an order that\u2019s\ndifferent from the order in which they ge nerate events. As a result, the event pub-\nlisher can accidentally skip over an event. Figure 6.6 shows such as a scenario.\nTransaction A Transaction B\nCOMMIT\nBEGIN BEGIN\nCOMMIT\nINSERT event with\nEVENT_ID = 1020\nSELECT * FROM EVENTS\nWHERE EVENT_ID > ....\nSELECT * FROM EVENTS\nWHERE EVENT_ID > 1020...\nINSERT event with\nEVENT_ID = 1010\nRetrieves event 1020\nCommits last\nSkips event 1010 because\n1010 <= event 1020\nFigure 6.6 A scenario where an even t is skipped because its transaction A commits after \ntransaction B. Polling sees eventId=1020 and then later skips eventId=1010.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2411, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b832a1fe-bfc0-4a8e-b8c4-eb9c27414e47": {"__data__": {"id_": "b832a1fe-bfc0-4a8e-b8c4-eb9c27414e47", "embedding": null, "metadata": {"page_label": "195", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8306ce8-0170-402f-aa7c-d99f02c0837e", "node_type": "4", "metadata": {"page_label": "195", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ac032da04b05b9091252a24189fd64e7003913d073bf866fa0a9032f307e7af3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "195Developing business logic using event sourcing\nIn this scenario, Transaction A inserts an event with an EVENT_ID of 1010. Next, trans-\naction B inserts an event with an EVENT_ID of 1020 and then commits. If the event\npublisher were now to query the EVENTS table, it would find event 1020. Later on, after\ntransaction A committed and event 1010 became visible, the event publisher would\nignore it.\n One solution to this problem is  to add an extra column to the EVENTS table that\ntracks whether an event has been published. The event publisher would then use the\nfollowing process:\n1 Find unpublished events by executing this SELECT statement: SELECT * FROM\nEVENTS where PUBLISHED = 0 ORDER BY event_id ASC.\n2 Publish events to the message broker.\n3 Mark the events as having been published: UPDATE EVENTS SET PUBLISHED = 1\nWHERE EVENT_ID in.\nThis approach prevents the event publisher from skipping events. \nUSING TRANSACTION LOG TAILING TO RELIABLY PUBLISH EVENTS\nMore sophisticated event stores use transaction log tailing, which, as chapter 3 describes,\nguarantees that events will be published and is also more performant and scalable.\nFor example, Eventuate Local, an open source event store, uses this approach. It reads\nevents inserted into an EVENTS table from the database transaction log and pub-\nlishes them to the message broker. Sectio n 6.2 discusses how Eventuate Local works\nin more detail. \n6.1.5 Using snapshots to improve performance\nAn Order aggregate has relatively few state transitions, so it only has a small number of\nevents. It\u2019s efficient to query the event store for those events and reconstruct an Order\naggregate. Long-lived aggregates, though, can have a large number of events. For\nexample, an Account aggregate potentially has a large number of events. Over time, it\nwould become increasingly inefficient to load and fold those events.\n A common solution is to periodically persist a snapshot of the aggregate\u2019s state.\nFigure 6.7 shows an example of using a snapshot. The application restores the state of\nThe application only needs\nto retrieve the snapshot and\nevents that occur after it.\nEvent 1 Event 2 Event ... Event N Event +1N\nSnapshot\nversion N\nEvent +2N\nFigure 6.7 Using a snapshot improves performance by eliminating the need to load all \nevents. An application only needs to load the snapshot and the events that occur after it.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2375, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6628eee-f20c-4796-b5f9-f9005c94ca8b": {"__data__": {"id_": "f6628eee-f20c-4796-b5f9-f9005c94ca8b", "embedding": null, "metadata": {"page_label": "196", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c04a849-eec0-480d-92f3-18c5277771e7", "node_type": "4", "metadata": {"page_label": "196", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "aa099f3259414154b5ef786daa2b08e02e5d1e7c6159b87100ba2fc0925ed6cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "196 CHAPTER 6 Developing business logic with event sourcing\nan aggregate by loading the most recent snapshot and only those events that have\noccurred since the snapshot was created.\n In this example, the snapshot version is N. The application only needs to load the\nsnapshot and the two events that follow it in order to restore the state of the aggre-\ngate. The previous N events are not loaded from the event store.\n When restoring the state of an aggregate from a snapshot, an application first creates\nan aggregate instance from the snapshot and then iterates through the events, applying\nthem. For example, the Eventuate Client fr amework, described in section 6.2.2, uses\ncode similar to the following to reconstruct an aggregate:\nClass aggregateClass = ...;\nSnapshot snapshot = ...;\nAggregate aggregate = recreateFromSnapshot(aggregateClass, snapshot);\nfor (Event event : events) {\naggregate = aggregate.applyEvent(event);\n}\n// use aggregate...\nWhen using snapshots, the aggregate instance is recreated from the snapshot instead\nof being created using its default constructor. If an aggregate has a simple, easily seri-\nalizable structure, the snapshot can be, for example, its JSON serialization. More com-\nplex aggregates can be snapshotted using the Memento pattern (https://en.wikipedia\n.org/wiki/Memento_pattern).\n The Customer aggregate in the online store exam ple has a very simple structure:\nthe customer\u2019s information, their credit lim it, and their credit reservations. A snap-\nshot of a Customer is the JSON serialization of its state. Figure 6.8 shows how to recre-\nate a Customer from a snapshot corresponding to the state of a Customer as of event\n#103. The Customer Service needs to load the snapshot and the events that have\noccurred after event #103.\nThe Customer Service recreates the Customer by deserializing the snapshot\u2019s JSON\nand then loading and applying events #104 through #106. \nevent_id\n...\n103\n104\n105\n106\nEVENTS\nevent_type\n...\n...\nCredit\nReserved\nAddress\nChanged\nCredit\nReserved\nentity_type\n...\nCustomer\nCustomer\nCustomer\nCustomer\nentity_id\n...\n101\n101\n101\n101\nevent_data\n...\n{...}\n{...}\n{...}\n{...}\nevent_id\n...\n103\n...\n...\nSNAPSHOTS\nentity_type\n...\nCustomer\n...\n...\nsnapshot_data\n...\n{name: \u201c...\u201d , ...}\n...\n...\nevent_id\n...\n101\n...\n...\nFigure 6.8 The Customer Service recreates the Customer by deserializing the snapshot\u2019s JSON and then \nloading and applying events #104 through #106.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2425, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "784d04d5-0e3f-4062-b199-63bdd111897a": {"__data__": {"id_": "784d04d5-0e3f-4062-b199-63bdd111897a", "embedding": null, "metadata": {"page_label": "197", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6151c1dc-5d49-469a-ad8b-aa401cd8d228", "node_type": "4", "metadata": {"page_label": "197", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2d38ae703071766e2f50ac232bac1d5341414eb2bf55a259a7bd8e4c8411480e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "197Developing business logic using event sourcing\n6.1.6 Idempotent message processing\nServices often consume messages from other applications or other services. A service\nmight, for example, consume domain even ts published by aggregates or command\nmessages sent by a saga orchestrator. As de scribed in chapter 3, an important issue\nwhen developing a message consumer is ensuring that it\u2019s idempotent, because a mes-\nsage broker might deliver the same message multiple times.\n A message consumer is idempotent if it can safely be invoked with the same mes-\nsage multiple times. The Eventuate Tram framework, for example, implements idem-\npotent message handling by detecting and di scarding duplicate messages. It records\nthe ids of processed messages in a PROCESSED_MESSAGES table as part of the local\nACID transaction used by the business logi c to create or update aggregates. If the ID\nof a message is in the PROCESSED_MESSAGES table, it\u2019s a duplicate and can be dis-\ncarded. Event sourcing-based business lo gic must implement an equivalent mecha-\nnism. How this is done depends on whet her the event store uses an RDBMS or a\nNoSQL database.\nIDEMPOTENT MESSAGE PROCESSING WITH AN RDBMS-BASED EVENT STORE\nIf an application uses an RDBMS-based event store, it can use an identical approach to\ndetect and discard duplicates messages. It inserts the message ID into the PROCESSED\n_MESSAGES table as part of the transaction that inserts events into the EVENTS table. \nIDEMPOTENT MESSAGE PROCESSING WHEN USING A NOSQL-BASED EVENT STORE\nA NoSQL-based event store, which has a limited transaction model, must use a different\nmechanism to implement idempotent mess age handling. A message consumer must\nsomehow atomically persist events and reco rd the message ID. Fortunately, there\u2019s a\nsimple solution. A message consumer stores the message\u2019s ID in the events that are\ngenerated while processing it. It detects duplicates by verifying that none of an aggre-\ngate\u2019s events contains the message ID.\n One challenge with using this approach is that processing a message might not\ngenerate any events. The lack of events me ans there\u2019s no record of a message having\nbeen processed. A subsequent redelivery and reprocessing of the same message might\nresult in incorrect behavior. For example, consider the following scenario:\n1 Message A is processed but doesn\u2019t update an aggregate.\n2 Message B is processed, and the message consumer updates the aggregate.\n3 Message A is redelivered, and because there\u2019s no record of it having been pro-\ncessed, the message consumer updates the aggregate.\n4 Message B is processed again\u2026.\nIn this scenario, the redelivery of events results in a different and possibly erroneous\noutcome.\n One way to avoid this problem is to always publish an event. If an aggregate doesn\u2019t\nemit an event, an application saves a pse udo event solely to record the message ID.\nEvent consumers must ignore these pseudo events.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f78308a-e70c-4a76-8ea0-c6c43e7ee2ea": {"__data__": {"id_": "5f78308a-e70c-4a76-8ea0-c6c43e7ee2ea", "embedding": null, "metadata": {"page_label": "198", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c250d60a-7527-402b-a0e2-e07afec7298a", "node_type": "4", "metadata": {"page_label": "198", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "42d0e0618f783db8eef412cc2033ce49595906bc082b9601d3c89e14e17c7092", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "198 CHAPTER 6 Developing business logic with event sourcing\n6.1.7 Evolving domain events\nEvent sourcing, at least conceptually, stor es events forever\u2014which is a double-edged\nsword. On one hand, it provides the application with an audit log of changes that\u2019s\nguaranteed to be accurate. It also enables an application to reconstruct the historical\nstate of an aggregate. On the other hand, it creates a challenge, because the structure\nof events often changes over time.\n An application must potentially deal with multiple versions of events. For example,\na service that loads an Order aggregate could potentially need to fold multiple ver-\nsions of events. Similarly, an event subscriber might potentially see multiple versions.\n Let\u2019s first look at the different ways that events can change, and then I\u2019ll describe a\ncommonly used approach for handling changes.\nEVENT SCHEMA EVOLUTION\nConceptually, an event sourcing application has a schema that\u2019s organized into\nthree levels:\n\uf0a1 Consists of one or more aggregates\n\uf0a1 Defines the events that each aggregate emits\n\uf0a1 Defines the structure of the events\nTable 6.1 shows the different types of changes that can occur at each level.\nThese changes occur naturally as a servic e\u2019s domain model evolves over time\u2014for\nexample, when a service\u2019s requirements change or as its developers gain deeper insight\ninto a domain and improve the domain mode l. At the schema level, developers add,\nremove, and rename aggregate classes. At the aggregate level, the types of events\nTable 6.1 The different ways that an application\u2019s events can evolve\nLevel Change Backward compatible\nSchema Define a new aggregate type Yes\nRemove aggregate Remove an existing aggregate No\nRename aggregate Change the name of an aggregate type No\nAggregate Add a new event type Yes\nRemove event Remove an event type No\nRename event Change the name of an event type No\nEvent Add a new field Yes\nDelete field Delete a field No\nRename field Rename a field No\nChange type of field Change the type of a field No", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2016, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "83af94e3-88cb-4280-ba73-c46ff92aac5e": {"__data__": {"id_": "83af94e3-88cb-4280-ba73-c46ff92aac5e", "embedding": null, "metadata": {"page_label": "199", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f374b933-4e08-4923-9145-0cdbccd4af0c", "node_type": "4", "metadata": {"page_label": "199", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f5c0acf7c345221ba17c3d70d9462c5ad46f9461d5d606d3a8a25144ebc597a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "199Developing business logic using event sourcing\nemitted by a particular aggregate can change. Developers can change the structure of\nan event type by adding, removing, and changing the name or type of a field.\n Fortunately, many of these types of changes are backward-compatible changes. For\nexample, adding a field to an event is unlikely to impact consumers. A consumer\nignores unknown fields. Other changes, th ough, aren\u2019t backward compatible. For\nexample, changing the name of an event or the name of a field requires consumers of\nthat event type to be changed. \nMANAGING SCHEMA CHANGES THROUGH UPCASTING\nIn the SQL database world, changes to a database schema are commonly handled\nusing schema migrations. Each schema change is represented by a migration, a SQL\nscript that changes the schema and migrat es the data to a new schema. The schema\nmigrations are stored in a version control system and applied to a database using a\ntool such as Flyway.\n An event sourcing application can use a similar approach to handle non-backward-\ncompatible changes. But instead of migrat ing events to the new schema version in\nsitu, event sourcing frameworks transform events when they\u2019re loaded from the event\nstore. A component commonly called an upcaster updates individual events from an\nold version to a newer version. As a result, the application code only ever deals with\nthe current event schema.\n Now that we\u2019ve looked at how event sourcing works, let\u2019s consider its benefits and\ndrawbacks. \n6.1.8 Benefits of event sourcing\nEvent sourcing has both benefits and drawbacks. The benefits include the following:\n\uf0a1 Reliably publishes domain events\n\uf0a1 Preserves the history of aggregates\n\uf0a1 Mostly avoids the O/R impedance mismatch problem\n\uf0a1 Provides developers with a time machine\nLet\u2019s examine each benefit in more detail.\nRELIABLY PUBLISHES DOMAIN EVENTS\nA major benefit of event sourcing is that it reliably publishes events whenever the state\nof an aggregate changes. That\u2019s a good fo undation for an event-driven microservice\narchitecture. Also, because each event can store the identity of the user who made the\nchange, event sourcing provides an audit log that\u2019s guaranteed to be accurate. The\nstream of events can be used for a variety of other purposes, including notifying users,\napplication integration, analytics, and monitoring. \nPRESERVES THE HISTORY OF AGGREGATES\nAnother benefit of event sourcing is that it stores the entire history of each aggregate.\nYou can easily implement temporal queries that retrieve the past state of an aggregate.\nTo determine the state of an aggregate at a given point in time, you fold the events", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2638, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "557214f6-3c67-44b7-ae4f-75d68890d7e6": {"__data__": {"id_": "557214f6-3c67-44b7-ae4f-75d68890d7e6", "embedding": null, "metadata": {"page_label": "200", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59d14189-8322-4925-a478-7fb3fb6d927b", "node_type": "4", "metadata": {"page_label": "200", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "98258071e1527f41e502d1b0f9c22ec61cfcea0c799895f611bb474edcb749d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "200 CHAPTER 6 Developing business logic with event sourcing\nthat occurred up until that point. It\u2019s stra ightforward, for example, to calculate the\navailable credit of a customer at some point in the past. \nMOSTLY AVOIDS THE O/R IMPEDANCE MISMATCH PROBLEM\nEvent sourcing persists events rather than  aggregating them. Events typically have a\nsimple, easily serializable structure. As mentioned earlier, a service can snapshot a\ncomplex aggregate by serializing a memento of its state, which adds a level of indirec-\ntion between an aggregate and its serialized representation. \nPROVIDES DEVELOPERS WITH A TIME MACHINE\nEvent sourcing stores a history of everythi ng that\u2019s happened in the lifetime of an\napplication. Imagine that the FTGO deve lopers need to implement a new require-\nment to customers who added an item to th eir shopping cart and then removed it. A\ntraditional application wouldn\u2019t preserve th is information, so could only market to\ncustomers who add and remove items after the feature is implemented. In contrast, an\nevent sourcing-based application can immediately market to customers who have done\nthis in the past. It\u2019s as if event sourcing provides developers with a time machine for\ntraveling to the past and implementing unanticipated requirements. \n6.1.9 Drawbacks of event sourcing\nEvent sourcing isn\u2019t a silver bullet. It has the following drawbacks:\n\uf0a1 It has a different programming model that has a learning curve.\n\uf0a1 It has the complexity of a messaging-based application.\n\uf0a1 Evolving events can be tricky.\n\uf0a1 Deleting data is tricky.\n\uf0a1 Querying the event store is challenging.\nLet\u2019s look at each drawback.\nDIFFERENT PROGRAMMING MODEL THAT HAS A LEARNING CURVE\nIt\u2019s a different and unfamiliar programming model, and that means a learning curve.\nIn order for an existing application to us e event sourcing, you must rewrite its busi-\nness logic. Fortunately, that\u2019s a fairly mechanical transformation that you can do when\nyou migrate your application to microservices. \nCOMPLEXITY OF A MESSAGING-BASED APPLICATION\nAnother drawback of event sourcing is that message brokers usually guarantee at-least-\nonce delivery. Event handlers that aren\u2019t idempotent must detect and discard dupli-\ncate events. The event sourcing framework can help by assigning each event a mono-\ntonically increasing ID. An event handler can then detect duplicate events by tracking\nthe highest-seen event ID. This even happens automatically when event handlers\nupdate aggregates.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2479, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "188a216e-f55e-4abd-bb69-f975ab8b8ce1": {"__data__": {"id_": "188a216e-f55e-4abd-bb69-f975ab8b8ce1", "embedding": null, "metadata": {"page_label": "201", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc333974-748e-45e3-a3fe-ba03af452aea", "node_type": "4", "metadata": {"page_label": "201", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "374d0e89c858d7661e982a9635b34053cc3caa62a630e1db40f5fa0badafc4d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "201Developing business logic using event sourcing\nEVOLVING EVENTS CAN BE TRICKY\nWith event sourcing, the schema of events (and snapshots!) will evolve over time.\nBecause events are stored forever, aggregat es potentially need to fold events corre-\nsponding to multiple schema versions. There\u2019s a real risk that aggregates may become\nbloated with code to deal with all the different versions. As mentioned in section 6.1.7,\na good solution to this problem is to upgrade events to the latest version when they\u2019re\nloaded from the event store. This approa ch separates the code that upgrades events\nfrom the aggregate, which simplifies the aggregates because they only need to apply\nthe latest version of the events. \nDELETING DATA IS TRICKY\nBecause one of the goals of event sourcing is  to preserve the history of aggregates, it\nintentionally stores data forever. The traditional way to delete data when using event\nsourcing is to do a soft delete. An application deletes an aggregate by setting a\ndeleted flag. The aggregate will typically emit a Deleted event, which notifies any\ninterested consumers. Any code that access es that aggregate can check the flag and\nact accordingly.\n Using a soft delete works well for many kinds of data. One challenge, however, is\ncomplying with the General Data Protecti on Regulation (GDPR), a European data\nprotection and privacy regulation that grants individuals the right to erasure (https://\ngdpr-info.eu/art-17-gdpr/). An application must have the ability to forget a user\u2019s per-\nsonal information, such as their email address. The issue with an event sourcing-based\napplication is that the email address might either be stored in an AccountCreated\nevent or used as the primary key of an ag gregate. The application somehow must for-\nget about the user without deleting the events.\n Encryption is one mechanism you can use to solve this problem. Each user has an\nencryption key, which is stored in a separate database table. The application uses that\nencryption key to encrypt any events cont aining the user\u2019s personal information\nbefore storing them in an event store. When a user requests to be erased, the applica-\ntion deletes the encryption key record from  the database table. The user\u2019s personal\ninformation is effectively deleted, because the events can no longer be decrypted.\n Encrypting events solves most problems with erasing a user\u2019s personal information.\nBut if some aspect of a user\u2019s personal info rmation, such as email address, is used as\nan aggregate ID, throwing away the encryp tion key may not be sufficient. For exam-\nple, section 6.2 describes an event store that has an entities table whose primary key\nis the aggregate ID. One solution to this problem is to use the technique of pseud-\nonymization, replacing the email address with a UUID token and using that as the\naggregate ID. The application stores the association between the UUID token and the\nemail address in a database table. When a us er requests to be erased, the application\ndeletes the row for their email address from that table. This prevents the application\nfrom mapping the UUID back to the email address.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3142, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1a58655-0693-400d-b0b9-c342b5d05ed7": {"__data__": {"id_": "a1a58655-0693-400d-b0b9-c342b5d05ed7", "embedding": null, "metadata": {"page_label": "202", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fac16ab3-d7d7-4f5b-9484-235a70ebb130", "node_type": "4", "metadata": {"page_label": "202", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "91e1b64a717742185f09151039bbba3faef03741e520cadd64ace61756604372", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "202 CHAPTER 6 Developing business logic with event sourcing\nQUERYING THE EVENT STORE IS CHALLENGING\nImagine you need to find customers who ha ve exhausted their credit limit. Because\nthere isn\u2019t a column containing the credit, you can\u2019t write SELECT * FROM CUSTOMER\nWHERE CREDIT_LIMIT = 0. Instead, you must use a more complex and potentially ineffi-\ncient query that has a nested SELECT to compute the credit limit by folding events that\nset the initial credit and adjusting it. To make matters worse, a NoSQL-based event\nstore will typically only support primary key-based lookup. Consequently, you must\nimplement queries using the CQRS approach described in chapter 7. \n6.2 Implementing an event store\nAn application that uses event sourcing stores its events in an event store. An event store\nis a hybrid of a database and a message broker. It behaves as a database because it has\nan API for inserting and retrieving an ag gregate\u2019s events by primary key. And it\nbehaves as a message broker because it has an API for subscribing to events.\n There are a few different ways to implement an event store. One option is to imple-\nment your own event store and event sourcing framework. You can, for example, per-\nsist events in an RDBMS. A simple, albeit low-performance, way to publish events is for\nsubscribers to poll the EVENTS table for events. But, as noted in section 6.1.4, one chal-\nlenge is ensuring that a subscriber processes all events in order.\n Another option is to use a special-purpose  event store, which typically provides a\nrich set of features and better performanc e and scalability. There are several of these\nto chose from:\n\uf0a1 Event Store \u2014A .NET-based open source event store developed by Greg Young,\nan event sourcing pioneer (https://eventstore.org).\n\uf0a1 Lagom\u2014A microservices framework develope d by Lightbend, the company for-\nmerly known as Typesafe (www.lightbend.com/lagom-framework).\n\uf0a1 Axon\u2014An open source Java framework for developing event-driven applications\nthat use event sourcing and CQRS (www.axonframework.org).\n\uf0a1 Eventuate\u2014Developed by my startup, Eventuate ( http://eventuate.io). There are\ntwo versions of Eventuate: Eventuate SaaS, a cloud service, and Eventuate Local,\nan Apache Kafka/RDBMS-based open source project.\nAlthough these frameworks differ in the de tails, the core concepts remain the same.\nBecause Eventuate is the framework I\u2019m most  familiar with, that\u2019s the one I cover\nhere. It has a straightforward, easy-to-unde rstand architecture that illustrates event\nsourcing concepts. You can use it in yo ur applications, reimplement the concepts\nyourself, or apply what you learn here to build applications with one of the other\nevent sourcing frameworks.\n I begin the following sections by descri bing how the Eventuate Local event store\nworks. Then I describe the Eventuate Client framework for Java, an easy-to-use frame-\nwork for writing event sourcing-based business logic that uses the Eventuate Local\nevent store.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2972, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a71c3d6d-1dfb-4597-b769-9829a09d9a03": {"__data__": {"id_": "a71c3d6d-1dfb-4597-b769-9829a09d9a03", "embedding": null, "metadata": {"page_label": "203", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "151f3eef-958f-4743-aff5-05e2f0f20d79", "node_type": "4", "metadata": {"page_label": "203", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "466f478b73a224ab957c46ccf8cb40b8de451f1c5cff467c26490c083e8a3d9b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "203Implementing an event store\n6.2.1 How the Eventuate Local event store works\nEventuate Local is an open source event store. Figure 6.9 shows the architecture.\nEvents are stored in a database, such as  MySQL. Applications insert and retrieve\naggregate events by primary key. Applications consume events from a message broker,\nsuch as Apache Kafka. A transaction log tailing mechanism propagates events from\nthe database to the message broker.\nLet\u2019s look at the different Eventuate Loca l components, starting with the database\nschema.\nTHE SCHEMA OF EVENTUATE LOCAL\u2019S EVENT DATABASE\nThe event database consists of three tables:\n\uf0a1 events\u2014Stores the events\n\uf0a1 entities\u2014One row per entity\n\uf0a1 snapshots\u2014Stores snapshots\nThe central table is the events table. The structure of this table is very similar to the\ntable shown in figure 6.2. Here\u2019s its definition:\nevent_id\n102\n103\n...\nEVENTS\nEvent database\nEvent broker\nOrder topic\nEvent relay\nEvent relay\nApplication\nCustomer topic\nevent_type\nOrder\nCreated\nOrder\nApproved\n...\nentity_type\nOrder\nOrder\n...\nentity_id\n101\n101\n...\nevent_data\n{...}\n{...}\n...\nENTITIES\nentity_type\n...\nentity_version\n...\nentity_id\n...\n...\n...\nSNAPSHOTS\nentity_type\n...\nentity_version\n...\nentity_id\n...\n...\n...\nStores the events\nPublishes events stored\nin the database to\nthe message broker\nFigure 6.9 The architecture of Eventuate Local. It consists of an event database (such as MySQL) \nthat stores the events, an event broker (like Apache Kafka) that delivers events to subscribers, and an \nevent relay that publishes events stored in the event database to the event broker.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1593, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "77531a1b-ca07-4199-891e-6aa6d43d4dc3": {"__data__": {"id_": "77531a1b-ca07-4199-891e-6aa6d43d4dc3", "embedding": null, "metadata": {"page_label": "204", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89fcabb5-793e-46a1-b481-129d4dff7a04", "node_type": "4", "metadata": {"page_label": "204", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "117b7bc78264e5a79a52a11dcfabea95bc52dac85861642d4ce32db4a1c77554", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "204 CHAPTER 6 Developing business logic with event sourcing\ncreate table events (\nevent_id varchar(1000) PRIMARY KEY,\nevent_type varchar(1000),\nevent_data varchar(1000) NOT NULL,\nentity_type VARCHAR(1000) NOT NULL,\nentity_id VARCHAR(1000) NOT NULL,\ntriggering_event VARCHAR(1000)\n);\nThe triggering_event column is used to detect dupl icate events/messages. It stores\nthe ID of the message/event whose processing generated this event.\n The entities table stores the current version of each entity. It\u2019s used to imple-\nment optimistic locking. Here\u2019s the definition of this table:\ncreate table entities (\nentity_type VARCHAR(1000),\nentity_id VARCHAR(1000),\nentity_version VARCHAR(1000) NOT NULL,\nPRIMARY KEY(entity_type, entity_id)\n);\nWhen an entity is created, a row is inserted  into this table. Each time an entity is\nupdated, the entity_version column is updated.\n The snapshots table stores the snapshots of each entity. Here\u2019s the definition of\nthis table:\ncreate table snapshots (\nentity_type VARCHAR(1000),\nentity_id VARCHAR(1000),\nentity_version VARCHAR(1000),\nsnapshot_type VARCHAR(1000) NOT NULL,\nsnapshot_json VARCHAR(1000) NOT NULL,\ntriggering_events VARCHAR(1000),\nPRIMARY KEY(entity_type, entity_id, entity_version)\n)\nThe entity_type and entity_id columns specify the snapshot\u2019s entity. The snapshot\n_json column is the serialized representation of the snapshot, and the snapshot_type\nis its type. The entity_version specifies the version of the entity that this is a snap-\nshot of.\n The three operations suppo rted by this schema are find(), create(), and\nupdate(). The find() operation queries the snapshots table to retrieve the latest\nsnapshot, if any. If a snapshot exists, the find() operation queries the events table to\nfind all events whose event_id is greater than the snapshot\u2019s entity_version. Other-\nwise, find() retrieves all events for the specified entity. The find() operation also\nqueries the entity table to retrieve the entity\u2019s current version.\n The create() operation inserts a row into the entity table and inserts the events\ninto the events table. The update() operation inserts events into the events table. It", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2148, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b18e343-ebe3-4f9d-a1e9-43d4810ee847": {"__data__": {"id_": "1b18e343-ebe3-4f9d-a1e9-43d4810ee847", "embedding": null, "metadata": {"page_label": "205", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b877567-5c89-4689-b9b8-fc09ee9a473f", "node_type": "4", "metadata": {"page_label": "205", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6b9a127eb93ab16de0076cacb0f6ce14c825741cfd0c9390c70e173cc9a2bd9a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "205Implementing an event store\nalso performs an optimistic locking chec k by updating the entity version in the\nentities table using this UPDATE statement:\nUPDATE entities SET entity_version = ?\nWHERE entity_type = ? and entity_id=?a n d entity_version = ?\nThis statement verifies that the version is unchanged since it was retrieved by the find()\noperation. It also updates the entity_version to the new version. The update() opera-\ntion performs these updates within a transaction in order to ensure atomicity.\n Now that we\u2019ve looked at how Eventuate Local stores an aggregate\u2019s events and snap-\nshots, let\u2019s see how a client subscribes to events using Eventuate Local\u2019s event broker. \nCONSUMING EVENTS BY SUBSCRIBING TO EVENTUATE LOCAL\u2019S EVENT BROKER\nServices consume events by subscribing to the event broker, which is implemented\nusing Apache Kafka. The event broker has a topic for each aggregate type. As described\nin chapter 3, a topic is a partitioned message channel. This enables consumers to scale\nhorizontally while preserving message ordering. The aggregate ID is used as the parti-\ntion key, which preserves the ordering of events published by a given aggregate. To\nconsume an aggregate\u2019s events, a service subscribes to the aggregate\u2019s topic.\n Let\u2019s now look at the event relay\u2014the glue between the event database and the\nevent broker. \nTHE EVENTUATE LOCAL EVENT RELAY PROPAGATES EVENTS FROM THE DATABASE TO \nTHE MESSAGE BROKER\nThe event relay propagates events inserted into the event database to the event bro-\nker. It uses transaction log tailing whenever possible and polling for other databases.\nFor example, the MySQL version of the event relay uses the MySQL master/slave rep-\nlication protocol. The event relay connects to the MySQL server as if it were a slave\nand reads the MySQL binlog, a record of updates made to the database. Inserts into\nthe EVENTS table, which correspond to events, are published to the appropriate\nApache Kafka topic. The event relay ignores any other kinds of changes.\n The event relay is deployed as a standalo ne process. In order to restart correctly,\nit periodically saves the current position in the binlog\u2014filename and offset\u2014in a\nspecial Apache Kafka topic. On startup, it  first retrieves the last recorded position\nfrom the topic. The event relay then st arts reading the MySQL binlog from that\nposition.\n The event database, message broker, an d event relay comprise the event store.\nLet\u2019s now look at the framework a Java application uses to access the event store. \n6.2.2 The Eventuate client framework for Java\nThe Eventuate client framework enables de velopers to write event sourcing-based\napplications that use the Eventuate Local event store. The framework, shown in fig-\nure 6.10, provides the foundation for developing event sourcing-based aggregates, ser-\nvices, and event handlers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2853, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "064315f7-858a-4e4e-9a77-5496964023ef": {"__data__": {"id_": "064315f7-858a-4e4e-9a77-5496964023ef", "embedding": null, "metadata": {"page_label": "206", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6b778f2-9cac-4e54-8769-4a7e14931a9f", "node_type": "4", "metadata": {"page_label": "206", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f0ba4258449f6f0e01ad587e4d14cfb80fbdf81f2ed7ef621dfc38324baf7d5a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "206 CHAPTER 6 Developing business logic with event sourcing\nThe framework provides base classes for aggregates, commands, and events. There\u2019s\nalso an AggregateRepository class that provides CRUD functionality. And the frame-\nwork has an API for subscribing to events.\n Let\u2019s briefly look at each of the types shown in figure 6.10.\nDEFINING AGGREGATES WITH THE REFLECTIVEMUTABLECOMMANDPROCESSINGAGGREGATE CLASS\nReflectiveMutableCommandProcessingAggregate is the base class for aggregates. It\u2019s\na generic class that has two type parameters : the first is the concrete aggregate class,\nand the second is the superclass of the aggregate\u2019s command classes. As its rather\nlong name suggests, it uses reflection to  dispatch command and events to the appro-\npriate method. Commands are dispatched to a process() method, and events to an\napply() method.\n The Order class you saw earlier extends ReflectiveMutableCommandProcessing-\nAggregate. The following listing shows the Order class.\npublic class Order extends ReflectiveMutableCommandProcessingAggregate<Order,\nOrderCommand> {\npublic List<Event> process(CreateOrderCommand command) { ... }\npublic void apply(OrderCreatedEvent event) { ... }\nListing 6.3 The Eventuate version of the Order class\nOrderService\nEventHandlers\ncreditReserved()\n\u00abinterface\u00bb\nOrderEvent\n\u00abinterface\u00bb\nOrderCommand\n\u00abevent\u00bb\nOrderCreated\n\u00abcommand\u00bb\nCreateOrder\nOrder\nprocess()\napply()\nOrder\nService\ncreateOrder()\n\u00abannotation\u00bb\nEvent\nSubscriber\n\u00abinterface\u00bb\nEvent\n\u00abinterface\u00bb\nCommand\n\u00ababstract\u00bb\nRe\ufb02ectiveMutableCommand\nProcessingAggregate\nAggregate\nRepository\nEventuate client framework\nOrder Service\nsave()\n\ufb01nd()\nupdate()\nAbstract classes and interfaces that\napplication classes extend or implement\nFigure 6.10 The main classes and interfaces provided by the Eventuate client framework for Java", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1806, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "828244ea-eb66-4dc0-83e2-e3c8004be622": {"__data__": {"id_": "828244ea-eb66-4dc0-83e2-e3c8004be622", "embedding": null, "metadata": {"page_label": "207", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "590cf0b8-2bbb-4179-8f8c-5be02e6c1bac", "node_type": "4", "metadata": {"page_label": "207", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f2d1c3ab55c92cc9f61cbd851845f4bdbca6e4f660cd450b1fdc0273a04eb75d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "207Implementing an event store\n...\n}\nThe two type parameters passed to ReflectiveMutableCommandProcessingAggregate\nare Order and OrderCommand, which is the base interface for Order\u2019s commands. \nDEFINING AGGREGATE COMMANDS\nAn aggregate\u2019s command classes must extend  an aggregate-specific base interface,\nwhich itself must extend the Command interface. For example, the Order aggregate\u2019s\ncommands extend OrderCommand:\npublic interface OrderCommand extends Command {\n}\npublic class CreateOrderCommand implements OrderCommand { ... }\nThe OrderCommand interface extends Command, and the CreateOrderCommand com-\nmand class extends OrderCommand. \nDEFINING DOMAIN EVENTS\nAn aggregate\u2019s event classes must extend the Event interface, which is a marker inter-\nface with no methods. It\u2019s also useful to define a common base interface, which\nextends Event for all of an aggregate\u2019s event classes. For example, here\u2019s the defini-\ntion of the OrderCreated event:\ninterface OrderEvent extends Event {\n}\npublic class OrderCreated extends OrderEvent { ... }\nThe OrderCreated event class extends OrderEvent, which is the base interface for the\nOrder aggregate\u2019s event classes. The OrderEvent interface extends Event. \nCREATING, FINDING, AND UPDATING AGGREGATES WITH THE AGGREGATEREPOSITORY CLASS\nThe framework provides several ways to create, find, and update aggregates. The sim-\nplest approach, which I describe here, is to use an AggregateRepository. Aggregate-\nRepository is a generic class that\u2019s parameterized by the aggregate class and the\naggregate\u2019s base command class. It provides three overloaded methods:\n\uf0a1 save()\u2014Creates an aggregate\n\uf0a1 find()\u2014Finds an aggregate\n\uf0a1 update()\u2014Updates an aggregate\nThe save () and update() methods are particularly convenient because they encapsu-\nlate the boilerplate code required for creating and updating aggregates. For instance,\nsave() takes a command object as a parameter and performs the following steps:\n1 Instantiates the aggregate using its default constructor\n2 Invokes process() to process the command", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2040, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b4cb8cca-8535-4c73-8661-88f2bf69d32e": {"__data__": {"id_": "b4cb8cca-8535-4c73-8661-88f2bf69d32e", "embedding": null, "metadata": {"page_label": "208", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4dea44e2-8c5d-450e-ad71-9385d8654579", "node_type": "4", "metadata": {"page_label": "208", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a59e9f8e17e265fd75dd54d2f10047211ee810863a4157dd06a9c14e3eae8837", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "208 CHAPTER 6 Developing business logic with event sourcing\n3 Applies the generated events by calling apply()\n4 Saves the generated events in the event store\nThe update() method is similar. It has two pa rameters, an aggregate ID and a com-\nmand, and performs the following steps:\n1 Retrieves the aggregate from the event store\n2 Invokes process() to process the command\n3 Applies the generated events by calling apply()\n4 Saves the generated events in the event store\nThe AggregateRepository class is primarily used by services, which create and update\naggregates in response to external reques ts. For example, the following listing shows\nhow OrderService uses an AggregateRepository to create an Order.\npublic class OrderService {\nprivate AggregateRepository<Order, OrderCommand> orderRepository;\npublic OrderService(AggregateRepository<Order, OrderCommand> orderRepository)\n{\nthis.orderRepository = orderRepository;\n}\npublic EntityWithIdAndVersion<Order> createOrder(OrderDetails orderDetails) {\nreturn orderRepository.save(new CreateOrder(orderDetails));\n}\n}\nOrderService i s  i n j e c t e d  w i t h  a n  AggregateRepository for Orders. Its create()\nmethod invokes AggregateRepository.save() with a CreateOrder command. \nSUBSCRIBING TO DOMAIN EVENTS\nThe Eventuate Client framework also provides an API for writing event handlers. List-\ning 6.5 shows an event handler for CreditReserved events. The @EventSubscriber\nannotation specifies the ID of the durable subscription. Events that are published when\nthe subscriber isn\u2019t running will be delivered when it starts up. The @EventHandler-\nMethod annotation identifies the creditReserved() method as an event handler.\n@EventSubscriber(id=\"orderServiceEventHandlers\")\npublic class OrderServiceEventHandlers {\n@EventHandlerMethod\npublic void creditReserved(EventHandlerContext<CreditReserved> ctx) {\nCreditReserved event = ctx.getEvent();\n...\n}\nListing 6.4 OrderService uses an AggregateRepository\nListing 6.5 An event handler for OrderCreatedEvent", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2002, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "85a8daae-c764-414c-9eea-bbd4a1908daf": {"__data__": {"id_": "85a8daae-c764-414c-9eea-bbd4a1908daf", "embedding": null, "metadata": {"page_label": "209", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d24c5e3-1c57-491a-83a3-5500c239d127", "node_type": "4", "metadata": {"page_label": "209", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b81e6a1af6c9d4c7b68b72eec963507ee548d29408570d8739431ea33a166e9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "209Using sagas and event sourcing together\nAn event handler has a parameter of type EventHandlerContext, which contains the\nevent and its metadata.\n Now that we\u2019ve looked at how to write event sourcing-based business logic using\nthe Eventuate client framework, let\u2019s look at how to use event sourcing-based business\nlogic with sagas. \n6.3 Using sagas and event sourcing together\nImagine you\u2019ve implemented one or more services using event sourcing. You\u2019ve prob-\nably written services similar to the one shown in listing 6.4. But if you\u2019ve read chapter 4,\nyou know that services often need  to initiate and participate in sagas, sequences of\nlocal transactions used to maintain data  consistency across services. For example,\nOrder Service uses a saga to validate an Order. Kitchen Service, Consumer Service,\nand Accounting Service participate in that saga. Consequently, you must integrate\nsagas and event sourcing-based business logic.\n Event sourcing makes it easy to use choreography-based sagas. The participants\nexchange the domain events emitted by th eir aggregates. Each participant\u2019s aggre-\ngates handle events by processing commands and emitting new events. You need to\nwrite the aggregates and the event handler classes, which update the aggregates.\n But integrating event sourcing-based business logic with orchestration-based sagas\ncan be more challenging. That\u2019s because the event store\u2019s concept of a transaction\nmight be quite limited. When using some event stores, an application can only create\nor update a single aggregate and publish th e resulting event(s). But each step of a\nsaga consists of several actions that must be performed atomically:\n\uf0a1 Saga creation\u2014A service that initiates a saga mu st atomically create or update an\naggregate and create the saga orchestrator. For example, Order Service\u2019s\ncreateOrder() method must create an Order aggregate and a CreateOrderSaga.\n\uf0a1 Saga orchestration\u2014A saga orchestrator must at omically consume replies, update\nits state, and send command messages.\n\uf0a1 Saga participants\u2014Saga participants, such as Kitchen Service and Order Service,\nmust atomically consume messages, dete ct and discard duplicates, create or\nupdate aggregates, and send reply messages.\nBecause of this mismatch between these requirements and the transactional capabili-\nties of an event store, integrating orchestration-based sagas and event sourcing poten-\ntially creates some interesting challenges.\n A key factor in determining the ease of integrating event sourcing and orchestration-\nbased sagas is whether the event store us es an RDBMS or a NoSQL database. The\nEventuate Tram saga framework described in chapter 4 and the underlying Tram mes-\nsaging framework described in chapter 3 rely  on flexible ACID transactions provided\nby the RDBMS. The saga orchestrator and the saga participants use ACID transactions\nto atomically update their databases and exchange messages. If the application uses\nan RDBMS-based event store, such as Eventuate Local, then it can cheat and invoke the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3023, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cd029b98-121b-4a08-925a-a8401e76e932": {"__data__": {"id_": "cd029b98-121b-4a08-925a-a8401e76e932", "embedding": null, "metadata": {"page_label": "210", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d6975c4-2c9c-40c4-97fe-9cbb5fd93189", "node_type": "4", "metadata": {"page_label": "210", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "358ecc849a30569f303091c2b6b334118be81b997ba9d7e0e8ecd732b194b1b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "210 CHAPTER 6 Developing business logic with event sourcing\nEventuate Tram saga framework and update the event store within an ACID transac-\ntion. But if the event store uses a NoSQL database, which can\u2019t participate in the same\ntransaction as the Eventuate Tram saga fram ework, it will have to take a different\napproach.\n Let\u2019s take a closer look at some of the different scenarios and issues you\u2019ll need to\naddress:\n\uf0a1 Implementing choreography-based sagas\n\uf0a1 Creating an orchestration-based saga\n\uf0a1 Implementing an event sourcing-based saga participant\n\uf0a1 Implementing saga orchestrators using event sourcing\nWe\u2019ll begin by looking at how to implem ent choreography-based sagas using event\nsourcing.\n6.3.1 Implementing choreography-based sagas using event sourcing\nThe event-driven nature of event sourcing  makes it quite straightforward to imple-\nment choreography-based sagas. When an aggregate is updated, it emits an event.\nAn event handler for a different aggregate can consume that event and update its\naggregate. The event sourcing framework automatically makes each event handler\nidempotent.\n For example, chapter 4 discusses how to implement Create Order Saga using cho-\nreography. ConsumerService, KitchenService, and AccountingService subscribe to\nthe OrderService\u2019s events and vice versa. Each service has an event handler similar\nto the one shown in listing 6.5. The even t handler updates the corresponding aggre-\ngate, which emits another event.\n Event sourcing and choreography-based sagas work very well together. Event sourc-\ning provides the mechanisms that sagas need, including messaging-based IPC, mes-\nsage de-duplication, and atomic updating of state and message sending. Despite its\nsimplicity, choreography-based sagas have se veral drawbacks. I talk about some draw-\nbacks in chapter 4, but there\u2019s a drawback that\u2019s specific to event sourcing.\n The problem with using events for saga choreography is that events now have a\ndual purpose. Event sourcing uses events to represent state changes, but using events\nfor saga choreography requires an aggregate to emit an event even if there is no state\nchange. For example, if updating an aggregate would violate a business rule, then the\naggregate must emit an event to report the error. An even worse problem is when a\nsaga participant can\u2019t create an aggregate. There\u2019s no aggregate that can emit an\nerror event.\n Because of these kinds of issues, it\u2019s best to implement more complex sagas using\norchestration. The following sections expl ain how to integrate orchestration-based\nsagas and event sourcing. As you\u2019ll see, it involves solving some interesting problems.\n Let\u2019s first look at how a service method such as OrderService.createOrder() cre-\nates a saga orchestrator.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2750, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3293d309-7440-41c1-b8f6-e0f98ee38668": {"__data__": {"id_": "3293d309-7440-41c1-b8f6-e0f98ee38668", "embedding": null, "metadata": {"page_label": "211", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ff6b1fc-7851-4e55-8c39-8c7f9f713672", "node_type": "4", "metadata": {"page_label": "211", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "40e87fffdb0d8296b3b628ed2ba72000e76757f3ce2c0e8613adf6a14d04eef6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "211Using sagas and event sourcing together\n6.3.2 Creating an orchestration-based saga\nSaga orchestrators are created by some service methods. Other service methods, such\nas OrderService.createOrder(), do two things: create or update an aggregate and\ncreate a saga orchestrator. The service must  perform both actions in a way that guar-\nantees that if it does the first action, then  the second action will be done eventually.\nHow the service ensures that both of th ese actions are performed depends on the\nkind of event store it uses.\nCREATING A SAGA ORCHESTRATOR WHEN USING AN RDBMS-BASED EVENT STORE\nIf a service uses an RDBMS-based event store, it can update the event store and create\na saga orchestrator within the same ACID transaction. For example, imagine that the\nOrderService uses Eventuate Local and the Even tuate Tram saga framework. Its\ncreateOrder() method would look like this:\nclass OrderService\n@Autowired\nprivate SagaManager<CreateOrderSagaState> createOrderSagaManager;\n@Transactional       \npublic EntityWithIdAndVersion<Order> createOrder(OrderDetails orderDetails) {\nEntityWithIdAndVersion<Order> order =\norderRepository.save(new CreateOrder(orderDetails));  \nCreateOrderSagaState data =\nnew CreateOrderSagaState(order.getId(), orderDetails);   \ncreateOrderSagaManager.create(data, Order.class, order.getId());\nreturn order;\n}\n...\nIt\u2019s a combination of the OrderService in listing 6.4 and the OrderService described\nin chapter 4. Because Eventuate Local uses an RDBMS, it can participate in the same\nACID transaction as the Eventuate Tram saga framework. But if a service uses a\nNoSQL-based event store, creating a saga orchestrator isn\u2019t as straightforward. \nCREATING A SAGA ORCHESTRATOR WHEN USING A NOSQL-BASED EVENT STORE\nA service that uses a NoSQL-based event store will most likely be unable to atomically\nupdate the event store and create a saga orchestrator. The saga orchestration frame-\nwork might use an entirely different databa se. Even if it uses the same NoSQL data-\nbase, the application won\u2019t be able to create or update two different objects atomically\nbecause of the NoSQL database\u2019s limited tr ansaction model. Instead, a service must\nhave an event handler that creates the saga orchestrator in response to a domain\nevent emitted by the aggregate.\n For example, figure 6.11 shows how Order Service creates a CreateOrderSaga\nusing an event handler for the OrderCreated event. Order Service first creates an\nEnsure the createOrder() executes\nwithin a database transaction.\nCreate the Order \naggregate.\nCreate the \nCreateOrderSaga.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2574, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c65abf1e-add3-47dd-9e2e-df4eeb658ba5": {"__data__": {"id_": "c65abf1e-add3-47dd-9e2e-df4eeb658ba5", "embedding": null, "metadata": {"page_label": "212", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c035b569-264e-4d85-a576-42dd44888603", "node_type": "4", "metadata": {"page_label": "212", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9bd3ebe56b5962e015523e500368b66136ec72116285f670ad9c42318b541028", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "212 CHAPTER 6 Developing business logic with event sourcing\nOrder aggregate and persists it in the event store. The event store publishes the Order-\nCreated event, which is consumed by the ev ent handler. The event handler invokes\nthe Eventuate Tram saga framework to create a CreateOrderSaga.\nOne issue to keep in mind when writing an  event handler that creates a saga orches-\ntrator is that it must handle duplicate ev ents. At-least-once message delivery means\nthat the event handler that creates the sa ga might be invoked multiple times. It\u2019s\nimportant to ensure that only one saga instance is created.\n A straightforward approach is to derive the ID of the saga from a unique attribute\nof the event. There are a couple of different options. One is to use the ID of the aggre-\ngate that emits the event as the ID of the saga. This works well for sagas that are cre-\nated in response to aggregate creation events.\n Another option is to use the event ID as the saga ID. Because event IDs are unique,\nthis will guarantee that the saga ID is unique. If an event is a duplicate, the event han-\ndler\u2019s attempt to create the saga will fail because the ID already exists. This option is\nuseful when multiple instances of the same saga can exist for a given aggregate\ninstance.\n A service that uses an RDBMS-based event store can also use the same event-driven\napproach to create sagas. A benefit of this approach is that it promotes loose coupling\nbecause services such as OrderService no longer explicitly instantiate sagas.\n Now that we\u2019ve looked at how to reliably create a saga orchestrator, let\u2019s see how\nevent sourcing-based services can participate in orchestration-based sagas. \nCreate a CreateOrderSaga\nin response to an\nOrderCreated event.\nPersist an\nOrderCreated\nevent.\nOrderCreated\nOrderCreated\nOrder OrderCreated\nEventHandler\nCreateOrderSaga\nEvent store\nPersisted as\nOrder Service\nFigure 6.11 Using an event handler to reliably create a saga after a service creates an event \nsourcing-based aggregate", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2011, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eb4b3c98-0b28-474a-82bb-f1d976eacdd6": {"__data__": {"id_": "eb4b3c98-0b28-474a-82bb-f1d976eacdd6", "embedding": null, "metadata": {"page_label": "213", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fcdb71fc-e429-4122-b8bf-0f48921c6a9d", "node_type": "4", "metadata": {"page_label": "213", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "df2a2b5f5d078d4319206e38b3373bff99a2e668b92b58fcabaf743595262fce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "213Using sagas and event sourcing together\n6.3.3 Implementing an event sourcing-based saga participant\nImagine that you used event sourcing to implement a service that needs to participate\nin an orchestration-based saga. Not surprisingly, if your service uses an RDBMS-based\nevent store such as Eventuate Local, you can easily ensure that it atomically processes\nsaga command messages and sends replies. It can update the event store as part of the\nACID transaction initiated by the Eventu ate Tram framework. But you must use an\nentirely different approach if your service uses an event store that can\u2019t participate in\nthe same transaction as the Eventuate Tram framework.\n You must address a couple of different issues:\n\uf0a1 Idempotent command message handling\n\uf0a1 Atomically sending a reply message\nLet\u2019s first look at how to implement idempotent command message handlers.\nIDEMPOTENT COMMAND MESSAGE HANDLING\nThe first problem to solve is how an event sourcing-based saga participant can detect\nand discard duplicate messages in order to implement idempotent command message\nhandling. Fortunately, this is an easy pr oblem to address using the idempotent mes-\nsage handling mechanism described earlie r. A saga participant records the message\nID in the events that are generated when processing the message. Before updating an\naggregate, the saga participant verifies that it hasn\u2019t processed the message before by\nlooking for the message ID in the events. \nATOMICALLY SENDING REPLY MESSAGES\nThe second problem to solve is how an ev ent sourcing-based saga participant can\natomically send replies. In principle, a saga orchestrator could subscribe to the events\nemitted by an aggregate, but there are two problems with this approach. The first is\nthat a saga command might not actually change the state of an aggregate. In this sce-\nnario, the aggregate won\u2019t emit an event, so no reply will be sent to the saga orchestra-\ntor. The second problem is that this approa ch requires the saga orchestrator to treat\nsaga participants that use event sourcing differently from those that don\u2019t. That\u2019s\nbecause in order to receive domain events, the saga orchestrator must subscribe to the\naggregate\u2019s event channel in addition to its own reply channel.\n A better approach is for the saga participant to continue to send a reply message to\nthe saga orchestrator\u2019s reply channel. But rather than send the reply message directly,\na saga participant uses a two-step process:\n1 When a saga command handler creates or updates an aggregate, it arranges for\na SagaReplyRequested pseudo event to be saved in the event store along with\nthe real events emitted by the aggregate.\n2 An event handler for the SagaReplyRequested pseudo event uses the data con-\ntained in the event to construct the repl y message, which it then writes to the\nsaga orchestrator\u2019s reply channel.\nLet\u2019s look at an example to see how this works.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2899, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dcd16a53-ddc0-4ab7-8988-3e757e880e16": {"__data__": {"id_": "dcd16a53-ddc0-4ab7-8988-3e757e880e16", "embedding": null, "metadata": {"page_label": "214", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bfb181c-0675-4fa0-83f2-fae9ed92e2d5", "node_type": "4", "metadata": {"page_label": "214", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "63d3ccc139441271bae8af69a7572ea4112cc3d34164b57f674ad7b87fd0203c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "214 CHAPTER 6 Developing business logic with event sourcing\nEXAMPLE EVENT SOURCING-BASED SAGA PARTICIPANT\nThis example looks at Accounting Service, one of the participants of Create Order\nSaga. Figure 6.12 shows how Accounting Service handles the Authorize Command\nsent by the saga. Accounting Service is implemented using the Eventuate Saga frame-\nwork. The Eventuate Saga framework is an open source framework for writing sagas\nthat use event sourcing. It\u2019s built on the Eventuate Client framework.\nThis figure shows how Create Order Saga and AccountingService interact. The\nsequence of events is as follows:\nAccountCreated\n....\nAccountAuthorized\nAccountAuthorized\nSagaReplyRequested\nEvent store\nEvent dispatcher\nEventuate API\nAccounting Service\nSagaReplyRequested\nOrder Service\nAggregate\nrepository\nSagaReply\nrequested\nEventHandler\nEventuate saga framework\nSaga command\ndispatcher\nAuthorize\ncommand\nAuthorize\nreply\nAccount\ncommand channel\nCreate order saga\nreply channel\nCreate\norder\nsaga\nAccount\nauthorize()\nAuthorize account\ncommand handler\nAuthorize\nthe account.\nSend command to\naccounting service.\nHandle SagaReply\nrequested event\nand send reply.\nEmit\nSagaReply\nrequested\nevent.\nFigure 6.12 How the event sourcing-based Accounting Service participates in Create \nOrder Saga", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1280, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "56ea8f15-286f-4f3e-adb1-c2916d779e95": {"__data__": {"id_": "56ea8f15-286f-4f3e-adb1-c2916d779e95", "embedding": null, "metadata": {"page_label": "215", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "725d07b5-6c10-45ce-bafa-f2b6b0fe95db", "node_type": "4", "metadata": {"page_label": "215", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c27d53d00a5348167475a6e07422a57d5f00ebd3a99fde668e7bb1bbf6622bc0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "215Using sagas and event sourcing together\n1 Create Order Saga sends an AuthorizeAccount command to Accounting-\nService via a messaging channel. The Eventuate Saga framework\u2019s SagaCommand-\nDispatcher invokes AccountingServiceCommandHandler to handle the command\nmessage.\n2 AccountingServiceCommandHandler sends the command to the specified\nAccount aggregate.\n3 The aggregate emits two events, AccountAuthorized and SagaReplyRequested-\nEvent.\n4 SagaReplyRequestedEventHandler handles SagaReplyRequestedEvent by send-\ning a reply message to CreateOrderSaga.\nThe AccountingServiceCommandHandler shown in the following listing handles the\nAuthorizeAccount command message by calling AggregateRepository.update() to\nupdate the Account aggregate.\npublic class AccountingServiceCommandHandler {\n@Autowired\nprivate AggregateRepository<Account, AccountCommand> accountRepository;\npublic void authorize(CommandMessage<AuthorizeCommand> cm) {\nAuthorizeCommand command = cm.getCommand();\naccountRepository.update(command.getOrderId(),\ncommand,\nreplyingTo(cm)\n.catching(AccountDisabledException.class,\n() -> withFailure(new AccountDisabledReply()))\n.build());\n}\n...\nThe authorize() method invokes an AggregateRepository to update the Account\naggregate. The third argument to update(), which is the UpdateOptions, is computed\nby this expression:\nreplyingTo(cm)\n.catching(AccountDisabledException.class,\n() -> withFailure(new AccountDisabledReply()))\n.build()\nThese UpdateOptions configure the update() method to do the following:\n1 Use the message id  as an idempotency key to ensure that the message is pro-\ncessed exactly once. As mentioned earlier, the Eventuate framework stores the\nidempotency key in all generated events, enabling it to detect and ignore dupli-\ncate attempts to update an aggregate.\nListing 6.6 Handles command messages sent by sagas", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1842, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c004e261-166c-4db3-8d04-2af40c2ddefe": {"__data__": {"id_": "c004e261-166c-4db3-8d04-2af40c2ddefe", "embedding": null, "metadata": {"page_label": "216", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d7f683a-9add-4e37-8d16-20d973a73323", "node_type": "4", "metadata": {"page_label": "216", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e6d435d232018d7f32405685c06170a1fd3b53efc489586ad3f0c477445f4cbc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "216 CHAPTER 6 Developing business logic with event sourcing\n2 Add a SagaReplyRequestedEvent pseudo event to the list of events saved in the\nevent store. When SagaReplyRequestedEventHandler receives the SagaReply-\nRequestedEvent pseudo event, it sends a reply to the CreateOrderSaga\u2019s reply\nchannel.\n3 Send an AccountDisabledReply instead of the default error reply when the\naggregate throws an AccountDisabledException.\nNow that we\u2019ve looked at how to implemen t saga participants using event sourcing,\nlet\u2019s find out how to implement saga orchestrators. \n6.3.4 Implementing saga orchestrators using event sourcing\nSo far in this section, I\u2019ve described ho w event sourcing-based services can initiate\nand participate in sagas. You can also use event sourcing to implement saga orches-\ntrators. This will enable you to develop applications that are entirely based on an\nevent store.\n There are three key design problems you must solve when implementing a saga\norchestrator:\n1 How can you persist a saga orchestrator?\n2 How can you atomically change the stat e of the orchestrator and send com-\nmand messages?\n3 How can you ensure that a saga orches trator processes reply messages exactly\nonce?\nChapter 4 discusses how to implement an RDBMS-based saga orchestrator. Let\u2019s look\nat how to solve these problems when using event sourcing.\nPERSISTING A SAGA ORCHESTRATOR USING EVENT SOURCING\nA saga orchestrator has a very simple lifecycle . First, it\u2019s created. Then it\u2019s updated in\nresponse to replies from saga participants. We can, therefore, persist a saga using the\nfollowing events:\n\uf0a1 SagaOrchestratorCreated\u2014The saga orchestrator has been created.\n\uf0a1 SagaOrchestratorUpdated\u2014The saga orchestrator has been updated.\nA saga orchestrator emits a SagaOrchestratorCreated event when it\u2019s created and a\nSagaOrchestratorUpdated event when it has been updated. These events contain the\ndata necessary to re-create the state of th e saga orchestrator. For example, the events\nfor CreateOrderSaga, described in chapter 4, would contain a serialized (for example,\nJSON) CreateOrderSagaState. \nSENDING COMMAND MESSAGES RELIABLY\nAnother key design issue is how to atomically update the state of the saga and send a\ncommand. As described in chapter 4, the Eventuate Tram-based saga implementa-\ntion does this by updating the orches trator and inserting the command message\ninto a message t a b l e  a s  p a r t  o f  t h e  s a m e  t r a n s a c t i o n .  A n  a p p l i c a t i o n  t h a t  u s e s  a n", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8cf43880-ef05-4582-b4d3-6e3a0c7e8d99": {"__data__": {"id_": "8cf43880-ef05-4582-b4d3-6e3a0c7e8d99", "embedding": null, "metadata": {"page_label": "217", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94c00d46-45c8-464f-a552-ce428faeb428", "node_type": "4", "metadata": {"page_label": "217", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1c31eef4c6f893d733c7fc84d8230e76daa3811160eaa0bd90b8c8be82abb39b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "217Using sagas and event sourcing together\nRDBMS-based event store, such as Eventu ate Local, can use the same approach. An\napplication that uses a NoSQL-based event store, such as Eventuate SaaS, can use an\nanalogous approach, despite having a very limited transaction model.\n The trick is to persist a SagaCommandEvent, which represents a command to send.\nAn event handler then subscribes to SagaCommandEvents and sends each command\nmessage to the appropriate channel. Figure 6.13 shows how this works.\nThe saga orchestrator uses a two-step process to send commands:\n1 A saga orchestrator emits a SagaCommandEvent for each command that it wants\nto send. SagaCommandEvent contains all the data needed to send the command,\nsuch as the destination channel and the command object. These events are per-\nsisted in the event store.\n2 An event handler processes these SagaCommandEvents and sends command\nmessages to the destination message channel.\nThis two-step approach guarantees that the command will be sent at least once.\n Because the event store provides at-least-once delivery, an event handler might be\ninvoked multiple times with the same event. That will cause the event handler for\nSagaCommandEvents to send duplicate command messages. Fortunately, though, a\nsaga participant can easily detect and discard duplicate commands using the following\n2. Handle SagaCommandEvent\nby sending a command.\n1. Emit a SagaCommandEvent\nfor each command to send.\nSagaCommandEvent\nSagaCreatedEvent\nSagaCommandEvent\nSagaUpdatedEvent\nSagaCommandEvent\n\u00absaga\u00bb\nCreateOrderSaga\nSagaCommand\nEventHandler\nEvent store\nPersisted as\nService\nService Command\nChannel\nSends\ncommand\nMessage broker\nFigure 6.13 How an event sourcing-based saga orch estrator sends commands to saga participants", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1767, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2a60fb68-6d27-420c-ad82-48ccb79ce2e4": {"__data__": {"id_": "2a60fb68-6d27-420c-ad82-48ccb79ce2e4", "embedding": null, "metadata": {"page_label": "218", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0edce43c-f25e-46ad-b947-500e558cff3f", "node_type": "4", "metadata": {"page_label": "218", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "23b42689503de6db1c6571dd21c1048f305b32d7766e2004b31984340d4eb152", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "218 CHAPTER 6 Developing business logic with event sourcing\nmechanism. The ID of SagaCommandEvent, which is guaranteed to be unique, is used\nas the ID of the command message. As a re sult, the duplicate messages will have the\nsame ID. A saga participant that receives a duplicate command message will discard it\nusing the mechanism described earlier. \nPROCESSING REPLIES EXACTLY ONCE\nA saga orchestrator also needs to detect and discard duplicate reply messages, which it\ncan do using the mechanism described earlier. The orchestrator stores the reply mes-\nsage\u2019s ID in the events that it emits when processing the reply. It can then easily deter-\nmine whether a message is a duplicate.\n As you can see, event sourcing is a good  foundation for implementing sagas. This\nis in addition to the other benefits of ev ent sourcing, including the inherently reli-\nable generation of events whenever data changes, reliable audit logging, and the\nability to do temporal queries. Event sourci ng isn\u2019t a silver bullet, though. It involves\na significant learning curve. Evolving the event schema isn\u2019t always straightforward.\nBut despite these drawbacks, event sourcing  has a major role to play in a micro-\nservice architecture. In the next chapter, we \u2019ll switch gears and look at how to tackle\na different distributed data management challenge in a microservice architecture:\nqueries. I\u2019ll describe how to implement qu eries that retrieve data scattered across\nmultiple services. \nSummary\n\uf0a1 Event sourcing persists an aggregate as a sequence of events. Each event rep-\nresents either the creation of the aggregate or a state change. An application\nrecreates the state of an aggregate by replaying events. Event sourcing preserves\nthe history of a domain object, provides an accurate audit log, and reliably pub-\nlishes domain events.\n\uf0a1 Snapshots improve performance by reduc ing the number of events that must\nbe replayed.\n\uf0a1 Events are stored in an event store, a hybrid of a database and a message broker.\nWhen a service saves an event in an event store, it delivers the event to subscribers.\n\uf0a1 Eventuate Local is an open source event store based on MySQL and Apache\nKafka. Developers use the Eventuate client framework to write aggregates and\nevent handlers.\n\uf0a1 One challenge with using event sourcing is handling the evolution of events. An\napplication potentially must handle mu ltiple event versions when replaying\nevents. A good solution is to use upcasti ng, which upgrades events to the latest\nversion when they\u2019re loaded from the event store.\n\uf0a1 Deleting data in an event sourcing application is tricky. An application must use\ntechniques such as encryption and pseudonymization in order to comply with\nregulations like the European Union\u2019s GDPR that requires an application to\nerase an individual\u2019s data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2805, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "290d33ab-8b9a-43f0-b777-94036015806d": {"__data__": {"id_": "290d33ab-8b9a-43f0-b777-94036015806d", "embedding": null, "metadata": {"page_label": "219", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e6b14a2-90e4-4940-98b4-596a9d88a99e", "node_type": "4", "metadata": {"page_label": "219", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2020835a8c44d9b0ae35b88982615bd5f212ab345b5b441dd9f6c659de0e28dc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "219Summary\n\uf0a1 Event sourcing is a simple way to implement choreography-based sagas. Ser-\nvices have event handlers that listen to the events published by event sourcing-\nbased aggregates.\n\uf0a1 Event sourcing is a good way to implemen t saga orchestrators. As a result, you\ncan write applications that exclusively use an event store.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 328, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "99c65693-3217-4061-90ea-4f8274a8a9a9": {"__data__": {"id_": "99c65693-3217-4061-90ea-4f8274a8a9a9", "embedding": null, "metadata": {"page_label": "220", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a5c2749-e80b-4262-81ee-c90b27d89962", "node_type": "4", "metadata": {"page_label": "220", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "45b998002e9d13724244338c2e048a97cbbf657d1df33a5c13014e3c2b46228f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "220\nImplementing queries in a\nmicroservice architecture\nMary and her team were just starting to get comfortable with the idea of using sagas\nto maintain data consistency. Then they discovered that transaction management\nwasn\u2019t the only distributed data-related challenge they had to worry about when\nmigrating the FTGO application to microservices. They also had to figure out how\nto implement queries.\n In order to support the UI, the FTGO  application implements a variety of\nquery operations. Implementing these queries in the existing monolithic applica-\ntion is relatively straightforward, beca use it has a single database. For the most\npart, all the FTGO developers needed to do was write SQL SELECT statements\nand define the necessary indexes. As Mary  discovered, writing queries in a micro-\nservice architecture is challenging. Queries often need to retrieve data that\u2019s scattered\nThis chapter covers\n\uf0a1 The challenges of querying data in a microservice \narchitecture\n\uf0a1 When and how to implement queries using the \nAPI composition pattern\n\uf0a1 When and how to implement queries using the \nCommand query responsibility segregation \n(CQRS) pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1151, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a8621a9-133b-4f98-9e6d-6437bc57dce1": {"__data__": {"id_": "7a8621a9-133b-4f98-9e6d-6437bc57dce1", "embedding": null, "metadata": {"page_label": "221", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3699394e-f649-485a-aea2-23d9178111bd", "node_type": "4", "metadata": {"page_label": "221", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "12374de4027418f656bb8db6a3050a4a36fb3926589acab97c58bd3c1d8784da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "221Querying using the API composition pattern\namong the databases owned by multiple services. You can\u2019t, however, use a traditional\ndistributed query mechanism, because even if  it were technically possible, it violates\nencapsulation.\n Consider, for example, the query operat ions for the FTGO application described\nin chapter 2. Some queries retrieve data  that\u2019s owned by just one service. The find-\nConsumerProfile() query, for example, returns data from Consumer Service. But\nother FTGO query operations, such as findOrder() and findOrderHistory(), return\ndata owned by multiple services. Implem enting these query operations is not as\nstraightforward.\n There are two different patterns for implementing query operations in a microser-\nvice architecture:\n\uf0a1 The API composition pattern \u2014This is the simplest approach and should be used\nwhenever possible. It works by making clients of the services that own the data\nresponsible for invoking the services and combining the results.\n\uf0a1 The Command query responsibility segregation (CQRS) pattern \u2014This is more power-\nful than the API composition pattern, but it\u2019s also more complex. It maintains\none or more view databases whose sole purpose is to support queries.\nAfter discussing these two patterns, I will talk about how to design CQRS views, fol-\nlowed by the implementation of  an example view. Let\u2019s star t by taking a look at the\nAPI composition pattern.\n7.1 Querying using the API composition pattern\nThe FTGO application implements numero us query operations. Some queries, as\nmentioned earlier, retrieve data from a si ngle service. Implementing these queries is\nusually straightforward\u2014although later in this chapter, when I cover the CQRS pat-\ntern, you\u2019ll see examples of single service queries that are challenging to implement.\n There are also queries that retrieve data from multiple services. In this section, I\ndescribe the findOrder() query operation, which is an example of a query that\nretrieves data from multiple services. I explain the challenges that often crop up when\nimplementing this type of query in a micr oservice architecture. I then describe the\nAPI composition pattern and show how you can use it to implement queries such as\nfindOrder().\n7.1.1 The findOrder() query operation\nThe findOrder() operation retrieves an order by its primary key. It takes an orderId\nas a parameter and returns an OrderDetails object, which contains information\nabout the order. As shown in figure 7.1, this operation is called by a frontend module,\nsuch as a mobile device or a web application, that implements the Order Status view.\n The information displayed by the Order Status  view includes basic information\nabout the order, including its status, payment status, status of the order from the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2761, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ccacd512-85cf-4744-9bc8-dea68a2806d9": {"__data__": {"id_": "ccacd512-85cf-4744-9bc8-dea68a2806d9", "embedding": null, "metadata": {"page_label": "222", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60da03a4-8b8e-4710-a2d8-e7828099eaa2", "node_type": "4", "metadata": {"page_label": "222", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "967d83cea6b89ee1e6523a94b779ebde07de38a55add59cb17a265fcbb640675", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "222 CHAPTER 7 Implementing queries in a microservice architecture\nrestaurant\u2019s perspective, and delivery status, including its location and estimated deliv-\nery time if in transit.\n Because its data resides in a single database, the monolithic FTGO application can\neasily retrieve the order details by executing a single SELECT statement that joins the\nvarious tables. In contrast, in the micros ervices-based version of the FTGO applica-\ntion, the data is scattered around the following services:\n\uf0a1 Order Service\u2014Basic order information, including the details and status\n\uf0a1 Kitchen Service\u2014Status of the order from the re staurant\u2019s perspective and the\nestimated time it will be ready for pickup\n\uf0a1 Delivery Service\u2014The order\u2019s delivery status, estimated delivery information,\nand its current location\n\uf0a1 Accounting Service\u2014The order\u2019s payment status\nAny client that needs the order details must ask all of these services. \n7.1.2 Overview of the API composition pattern\nOne way to implement query operations, such as findOrder(), that retrieve data owned\nby multiple services is to use the API comp osition pattern. This pattern implements a\nOrder\nOrder Service\nid:3492-2323\nrestaurant:Ajanta\nTicket\nKitchen Service\nFTGO application\nOrderDetails \ufb01ndOrder(orderId)\nFTGO frontendOrder status view\nOrder id:\nRestaurant:\nStatus:\nETA:\nPayment:\n3492-2323\nAjanta\nEn route\n6:25 pm\nPaid\nid:3492-2323\nstatus:PREPARED\nDelivery\nDelivery Service\nid:45-4545\norderId:3492-2323\nstatus:ENROUTE\neta:6:25 pm\nBill\nAccounting Service\nid:343-45611\norderId:3492-2323\nstatus:PAID\nOrder status\nData from multiple services Mobile device or web application\nFigure 7.1 The findOrder() operation is invoked by a FTGO frontend module and returns the \ndetails of an Order.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1739, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ef3ef829-0812-4c2c-83a2-66c01ed728df": {"__data__": {"id_": "ef3ef829-0812-4c2c-83a2-66c01ed728df", "embedding": null, "metadata": {"page_label": "223", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5ea4df0-77f3-48ed-b2cd-cb019fb4776f", "node_type": "4", "metadata": {"page_label": "223", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ecd942f19db8d541371325495a0ca149751ea984fe9d2d97ec01029a22a2d56e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "223Querying using the API composition pattern\nquery operation by invoking the services that own the data and combining the results.\nFigure 7.2 shows the structure of this pattern. It has two types of participants:\n\uf0a1 An API composer \u2014This implements the query operation by querying the pro-\nvider services.\n\uf0a1 A provider service \u2014This is a service that owns some of the data that the query\nreturns.\nFigure 7.2 shows three provider services. The API composer implements the query by\nretrieving data from the provider servic es and combining the results. An API com-\nposer might be a client, such as a web application, that needs the data to render a web\npage. Alternatively, it might be a service, such as an API gateway and its Backends for\nfrontends variant described in chapter 8, which exposes the query operation as an API\nendpoint.\nWhether you can use this pattern to implement a particular query operation depends\non several factors, including how the data is partitioned, the capabilities of the APIs\nexposed by the services that own the data, and the capabilities of the databases used\nby the services. For instance, even if the Provider services have APIs for retrieving the\nPattern: API composition\nImplement a query that retrieves data from several services by querying each service\nvia its API and combining the results. See http://microservices.io/patterns/data/api-\ncomposition.html.\nquery()\nAPI composer\nProvider Service A\nDatabase A\nqueryA()\nProvider Service B\nDatabase B\nqueryB()\nProvider Service C\nDatabase C\nqueryC()\nImplements the query operation\nby invoking the providers and\ncombining the results.\nServices that own data\nFigure 7.2 The API composition pattern consists of an API composer and two or more provider \nservices. The API composer implements a query by querying the providers and combining the results.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e769950a-3bae-42d9-9b74-b0bc291b7d9f": {"__data__": {"id_": "e769950a-3bae-42d9-9b74-b0bc291b7d9f", "embedding": null, "metadata": {"page_label": "224", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab201668-0b22-4535-bba9-493b14c2ec79", "node_type": "4", "metadata": {"page_label": "224", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1e989ee6b961fabb9ceebcfbbf827d641788f4ebe095cf6f4791a434b54d9ab4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "224 CHAPTER 7 Implementing queries in a microservice architecture\nrequired data, the aggregator might need to perform an inefficient, in-memory join\nof large datasets. Later on, you\u2019ll see exam ples of query operations that can\u2019t be\nimplemented using this pattern. Fortunately, though, there are many scenarios where\nthis pattern is applicable. To see it in action, we\u2019ll look at an example. \n7.1.3 Implementing the findOrder() query operation using the API \ncomposition pattern\nThe findOrder() query operation corresponds to a simple primary key-based equi-\njoin query. It\u2019s reasonable to expect that each of the Provider services has an API end-\npoint for retrieving the required data by orderId. Consequently, the findOrder()\nquery operation is an excellent candidate to be implemented by the API composition\npattern. The API composer invokes the four services and combines the results together.\nFigure 7.3 shows the design of the Find Order Composer.\nIn this example, the API composer is a service that exposes the query as a REST endpoint.\nThe Provider services also implement REST APIs. But the concept is the same if the ser-\nvices used some other interprocess communication protocol, such as gRPC, instead of\nHTTP. The Find Order Composer implements a REST endpoint GET /order/{orderId}.\nIt invokes the four services and joins the responses using the orderId. Each Provider ser-\nvice implements a REST endpoint that returns a response corresponding to a single\naggregate. The OrderService retrieves its version of an Order by primary key and the\nother services use the orderId as a foreign key to retrieve their aggregates.\n As you can see, the API composition pattern is quite simple. Let\u2019s look at a couple\nof design issues you must address when applying this pattern. \nFind Order\nComposer\nOrder Service\n\u00abaggregate\u00bb\nOrder\nGET/orders/\n{orderId}\nGET/charges?\norderId=\n{orderId}\nGET/tickets?\norderId=\n{orderId}\nGET/deliveries?\norderId=\n{orderId}\nKitchen Service\n\u00abaggregate\u00bb\nRestaurantOrder\nDelivery Service\n\u00abaggregate\u00bb\nDelivery\nAccounting Service\n\u00abaggregate\u00bb\nCharge\nGET/order/{orderId}\nFigure 7.3 Implementing findOrder() using the API composition pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2162, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c287949f-69d2-42aa-ba9c-8759a892c40c": {"__data__": {"id_": "c287949f-69d2-42aa-ba9c-8759a892c40c", "embedding": null, "metadata": {"page_label": "225", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8bd236e0-d988-4f98-9ad4-4b8d14fe5028", "node_type": "4", "metadata": {"page_label": "225", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cf5f7e7d0d0e5f521e51e1b9e306e7bbc0eb349e7363f93453e64931c21f575e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "225Querying using the API composition pattern\n7.1.4 API composition design issues\nWhen using this pattern, you have to address a couple of design issues:\n\uf0a1 Deciding which component in your ar chitecture is the query operation\u2019s API\ncomposer\n\uf0a1 How to write efficient aggregation logic\nLet\u2019s look at each issue.\nWHO PLAYS THE ROLE OF THE API COMPOSER?\nOne decision that you must make is who plays the role of the query operation\u2019s API\ncomposer. You have three options. The first option, shown in figure 7.4, is for a client of\nthe services to be the API composer.\nA frontend client such as a web application, that implements the Order Status view\nand is running on the same LAN, could efficiently retrieve the order details using this\npattern. But as you\u2019ll learn in chapter 8, this option is probably not practical for cli-\nents that are outside of the firewall and access services via a slower network.\n The second option, shown in figure 7.5, is for an API gateway, which implements the\napplication\u2019s external API, to play the role of an API composer for a query operation.\n This option makes sense if the query operation is part of the application\u2019s external\nAPI. Instead of routing a request to another service, the API gateway implements the\nAPI composition logic. This approach enables a client, such as a mobile device, that\u2019s\nrunning outside of the firewall to efficiently retrieve data from numerous services with\na single API call. I discuss the API gateway in chapter 8.\n The third option, shown in figure 7.6, is to implement an API composer as a stand-\nalone service.\nClient, such as web application\nOrder\nService\nDelivery\nService\nKitchen\nService\nAccounting\nService\nAPI composer\nFigure 7.4 Implementing API \ncomposition in a client. The \nclient queries the provider \nservices to retrieve the data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1db12a5c-a2a9-4871-981f-95ac36785931": {"__data__": {"id_": "1db12a5c-a2a9-4871-981f-95ac36785931", "embedding": null, "metadata": {"page_label": "226", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9ee804f-a43f-4858-acb0-6b693df0d7e3", "node_type": "4", "metadata": {"page_label": "226", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cd78170d8729521debf15452b526f7dad2dc6c5d7c040d292237c0ea3eb26f37", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "226 CHAPTER 7 Implementing queries in a microservice architecture\nAPI gateway\nExternal client, such as\nmobile application\nOrder\nService\nDelivery\nService\nKitchen\nService\nAccounting\nService\n\ufb01ndOrder()\nAPI composer\nFigure 7.5 Implementing \nAPI composition in the API \ngateway. The API queries the \nprovider services to retrieve \nthe data, combines the \nresults, and returns a \nresponse to the client.\nOrder\nService\nDelivery\nService\nKitchen\nService\nAccounting\nService\nFind Order Service\nClients\n\ufb01ndOrder()\nAPI composer\nFigure 7.6 Implement a query \noperation used by multiple \nclients and services as a \nstandalone service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 619, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2a9f1bdd-e4ec-4f55-9c0f-c0ea8cc04276": {"__data__": {"id_": "2a9f1bdd-e4ec-4f55-9c0f-c0ea8cc04276", "embedding": null, "metadata": {"page_label": "227", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1812fb5b-940d-40a9-beb9-465156958cac", "node_type": "4", "metadata": {"page_label": "227", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a71ee67fa8df633821d01126d230226db87f171355656da11fb5e86c11c356f9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "227Querying using the API composition pattern\nYou should use this option for a query operation that\u2019s used internally by multiple ser-\nvices. This operation can also be used for externally accessible query operations whose\naggregation logic is too complex to be part of an API gateway. \nAPI COMPOSERS SHOULD USE A REACTIVE PROGRAMMING MODEL\nWhen developing a distributed system, minimizing latency is an ever-present concern.\nWhenever possible, an API composer should call provider services in parallel in order to\nminimize the response time for a query operation. The Find Order Aggregator\nshould, for example, invoke the four se rvices concurrently because there are no\ndependencies between the calls. Sometimes, though, an API composer needs the result\nof one Provider service in order to invoke another servic e. In this case, it will need to\ninvoke some\u2014but hopefully not all\u2014of the provider services sequentially.\n The logic to efficiently execute a mixtur e of sequential and parallel service invo-\ncations can be complex. In order for an API composer  to be maintainable as well as\nperformant and scalable, it should use a reactive design based on Java Completable-\nFuture\u2019s, RxJava observables, or some other equivalent abstraction. I discuss this topic\nfurther in chapter 8 when I cover the API gateway pattern. \n7.1.5 The benefits and drawbacks of the API composition pattern\nThis pattern is a simple and intuitive way to implement query operations in a micro-\nservice architecture. But it has some drawbacks:\n\uf0a1 Increased overhead\n\uf0a1 Risk of reduced availability\n\uf0a1 Lack of transactional data consistency\nLet\u2019s take a look at them.\nINCREASED OVERHEAD\nOne drawback of this pattern is the overhead of invoking multiple services and query-\ning multiple databases. In a monolithic applic ation, a client can retrieve data with a\nsingle request, which will often execute a single database query. In comparison, using\nthe API composition pattern involves multip le requests and database queries. As a\nresult, more computing and network resour ces are required, increasing the cost of\nrunning the application. \nRISK OF REDUCED AVAILABILITY\nAnother drawback of this pattern is reduced availability. As described in chapter 3, the\navailability of an operation declines with the number of services that are involved.\nBecause the implementation of a query operation involves at least three services\u2014the\nAPI composer and at least two provider services\u2014its availability will be significantly less\nthan that of a single service. For example, if the availability of an individual service is\n99.5%, then the availability of the findOrder() endpoint, which invokes four provider\nservices, is 99.5%(4+1) = 97.5%!\n There are couple of strategies you can us e to improve availability. The first strat-\negy is for the API composer  to return previously cached data when a Provider service  is", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2880, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c9cd5052-67dc-4050-8a78-6e82240c7068": {"__data__": {"id_": "c9cd5052-67dc-4050-8a78-6e82240c7068", "embedding": null, "metadata": {"page_label": "228", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b9b8a77-62dd-42d5-9208-9b61ce0bf82e", "node_type": "4", "metadata": {"page_label": "228", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "adf52d2eaa86b0f6784ac7b2648649319690b0f38b93216a7342755e58f88eb1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "228 CHAPTER 7 Implementing queries in a microservice architecture\nunavailable. An API composer sometimes caches the data returned by a Provider service in\norder to improve performance. It can also us e this cache to improve availability. If a\nprovider is unavailable, the API composer can return data from the cache, though it\nmay be potentially stale.\n Another strategy for improving availability is for the API composer to return incom-\nplete data. For example, imagine that Kitchen Service is temporarily unavailable.\nThe API Composer for the findOrder() query operation could omit that service\u2019s data\nfrom the response, because the UI can still display useful information. You\u2019ll see more\ndetails on API design, caching, and reliability in chapter 8. \nLACK OF TRANSACTIONAL DATA CONSISTENCY\nAnother drawback of the API composition patt ern is the lack of data consistency. A\nmonolithic application typically executes a query operation using a single database\ntransaction. ACID transactions\u2014subject to the fine print about isolation levels\u2014ensure\nthat an application has a consistent view of the data, even if it executes multiple data-\nbase queries. In contrast, the API composition pattern executes multiple database que-\nries against multiple databases. There\u2019s a risk, therefore, that a query operation will\nreturn inconsistent data.\n For example, an Order retrieved from Order Service might be in the CANCELLED\nstate, whereas the corresponding Ticket retrieved from Kitchen Service might not\nyet have been cancelled. The API composer must resolve this discrepancy, which increases\nthe code complexity. To make matters worse, an API composer might not always be able\nto detect inconsistent data, and will return it to the client.\n Despite these drawbacks, the API composition pattern is extremely useful. You can\nuse it to implement many query operations. But there are some query operations that\ncan\u2019t be efficiently implemented using this  pattern. A query operation might, for\nexample, require the API composer to perform an in-memory join of large datasets.\n It\u2019s usually better to implement these types of query operations using the CQRS\npattern. Let\u2019s take a look at how this pattern works. \n7.2 Using the CQRS pattern\nMany enterprise applications use an RDBMS as the transactional system of record and\na text search database, such as Elasticsea rch or Solr, for text search queries. Some\napplications keep the databases synchronized by writing to both simultaneously. Oth-\ners periodically copy data from the RDBM S to the text search engine. Applications\nwith this architecture leverage the strength s of multiple databases: the transactional\nproperties of the RDBMS and the querying capabilities of the text database.\nPattern: Command query responsibility segregation\nImplement a query that needs data from several services by using events to maintain\na read-only view that replicates data from the services. See http://microservices\n.io/patterns/data/cqrs.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1e5a4381-abac-4095-92d2-c06a37efa3ff": {"__data__": {"id_": "1e5a4381-abac-4095-92d2-c06a37efa3ff", "embedding": null, "metadata": {"page_label": "229", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e948e854-81c2-4be1-aade-a68e49b55938", "node_type": "4", "metadata": {"page_label": "229", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e770f23e1a40bd3aab098a0a5ed99e8eb5739a5658d5d2fa033b12e77ff1006b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "229Using the CQRS pattern\nCQRS is a generalization of this kind of architecture. It maintains one or more view\ndatabases\u2014not just text search databases\u2014that implement one or more of the appli-\ncation\u2019s queries. To understand why this is useful, we\u2019ll look at some queries that can\u2019t\nbe efficiently implemented using the API composition pattern. I\u2019ll explain how CQRS\nworks and then talk about the benefits and drawbacks of CQRS. Let\u2019s take a look at\nwhen you need to use CQRS.\n7.2.1 Motivations for using CQRS\nThe API composition pattern is a good wa y to implement many queries that must\nretrieve data from multiple services. Unfortunately, it\u2019s only a partial solution to the\nproblem of querying in a microservice architecture. That\u2019s because there are multiple\nservice queries the API composition pattern can\u2019t implement efficiently.\n What\u2019s more, there are also single serv ice queries that are challenging to imple-\nment. Perhaps the service\u2019s database doesn\u2019 t efficiently support the query. Alterna-\ntively, it sometimes makes sense for a service to implement a query that retrieves data\nowned by a different service. Let\u2019s take a look at these problems, starting with a multi-\nservice query that can\u2019t be efficiently implemented using API composition.\nIMPLEMENTING THE FINDORDERHISTORY() QUERY OPERATION\nThe findOrderHistory() operation retrieves a consumer\u2019s order history. It has sev-\neral parameters:\n\uf0a1 consumerId\u2014Identifies the consumer\n\uf0a1 pagination\u2014Page of results to return\n\uf0a1 filter\u2014Filter criteria, including the max age of the orders to return, an\noptional order status, and optional keywords that match the restaurant name and\nmenu items\nThis query operation returns an OrderHistory object that contains a summary of the\nmatching orders sorted by increasing age. It\u2019s called by the module that implements\nthe Order History view. This view displays a summ ary of each order, which includes\nthe order number, order status, order total, and estimated delivery time.\n On the surface, this operation is similar to the findOrder() query operation. The\nonly difference is that it returns multiple orders instead of just one. It may appear that\nthe API composer only has to execute the same query against each Provider service and\ncombine the results. Unfortunately, it\u2019s not that simple.\n That\u2019s because not all services store the attributes that are used for filtering or\nsorting. For example, one of the findOrderHistory() operation\u2019s filter criteria is a\nkeyword that matches against a menu  item. Only two of the services, Order Service\nand Kitchen Service, store an Order\u2019s menu items. Neither Delivery Service nor\nAccounting Service stores the menu items, so can\u2019t filter their data using this key-\nword. Similarly, neither Kitchen Service nor Delivery Service can sort by the\norderCreationDate attribute.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2821, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "585edf3a-564d-470d-a0a2-577777b7c1bc": {"__data__": {"id_": "585edf3a-564d-470d-a0a2-577777b7c1bc", "embedding": null, "metadata": {"page_label": "230", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8cdcfcfe-f236-44cb-9507-76694093fbf6", "node_type": "4", "metadata": {"page_label": "230", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3095188aca94ba40ade787ec3c2947dbde2620d96de4f7bcb2ab3e9d34fc7a02", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "230 CHAPTER 7 Implementing queries in a microservice architecture\n There are two ways an API composer could solve this problem. One solution is for the\nAPI composer to do an in-memory join, as shown in figure 7.7. It retrieves all orders for\nthe consumer from Delivery Service and Accounting Service and performs a join\nwith the orders retrieved from Order Service and Kitchen Service.\nThe drawback of this approach is that it potentially requires the API composer to retrieve\nand join large datasets, which is inefficient.\n The other solution is for the API composer to retrieve matching orders from Order\nService and Kitchen Service and then request orders from the other services by ID.\nBut this is only practical if those services  have a bulk fetch API. Requesting orders\nindividually will likely be inefficient because of excessive network traffic.\n Queries such as findOrderHistory() require the API composer  to duplicate the\nfunctionality of an RDBMS\u2019s query executio n engine. On one hand, this potentially\nmoves work from the less scalable database to the more scalable application. On the\nother hand, it\u2019s less efficient. Also, developers should be writing business functionality,\nnot a query execution engine.\n Next I show you how to apply the CQRS pattern and use a separate datastore,\nwhich is designed to efficiently implement the findOrderHistory() query operation.\nFigure 7.7 API composition can\u2019t efficiently retr ieve a consumer\u2019s orders, because some providers, \nsuch as Delivery Service, don\u2019t store the attributes used for filtering.\nFind orders\ncomposer\nOrder Service\n\u00abaggregate\u00bb\nOrder\nGET/orders?\nconsumerId=\n&keyword=\nGET/charges?\nconsumerId=\nGET/tickets?\nconsumerId=\n&keyword=\nGET/deliveries?\nconsumerId=\nKitchen Service\n\u00abaggregate\u00bb\nRestaurantOrder\nDelivery Service\n\u00abaggregate\u00bb\nDelivery\nAccounting Service\n\u00abaggregate\u00bb\nCharge\nGET/order?consumerId=&keyword=\nThese services don\u2019t store the data needed for a keyword\nsearch, so will return all of a consumer\u2019s orders.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1990, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3833446b-9e09-4911-8390-0640bd076711": {"__data__": {"id_": "3833446b-9e09-4911-8390-0640bd076711", "embedding": null, "metadata": {"page_label": "231", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05fde8a2-2ba9-4273-8832-1dffbfcbd4a1", "node_type": "4", "metadata": {"page_label": "231", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "08f3a14396140b192cb684e2e95a76e5b23390ea7bcd6afbd7d86a29f242fb04", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "231Using the CQRS pattern\nBut first, let\u2019s look at an example of a query operation that\u2019s challenging to imple-\nment, despite being local to a single service. \nA CHALLENGING SINGLE SERVICE QUERY: FINDAVAILABLERESTAURANTS()\nAs you\u2019ve just seen, implementing queries that retrieve data from multiple services\ncan be challenging. But even queries that are local to a single service can be difficult\nto implement. There are a couple of reas ons why this might be the case. One is\nbecause, as discussed shortly, sometimes it\u2019s not appropriate for the service that owns\nthe data to implement the query. The other reason is that sometimes a service\u2019s data-\nbase (or data model) doesn\u2019t efficiently support the query.\n Consider, for example, the findAvailableRestaurants() query operation. This\nquery finds the restaurants that are availabl e to deliver to a given address at a given\ntime. The heart of this query is a geospatial (location-based) search for restaurants\nthat are within a certain distance of the delivery address. It\u2019s a critical part of the order\nprocess and is invoked by the UI module that displays the available restaurants.\n The key challenge when implementing this query operation is performing an effi-\ncient geospatial query. How you implement the findAvailableRestaurants() query\ndepends on the capabilities of the database  that stores the restaurants. For example,\nit\u2019s straightforward to implement the findAvailableRestaurants() query using\neither MongoDB or the Postgres and MySQ L geospatial extensions. These databases\nsupport geospatial datatypes, indexes, and queries. When using one of these databases,\nRestaurant Service persists a Restaurant as a database record that has a location\nattribute. It finds the available restaurants using a geospatial query that\u2019s optimized by\na geospatial index on the location attribute.\n If the FTGO application stores restaurant s in some other kind of database, imple-\nmenting the findAvailableRestaurant() query is more challenging. It must main-\ntain a replica of the restaurant data in a form that\u2019s designed to support the geospatial\nquery. The application could, for example,  use the Geospatial Indexing Library for\nDynamoDB (https://github.com/awslabs/dynamodb-geo) that uses a table as a geo-\nspatial index. Alternatively, the application could store a replica of the restaurant data\nin an entirely different type of database, a situation very similar to using a text search\ndatabase for text queries.\n The challenge with using replicas is ke eping them up-to-date whenever the origi-\nnal data changes. As you\u2019ll learn below, CQRS solves the problem of synchronizing\nreplicas. \nTHE NEED TO SEPARATE CONCERNS\nAnother reason why single service queries are challenging to implement is that some-\ntimes the service that owns the data should n\u2019t be the one that implements the query.\nThe findAvailableRestaurants() query operation retrieves data that is owned by\nRestaurant Service. This service enables restaurant owners to manage their restau-\nrant\u2019s profile and menu items. It stores various attributes of a restaurant, including its\nname, address, cuisines, menu, and opening hours. Given that this service owns the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3185, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "81d3c446-c26c-45bf-8319-1ce9c92ece9c": {"__data__": {"id_": "81d3c446-c26c-45bf-8319-1ce9c92ece9c", "embedding": null, "metadata": {"page_label": "232", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48244bbc-a431-4c33-a0dc-07ec696c4d44", "node_type": "4", "metadata": {"page_label": "232", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0d4242167364374423ada840c83ce8a17d357b1dc0cdfc3ce6d18e99a3438acf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "232 CHAPTER 7 Implementing queries in a microservice architecture\ndata, it makes sense, at least on the surface, for it to implement this query operation.\nBut data ownership isn\u2019t the only factor to consider.\n You must also take into account the need to separate concerns and avoid overload-\ning services with too many responsibiliti es. For example, the primary responsibility\nof the team that develops Restaurant Service is enabling restaurant managers to\nmaintain their restaurants. That\u2019s quit e different from implementing a high-\nvolume, critical query. What\u2019s more, if they were responsible for the findAvailable-\nRestaurants() query operation, the team would constantly live in fear of deploying a\nchange that prevented consumers from placing orders.\n It makes sense for Restaurant Service to merely provide the restaurant data to\nanother service that implements the findAvailableRestaurants() query operation\nand is most likely owned by the Order Service team. As with the findOrderHistory()\nquery operation, and when needing to main tain geospatial index, there\u2019s a require-\nment to maintain an eventually consistent replica of some data in order to implement\na query. Let\u2019s look at how to accomplish that using CQRS. \n7.2.2 Overview of CQRS\nThe examples described in section 7.2.1 highlighted three problems that are commonly\nencountered when implementing queries in a microservice architecture:\n\uf0a1 Using the API composition pattern to re trieve data scattered across multiple\nservices results in expensive, inefficient in-memory joins.\n\uf0a1 The service that owns the data stores th e data in a form or in a database that\ndoesn\u2019t efficiently support the required query.\n\uf0a1 The need to separate concerns means that  the service that owns the data isn\u2019t\nthe service that should implement the query operation.\nThe solution to all three of these problems is to use the CQRS pattern.\nCQRS SEPARATES COMMANDS FROM QUERIES\nCommand Query Responsibility Segregation, as the name suggests, is all about segrega-\ntion, or the separation of concerns. As figure 7.8 shows, it splits a persistent data model\nand the modules that use it into two parts: the command side and the query side. The\ncommand side modules and data model implement create, update, and delete opera-\ntions (abbreviated CUD\u2014for example, HTTP POSTs, PUTs, and DELETEs). The\nquery-side modules and data model implem ent queries (such as HTTP GETs). The\nquery side keeps its data model synchroniz ed with the command-side data model by\nsubscribing to the events published by the command side.\n Both the non-CQRS and CQRS versions of  the service have an API consisting of\nvarious CRUD operations. In a non-CQRS-based service, those operations are typically\nimplemented by a domain model that\u2019s mapped to a database. For performance, a few\nqueries might bypass the domain model and access the database directly. A single per-\nsistent data model supports both commands and queries.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2940, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7bb7d2da-0a1d-40b4-9e7f-8dd8d5d78b33": {"__data__": {"id_": "7bb7d2da-0a1d-40b4-9e7f-8dd8d5d78b33", "embedding": null, "metadata": {"page_label": "233", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ee52932-00f2-4506-b7c7-250cbf369516", "node_type": "4", "metadata": {"page_label": "233", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7f9668cb36a4ebc8252afa562acaf83134e660a7f3d12547853c53843c6acb20", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "233Using the CQRS pattern\nIn a CQRS-based service, the command-side domain model handles CRUD operations\nand is mapped to its own database. It may al so handle simple queries, such as non-\njoin, primary key-based queries. The comm and side publishes domain events when-\never its data changes. These events migh t be published using a framework such as\nEventuate Tram or using event sourcing.\n A separate query model handles the nontrivial queries. It\u2019s much simpler than the\ncommand side because it\u2019s not responsible for implementing the business rules. The\nquery side uses whatever kind of database makes sense for the queries that it must sup-\nport. The query side has event handlers that subscribe to domain events and update\nthe database or databases. There may even be multiple query models, one for each\ntype of query. \nCQRS AND QUERY-ONLY SERVICES\nNot only can CQRS be applied within a serv ice, but you can also use this pattern to\ndefine query services. A query service has an API consisting of only query opera-\ntions\u2014no command operations. It implemen ts the query operations by querying a\ndatabase that it keeps up-to-date by subscr ibing to events published by one or more\nother services. A query-side service is a g ood way to implement a view that\u2019s built by\nService\nCRUD\nCRUD operations\nR\nDomain model\nAggregate Query\nbypass\nAggregate\nDatabase\nOne database for creates, updates, and deletes. A\nseparate database for queries. It is kept up-to-date\nby using events that are published whenever the\ncommand-side database changes.\nSingle database for all CRUD\nService\nCUD\nCRUD operations\nR\nCommand/domain model Events\nCQRSNon-CQRS\nAggregate Event\nhandler\nAggregate\nCommand-side\ndatabase Query database\nQuery model\nFigure 7.8 On the left is the non-CQRS version of the service, and on the right is the CQRS version. \nCQRS restructures a service into command-side and query-side modules, which have separate \ndatabases.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1928, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40393242-d545-45da-ad1f-ddfcb9c2cddd": {"__data__": {"id_": "40393242-d545-45da-ad1f-ddfcb9c2cddd", "embedding": null, "metadata": {"page_label": "234", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1d6aa73-65c7-4326-8147-89355bee576d", "node_type": "4", "metadata": {"page_label": "234", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7686bc79fc6f3f987f1988c0d896fcf2c82751cd0f8909bea9585bc0c66a2bdb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "234 CHAPTER 7 Implementing queries in a microservice architecture\nsubscribing to events published by multiple services. This kind of view doesn\u2019t belong\nto any particular service, so it makes sense to implement it as a standalone service. A\ngood example of such a service is Order History Service, which is a query service\nthat implements the findOrderHistory() query operation. As figure 7.9 shows, this\nservice subscribes to events published by several services, including Order Service,\nDelivery Service, and so on.\nOrder History Service has event handlers that subscr ibe to events published by sev-\neral services and update the Order History View Database. I describe the implemen-\ntation of this service in more detail in section 7.4.\n A query service is also a good way to im plement a view that replicates data owned\nby a single service yet because of the need to separate concerns isn\u2019t part of that service.\nFor example, the FTGO developers can define an Available Restaurants Service,\nwhich implements the findAvailableRestaurants() query operation described ear-\nlier. It subscribes to events published by Restaurant Service and updates a database\ndesigned for efficient geospatial queries.\n In many ways, CQRS is an event-based generalization of the popular approach of\nusing RDBMS as the system of record and a text search engine, such as Elasticsearch,\nto handle text queries. What\u2019s different is that CQRS uses a broader range of database\nOrder Service\nKitchen Service Order History\nService\n\ufb01ndOrderHistory()\n\ufb01ndOrder()\nDelivery Service\nAccounting Service\nOrder history\nview database\nEvent\nhandlers\nOrder\nevents\nTicket\nevents\nDelivery\nevents\nAccounting\nevents\nFigure 7.9 The design of Order History Service, which is a query-side service. It \nimplements the findOrderHistory() query operation by querying a database, which \nit maintains by subscribing to events published by multiple other services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1915, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "092dcc83-ef05-4f65-844a-acaf24982c68": {"__data__": {"id_": "092dcc83-ef05-4f65-844a-acaf24982c68", "embedding": null, "metadata": {"page_label": "235", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea7b3275-e693-4ab8-b090-acafbbf46373", "node_type": "4", "metadata": {"page_label": "235", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "91cc8c22742aeae4211e2c85893d05e34f957f78e8b29290a0809891aa83970e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "235Using the CQRS pattern\ntypes\u2014not just a text search engine. Also, CQRS query-side views are updated in near\nreal time by subscribing to events.\n Let\u2019s now look at the benefits and drawbacks of CQRS. \n7.2.3 The benefits of CQRS\nCQRS has both benefits and drawbacks. The benefits are as follows:\n\uf0a1 Enables the efficient implementation of queries in a microservice architecture\n\uf0a1 Enables the efficient implementation of diverse queries\n\uf0a1 Makes querying possible in an event sourcing-based application\n\uf0a1 Improves separation of concerns\nENABLES THE EFFICIENT IMPLEMENTATION OF QUERIES IN A MICROSERVICE ARCHITECTURE\nOne benefit of the CQRS pattern is that it efficiently implements queries that retrieve\ndata owned by multiple services. As descri bed earlier, using the API composition pat-\ntern to implement queries sometimes results in expensive, inefficient in-memory joins\nof large datasets. For those queries, it\u2019s more efficient to use an easily queried CQRS\nview that pre-joins the data from two or more services.\nENABLES THE EFFICIENT IMPLEMENTATION OF DIVERSE QUERIES\nAnother benefit of CQRS is that it enable s an application or service to efficiently\nimplement a diverse set of queries. Attemp ting to support all queries using a single\npersistent data model is often challeng ing and in some cases impossible. Some\nNoSQL databases have very limited querying  capabilities. Even when a database has\nextensions to support a particular kind of query, using a specialized database is often\nmore efficient. The CQRS pattern avoids the limitations of a single datastore by defin-\ning one or more views, each of which efficiently implements specific queries. \nENABLES QUERYING IN AN EVENT SOURCING-BASED APPLICATION\nCQRS also overcomes a major limitation of event sourcing. An event store only sup-\nports primary key-based queries. The CQRS pattern addresses this limitation by defin-\ning one or more views of the aggregates, which are kept up-to-date, by subscribing to\nthe streams of events that are published by  the event sourcing-based aggregates. As a\nresult, an event sourcing-based application invariably uses CQRS. \nIMPROVES SEPARATION OF CONCERNS\nAnother benefit of CQRS is that it separates concerns. A domain model and its corre-\nsponding persistent data model don\u2019t handle both commands and queries. The CQRS\npattern defines separate code modules and database schemas for the command and\nquery sides of a service. By separating concerns, the command side and query side are\nlikely to be simpler and easier to maintain.\n Moreover, CQRS enables the service that implements a query to be different than\nthe service that owns the data. For exam ple, earlier I described how even though\nRestaurant Service owns the data that\u2019s queried by the findAvailableRestaurants\nquery operation, it makes sense for anothe r service to implement such a critical,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2860, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d812f79f-7233-478b-aabb-f1c48ab2136d": {"__data__": {"id_": "d812f79f-7233-478b-aabb-f1c48ab2136d", "embedding": null, "metadata": {"page_label": "236", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80822233-0518-45c7-b001-19a22bb6406b", "node_type": "4", "metadata": {"page_label": "236", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "81cf9b9589289d92d1a2c2e82cb476aa2e17b8d0506096b59508f7128023ecac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "236 CHAPTER 7 Implementing queries in a microservice architecture\nhigh-volume query. A CQRS query service maintains a view by subscribing to the events\npublished by the service or services that own the data. \n7.2.4 The drawbacks of CQRS\nEven though CQRS has several benefits, it also has significant drawbacks:\n\uf0a1 More complex architecture\n\uf0a1 Dealing with the replication lag\nLet\u2019s look at these drawbacks, starting with the increased complexity.\nMORE COMPLEX ARCHITECTURE\nOne drawback of CQRS is that it adds co mplexity. Developers must write the query-\nside services that update and query the views. There is also the extra operational com-\nplexity of managing and operating the extr a datastores. What\u2019s more, an application\nmight use different types of databases, whic h adds further complexity for both devel-\nopers and operations. \nDEALING WITH THE REPLICATION LAG\nAnother drawback of CQRS is dealing with  the \u201clag\u201d between the command-side and\nthe query-side views. As you might expect , there\u2019s delay between when the command\nside publishes an event and when that event is processed by the query side and the\nview updated. A client application that updates an aggregate and then immediately\nqueries a view may see the previous version of  the aggregate. It must often be written\nin a way that avoids exposing these potential inconsistencies to the user.\n One solution is for the command-side and query-side APIs to supply the client with\nversion information that enables it to tell that the query side is out-of-date. A client\ncan poll the query-side view until it\u2019s up-to-date. Shortly I\u2019ll discuss how the service\nAPIs can enable a client to do this.\n A UI application such as a native mobi le application or single page JavaScript\napplication can handle replication lag by updating its local model once the command\nis successful without issuing a query. It can, for example, update its model using data\nreturned by the command. Hopefully, when a user action triggers a query, the view\nwill be up-to-date. One drawback of this approach is that the UI code may need to\nduplicate server-side code in order to update its model.\n As you can see, CQRS has both benefits and drawbacks. As mentioned earlier, you\nshould use the API composition whenever possible and use CQRS only when you must.\n Now that you\u2019ve seen the benefits and drawbacks of CQRS, let\u2019s now look at how to\ndesign CQRS views. \n7.3 Designing CQRS views\nA CQRS view module has an API consisting of one more query operations. It imple-\nments these query operations by querying a database that it maintains by subscribing\nto events published by one or more services. As figure 7.10 shows, a view module con-\nsists of a view database and three submodules.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e31474fd-9e1a-48a1-bcb7-59ae559085a3": {"__data__": {"id_": "e31474fd-9e1a-48a1-bcb7-59ae559085a3", "embedding": null, "metadata": {"page_label": "237", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea35621d-23cc-457f-8de9-25f17e812f65", "node_type": "4", "metadata": {"page_label": "237", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "647e4ea6c6142b423bdbc5d5a15a4117f1c67f545c597bbf769cb364c6680c4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "237Designing CQRS views\nThe data access module implements the database access logic. The event handlers\nand query API modules use the data access module to update and query the database.\nThe event handlers module subscribes to events and updates the database. The query\nAPI module implements the query API.\n You must make some important design decisions when developing a view module:\n\uf0a1 You must choose a database and design the schema.\n\uf0a1 When designing the data access module, you must address various issues, includ-\ning ensuring that updates are idempotent and handling concurrent updates.\n\uf0a1 When implementing a new view in an existing application or changing the\nschema of an existing application, yo u must implement a mechanism to effi-\nciently build or rebuild the view.\n\uf0a1 You must decide how to enable a client of the view to cope with the replication\nlag, described earlier.\nLet\u2019s look at each of these issues.\n7.3.1 Choosing a view datastore\nA key design decision is the choice of database and the design of the schema. The pri-\nmary purpose of the database and the data model is to efficiently implement the view\nmodule\u2019s query operations. It\u2019s the characteristics of those queries that are the pri-\nmary consideration when selecting a database . But the database must also efficiently\nimplement the update operations performed by the event handlers.\nSQL VS. NOSQL DATABASES\nNot that long ago, there was one type of database to rule them all: the SQL-based\nRDBMS. As the Web grew in popularity, though, various companies discovered that\nan RDBMS couldn\u2019t satisfy their web scale requirements. That led to the creation of\nCQRS view module\nEvent\nhandlers\nquery()update()\nQuery API\nData access\nView database\nEvents\n\ufb01nd...()\n...\nImplements data\naccess logic\nFigure 7.10 The design of a CQRS \nview module. Event handlers update \nthe view database, which is queried \nby the Query API module.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1896, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48221c4e-2ad0-4364-b6c3-ce8b0e78eb8f": {"__data__": {"id_": "48221c4e-2ad0-4364-b6c3-ce8b0e78eb8f", "embedding": null, "metadata": {"page_label": "238", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "17d7c8d2-b773-47f6-a60d-368236c917ad", "node_type": "4", "metadata": {"page_label": "238", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ba76a404b1c48875ae4bbc29a9b1d4fe5d1dfd6d8198dc42a4cfec82402dbc88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "238 CHAPTER 7 Implementing queries in a microservice architecture\nthe so-called NoSQL databases. A NoSQL database typically has a limited form of trans-\nactions and less general querying capabilitie s. For certain use cases, these databases\nhave certain advantages over SQL database s, including a more flexible data model\nand better performance and scalability.\n A NoSQL database is often a good choice for a CQRS view, which can leverage its\nstrengths and ignore its weaknesses. A CQRS view benefits from the richer data model,\nand performance of a NoSQL database. It\u2019s unaffected by the limitations of a NoSQL\ndatabase, because it only uses simple transactions and executes a fixed set of queries.\n Having said that, sometimes it makes sense to implement a CQRS view using a SQL\ndatabase. A modern RDBMS running on modern hardware has excellent perfor-\nmance. Developers, database administrators, and IT operations are, in general, much\nmore familiar with SQL databases than they are with NoSQL databases. As mentioned\nearlier, SQL databases often have extensions  for non-relational features, such as geo-\nspatial datatypes and queries. Also, a CQRS view might need to use a SQL database in\norder to support a reporting engine.\n As you can see in table 7.1, there are lots of different options to choose from. And\nto make the choice even more complicate d, the differences between the different\ntypes of database are starting to blur. Fo r example, MySQL, which is an RDBMS, has\nexcellent support for JSON, which is one of  the strengths of MongoDB, a JSON-style\ndocument-oriented database.\nNow that I\u2019ve discussed the different kind s of databases you can use to implement a\nCQRS view, let\u2019s look at the problem of how to efficiently update a view. \nSUPPORTING UPDATE OPERATIONS\nBesides efficiently implementing queries, th e view data model must also efficiently\nimplement the update operations executed by  the event handlers. Usually, an event\nTable 7.1 Query-side view stores\nIf you need Use Example\nPK-based lookup of JSON \nobjects\nA document store such as MongoDB \nor DynamoDB, or a key value store \nsuch as Redis\nImplement order history by main-\ntaining a MongoDB document \ncontaining the per-customer.\nQuery-based lookup of JSON \nobjects\nA document store such as MongoDB \nor DynamoDB\nImplement customer view using \nMongoDB or DynamoDB.\nText queries A text search engine such as Elastic-\nsearch\nImplement text search for orders \nby maintaining a per-order Elas-\nticsearch document.\nGraph queries A graph database such as Neo4j Implement fraud detection by \nmaintaining a graph of custom-\ners, orders, and other data.\nTraditional SQL reporting/BI An RDBMS Standard business reports and \nanalytics.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2708, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71b11b5c-fed5-43c4-b2aa-013f0f279618": {"__data__": {"id_": "71b11b5c-fed5-43c4-b2aa-013f0f279618", "embedding": null, "metadata": {"page_label": "239", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc178ceb-c948-4d25-ac3a-626e05114aa0", "node_type": "4", "metadata": {"page_label": "239", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "be343b0d9a356f29c5e9b6ca2f14cd5910fa2a2eec9d3eb2c5ac0b1f7ed0bf16", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "239Designing CQRS views\nhandler will update or delete a record in th e view database using its primary key. For\nexample, soon I\u2019ll describe the design of a CQRS view for the findOrderHistory()\nquery. It stores each Order as a database record using the orderId as the primary key.\nWhen this view receives an event from Order Service, it can straightforwardly update\nthe corresponding record.\n Sometimes, though, it will need to upda te or delete a record using the equiva-\nlent of a foreign key. Consider, fo r instance, the event handlers for Delivery*\nevents. If there is a one-to-one correspondence between a Delivery and an Order,\nthen Delivery.id might be the same as Order.id. If it is, then Delivery* event han-\ndlers can easily update the order\u2019s database record.\n But suppose a Delivery has its own primary key or there is a one-to-many relation-\nship between an Order and a Delivery. Some Delivery* events, such as the Delivery-\nCreated event, will contain the orderId. But other events, such as a DeliveryPickedUp\nevent, might not. In this scenario, an event handler for DeliveryPickedUp will need\nto update the order\u2019s record using the deliveryId as the equivalent of a foreign key.\n Some types of database efficiently s upport foreign-key-based update operations.\nFor example, if you\u2019re using an RDBMS or MongoDB, you create an index on the nec-\nessary columns. However, non-primary key-based updates are not straightforward\nwhen using other NOSQL databases. The application will need to maintain some kind\nof database-specific mapping from a foreign key to a primary key in order to deter-\nmine which record to update. For example,  an application that uses DynamoDB,\nwhich only supports primary key-based update s and deletes, must first query a Dyna-\nmoDB secondary index (discussed shortly) to determine the primary keys of the items\nto update or delete. \n7.3.2 Data access module design\nThe event handlers and the query API mo dule don\u2019t access the datastore directly.\nInstead they use the data access module, which consists of a data access object (DAO)\nand its helper classes. The DAO has several responsibilities. It implements the update\noperations invoked by the event handlers and the query operations invoked by the\nquery module. The DAO maps between the data types used by the higher-level code\nand the database API. It also must handle concurrent updates and ensure that updates\nare idempotent.\n Let\u2019s look at these issues, starting with how to handle concurrent updates.\nHANDLING CONCURRENCY\nSometimes a DAO must handle the possibilit y of multiple concurrent updates to the\nsame database record. If a view subscribes to events published by a single aggregate\ntype, there won\u2019t be any concurrency issues. That\u2019s because events published by a par-\nticular aggregate instance are processed sequentially. As a result, a record correspond-\ning to an aggregate instance won\u2019t be updated concurrently. But if a view subscribes to\nevents published by multiple aggregate types,  then it\u2019s possible that multiple events\nhandlers update the same record simultaneously.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3085, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06ced18b-c148-4eee-81b2-c86562e03bee": {"__data__": {"id_": "06ced18b-c148-4eee-81b2-c86562e03bee", "embedding": null, "metadata": {"page_label": "240", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "699dbb98-b401-44f1-a71a-fe3b2ef159f3", "node_type": "4", "metadata": {"page_label": "240", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fc0bdd20125212a742e6611b96f4ab51c56833725ef8ccc4d187cef842bf7e0a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "240 CHAPTER 7 Implementing queries in a microservice architecture\n For example, an event handler for an Order* event might be invoked at the same\ntime as an event handler for a Delivery* event for the same order. Both event han-\ndlers then simultaneously invoke the DAO to update the database record for that\nOrder. A DAO must be written in a way that ensures that this situation is handled cor-\nrectly. It must not allow one update to overwrite another. If a DAO implements updates\nby reading a record and then writing the updated record, it must use either pessimistic\nor optimistic locking. In the next section you\u2019ll see an example of a DAO that handles\nconcurrent updates by updating database records without reading them first.\nIDEMPOTENT EVENT HANDLERS\nA s  m e n t i o n e d  i n  c h a p t e r  3 ,  a n  e v e n t  h a n d l e r  m a y  b e  i n v o k e d  w i t h  t h e  s a m e  e v e n t\nmore than once. This is generally not a problem if a query-side event handler is idem-\npotent. An event handler is idempotent if handling duplicate events results in the cor-\nrect outcome. In the worst case, the view datastore will temporarily be out-of-date. For\nexample, an event handler that maintains the Order History view might be invoked\nwith the (admittedly improbable) sequence of events shown in figure 7.11: Delivery-\nPickedUp, DeliveryDelivered, DeliveryPickedUp, and DeliveryDelivered. After\ndelivering the DeliveryPickedUp and DeliveryDelivered events the first time, the\nmessage broker, perhaps because of a network error, starts delivering the events from\nan earlier point in time, and so redelivers DeliveryPickedUp and DeliveryDelivered.\nAfter the event handler processes the second DeliveryPickedUp event, the Order\nHistory view temporarily contains the out-of-date state of the Order until the Delivery-\nDelivered is processed. If this behavior is undesirable, then the event handler should\ndetect and discard duplicate events, like a non-idempotent event handler.\n An event handler isn\u2019t idempotent if dupl icate events result in an incorrect out-\ncome. For example, an event handler that increments the balance of a bank account\nisn\u2019t idempotent. A non-idempotent event handler must, as explained in chapter 3,\ndetect and discard duplicate events by reco rding the IDs of events that it has pro-\ncessed in the view datastore.\nDelivery picked up\nOrder History View\nOrderId: 123\nState: PICKED_UP\nTemporarily out of date\nDelivery delivered\nOrderId: 123\nState: DELIVERED\nDelivery picked up\nOrderId: 123\nState: PICKED_UP\nDelivery delivered\nOrderId: 123\nState: DELIVERED\nTime\nFigure 7.11 The DeliveryPickedUp and DeliveryDelivered events are delivered \ntwice, which causes the order state in view to be temporarily out-of-date.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2745, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48a4f441-501b-45eb-8507-04f4727c954d": {"__data__": {"id_": "48a4f441-501b-45eb-8507-04f4727c954d", "embedding": null, "metadata": {"page_label": "241", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aeab86c6-0a5b-4f70-b34c-3291edfe367b", "node_type": "4", "metadata": {"page_label": "241", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9fc12381bfa64ca72ff2ca624f295946ab060aa32541a2b3d7add1fc2e25b514", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "241Designing CQRS views\n In order to be reliable, the event handler must record the event ID and update the\ndatastore atomically. How to do this depends on the type of database. If the view data-\nbase store is a SQL database, the event hand ler could insert processed events into a\nPROCESSED_EVENTS table as part of the transaction that updates the view. But if the\nview datastore is a NoSQL database that has a limited transaction model, the event\nhandler must save the event in the datastore \u201crecord\u201d (for example, a MongoDB doc-\nument or DynamoDB table item) that it updates.\n It\u2019s important to note that the event handler doesn\u2019t need to record the ID of\nevery event. If, as is the case with Eventu ate, events have a monotonically increasing\nID, then each record only needs to store the max(eventId) that\u2019s received from a\ngiven aggregate instance. Furthermore, if the record corresponds to a single aggre-\ngate instance, then the event handler only needs to record max(eventId). Only\nrecords that represent joins of events from  multiple aggregates must contain a map\nfrom [aggregate type, aggregate id] to max(eventId).\n F or  ex a m pl e,  y ou \u2019 l l s o on  s ee  th a t the DynamoDB implementation of the Order\nHistory view contains items that have attributes for tracking events that look like this:\n{...\n\"Order3949384394-039434903\" : \"0000015e0c6fc18f-0242ac1100e50002\",\n\"Delivery3949384394-039434903\" : \"0000015e0c6fc264-0242ac1100e50002\",\n}\nThis view is a join of events published by various services. The name of each of these\nevent-tracking attributes is \u00abaggregateType\u00bb\u00abaggregateId\u00bb , and the value is the\neventId. Later on, I describe how this works in more detail. \nENABLING A CLIENT APPLICATION TO USE AN EVENTUALLY CONSISTENT VIEW\nAs I said earlier, one issue with using CQRS is that a client that updates the command\nside and then immediately executes a query might not see its own update. The view is\neventually consistent because of the unavoidable latency of the messaging infrastructure.\n The command and query module APIs can enable the client to detect an inconsis-\ntency using the following approach. A comm and-side operation returns a token con-\ntaining the ID of the published event to the client. The client then passes the token to\na query operation, which returns an error if the view hasn\u2019t been updated by that\nevent. A view module can implement th is mechanism using the duplicate event-\ndetection mechanism. \n7.3.3 Adding and updating CQRS views\nCQRS views will be added and updated thro ughout the lifetime of an application.\nSometimes you need to add a new view to support a new query. At other times you\nmight need to re-create a view because the schema has changed or you need to fix a\nbug in code that updates the view.\n Adding and updating views is conceptually quite simple. To create a new view, you\ndevelop the query-side module, set up the datastore, and deploy the service. The query", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2933, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c11dd03-68e1-44f8-bdcc-404c96572409": {"__data__": {"id_": "6c11dd03-68e1-44f8-bdcc-404c96572409", "embedding": null, "metadata": {"page_label": "242", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7443e9f-451d-4b58-a2b4-c376be3e8574", "node_type": "4", "metadata": {"page_label": "242", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9839019c3011b8dcba4992c897faf4472994b7d0086d549d168358dd19b43c5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "242 CHAPTER 7 Implementing queries in a microservice architecture\nside module\u2019s event handlers process all th e events, and eventually the view will be\nup-to-date. Similarly, updating an existing view is also conceptually simple: you change\nthe event handlers and rebuild the view from  scratch. The problem, however, is that\nthis approach is unlikely to work in practice. Let\u2019s look at the issues.\nBUILD CQRS VIEWS USING ARCHIVED EVENTS\nOne problem is that message brokers can\u2019 t store messages indefinitely. Traditional\nmessage brokers such as RabbitMQ delete a message once it\u2019s been processed by a\nconsumer. Even more modern brokers such as Apache Kafka, that retain messages for\na configurable retention period, aren\u2019t inte nded to store events indefinitely. As a\nresult, a view can\u2019t be built by only read ing all the needed events from the message\nbroker. Instead, an application must also read older events that have been archived in,\nfor example, AWS S3. You can do this by us ing a scalable big data technology such as\nApache Spark. \nBUILD CQRS VIEWS INCREMENTALLY\nAnother problem with view creation is that the time and resources required to process\nall events keep growing over time. Eventually, view creation will become too slow and\nexpensive. The solution is to use a two-step incremental algorithm. The first step peri-\nodically computes a snapshot of each aggr egate instance based on its previous snap-\nshot and events that have occurred since that snapshot was created. The second step\ncreates a view using the snapshots and any subsequent events. \n7.4 Implementing a CQRS view with AWS DynamoDB\nNow that we\u2019ve looked at the various desi gn issues you must address when using\nCQRS, let\u2019s consider an example. This section describes how to implement a CQRS\nview for the findOrderHistory() operation using DynamoDB. AWS DynamoDB is\na scalable, NoSQL database that\u2019s available as a service on the Amazon cloud. The\nDynamoDB data model consists of tables that contain items that, like JSON objects,\nare collections of hierarchical name-val ue pairs. AWS DynamoDB is a fully man-\naged database, and you can scale the thro ughput capacity of a table up and down\ndynamically.\n The CQRS view for the findOrderHistory() consumes events from multiple ser-\nvices, so it\u2019s implemented as a standalone Order View Service. The service has an API\nthat implements two operations: findOrderHistory() and findOrder(). Even though\nfindOrder() can be implemented using API composition, this view provides this oper-\nation for free. Figure 7.12 show s the design of the service. Order History Service is\nstructured as a set of modules, each of which implements a particular responsibility\nin order to simplify development and testing. The responsibility of each module is\nas follows:\n\uf0a1 OrderHistoryEventHandlers\u2014Subscribes to events published by the various\nservices and invokes the OrderHistoryDAO\n\uf0a1 OrderHistoryQuery APImodule\u2014Implements the REST endpoints described earlier", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2974, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e533ad31-7acd-4411-9bb6-7e1dfd787587": {"__data__": {"id_": "e533ad31-7acd-4411-9bb6-7e1dfd787587", "embedding": null, "metadata": {"page_label": "243", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ad65550-6cfc-4a40-a1cd-9045e9dcd038", "node_type": "4", "metadata": {"page_label": "243", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cc3b27ae320c13e31cf7eb06523d3a502403118089e588c73aa33db4a98dc78a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "243Implementing a CQRS view with AWS DynamoDB\n\uf0a1 OrderHistoryDataAccess\u2014Contains the OrderHistoryDAO, which defines the\nmethods that update and query the ftgo-order-history DynamoDB table and\nits helper classes\n\uf0a1 ftgo-order-history DynamoDB table\u2014The table that stores the orders\nLet\u2019s look at the design of the event handlers, the DAO, and the DynamoDB table in\nmore detail.\n7.4.1 The OrderHistoryEventHandlers module\nThis module consists of the event handlers that consume events and update the\nDynamoDB table. As the following listing sh ows, the event handlers are simple meth-\nods. Each method is a one-liner that invokes an OrderHistoryDao method with argu-\nments that are derived from the event.\n \n \n \n \n \nOrder History Service\nOrderHistory\nEvent\nHandlers\nQueryUpdate\nOrderHistory\nQuery\nOrderHistoryDataAccess\n<DynamoDB table>\nftgo-order-history\nOrder\ndelivery\n...\nevents\n\ufb01ndOrderHistory()\n\ufb01ndOrder\nOrderHistoryDAO\nFigure 7.12 The design of OrderHistoryService. OrderHistory-\nEventHandlers updates the database in response to events. The \nOrderHistoryQuery module implements the query operations by query-\ning the database. These two modules use the OrderHistory-\nDataAccess module to access the database.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1211, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "420180e7-13d5-401a-9ba3-897947dae4e1": {"__data__": {"id_": "420180e7-13d5-401a-9ba3-897947dae4e1", "embedding": null, "metadata": {"page_label": "244", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4efd8eab-cd62-490d-9d0e-19ba35515141", "node_type": "4", "metadata": {"page_label": "244", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3bea509b3fdf075e2c839195bef6aa4e278042e6de7581e5a3108e6d300a5cbc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "244 CHAPTER 7 Implementing queries in a microservice architecture\npublic class OrderHistoryEventHandlers {\nprivate OrderHistoryDao orderHistoryDao;\npublic OrderHistoryEventHandlers(OrderHistoryDao orderHistoryDao) {\nthis.orderHistoryDao = orderHistoryDao;\n}\npublic void handleOrderCreated(DomainEventEnvelope<OrderCreated> dee) {\norderHistoryDao.addOrder(makeOrder(dee.getAggregateId(), dee.getEvent()),\nmakeSourceEvent(dee));\n}\nprivate Order makeOrder(String orderId, OrderCreatedEvent event) {\n...\n}\npublic void handleDeliveryPickedUp(DomainEventEnvelope<DeliveryPickedUp>\ndee) {\norderHistoryDao.notePickedUp(dee.getEvent().getOrderId(),\nmakeSourceEvent(dee));\n}\n...\nEach event handler has a single parameter of type DomainEventEnvelope, which\ncontains the event and some metadata describing the event. For example, the\nhandleOrderCreated() method is invoked to handle an OrderCreated event. It calls\norderHistoryDao.addOrder() to create an Order in the database. Similarly, the\nhandleDeliveryPickedUp() method is invoked to handle a DeliveryPickedUp event.\nIt calls orderHistoryDao.notePickedUp() to update the status of the Order in the\ndatabase.\n Both methods call the helper method makeSourceEvent(), which constructs a\nSourceEvent containing the type and ID of the aggregate that emitted the event and\nthe event ID. In the next section you\u2019ll see that OrderHistoryDao uses SourceEvent to\nensure that update operations are idempotent.\n Let\u2019s now look at the design of the DynamoDB table and after that examine\nOrderHistoryDao. \n7.4.2 Data modeling and query design with DynamoDB\nLike many NoSQL databases, DynamoDB ha s data access operations that are much\nless powerful than those that are provided by an RDBMS. Consequently, you must\ncarefully design how the data is stored. In particular, the queries often dictate the\ndesign of the schema. We need to address several design issues:\n\uf0a1 Designing the ftgo-order-history table\n\uf0a1 Defining an index for the findOrderHistory query\nListing 7.1 Event handlers that call the OrderHistoryDao", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2040, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca798708-f394-4224-84ce-1dc66468c27e": {"__data__": {"id_": "ca798708-f394-4224-84ce-1dc66468c27e", "embedding": null, "metadata": {"page_label": "245", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a9852f67-533f-49e0-bcd1-7b3cc7585035", "node_type": "4", "metadata": {"page_label": "245", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b06051bcb6d85ac4b9e5d51dbc4a3ef03448712868786d16608e0eeadac4eb2a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "245Implementing a CQRS view with AWS DynamoDB\n\uf0a1 Implementing the findOrderHistory query\n\uf0a1 Paginating the query results\n\uf0a1 Updating orders\n\uf0a1 Detecting duplicate events\nWe\u2019ll look at each one in turn.\nDESIGNING THE FTGO-ORDER-HISTORY TABLE\nThe DynamoDB storage model consists of tables, which contain items, and indexes,\nwhich provide alternative ways to access a table\u2019s items (discussed shortly). An item is a\ncollection of named attributes. An attribute value is either a scalar value such as a string,\na multivalued collection of strings, or a collection of named attributes. Although an item\nis the equivalent to a row in an RDBMS, it\u2019s a lot more flexible and can store an entire\naggregate.\n This flexibility enables the OrderHistoryDataAccess module to store each Order\nas a single item in a DynamoDB table called ftgo-order-history. Each field of the\nOrder class is mapped to an item attribute, as shown in figure 7.13. Simple fields such\nas orderCreationTime and status are mapped to single-value item attributes. The\nlineItems field is mapped to an attribute that is a list of maps, one map per time line.\nIt can be considered to be a JSON array of objects.\nAn important part of the definition of a table is its primary key. A DynamoDB applica-\ntion inserts, updates, and retrieves a table\u2019 s items by primary key. It would seem to\nmake sense for the primary key to be orderId. This enables Order History Service\nto insert, update, and retrieve an order by orderId. But before finalizing this decision,\nlet\u2019s first explore how a table\u2019s primary key impacts the kinds of data access operations\nit supports. \nDEFINING AN INDEX FOR THE FINDORDERHISTORY QUERY\nThis table definition supports prim ary key-based reads and writes of Orders. But it\ndoesn\u2019t support a query such as findOrderHistory() that returns multiple matching\norders sorted by increasing age. That\u2019s because, as you will see later in this section,\nthis query uses the DynamoDB query() operation, which requires a table to have a\norderId\n...\n...\nPrimary key\nftgo-order-history table\nconsumerId\nxyz-abc\n...\norderCreationTime\n22939283232\n...\nstatus\nCREATED\n...\nlineItems\n[{...}.\n{...},\n....]\n....\n...\n...\n...\nFigure 7.13 Preliminary structure of the DynamoDB OrderHistory table", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2244, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7407c660-5c7d-4da0-9d02-85151621a71c": {"__data__": {"id_": "7407c660-5c7d-4da0-9d02-85151621a71c", "embedding": null, "metadata": {"page_label": "246", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da997f14-6c82-455f-a84f-4efb0ffa99db", "node_type": "4", "metadata": {"page_label": "246", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a6c0834cea39963a201a0d263aefc25f24417a6edbd9578ba30e14ac10ee5cee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "246 CHAPTER 7 Implementing queries in a microservice architecture\ncomposite primary key consisting of two scalar attributes. The first attribute is a parti-\ntion key. The partition key is so called because DynamoDB\u2019s Z-axis scaling (described in\nchapter 1) uses it to select an item\u2019s storage partition. The second attribute is the sort\nkey. A query() operation returns those items that  have the specified partition key,\nhave a sort key in the specified range, an d match the optional filter expression. It\nreturns items in the order specified by the sort key.\n The findOrderHistory() query operation returns a consumer\u2019s orders sorted by\nincreasing age. It therefore requires a primary key that has the consumerId as the par-\ntition key and the orderCreationDate as the sort key. But it doesn\u2019t make sense for\n(consumerId, orderCreationDate) to be the primary key of the ftgo-order-history\ntable, because it\u2019s not unique.\n The solution is for findOrderHistory() to query what DynamoDB calls a secondary\nindex on the ftgo-order-history table. This index has (consumerId, orderCreation-\nDate) as its non-unique key. Like an RDBM S index, a DynamoDB index is automati-\ncally updated whenever its table is updat ed. But unlike a typical RDBMS index, a\nDynamoDB index can have non-key attributes. Non-key attributes improve performance\nbecause they\u2019re returned by the query, so the application doesn\u2019t have to fetch them\nf r o m  t h e  t a b l e .  A l s o ,  a s  y o u \u2019 l l  s o o n  s e e ,  t h e y  c a n  b e  u s e d  f o r  f i l t e r i n g .  F i g u r e  7 . 1 4\nshows the structure of the table and this index.\n The index is part of the definition of the ftgo-order-history table and is called\nftgo-order-history-by-consumer-id-and-creation-time. The index\u2019s attributes\norderId\ncde-fgh\n...\nPrimary key\nftgo-order-history table\nconsumerId\nxyz-abc\n...\norderCreationTime\n22939283232\n...\nstatus\nCREATED\n...\nlineItems\n[{...}.\n{...},\n....]\n....\n...\n...\n...\nPrimary key\nftgo-order-history-by-consumer-id-and-creation-time global secondary index\nconsumerId\nxyz-abc\n...\norderCreationTime\n22939283232\n...\norderId\ncde-fgh\n...\n...\n...\n...\nstatus\nCREATED\n...\nFigure 7.14 The design of the OrderHistory table and index", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2215, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "728a7316-560e-4109-8c82-7638f6fd23fd": {"__data__": {"id_": "728a7316-560e-4109-8c82-7638f6fd23fd", "embedding": null, "metadata": {"page_label": "247", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89386a21-f946-4d07-ab33-ecceb0191b6f", "node_type": "4", "metadata": {"page_label": "247", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "eea12eae6f1c4f911a3e7d4b051ac2d6cb6e5cc4570b6a3c31e4a610b036dd96", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "247Implementing a CQRS view with AWS DynamoDB\ninclude the primary key attributes, consumerId and orderCreationTime, and non-key\nattributes, including orderId and status.\n The ftgo-order-history-by-consumer-id-and-creation-time index enables\nthe OrderHistoryDaoDynamoDb to efficiently retrieve a consumer\u2019s orders sorted by\nincreasing age.\n Let\u2019s now look at how to retrieve only those orders that match the filter criteria. \nIMPLEMENTING THE FINDORDERHISTORY QUERY\nThe findOrderHistory() query operation has a filter parameter that specifies the\nsearch criteria. One filter criterion is the maximum age of the orders to return. This is\neasy to implement because the DynamoDB Query operation\u2019s key condition expression\nsupports a range restriction on the sort ke y. The other filter criteria correspond to\nnon-key attributes and can be implemented using a filter expression , which is a Boolean\nexpression. A DynamoDB Query operation returns only those items that satisfy the filter\nexpression. For example, to find Orders that are CANCELLED, the OrderHistoryDao-\nDynamoDb uses a query expression orderStatus = :orderStatus, where :orderStatus\nis a placeholder parameter.\n The keyword filter criteria is more ch allenging to implement. It selects orders\nwhose restaurant name or menu items ma tch one of the specified keywords. The\nOrderHistoryDaoDynamoDb enables the keyword search by tokenizing the restaurant\nname and menu items and storing the set of keywords in a set-valued attribute called\nkeywords. It finds the orders that match the keywords by using a filter expression\nthat uses the contains() function, for example contains(keywords, :keyword1)\nOR contains(keywords, :keyword2), where :keyword1 and :keyword2 are placehold-\ners for the specified keywords. \nPAGINATING THE QUERY RESULTS\nSome consumers will have a large number of orders. It makes sense, therefore, for the\nfindOrderHistory() query operation to use pagination. The DynamoDB Query oper-\nation has an operation pageSize parameter, which specifies the maximum number of\nitems to return. If there are more items,  the result of the query has a non-null Last-\nEvaluatedKey attribute. A DAO can retrieve the next page of items by invoking the\nquery with the exclusiveStartKey parameter set to LastEvaluatedKey.\n As you can see, DynamoDB doesn\u2019t support position-based pagination. Conse-\nquently, Order History Service returns an opaque pagination token to its client. The\nclient uses this pagination token to request the next page of results.\n Now that I\u2019ve described how to query DynamoDB for orders, let\u2019s look at how to\ninsert and update them. \nUPDATING ORDERS\nDynamoDB supports two operations for adding and updating items: PutItem() and\nUpdateItem(). The PutItem() operation creates or replaces an entire item by its\nprimary key. In theory, OrderHistoryDaoDynamoDb could use this operation to insert", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2874, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "169f8602-a3cf-42b6-b924-e60602760e53": {"__data__": {"id_": "169f8602-a3cf-42b6-b924-e60602760e53", "embedding": null, "metadata": {"page_label": "248", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5f5f442a-7fb4-45b0-8cb8-d741810c39b2", "node_type": "4", "metadata": {"page_label": "248", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b04e50863dc12a152f597cd1eed0955a1a6de1d9329586493bf1fb7bdc3942be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "248 CHAPTER 7 Implementing queries in a microservice architecture\nand update orders. One challenge, however, with using PutItem() is en suring that\nsimultaneous updates to the same item are handled correctly.\n Consider, for example, the scenario where two event handlers simultaneously\nattempt to update the same item. Each event handler calls OrderHistoryDaoDynamoDb\nto load the item from DynamoDB, change it in memory, and update it in DynamoDB\nusing PutItem(). One event handler could potentially overwrite the change made by\nthe other event handler. OrderHistoryDaoDynamoDb can prevent lost updates by using\nDynamoDB\u2019s optimistic locking mechanism. But an even simpler and more efficient\napproach is to use the UpdateItem() operation.\n The UpdateItem() operation updates individual attributes of the item, creating\nthe item if necessary. Since different event handlers update different attributes of the\nOrder item, using UpdateItem makes sense. This operation is also more efficient\nbecause there\u2019s no need to first retrieve the order from the table.\n One challenge with updating the database in response to events is, as mentioned\nearlier, detecting and discarding duplicate ev ents. Let\u2019s look at how to do that when\nusing DynamoDB. \nDETECTING DUPLICATE EVENTS\nAll of Order History Service\u2019s event handlers are idempotent. Each one sets one\nor more attributes of the Order item. Order History Service could, therefore, sim-\nply ignore the issue of duplicate events. Th e downside of ignoring the issue, though,\nis that Order item will sometimes be temporar ily out-of-date. That\u2019s because an\nevent handler that receives a duplicate event will set an Order item\u2019s attributes to\nprevious values. The Order item won\u2019t have the correct values until later events are\nredelivered.\n As described earlier, one way to preven t data from becoming out-of-date is to\ndetect and discard duplicate events. OrderHistoryDaoDynamoDb can detect duplicate\nevents by recording in each item the events that have caused it to be updated. It can\nthen use the UpdateItem() operation\u2019s conditional update mechanism to only update\nan item if an event isn\u2019t a duplicate.\n A conditional update is only performed if a condition expression  is true. A condition\nexpression tests whether an attribute exists  or has a particular value. The Order-\nHistoryDaoDynamoDb DAO can track events received  from each aggregate instance\nusing an attribute called \u00abaggregateType\u00bb \u00abaggregateId\u00bb  whose value is the highest\nreceived event ID. An event is a duplicate if  the attribute exists and its value is less\nthan or equal to the event ID. The OrderHistoryDaoDynamoDb DAO uses this condi-\ntion expression:\nattribute_not_exists(\u00abaggregateType\u00bb\u00abaggregateId\u00bb) \nOR \u00abaggregateType\u00bb\u00abaggregateId\u00bb < :eventId\nThe condition expression  only allows the update if the attribute doesn\u2019t exist or the\neventId is greater than the last processed event ID.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2907, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82488ec8-0aea-42c8-8719-9f5a470d900a": {"__data__": {"id_": "82488ec8-0aea-42c8-8719-9f5a470d900a", "embedding": null, "metadata": {"page_label": "249", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79fe9496-a783-4294-af5c-94b27ca15f09", "node_type": "4", "metadata": {"page_label": "249", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e9b95ef17069af2c4d83588342f54474619242115a1845ace75b06058ffed4f5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "249Implementing a CQRS view with AWS DynamoDB\n For example, suppose an event handler receives a DeliveryPickup event whose ID\nis 123323-343434 from a Delivery aggregate whose ID is 3949384394-039434903.\nThe name of the tracking attribute is Delivery3949384394-039434903. The event\nhandler should consider the event to be a duplicate if the value of this attribute is\ngreater than or equal to 123323-343434. The query() operation invoked by the event\nhandler updates the Order item using this condition expression:\nattribute_not_exists(Delivery3949384394-039434903) \nOR Delivery3949384394-039434903 < :eventId\nNow that I\u2019ve described the DynamoDB data model and query design, let\u2019s take a look\nat OrderHistoryDaoDynamoDb, which defines the methods that update and query the\nftgo-order-history table. \n7.4.3 The OrderHistoryDaoDynamoDb class\nThe OrderHistoryDaoDynamoDb class implements methods that read and write items\nin the ftgo-order-history table. Its update methods are invoked by OrderHistory-\nEventHandlers, and its query methods are invoked by OrderHistoryQuery API. Let\u2019s\ntake a look at some example methods, starting with the addOrder() method.\nTHE ADDORDER() METHOD\nThe addOrder() method, which is shown in list ing 7.2, adds an order to the ftgo-\norder-history table. It has two parameters: order and sourceEvent. The order\nparameter is the Order to add, which is obtained from the OrderCreated event. The\nsourceEvent parameter contains the eventId and the type and ID of the aggregate\nthat emitted the event. It\u2019s used to implement the conditional update.\npublic class OrderHistoryDaoDynamoDb ...\n@Override\npublic boolean addOrder(Order order, Optional<SourceEvent> eventSource) {\nUpdateItemSpec spec =new UpdateItemSpec()\n.withPrimaryKey(\"orderId\", order.getOrderId())   \n.withUpdateExpression(\"SET orderStatus = :orderStatus, \" +  \n\"creationDate = :cd, consumerId =:consumerId, lineItems =\" +\n\": l i n e I t e m s ,k e y w o r d s=: k e y w o r d s ,r e s t a u r a n t N a m e=\"+\n\":restaurantName\")\n.withValueMap(new Maps()                 \n.add(\":orderStatus\", order.getStatus().toString())\n.add(\":cd\", order.getCreationDate().getMillis())\n.add(\":consumerId\", order.getConsumerId())\n.add(\":lineItems\",mapLineItems(order.getLineItems()))\n.add(\":keywords\",mapKeywords(order))\n.add(\":restaurantName\", order.getRestaurantName())\n.map())\n.withReturnValues(ReturnValue.NONE);\nreturn idempotentUpdate(spec, eventSource);\n}\nListing 7.2 The addOrder() method adds or updates an Order\nThe primary key of the\nOrder item to update\nThe update\nexpression that\nupdates the\nattributes\nThe values of the\nplaceholders in\nthe update\nexpression", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2641, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cb273ff-ea6c-4ae8-a899-a6ff6d6faf29": {"__data__": {"id_": "4cb273ff-ea6c-4ae8-a899-a6ff6d6faf29", "embedding": null, "metadata": {"page_label": "250", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92e19db1-018a-4f48-bba8-4f1d42746bd7", "node_type": "4", "metadata": {"page_label": "250", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e1151540884728145c7a2e1efa84d787fbfca3241eeb80fe6ff6755bc014b03f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "250 CHAPTER 7 Implementing queries in a microservice architecture\nThe addOrder() method creates an UpdateSpec, which is part of the AWS SDK and\ndescribes the update operation. After creating the UpdateSpec, it calls idempotent-\nUpdate(), a helper method that performs the update after adding a condition expres-\nsion that guards against duplicate updates. \nTHE NOTEPICKEDUP() METHOD\nThe notePickedUp() method, shown in listing 7.3, is called by the event handler for\nthe DeliveryPickedUp event. It changes the deliveryStatus of the Order item to\nPICKED_UP.\npublic class OrderHistoryDaoDynamoDb ...\n@Override\npublic void notePickedUp(String orderId, Optional<SourceEvent> eventSource) {\nUpdateItemSpec spec = new UpdateItemSpec()\n.withPrimaryKey(\"orderId\", orderId)\n.withUpdateExpression(\"SET #deliveryStatus = :deliveryStatus\")\n.withNameMap(Collections.singletonMap(\"#deliveryStatus\",\nDELIVERY_STATUS_FIELD))\n.withValueMap(Collections.singletonMap(\":deliveryStatus\",\nDeliveryStatus.PICKED_UP.toString()))\n.withReturnValues(ReturnValue.NONE);\nidempotentUpdate(spec, eventSource);\n}\nThis method is similar to addOrder(). It creates an UpdateItemSpec and invokes\nidempotentUpdate(). Let\u2019s look at the idempotentUpdate() method. \nTHE IDEMPOTENTUPDATE() METHOD\nThe following listing shows the idempotentUpdate() method, which updates the item\nafter possibly adding a condition expression to the UpdateItemSpec that guards against\nduplicate updates.\npublic class OrderHistoryDaoDynamoDb ...\nprivate boolean idempotentUpdate(UpdateItemSpec spec, Optional<SourceEvent>\neventSource) {\ntry {\ntable.updateItem(eventSource.map(es -> es.addDuplicateDetection(spec))\n.orElse(spec));\nreturn true;\n} catch (ConditionalCheckFailedException e) {\n// Do nothing\nreturn false;\n}\n}\nListing 7.3 The notePickedUp() method changes the order status to PICKED_UP\nListing 7.4 The idempotentUpdate() method ignores duplicate events", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1902, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff5c1c63-3e05-4f8f-a2ec-7b62be126859": {"__data__": {"id_": "ff5c1c63-3e05-4f8f-a2ec-7b62be126859", "embedding": null, "metadata": {"page_label": "251", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c37c6e0-3ac1-4650-8fab-02951c10e263", "node_type": "4", "metadata": {"page_label": "251", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4b6477eb4d570216e8d911b0f5654e311932beecd94390a79e6321d964dfd193", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "251Implementing a CQRS view with AWS DynamoDB\nIf the sourceEvent is supplied, idempotentUpdate() invokes SourceEvent.add-\nDuplicateDetection() to add to UpdateItemSpec the condition expression that was\ndescribed earlier. The idempotentUpdate() method catches and ignores the\nConditionalCheckFailedException, which is thrown by updateItem() if the event\nwas a duplicate.\n Now that we\u2019ve seen the code that updates the table, let\u2019s look at the query method. \nTHE FINDORDERHISTORY() METHOD\nThe findOrderHistory() method, shown in listing 7.5, retrieves the consumer\u2019s orders by\nquerying the ftgo-order-history table using the ftgo-order-history-by-consumer-\nid-and-creation-time secondary index. It has two parameters: consumerId specifies\nthe consumer, and filter specifies the search criteria. This method creates Query-\nSpec\u2014which, like UpdateSpec, is part of the AWS SDK\u2014from its parameters, queries\nthe index, and transforms the returned items into an OrderHistory object.\npublic class OrderHistoryDaoDynamoDb ...\n@Override\npublic OrderHistory findOrderHistory(String consumerId, OrderHistoryFilter\nfilter) {\nQuerySpec spec = new QuerySpec()\n.withScanIndexForward(false)    \n.withHashKey(\"consumerId\", consumerId)\n.withRangeKeyCondition(new RangeKeyCondition(\"creationDate\")  \n.gt(filter.getSince().getMillis()));\nfilter.getStartKeyToken().ifPresent(token ->\nspec.withExclusiveStartKey(toStartingPrimaryKey(token)));\nMap<String, Object> valuesMap = new HashMap<>();\nString filterExpression = Expressions.and(       \nkeywordFilterExpression(valuesMap, filter.getKeywords()),\nstatusFilterExpression(valuesMap, filter.getStatus()));\nif (!valuesMap.isEmpty())\nspec.withValueMap(valuesMap);\nif (StringUtils.isNotBlank(filterExpression)) {\nspec.withFilterExpression(filterExpression);\n}\nfilter.getPageSize().ifPresent(spec::withMaxResultSize);  \nItemCollection<QueryOutcome> result = index.query(spec);\nreturn new OrderHistory(\nStreamSupport.stream(result.spliterator(), false)\nListing 7.5 The findOrderHistory() method retrieves a consumer\u2019s matching orders\nSpecifies that query must \nreturn the orders in order \nof increasing age\nThe maximum\nage of the\norders to\nreturn\nConstruct a filter expression\nand placeholder value map\nfrom the OrderHistoryFilter.\nLimit the number \nof results if the \ncaller has specified \na page size.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2324, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bfc64b5a-fa02-4c75-87b1-9c1801a63932": {"__data__": {"id_": "bfc64b5a-fa02-4c75-87b1-9c1801a63932", "embedding": null, "metadata": {"page_label": "252", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be799452-a967-46df-94b0-71d51e1286f5", "node_type": "4", "metadata": {"page_label": "252", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e5733610b2a807107cb8425a03fa8a0705e3a2a4506ad278d3a8e7fa8a36f7a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "252 CHAPTER 7 Implementing queries in a microservice architecture\n.map(this::toOrder)       \n.collect(toList()),\nOptional.ofNullable(result\n.getLastLowLevelResult()\n.getQueryResult().getLastEvaluatedKey())\n.map(this::toStartKeyToken));\n}\nAfter building a QuerySpec, this method then executes a query and builds an Order-\nHistory, which contains the list of Orders, from the returned items.\n The findOrderHistory() method implements pagination by serializing the value\nreturned by getLastEvaluatedKey() into a JSON token. If a client specifies a start\ntoken in OrderHistoryFilter, then findOrderHistory() serializes it and invokes\nwithExclusiveStartKey() to set the start key.\n As you can see, you must address numerous issues when implementing a CQRS\nview, including picking a database, designin g the data model that efficiently imple-\nments updates and queries, handling concurrent updates, and dealing with duplicate\nevents. The only complex part of the code is the DAO, because it must properly han-\ndle concurrency and ensure that updates are idempotent. \nSummary\n\uf0a1 Implementing queries that retrieve data from multiple services is challenging\nbecause each service\u2019s data is private.\n\uf0a1 There are two ways to implement these kinds of query: the API composition\npattern and the Command query responsibility segregation (CQRS) pattern.\n\uf0a1 The API composition pattern, which gathers data from multiple services, is the\nsimplest way to implement queries and should be used whenever possible.\n\uf0a1 A limitation of the API composition pattern is that some complex queries require\ninefficient in-memory joins of large datasets.\n\uf0a1 The CQRS pattern, which implements qu eries using view databases, is more\npowerful but more complex to implement.\n\uf0a1 A CQRS view module must handle concurrent updates as well as detect and dis-\ncard duplicate events.\n\uf0a1 CQRS improves separation of concerns  by enabling a service to implement a\nquery that returns data owned by a different service.\n\uf0a1 Clients must handle the eventual consistency of CQRS views. \nCreate an Order from \nan item returned by \nthe query.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2086, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "81f23d68-8b2b-423f-b210-e542e90c2b53": {"__data__": {"id_": "81f23d68-8b2b-423f-b210-e542e90c2b53", "embedding": null, "metadata": {"page_label": "253", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83418a70-5bf7-4c19-930d-3570a4697309", "node_type": "4", "metadata": {"page_label": "253", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "90b5e884401156f3b288fcac12618e328173026e9de56e317a9cab2a9ff70682", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "253\nExternal API patterns\nThe FTGO application, like many other a pplications, has a REST API. Its clients\ninclude the FTGO mobile applications, JavaScript running in the browser, and\napplications developed by partners. In such a monolithic architecture, the API\nthat\u2019s exposed to clients is the monolith\u2019s API. But when once the FTGO team\nstarts deploying microservices, there\u2019s no longer one API, because each service has\nits own API. Mary and her team must decide what kind of API the FTGO applica-\ntion should now expose to its clients. For example, should clients be aware of the\nexistence of services and make requests to them directly?\nThis chapter covers\n\uf0a1 The challenge of designing APIs that support a \ndiverse set of clients\n\uf0a1 Applying API gateway and Backends for frontends \npatterns\n\uf0a1 Designing and implementing an API gateway\n\uf0a1 Using reactive programming to simplify API \ncomposition\n\uf0a1 Implementing an API gateway using GraphQL", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 941, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7ab3bf4-cf8c-4110-956c-c06fea3bae28": {"__data__": {"id_": "b7ab3bf4-cf8c-4110-956c-c06fea3bae28", "embedding": null, "metadata": {"page_label": "254", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "beac1bea-406c-4c7f-815a-3735a68616a9", "node_type": "4", "metadata": {"page_label": "254", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "34cebe6525e7dd9dd91d4c2d8f0f6738f34e4333212e7da38a861afd60aa015b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "254 CHAPTER 8 External API patterns\n The task of designing an application\u2019s external API is made even more challenging\nby the diversity of its clients. Different clients typically require different data. A desktop\nbrowser-based UI usually displays far more information than a mobile application. Also,\ndifferent clients access the services over different kinds of networks. The clients within\nthe firewall use a high-performance LAN, and the clients outside of the firewall use the\ninternet or mobile network, which will have lower performance. Consequently, as you\u2019ll\nlearn, it often doesn\u2019t make sense to have a single, one-size-fits-all API.\n This chapter begins by describing various external API design issues. I then\ndescribe the external API patterns. I cover the API gateway pattern and then the Back-\nends for frontends pattern. After that, I discuss how to design and implement an API\ngateway. I review the various options that are available, which include off-the-shelf API\ngateway products and frameworks for developing your own. I describe the design and\nimplementation of an API gateway that\u2019s built using the Spring Cloud Gateway frame-\nwork. I also describe how to build an API gateway using GraphQL, a framework that\nprovides graph-based query language.\n8.1 External API design issues\nIn order to explore the various API-related issues, let\u2019s consider the FTGO application.\nAs figure 8.1 shows, this application\u2019s services are consumed by a variety of clients. Four\nkinds of clients consume the services\u2019 APIs:\n\uf0a1 Web applications, such as Consumer web application, which implements the\nbrowser-based UI for consumers, Restaurant web application, which imple-\nments the browser-based UI for restaurants, and Admin web application, which\nimplements the internal administrator UI\n\uf0a1 JavaScript applications running in the browser\n\uf0a1 Mobile applications, one for consumers and the other for couriers\n\uf0a1 Applications written by third-party developers\nThe web applications run inside the firewall , so they access the se rvices over a high-\nbandwidth, low-latency LAN. The other clients run outside the firewall, so they access\nthe services over the lower-bandwidth, higher-latency internet or mobile network.\n One approach to API design is for client s to invoke the services directly. On the\nsurface, this sounds quite straightforward\u2014af ter all, that\u2019s how clients invoke the API\nof a monolithic application. But this approach  is rarely used in a microservice archi-\ntecture because of the following drawbacks:\n\uf0a1 The fine-grained service APIs require c lients to make multiple requests to\nretrieve the data they need, which is inefficient and can result in a poor user\nexperience.\n\uf0a1 The lack of encapsulation caused by clients knowing about each service and its\nAPI makes it difficult to change the architecture and the APIs.\n\uf0a1 Services might use IPC mechanisms that aren\u2019t convenient or practical for cli-\nents to use, especially those clients outside the firewall.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "88ff0a84-9d16-4313-8a73-c2eb3bdd6194": {"__data__": {"id_": "88ff0a84-9d16-4313-8a73-c2eb3bdd6194", "embedding": null, "metadata": {"page_label": "255", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7a1f254-12f3-477d-af9e-a8593c39c2fa", "node_type": "4", "metadata": {"page_label": "255", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cf6aa46359e5abea5b7534d6aea98ab41ef9a4c9b7417a5ed926ab5fa86a24d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "255External API design issues\nTo learn more about these drawbacks, let\u2019s take a look at how the FTGO mobile appli-\ncation for consumers retrieves data from the services.\n8.1.1 API design issues for the FTGO mobile client\nConsumers use the FTGO mobile client to place and manage their orders. Imagine\nyou\u2019re developing the mobile client\u2019s View Order view, which displays an order. As\ndescribed in chapter 7, the information di splayed by this view includes basic order\ninformation, including its status, payment st atus, status of the order from the restau-\nrant\u2019s perspective, and deli very status, including its location and estimated delivery\ntime if in transit.\n The monolithic version of the FTGO application has an API endpoint that returns\nthe order details. The mobile client retrieves the information it needs by making a sin-\ngle request. In contrast, in the microservi ces version of the FTGO application, the\norder details are, as described previously, scattered across several services, including\nthe following:\nLower-performance\ninternet\nHigher-performance\nLAN\nBackend services\nOrder Service\nFirewall\nAPI\nrequests\nAPI\nrequests\nAPI\nrequests\nWeb page\nrequests\nWeb\napplication\nConsumer\nService\nDelivery\nService\nKitchen\nService\nBrowser\niPhone/\nAndroid\napplication\n3rd-party\napplication\nHTML\nJavaScript\napplication\nFigure 8.1 The FTGO application\u2019s services  and their clients. There are several \ndifferent types of clients. Some are inside the firewall, and others are outside. \nThose outside the firewall access the services over the lower-performance \ninternet/mobile network. Those clients inside the firewall use a higher-\nperformance LAN.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1652, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36b10369-154b-4add-8446-fd72aa1083b2": {"__data__": {"id_": "36b10369-154b-4add-8446-fd72aa1083b2", "embedding": null, "metadata": {"page_label": "256", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1dc91297-ec58-4838-a75e-c21c21111611", "node_type": "4", "metadata": {"page_label": "256", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7924d3a8db8f659029f545074adfcf841306430f71ea646008143532dfd50f8e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "256 CHAPTER 8 External API patterns\n\uf0a1 Order Service\u2014Basic order information, including the details and status\n\uf0a1 Kitchen Service\u2014The status of the order from the restaurant\u2019s perspective\nand the estimated time it will be ready for pickup\n\uf0a1 Delivery Service\u2014The order\u2019s delivery status, its estimated delivery time, and\nits current location\n\uf0a1 Accounting Service\u2014The order\u2019s payment status\nIf the mobile client invokes the services directly, then it must, as figure 8.2 shows, make\nmultiple calls to retrieve this data.\nFTGO backend services\nOrder Service\nFirewall\nMonolithic FTGO\napplication\nFirewall\nInternet\nInternet\ngetOrder()\ngetDelivery()\ngetOrderDetails()\ngetBill()\ngetTicket()\nDelivery\nService\nAccounting\nService\nKitchen\nService\niPhone/\nAndroid\nconsumer\napplication\niPhone/\nAndroid\nconsumer\napplication\nOne API required\nMany API calls required\nFigure 8.2 A client can retrieve the order det ails from the monolithic FTGO application with a \nsingle request. But the client must make multiple requests to retrieve the same information in a \nmicroservice architecture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1070, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eed5d8e9-8409-49eb-ad17-f26a4c6a1f2b": {"__data__": {"id_": "eed5d8e9-8409-49eb-ad17-f26a4c6a1f2b", "embedding": null, "metadata": {"page_label": "257", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97bda116-7396-4550-8359-ea1802ffc5a7", "node_type": "4", "metadata": {"page_label": "257", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c3f546965ab40cb739e3f5b3ce1c499ec804bc6615fe35a6869f9ae69f6c2903", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "257External API design issues\nIn this design, the mobile application is pl aying the role of API composer. It invokes\nmultiple services and combines the results. Although this approach seems reasonable,\nit has several serious problems.\nPOOR USER EXPERIENCE DUE TO THE CLIENT MAKING MULTIPLE REQUESTS\nThe first problem is that the mobile a pplication must sometimes make multiple\nrequests to retrieve the data it wants to display to the user. The chatty interaction\nbetween the application and the services can make the application seem unrespon-\nsive, especially when it uses the internet or a mobile network. The internet has much\nlower bandwidth and higher latency than a LAN, and mobile networks are even worse.\nThe latency of a mobile network (and internet) is typically 100x greater than a LAN.\n The higher latency might not be a prob lem when retrieving the order details,\nbecause the mobile application minimizes the delay by executing the requests concur-\nrently. The overall response time is no grea ter than that of a single request. But in\nother scenarios, a client may need to execute requests sequentially, which will result in\na poor user experience.\n What\u2019s more, poor user experience due to network latency is not the only issue\nwith a chatty API. It requires the mobile  developer to write potentially complex API\ncomposition code. This work is a distractio n from their primary task of creating a\ngreat user experience. Also, because each network request consumes power, a chatty\nAPI drains the mobile device\u2019s battery faster.\nLACK OF ENCAPSULATION REQUIRES FRONTEND DEVELOPERS TO CHANGE THEIR CODE IN LOCKSTEP \nWITH THE BACKEND\nAnother drawback of a mobile application directly accessing the services is the lack of\nencapsulation. As an application evolves,  the developers of a service sometimes\nchange an API in a way that breaks existing  clients. They might even change how the\nsystem is decomposed into services. Deve lopers may add new services and split or\nmerge existing services. But if knowledge about the services is baked into a mobile\napplication, it can be difficult to change the services\u2019 APIs.\n Unlike when updating a server-side appl ication, it takes hours or perhaps even\ndays to roll out a new version of a mobile application. Apple or Google must approve\nthe upgrade and make it available for download. Users might not download the\nupgrade immediately\u2014if ever. And you ma y not want to force reluctant users to\nupgrade. The strategy of exposing service APIs to mobile creates a significant obstacle\nto evolving those APIs.\nSERVICES MIGHT USE CLIENT-UNFRIENDLY IPC MECHANISMS\nAnother challenge with a mobile application di rectly calling services is that some ser-\nvices could use protocols that aren\u2019t easily  consumed by a client. Client applications\nthat run outside the firewall typically use protocols such as HTTP and WebSockets.\nBut as described in chapter 3, service de velopers have many protocols to choose\nfrom\u2014not just HTTP. Some of an applic ation\u2019s services might use gRPC, whereas\nothers could use the AMQP messaging prot ocol. These kinds of protocols work well", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3117, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "036fd58b-ec6b-4534-b319-124ee5dddd10": {"__data__": {"id_": "036fd58b-ec6b-4534-b319-124ee5dddd10", "embedding": null, "metadata": {"page_label": "258", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19b3556d-4ff1-4500-ab89-5c8632ab7092", "node_type": "4", "metadata": {"page_label": "258", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2f27fd381914ce1bd80e6beaeb881eafc82ff43f35ec39b36c7a1b2d51f0d9ff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "258 CHAPTER 8 External API patterns\ninternally, but might not be easily consumed by a mobile client. Some aren\u2019t even fire-\nwall friendly. \n8.1.2 API design issues for other kinds of clients\nI picked the mobile client because it\u2019s a great way to demonstrate the drawbacks of cli-\nents accessing services directly. But the pr oblems created by exposing services to cli-\nents aren\u2019t specific to just mobile client s. Other kinds of clients, especially those\noutside the firewall, also encounter these problems. As described earlier, the FTGO\napplication\u2019s services are consumed by web applications, browser-based JavaScript\napplications, and third-party applications. Le t\u2019s take a look at the API design issues\nwith these clients.\nAPI DESIGN ISSUES FOR WEB APPLICATIONS\nTraditional server-side web applications, which handle HTTP requests from browsers\nand return HTML pages, run within the firewall and access the services over a LAN.\nNetwork bandwidth and latency aren\u2019t obstacles to implementing API composition in\na web application. Also, web applications can use non-web-friendly protocols to access\nthe services. The teams that develop web appl ications are part of the same organiza-\ntion and often work in close collaboration  with the teams writing the backend ser-\nvices, so a web application can easily be updated whenever the backend services are\nchanged. Consequently, it\u2019s feasible for a web application to access the backend ser-\nvices directly. \nAPI DESIGN ISSUES FOR BROWSER-BASED JAVASCRIPT APPLICATIONS\nModern browser applications use some amount of JavaScript. Even if the HTML is pri-\nmarily generated by a server-side web application, it\u2019s common for JavaScript running\nin the browser to invoke services. For example, all of the FTGO application web appli-\ncations\u2014 Consumer, Restaurant, and Admin\u2014contain JavaScript that invokes the back-\nend services. The Consumer web application, for instance, dynamically refreshes the\nOrder Details page using JavaScript that invokes the service APIs.\n On one hand, browser-based JavaScript a pplications are easy to update when ser-\nvice APIs change. On the other hand, JavaSc ript applications that access the services\nover the internet have the same problems with network latency as mobile applications.\nTo make matters worse, browser-based UIs, especially those for the desktop, are usu-\nally more sophisticated and need to compose more services than mobile applications.\nIt\u2019s likely that the Consumer and Restaurant applications, which access services over\nthe internet, won\u2019t be able to compose service APIs efficiently. \nDESIGNING APIS FOR THIRD-PARTY APPLICATIONS\nFTGO, like many other organizations, expo ses an API to third-party developers. The\ndevelopers can use the FTGO API to write applications that place and manage\norders. These third-party applications access  the APIs over the internet, so API com-\nposition is likely to be inefficient. But th e inefficiency of API composition is a rela-\ntively minor problem compared to the much  larger challenge of designing an API", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3048, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d705e72-4ce1-4b43-b41b-40702bf09b76": {"__data__": {"id_": "8d705e72-4ce1-4b43-b41b-40702bf09b76", "embedding": null, "metadata": {"page_label": "259", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "70b9571d-5c96-42a8-9b65-599824e8f775", "node_type": "4", "metadata": {"page_label": "259", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3da9883227a6978a306d0271edf1aaeb5c438f286c4ce2baa4363ca0f4b517b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "259The API gateway pattern\nthat\u2019s used by third-party applications. That\u2019s because third-party developers need\nan API that\u2019s stable.\n Very few organizations can force third-pa rty developers to upgrade to a new API.\nOrganizations that have an unstable API risk losing developers to a competitor.\nConsequently, you must carefully manage the evolution of an API that\u2019s used by third-\nparty developers. You typically have to main tain older versions for a long time\u2014pos-\nsibly forever.\n This requirement is a huge burden for an organization. It\u2019s impractical to make\nthe developers of the backend services re sponsible for maintaining long-term back-\nward compatibility. Rather than expose se rvices directly to third-party developers,\norganizations should have a separate public API that\u2019s developed by a separate team.\nAs you\u2019ll learn later, the public API is implemented by an architectural component\nknown as an API gateway. Let\u2019s look at how an API gateway works. \n8.2 The API gateway pattern\nAs you\u2019ve just seen, there are numerous drawbacks with services accessing services\ndirectly. It\u2019s often not practical for a client to perform API composition over the inter-\nnet. The lack of encapsulation makes it di fficult for developers to change service\ndecomposition and APIs. Services some times use communication protocols that\naren\u2019t suitable outside the firewall. Consequently, a much better approach is to use an\nAPI gateway.\nAn API gateway is a service that\u2019s the entry point into the application from the outside\nworld. It\u2019s responsible for request routin g, API composition, and other functions,\nsuch as authentication. This section covers the API gateway pattern. I discuss its bene-\nfits and drawbacks and describe various design issues you must address when develop-\ning an API gateway.\n8.2.1 Overview of the API gateway pattern\nSection 8.1.1 described the drawbacks of cl ients, such as the FTGO mobile applica-\ntion, making multiple requests in order to display information to the user. A much\nbetter approach is for a client to make a single request to an API gateway, a service\nthat serves as the single entry point for AP I requests into an application from outside\nthe firewall. It\u2019s similar to the Facade pattern from object-oriented design. Like a facade,\nan API gateway encapsulates the application\u2019s internal architecture and provides an API\nto its clients. It may also have other responsibilities, such as authentication, monitoring,\nPattern: API gateway\nImplement a service that\u2019s the entry point into the microservices-based application\nfrom external API clients. See http://microservices.io/patterns/apigateway.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2641, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45e4146f-18ef-461b-a501-3e053c8b581f": {"__data__": {"id_": "45e4146f-18ef-461b-a501-3e053c8b581f", "embedding": null, "metadata": {"page_label": "260", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b450ead9-0cbe-4a61-921a-73378d4cd43c", "node_type": "4", "metadata": {"page_label": "260", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "de92876dc0840f8a7cd7cc54011fe76be9b611e0362f0b584d2fff8c10696326", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "260 CHAPTER 8 External API patterns\nand rate limiting. Figure 8.3 shows the rela tionship between the clients, the API gate-\nway, and the services.\nThe API gateway is responsible for reques t routing, API composition, and protocol\ntranslation. All API requests from external clients first go to the API gateway, which\nroutes some requests to the appropriat e service. The API gateway handles other\nrequests using the API composition pattern and by invoking multiple services and\naggregating the results. It may also translate between client-friendly protocols such as\nHTTP and WebSockets and client-unfriendly protocols used by the services.\nREQUEST ROUTING\nOne of the key functions of an API gateway is request routing. An API gateway imple-\nments some API operations by routing requests to the corresponding service. When it\nreceives a request, the API gateway consults a routing map that specifies which service\nto route the request to. A routing map mi ght, for example, map an HTTP method\nand path to the HTTP URL of a service. This function is identical to the reverse proxy-\ning features provided by web servers such as NGINX. \nLower-performance\ninternet\nHigher-performance\nLAN\nBackend services\nOrder Service\nFirewall\nAPI\nrequests\nAPI\nrequests\nAPI\nrequests\nWeb page\nrequests\nWeb\napplication\nConsumer\nService\nDelivery\nService\nBrowser\niPhone/\nAndroid\napplication\n3rd-party\napplication\nHTML\nJavaScript\napplication\nAPI\ngateway\nFigure 8.3 The API gateway is the single entry point  into the application for API calls from outside \nthe firewall.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1546, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0d7f99e4-1176-4387-82d9-97bc2470b3af": {"__data__": {"id_": "0d7f99e4-1176-4387-82d9-97bc2470b3af", "embedding": null, "metadata": {"page_label": "261", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06729507-af8a-44b5-9f23-d696c42592b5", "node_type": "4", "metadata": {"page_label": "261", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "28d0395caa1b067abfae66a1c6fb44f4c08e17a4e81d047e9de45141e811084b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "261The API gateway pattern\nAPI COMPOSITION\nAn API gateway typically does more than simply reverse proxying. It might also imple-\nment some API operations using API composition. The FTGO API gateway, for exam-\nple, implements the Get Order Details API operation using API composition. As\nfigure 8.4 shows, the mobile application makes one request to the API gateway, which\nfetches the order details from multiple services.\n The FTGO API gateway provides a coarse-g rained API that enables mobile clients\nto retrieve the data they need with a sing le request. For example, the mobile client\nmakes a single getOrderDetails() request to the API gateway. \nFTGO backend services\nOrder Service\nFirewall\nInternet\ngetOrder()\nLAN\ngetDelivery()\ngetOrderDetails()\ngetBill()\ngetTicket()\nDelivery\nService\nAccounting\nService\nKitchen\nService\niPhone/\nAndroid\nconsumer\napplication\nAPI\ngateway\nFTGO backend services\nOrder Service\nFirewall\nInternet\ngetOrder()\ngetDelivery()\ngetBill()\ngetTicket()\nDelivery\nService\nAccounting\nService\nKitchen\nService\niPhone/\nAndroid\nconsumer\napplication\nMany API calls required\nOne API call requiredLower-performance\nnetwork\nHigher-performance\nnetwork\nFigure 8.4 An API gateway often does API compo sition, which enables a client such as a mobile \ndevice to efficiently retrieve data using a single API request.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1322, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "20de5b2e-8399-4b80-93f5-48a9be0742d5": {"__data__": {"id_": "20de5b2e-8399-4b80-93f5-48a9be0742d5", "embedding": null, "metadata": {"page_label": "262", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59a4189a-3f84-4d4f-b7d3-6c06db28fd5d", "node_type": "4", "metadata": {"page_label": "262", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c3564ba02d2014ffec2445640eb1255706fb945cedc958c212d26b308d47bcce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "262 CHAPTER 8 External API patterns\nPROTOCOL TRANSLATION\nAn API gateway might also perform protocol  translation. It might provide a RESTful\nAPI to external clients, even though the application services use a mixture of protocols\ninternally, including REST and gRPC. When needed, the implementation of some\nAPI operations translates between the REST ful external API and the internal gRPC-\nbased APIs. \nTHE API GATEWAY PROVIDES EACH CLIENT WITH CLIENT-SPECIFIC API\nAn API gateway could provide a single one-size-fits-all (OSFA) API. The problem with\na single API is that different clients often have different requirements. For instance, a\nthird-party application might require the Get Order Details API operation to return\nthe complete Order details, whereas a mobile client only needs a subset of the data.\nOne way to solve this problem is to give c lients the option of specifying in a request\nwhich fields and related objects the server should return. This approach is adequate\nfor a public API that must serve a broad range of third-party applications, but it often\ndoesn\u2019t give clients the control they need.\n A better approach is for the API gateway to provide each client with its own API.\nFor example, the FTGO API gateway can provide the FTGO mobile client with an API\nthat\u2019s specifically designed to meet its requirements. It may even have different APIs\nfor the Android and iPhone mobile applications. The API gateway will also implement\na public API for third-party developers to use. Later on, I\u2019ll describe the Backends for\nfrontends pattern that takes this concept of an API-per-client even further by defining\na separate API gateway for each client. \nIMPLEMENTING EDGE FUNCTIONS\nAlthough an API gateway\u2019s primary responsibilities are API routing and composition,\nit may also implement what are known as edge functions. An edge function is, as the\nname suggests, a request-processing function implemented at the edge of an applica-\ntion. Examples of edge functions that an application might implement include the\nfollowing:\n\uf0a1 Authentication\u2014Verifying the identity of th e client making the request.\n\uf0a1 Authorization\u2014Verifying that the client is auth orized to perform that particular\noperation.\n\uf0a1 Rate limiting \u2014Limiting how many requests per second from either a specific cli-\nent and/or from all clients.\n\uf0a1 Caching\u2014Cache responses to reduce the number of requests made to the services.\n\uf0a1 Metrics collection\u2014Collect metrics on API usage for billing analytics purposes.\n\uf0a1 Request logging\u2014Log requests.\nThere are three different places in your application where you could implement these\nedge functions. First, you can implement them in the backend services. This might\nmake sense for some functions, such as caching, metrics collection, and possibly autho-\nrization. But it\u2019s generally more secure if the application authenticates requests on the\nedge before they reach the services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2898, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "62e222a3-9b0f-43e3-97f2-d67e7085bdd7": {"__data__": {"id_": "62e222a3-9b0f-43e3-97f2-d67e7085bdd7", "embedding": null, "metadata": {"page_label": "263", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d018b609-2554-43b9-bcac-9178fecb09de", "node_type": "4", "metadata": {"page_label": "263", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "240ade2227a07054de7544f2cd86a9e8cf8ae36acb490a58aada97d114e3713e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "263The API gateway pattern\n The second option is to implement these edge functions in an edge service that\u2019s\nupstream from the API gateway. The edge se rvice is the first point of contact for an\nexternal client. It authenticates the re quest and performs other edge processing\nbefore passing it to the API gateway.\n An important benefit of using a dedicate d edge service is that it separates con-\ncerns. The API gateway focuses on API ro uting and composition. Another benefit is\nthat it centralizes responsibility for critic al edge functions such as authentication.\nThat\u2019s particularly valuable when an appl ication has multiple API gateways that are\npossibly written using a variety of languages and frameworks. I\u2019ll talk more about that\nlater. The drawback of this approach is that it increases network latency because of the\nextra hop. It also adds to the complexity of the application.\n As a result, it\u2019s often convenient to use the third option and implement these edge\nfunctions, especially authorization, in the API gateway itself. There\u2019s one less network\nhop, which improves latency. There are al so fewer moving parts, which reduces com-\nplexity. Chapter 11 describes how the AP I gateway and the services collaborate to\nimplement security. \nAPI GATEWAY ARCHITECTURE\nAn API gateway has a layered, modular architecture. Its architecture, shown in figure 8.5,\nconsists of two layers: the API layer and a common layer. The API layer consists of\none or more independent API modules. Ea ch API module implements an API for a\nAPI gateway\nMobile client\nMobile API\nAPI layer\nBrowser JavaScript\napplication\nBrowser API\nCommon layer\n3rd-party application\nPublic API\nFigure 8.5 An API gateway has a layered modular architecture. The API for each client is \nimplemented by a separate module. The common layer implements functionality common to all \nAPIs, such as authentication.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1879, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "68be80fe-7795-48e5-b24c-e9c5d4411703": {"__data__": {"id_": "68be80fe-7795-48e5-b24c-e9c5d4411703", "embedding": null, "metadata": {"page_label": "264", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7796632-84fb-48ed-8272-d09a7a2e44aa", "node_type": "4", "metadata": {"page_label": "264", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e05f81b824757f6ff315a6aaccc38ca8b244ca2462b8c064873ddbbb3c9bbf7b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "264 CHAPTER 8 External API patterns\nparticular client. The common layer implements shared functionality, including edge\nfunctions such as authentication.\n In this example, the API gateway has three API modules:\n\uf0a1 Mobile API\u2014Implements the API for the FTGO mobile client\n\uf0a1 Browser API\u2014Implements the API for the JavaScript application running in the\nbrowser\n\uf0a1 Public API\u2014Implements the API for third-party developers\nAn API module implements each API operation in one of two ways. Some API opera-\ntions map directly to single service API operation. An API module implements these\noperations by routing requests to the corre sponding service API operation. It might\nroute requests using a generic routing module that reads a configuration file describ-\ning the routing rules.\n An API module implements other, more  complex API operations using API com-\nposition. The implementation of this API operation consists of custom code. Each API\noperation implementation handles requests by invoking multiple services and com-\nbining the results. \nAPI GATEWAY OWNERSHIP MODEL\nAn important question that you must answ er is who is responsible for the develop-\nment of the API gateway and its operation?  There are a few different options. One is\nfor a separate team to be responsible for the API gateway. The drawback to that is that\nit\u2019s similar to SOA, where an Enterprise Service Bus (ESB) team was responsible for all\nESB development. If a developer working on the mobile application needs access to a\nparticular service, they must submit a re quest to the API gateway team and wait for\nthem to expose the API. This kind of centralized bottleneck in the organization is very\nmuch counter to the philosophy of the mi croservice architecture, which promotes\nloosely coupled autonomous teams.\n A better approach, which has been promot ed by Netflix, is for the client teams\u2014\nthe mobile, web, and public API teams\u2014to own the API module that exposes their\nAPI. An API gateway team is responsible for developing the Common module and for\nthe operational aspects of the gateway. Th is ownership model, shown in figure 8.6,\ngives the teams control over their APIs.\n When a team needs to change their API,  they check in the changes to the source\nrepository for the API gateway. To work well, the API gateway\u2019s deployment pipeline\nmust be fully automated. Otherwise, the client teams will often be blocked waiting for\nthe API gateway team to deploy the new version. \nUSING THE BACKENDS FOR FRONTENDS PATTERN\nOne concern with an API gateway is that responsibility for it is blurred. Multiple teams\ncontribute to the same code base. An API gateway team is responsible for its opera-\ntion. Though not as bad as a SOA ESB, this blurring of responsibilities is counter to\nthe microservice architecture philosophy of \u201cif you build it, you own it.\u201d", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2825, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9131e90d-ed2a-4a53-b354-427573b4564d": {"__data__": {"id_": "9131e90d-ed2a-4a53-b354-427573b4564d", "embedding": null, "metadata": {"page_label": "265", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3fdfb2a-7707-4bf6-a3bf-23e54125f144", "node_type": "4", "metadata": {"page_label": "265", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "77155bb02c9309c7db7379b08d467ebef6352ba1cfbbdf7c92d4a775b46fce30", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "265The API gateway pattern\nThe solution is to have an API gateway for each client, the so-called Backends for front-\nends (BFF) pattern, which was pioneered by Phil Cal\u00e7ado (http://philcalcado.com/)\nand his colleagues at SoundCloud. As figure  8.7 shows, each API module becomes its\nown standalone API gateway that\u2019s developed and operated by a single client team.\nPattern: Backends for frontends\nImplement a separate API gateway for each type of client. See http://microservices\n.io/patterns/apigateway.html.\nAPI gateway\nMobile client\nMobile API\nAPI layer\nBrowser JavaScript\napplication\nBrowser API\nCommon layer\n3rd-party application\nPublic API\nMobile client team\nAPI gateway team\nBrowser client team\nOwns\nOwns\nOwnsOwns\nPublic API team\nFigure 8.6 A client team owns their API modul e. As they change the client, they can change the API \nmodule and not ask the API gateway team to make the changes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 898, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e94045be-3891-4875-8055-05d5f7903888": {"__data__": {"id_": "e94045be-3891-4875-8055-05d5f7903888", "embedding": null, "metadata": {"page_label": "266", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be31afa2-5229-4470-aa1c-f23dec0b8329", "node_type": "4", "metadata": {"page_label": "266", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "793bab9ccf44444e239439453620905974aa7e20c2b391628a125eb3e3b9ba43", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "266 CHAPTER 8 External API patterns\nThe public API team owns and operates their API gateway, the mobile team owns and\noperates theirs, and so on. In theory, different API gateways could be developed using\ndifferent technology stacks. But that risks duplicating code for common functionality,\nsuch as the code that implements edge fu nctions. Ideally, all API gateways use the\nsame technology stack. The common functionality is a shared library implemented by\nthe API gateway team.\n Besides clearly defining responsibilities,  the BFF pattern has other benefits. The\nAPI modules are isolated from one another, which improves reliability. One misbehav-\ning API can\u2019t easily impact other APIs. It also improves observability, because different\nAPI modules are different processes. Another benefit of the BFF pattern is that each\nAPI is independently scalable. The BFF pa ttern also reduces startup time because\neach API gateway is a smaller, simpler application. \n \n \nMobile API\ngateway\nMobile client\nMobile API\nAPI layer\nCommon layer\nBrowser API\ngateway\nBrowser API\nAPI layer\nCommon layer\nPublic API\ngateway\nPublic API\nAPI layer\nCommon layer\nMobile client team Browser client team\nOwns Owns Owns\nPublic API team\nBrowser JavaScript\napplication 3rd-party application\nFigure 8.7 The Backends for frontends pattern defi nes a separate API gateway for each client. Each \nclient team owns their API gateway. An API gateway team owns the common layer.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e3294ed-0d00-4a4c-8b34-32ce04f3654f": {"__data__": {"id_": "9e3294ed-0d00-4a4c-8b34-32ce04f3654f", "embedding": null, "metadata": {"page_label": "267", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92181ebc-7264-4239-92ef-79d26ac19ef3", "node_type": "4", "metadata": {"page_label": "267", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "12e8b9694d01adba166b4b517ff57495f5d743aefeb567aefc1635e1f7e57fe5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "267The API gateway pattern\n8.2.2 Benefits and drawbacks of an API gateway\nAs you might expect, the API gateway pattern has both benefits and drawbacks.\nBENEFITS OF AN API GATEWAY\nA major benefit of using an API gateway is that it encapsulates internal structure of the\napplication. Rather than having to invoke specific services, clients talk to the gateway.\nThe API gateway provides each client with a client-specific API, which reduces the\nnumber of round-trips between the client and application. It also simplifies the client\ncode. \nDRAWBACKS OF AN API GATEWAY\nThe API gateway pattern also has some drawbacks. It is yet another highly available\ncomponent that must be developed, deployed, and managed. There\u2019s also a risk that\nthe API gateway becomes a development bottleneck. Developers must update the API\ngateway in order to expose their services\u2019s  API. It\u2019s important that the process for\nupdating the API gateway be as lightweight as  possible. Otherwise, developers will be\nforced to wait in line in order to update the gateway. Despite these drawbacks, though,\nfor most real-world applications, it makes sense to use an API gateway. If necessary,\nyou can use the Backends for frontends patt ern to enable the teams to develop and\ndeploy their APIs independently. \n8.2.3 Netflix as an example of an API gateway\nA great example of an API gateway is the Netflix API. The Netflix streaming service is\navailable on hundreds of different kinds of devices including televisions, Blu-ray\nplayers, smartphones, and many more gadget s. Initially, Netflix attempted to have a\none-size-fits-all style API for its streaming service (www.programmableweb.com/news/\nwhy-rest-keeps-me-night/2012/05/15). But the company soon discovered that didn\u2019t\nwork well because of the diverse range of devices and their different needs. Today,\nNetflix uses an API gateway that implements a separate API for each device. The client\ndevice team develops and owns the API implementation.\n In the first version of the API gateway,  each client team implemented their API\nusing Groovy scripts that perform routing an d API composition. Each script invoked\none or more service APIs using Java client libraries provided by the service teams. On\none hand, this works well, and client developers have written thousands of scripts. The\nNetflix API gateway handles billions of requests per day, and on average each API call\nfans out to six or seven backend services . On the other hand, Netflix has found this\nmonolithic architecture to be somewhat cumbersome.\n As a result, Netflix is no w moving to an API gateway architecture similar to the\nBackends for frontends pattern. In this new architecture, client teams write API mod-\nules using NodeJS. Each API module runs it s own Docker container, but the scripts\ndon\u2019t invoke the services directly. Rather, they invoke a second \u201cAPI gateway,\u201d which\nexposes the service APIs using Netflix Falcor. Netflix Falcor is an API technology that\ndoes declarative, dynamic API composition and enables a client to invoke multiple", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3040, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5c55ad9c-8c12-4612-b9d1-25519cf83216": {"__data__": {"id_": "5c55ad9c-8c12-4612-b9d1-25519cf83216", "embedding": null, "metadata": {"page_label": "268", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9ac76e2-0038-420c-ab71-76f78ece83a1", "node_type": "4", "metadata": {"page_label": "268", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "93cfd5d17dd68fcaa7fe25a43124ae2a0470adff0fe4750a9ad893e379e68e71", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "268 CHAPTER 8 External API patterns\nservices using a single request. This new architecture has a number of benefits. The\nAPI modules are isolated from one another, which improves reliability and observabil-\nity, and the client API module is independently scalable. \n8.2.4 API gateway design issues\nNow that we\u2019ve looked at the API gateway pattern and its benefits and drawbacks, let\u2019s\nexamine various API gateway design issues. There are several issues to consider when\ndesigning an API gateway:\n\uf0a1 Performance and scalability\n\uf0a1 Writing maintainable code by using reactive programming abstractions\n\uf0a1 Handling partial failure\n\uf0a1 Being a good citizen in the application\u2019s architecture\nWe\u2019ll look at each one.\nPERFORMANCE AND SCALABILITY\nAn API gateway is the application\u2019s front door. All external requests must first pass\nthrough the gateway. Although most compan ies don\u2019t operate at the scale of Netflix,\nwhich handles billions of requests per day, the performance and scalability of the API\ngateway is usually very important. A key de sign decision that affects performance and\nscalability is whether the API gateway should use synchronous or asynchronous I/O.\n In the synchronous I/O model , each network connection is handled by a dedicated\nthread. This is a simple programming model and works reasonably well. For example,\nit\u2019s the basis of the widely used Java EE servlet framework, although this framework\nprovides the option of completing a request asynchronously. One limitation of syn-\nchronous I/O, however, is that operating system threads are heavyweight, so there is a\nlimit on the number of threads, and hence concurrent connections, that an API gate-\nway can have.\n The other approach is to use the asynchronous (nonblocking) I/O model . In this\nmodel, a single event loop thread dispatches I/O requests to event handlers. You have\na variety of asynchronous I/O technologies to choose from. On the JVM you can use\none of the NIO-based frameworks such as Netty, Vertx, Spring Reactor, or JBoss\nUndertow. One popular non-JVM option is  NodeJS, a platform built on Chrome\u2019s\nJavaScript engine.\n Nonblocking I/O is much more scalable because it doesn\u2019t have the overhead of\nusing multiple threads. The drawback, thou gh, is that the asynchronous, callback-\nbased programming model is much more co mplex. The code is more difficult to\nwrite, understand, and debug. Event handle rs must return quickly to avoid blocking\nthe event loop thread.\n Also, whether using nonblocking I/O has a meaningful overall benefit depends on\nthe characteristics of the API gateway\u2019s request-processing logic. Netflix had mixed results\nwhen it rewrote Zuul, its edge server, to use NIO (see https://medium.com/netflix-\ntechblog/zuul-2-the-netflix-journey-to-asynchronous-non-blocking-systems-45947377fb5c).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2794, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "751cd6ef-a0cf-40e9-b6bf-217694de42d3": {"__data__": {"id_": "751cd6ef-a0cf-40e9-b6bf-217694de42d3", "embedding": null, "metadata": {"page_label": "269", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ce2d099-0969-4a0c-9491-7a3167c3b030", "node_type": "4", "metadata": {"page_label": "269", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7a70e914a358aca455c89cb60a0dc0c46c691d9c701bbb22451ef3d01e60253e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "269The API gateway pattern\nOn one hand, as you would expect, using NIO reduced the cost of each network con-\nnection, due to the fact that there\u2019s no longer a dedicated thread for each one. Also, a\nZuul cluster that ran I/O-intensive logic\u2014such as request routing\u2014had a 25% increase\nin throughput and a 25% reduction in CPU utilization. On the other hand, a Zuul clus-\nter that ran CPU-intensive logic\u2014such as decryption and compression\u2014showed no\nimprovement. \nUSE REACTIVE PROGRAMMING ABSTRACTIONS\nAs mentioned earlier, API composition consists of invoking multiple backend services.\nSome backend service requests depend enti rely on the client request\u2019s parameters.\nOthers might depend on the results of other service requests. One approach is for an\nAPI endpoint handler method to call the services in the order determined by the depen-\ndencies. For example, the following listing shows the handler for the findOrder()\nrequest that\u2019s written this way. It calls each of the four services, one after the other.\n@RestController\npublic class OrderDetailsController {\n@RequestMapping(\"/order/{orderId}\")\npublic OrderDetails getOrderDetails(@PathVariable String orderId) {\nOrderInfo orderInfo = orderService.findOrderById(orderId);\nTicketInfo ticketInfo = kitchenService\n.findTicketByOrderId(orderId);\nDeliveryInfo deliveryInfo = deliveryService\n.findDeliveryByOrderId(orderId);\nBillInfo billInfo = accountingService\n.findBillByOrderId(orderId);\nOrderDetails orderDetails =\nOrderDetails.makeOrderDetails(orderInfo, ticketInfo,\ndeliveryInfo, billInfo);\nreturn orderDetails;\n}\n...\nThe drawback of calling the services sequentially is that the response time is the sum\nof the service response times. In order to  minimize response time, the composition\nlogic should, whenever possible, invoke serv ices concurrently. In this example, there\nare no dependencies between the service calls. All services should be invoked concur-\nrently, which significantly reduces response time. The challenge is to write concurrent\ncode that\u2019s maintainable.\n This is because the traditional way to wr ite scalable, concurrent code is to use\ncallbacks. Asynchronous, event-driven I/O is inherently callback-based. Even a Servlet\nListing 8.1 Fetching the order details by  calling the backend services sequentially", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6e7367d8-2a93-4de7-8954-2bb26d52b7d7": {"__data__": {"id_": "6e7367d8-2a93-4de7-8954-2bb26d52b7d7", "embedding": null, "metadata": {"page_label": "270", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c71c287-f5e4-48bb-a4b9-6548fceeb686", "node_type": "4", "metadata": {"page_label": "270", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3c2e387b886a5cd9fac52825bce98293023e4e0493524b88f6f419629b57d483", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "270 CHAPTER 8 External API patterns\nAPI-based API composer that invokes services  concurrently typically uses callbacks. It\ncould execute requests concurrently by calling ExecutorService.submitCallable().\nThe problem there is that this method returns a Future, which has a blocking API. A\nmore scalable approach is for an API composer to call ExecutorService.submit\n(Runnable) and for each Runnable to invoke a callback with the outcome of the\nrequest. The callback accumulates results, and once all of them have been received it\nsends back the response to the client.\n Writing API composition code using the traditional asynchronous callback approach\nquickly leads you to callback hell. The code will be tangled, difficult to understand,\nand error prone, especially when compos ition requires a mixture of parallel and\nsequential requests. A much better approach  is to write API composition code in a\ndeclarative style using a reactive approach. Examples of reactive abstractions for the\nJVM include the following:\n\uf0a1 Java 8 CompletableFutures\n\uf0a1 Project Reactor Monos\n\uf0a1 RxJava (Reactive Extensions for Java) Observables, created by Netflix specifi-\ncally to solve this problem in its API gateway\n\uf0a1 Scala Futures\nA NodeJS-based API gateway would use JavaSc ript promises or RxJS, which is reactive\nextensions for JavaScript. Using one of thes e reactive abstractions will enable you to\nwrite concurrent code that\u2019s simple and easy  to understand. Later in this chapter, I\nshow an example of this style of coding using Project Reactor Monos and version 5 of\nthe Spring Framework. \nHANDLING PARTIAL FAILURES\nAs well as being scalable, an API gateway must also be reliable. One way to achieve reli-\nability is to run multiple instances of the gateway behind a load balancer. If one\ninstance fails, the load balancer will route requests to the other instances.\n Another way to ensure that an API gateway is reliable is to properly handle failed\nrequests and requests that have unaccept ably high latency. When an API gateway\ninvokes a service, there\u2019s always a chance that the service is slow or unavailable. An API\ngateway may wait a very long time, perhap s indefinitely, for a response, which con-\nsumes resources and prevents it from sending a response to its client. An outstanding\nrequest to a failed service might even consum e a limited, precious resource such as a\nthread and ultimately result in the API gateway being unable to handle any other\nrequests. The solution, as described in chapter 3, is for an API gateway to use the Cir-\ncuit breaker pattern when invoking services. \nBEING A GOOD CITIZEN IN THE ARCHITECTURE\nIn chapter 3 I described patterns for servic e discovery, and in chapter 11, I cover\npatterns for observability. The service disc overy patterns enable a service client,\nsuch as an API gateway, to determine the network location of a service instance so\nthat it can invoke it. The observability patterns enable developers to monitor the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2962, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "75689323-40c1-4ad3-b814-fdc98e62e556": {"__data__": {"id_": "75689323-40c1-4ad3-b814-fdc98e62e556", "embedding": null, "metadata": {"page_label": "271", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "939d140b-0359-4a80-9c0e-e55bc9db3012", "node_type": "4", "metadata": {"page_label": "271", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "aa8ccd0cd631a73712c2594b82fb4c95d1747ba05e4ea39e20a721168eda39e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "271Implementing an API gateway\nbehavior of an application and troubleshoot problems. An API gateway, like other ser-\nvices in the architecture, must implement the patterns that have been selected for the\narchitecture. \n8.3 Implementing an API gateway\nLet\u2019s now look at how to implement an API gateway. As mentioned earlier, the respon-\nsibilities of an API gateway are as follows:\n\uf0a1 Request routing\u2014Routes requests to services using criteria such as HTTP request\nmethod and path. The API gateway must route using the HTTP request method\nwhen the application has one or more CQRS query services. As discussed in\nchapter 7, in such an architecture commands and queries are handled by sepa-\nrate services.\n\uf0a1 API composition\u2014Implements a GET REST endpoint using the API composition\npattern, described in chapter 7. The request handler combines the results of\ninvoking multiple services.\n\uf0a1 Edge functions\u2014Most notable among these is authentication.\n\uf0a1 Protocol translation\u2014Translates between client-frien dly protocols and the client-\nunfriendly protocols used by services.\n\uf0a1 Being a good citizen in the application\u2019s architecture.\nThere are a couple of different ways to implement an API gateway:\n\uf0a1 Using an off-the-shelf API gateway product/service\u2014This option requires little or no\ndevelopment but is the least flexible. For example, an off-the-shelf API gateway\ntypically does not support API composition\n\uf0a1 Developing your own API gateway using either an API gateway framework or a web frame-\nwork as the starting point\u2014This is the most flexible approach, though it requires\nsome development effort.\nLet\u2019s look at these options, starting with using an off-the-shelf API gateway product or\nservice.\n8.3.1 Using an off-the-shelf API gateway product/service\nSeveral off-the-self services and products implement API gateway features. Let\u2019s first\nlook at a couple of services that are provided by AWS. After th at, I\u2019ll discuss some\nproducts that you can download, configure, and run yourself.\nAWS API GATEWAY\nThe AWS API gateway, one of the many services provided by Amazon Web Services, is\na service for deploying and managing APIs. An AWS API gateway API is a set of REST\nresources, each of which supports one or more HTTP methods. You configure the API\ngateway to route each (Method, Resource) to a backend service. A backend service is\neither an AWS Lambda Function, described later in chapter 12, an application-\ndefined HTTP service, or an AWS service.  If necessary, you can configure the API", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2493, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17556462-068a-4ff1-ac7d-9fc28345f3d7": {"__data__": {"id_": "17556462-068a-4ff1-ac7d-9fc28345f3d7", "embedding": null, "metadata": {"page_label": "272", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b055d66d-cb4c-4c3a-8d15-77909313226d", "node_type": "4", "metadata": {"page_label": "272", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e1d4b366cfdf4719ebc343de34508bb7ce089abfb0373fc1ee100b30e53c6c02", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "272 CHAPTER 8 External API patterns\ngateway to transform request and response  using a template-based mechanism. The\nAWS API gateway can also authenticate requests.\n The AWS API gateway fulfills some of th e requirements for an API gateway that I\nlisted earlier. The API gateway is provided by AWS, so you\u2019re not responsible for instal-\nlation and operations. You configure the API gateway, and AWS handles everything\nelse, including scaling.\n Unfortunately, the AWS API gateway ha s several drawbacks and limitations that\ncause it to not fulfill other requirements. It doesn\u2019t support API composition, so you\u2019d\nneed to implement API composition in th e backend services. The AWS API gateway\nonly supports HTTP(S) with a heavy emphasis  on JSON. It only supports the Server-\nside discovery pattern, described in chapter 3. An application will typically use an AWS\nElastic Load Balancer to load balance requ ests across a set of EC2 instances or ECS\ncontainers. Despite these limitations, unless you need API composition, the AWS API\ngateway is a good implementation of the API gateway pattern. \nAWS APPLICATION LOAD BALANCER\nAnother AWS service that provides API gate way-like functionality is the AWS Applica-\ntion Load Balancer, which is a load ba lancer for HTTP, HTTPS, WebSocket, and\nHTTP/2 ( https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/).\nWhen configuring an Application Load Balancer, you define routing rules that route\nrequests to backend services, which must be running on AWS EC2 instances.\n Like the AWS API gateway, the AWS Application Load Balancer meets some of the\nrequirements for an API gateway. It implements basic routing functionality. It\u2019s hosted,\nso you\u2019re not responsible for installation or operations. Unfortunately, it\u2019s quite lim-\nited. It doesn\u2019t implement HTTP method-based routing. Nor does it implement API\ncomposition or authentication. As a result, the AWS Application Load Balancer\ndoesn\u2019t meet the requirements for an API gateway. \nUSING AN API GATEWAY PRODUCT\nAnother option is to use an API gateway pr oduct such as Kong or Traefik . These are\nopen source packages that you install and operate yourself. Kong is based on the\nNGINX HTTP server, and Traefik is written in GoLang. Both products let you config-\nure flexible routing rules that use the HTTP method, headers, and path to select the\nbackend service. Kong lets you configure plugins that implement edge functions such\nas authentication. Traefik can even integrate with some service registries, described in\nchapter 3.\n Although these products implement edge functions and powerful routing capabil-\nities, they have some drawbacks. You must install, configure, and operate them your-\nself. They don\u2019t support API composition. And if you want the API gateway to perform\nAPI composition, you must develop your own API gateway.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2843, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6ff89e2c-c8b3-4631-9f89-6cdfe7c8ef76": {"__data__": {"id_": "6ff89e2c-c8b3-4631-9f89-6cdfe7c8ef76", "embedding": null, "metadata": {"page_label": "273", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef6aa67b-51ab-4d8e-82b7-6120a33b6d9d", "node_type": "4", "metadata": {"page_label": "273", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "01bb248e8069606c8c3d9fb1fcbda3d8340ea2f28e1638ec9c842a4e8bca93ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "273Implementing an API gateway\n8.3.2 Developing your own API gateway\nDeveloping an API gateway isn\u2019t particularly difficult. It\u2019s basically a web application\nthat proxies requests to other services. You can build one using your favorite web\nframework. There are, however, two key design problems that you\u2019ll need to solve:\n\uf0a1 Implementing a mechanism for defining routing rules in order to minimize the\ncomplex coding\n\uf0a1 Correctly implementing the HTTP pr oxying behavior, including how HTTP\nheaders are handled\nConsequently, a better starting point for developing an API gateway is to use a frame-\nwork designed for that purpose. Its built- in functionality significantly reduces the\namount of code you need to write.\n We\u2019ll take a look at Netflix Zuul, an open source project by Netflix, and then con-\nsider the Spring Cloud Gateway, an open source project from Pivotal.\nUSING NETFLIX ZUUL\nNetflix developed the Zuul framework to im plement edge functions such as routing,\nrate limiting, and authentication (https://github.com/Netflix/zuul). The Zuul frame-\nwork uses the concept of filters, reusable request interceptors that are similar to servlet\nfilters or NodeJS Express middleware. Zuul handles an HTTP request by assembling a\nchain of applicable filters that then tran sform the request, invoke backend services,\nand transform the response before it\u2019s sent back to the client. Although you can use\nZuul directly, using Spring Cloud Zuul, an open source project from Pivotal, is far eas-\nier. Spring Cloud Zuul builds on Zuul and through convention-over-configuration\nmakes developing a Zuul-based server remarkably easy.\n Zuul handles the routing and edge functionality. You can extend Zuul by defining\nSpring MVC controllers that implement AP I composition. But a major limitation of\nZuul is that it can only implement path-based routing. For example, it\u2019s incapable of\nrouting GET /orders to one service and POST /orders to a different service. Conse-\nquently, Zuul doesn\u2019t support the query architecture described in chapter 7. \nABOUT SPRING CLOUD GATEWAY\nNone of the options I\u2019ve described so far meet all the requirements. In fact, I had\ngiven up in my search for an API gatewa y framework and had started developing an\nAPI gateway based on Spring MVC. But th en I discovered the Spring Cloud Gate-\nway project ( https://cloud.spring.io/spring-cloud-gateway/ ). It\u2019s an API gateway\nframework built on top of several fram eworks, including Spring Framework 5,\nSpring Boot 2, and Spring Webflux, which is a reactive web framework that's part of\nSpring Framework 5 and built on Project Re actor. Project Reactor is an NIO-based\nreactive framework for the JVM that provides the Mono abstraction used a little\nlater in this chapter.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2739, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8c455a4-9214-4c02-860f-56434d2e8fb1": {"__data__": {"id_": "e8c455a4-9214-4c02-860f-56434d2e8fb1", "embedding": null, "metadata": {"page_label": "274", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d234a2e9-7dd4-423d-a749-e2566192e5c7", "node_type": "4", "metadata": {"page_label": "274", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4c7860a830d2dcbc0ccfd1a30a5157cd0ca248fb9398986a50f90a0b0d8540ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "274 CHAPTER 8 External API patterns\n Spring Cloud Gateway provides a simple yet comprehensive way to do the following:\n\uf0a1 Route requests to backend services.\n\uf0a1 Implement request handlers that perform API composition.\n\uf0a1 Handle edge functions such as authentication.\nFigure 8.8 shows the key parts of an API gateway built using this framework.\nThe API gateway consists of the following packages:\n\uf0a1 ApiGatewayMain package\u2014Defines the Main program for the API gateway.\n\uf0a1 One or more API packages \u2014An API package implements a set of API endpoints.\nFor example, the Orders package implements the Order-related API endpoints.\n\uf0a1 Proxy package \u2014Consists of proxy classes that are used by the API packages to\ninvoke the services.\n\u00ab@SpringBootApplication\u00bb\nApiGatewayApplication\n\u00ab@Bean\u00bb\norderProxyRouting\n\u00ab@Bean\u00bb\norderHandlerRouting\nGET/orders/{orderId}\n=>\nOrderHandlers::getOrderDetails\norders*\n=>\nhttp://orderservice\nmono<ServerResponse>\ngetOrderDetails(ServerRequest){\n...\n}\nmono<OrderInfo>\n\ufb01ndOrderById()(orderId){\n...WebClient\n.get()\n.url(\"http://order-service/...\"}\n}\nstatic void main(String[]args){\n...\n}\nRemote proxies\u00abpackage\u00bb\nOrders\u00abAPI package\u00bb\n\u00abproxy\u00bb\n....\n\u00abproxy\u00bb\nDeliveryService\n\ufb01ndDeliveryByOrder()\n\u00abproxy\u00bb\nOrderService\n\ufb01ndOrderById()\nOrder handlers\nSpring Cloud Gateway\nSpring 5\ngetOrderDetails()\nSpring webFlux\nProject reactor\n\u00abSpring Con\ufb01guration\u00bbOrderCon\ufb01guration\nFigure 8.8 The architecture of an API gateway built using Spring Cloud Gateway", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1448, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55a13b34-881b-43f1-ab5d-39c04fc12fa3": {"__data__": {"id_": "55a13b34-881b-43f1-ab5d-39c04fc12fa3", "embedding": null, "metadata": {"page_label": "275", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f226e51-35fd-48b8-a40a-25dcb683002a", "node_type": "4", "metadata": {"page_label": "275", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4ac6133d22530bb7b1a305078f7cd272500e1336d3768b1ab431b57c82977ae8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "275Implementing an API gateway\nThe OrderConfiguration class defines the Spring beans responsible for routing\nOrder-related requests. A routing rule can match against some combination of the\nHTTP method, the headers, and the path. The orderProxyRoutes @Bean defines rules\nthat map API operations to backend service URLs. For example, it routes paths begin-\nning with /orders to the Order Service.\n The orderHandlers @Bean defines rules that override those defined by order-\nProxyRoutes. These rules map API operations to handler methods, which are the\nSpring WebFlux equivalent of Spring MVC controller methods. For example, order-\nHandlers maps the operation GET /orders/{orderId} to the OrderHandlers::get-\nOrderDetails() method.\n The OrderHandlers class implements various request handler methods, such as\nOrderHandlers::getOrderDetails(). This method uses API composition to fetch the\norder details (described earlier). The handle methods invoke backend services using\nremote proxy classes, such as OrderService. This class defines methods for invoking\nthe OrderService.\n Let\u2019s take a look at the code, starting with the OrderConfiguration class. \nTHE ORDERCONFIGURATION CLASS\nThe OrderConfiguration class, shown in listing 8.2, is a Spring @Configuration class.\nIt defines the Spring @Beans that implement the /orders endpoints. The order-\nProxyRouting and orderHandlerRouting @Beans use the Spring WebFlux routing\nDSL to define the request routing. The orderHandlers @Bean implements the request\nhandlers that perform API composition.\n@Configuration\n@EnableConfigurationProperties(OrderDestinations.class)\npublic class OrderConfiguration {\n@Bean\npublic RouteLocator orderProxyRouting(OrderDestinations orderDestinations) {\nreturn Routes.locator()\n.route(\"orders\")\n.uri(orderDestinations.orderServiceUrl)\n.predicate(path(\"/orders\").or(path(\"/orders/*\")))   \n.and()\n...\n.build();\n}\n@Bean\npublic RouterFunction<ServerResponse>\norderHandlerRouting(OrderHandlers orderHandlers) {\nreturn RouterFunctions.route(GET(\"/orders/{orderId}\"),   \norderHandlers::getOrderDetails);\n}\nListing 8.2 The Spring @Beans that implement the /orders endpoints\nBy default, route all requests whose\npath begins with /orders to the URL\norderDestinations.orderServiceUrl.\nRoute a GET \n/orders/{orderId} \nto orderHandlers::\ngetOrderDetails.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2315, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5679fbb6-d4b4-4d94-ab46-c93ad6874bde": {"__data__": {"id_": "5679fbb6-d4b4-4d94-ab46-c93ad6874bde", "embedding": null, "metadata": {"page_label": "276", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd92367b-bea8-4629-9aa8-a245b2ff9b05", "node_type": "4", "metadata": {"page_label": "276", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "60217b5db48fff09b0b28a733cfa01130e666bc5405c1b4db6dcb0e22887f9a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "276 CHAPTER 8 External API patterns\n@Bean\npublic OrderHandlers orderHandlers(OrderService orderService,\nKitchenService kitchenService,\nDeliveryService deliveryService,\nAccountingService accountingService) {\nreturn new OrderHandlers(orderService, kitchenService,       \ndeliveryService, accountingService);\n}\n}\nOrderDestinations, shown in the following listing, is a Spring @Configuration-\nProperties class that enables the externalized configuration of backend service URLs.\n@ConfigurationProperties(prefix = \"order.destinations\")\npublic class OrderDestinations {\n@NotNull\npublic String orderServiceUrl;\npublic String getOrderServiceUrl() {\nreturn orderServiceUrl;\n}\npublic void setOrderServiceUrl(String orderServiceUrl) {\nthis.orderServiceUrl = orderServiceUrl;\n}\n...\n}\nYou can, for example, specify the URL of the Order Service either as the order\n.destinations.orderServiceUrl property in a properties file or as an operating sys-\ntem environment variable, ORDER_DESTINATIONS_ORDER_SERVICE_URL. \nTHE ORDERHANDLERS CLASS\nThe OrderHandlers class, shown in the following li sting, defines the request handler\nmethods that implement custom behavior, including API composition. The getOrder-\nDetails() method, for example, performs API composition to retrieve information\nabout an order. This class is injected with  several proxy classes that make requests to\nbackend services.\npublic class OrderHandlers {\nprivate OrderService orderService;\nprivate KitchenService kitchenService;\nprivate DeliveryService deliveryService;\nprivate AccountingService accountingService;\nListing 8.3 The externalized config uration of backend service URLs\nListing 8.4 The OrderHandlers class implements custom request-handling logic.\nThe @Bean, which implements the\ncustom request-handling logic", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1774, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7ba12e3-236b-48e9-9c7b-cadb3bd2fc3d": {"__data__": {"id_": "c7ba12e3-236b-48e9-9c7b-cadb3bd2fc3d", "embedding": null, "metadata": {"page_label": "277", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28ea65f0-6e06-4ada-af97-c6a54e77da60", "node_type": "4", "metadata": {"page_label": "277", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "90ab2909fb4446c0414e7c30ac3d8c30016306dad786f01523371136ad01eaec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "277Implementing an API gateway\npublic OrderHandlers(OrderService orderService,\nKitchenService kitchenService,\nDeliveryService deliveryService,\nAccountingService accountingService) {\nthis.orderService = orderService;\nthis.kitchenService = kitchenService;\nthis.deliveryService = deliveryService;\nthis.accountingService = accountingService;\n}\npublic Mono<ServerResponse> getOrderDetails(ServerRequest serverRequest) {\nString orderId = serverRequest.pathVariable(\"orderId\");\nMono<OrderInfo> orderInfo = orderService.findOrderById(orderId);\nMono<Optional<TicketInfo>> ticketInfo =\nkitchenService\n.findTicketByOrderId(orderId)\n.map(Optional::of)       \n.onErrorReturn(Optional.empty());   \nMono<Optional<DeliveryInfo>> deliveryInfo =\ndeliveryService\n.findDeliveryByOrderId(orderId)\n.map(Optional::of)\n.onErrorReturn(Optional.empty());\nMono<Optional<BillInfo>> billInfo = accountingService\n.findBillByOrderId(orderId)\n.map(Optional::of)\n.onErrorReturn(Optional.empty());\nMono<Tuple4<OrderInfo, Optional<TicketInfo>,   \nOptional<DeliveryInfo>, Optional<BillInfo>>> combined =\nMono.when(orderInfo, ticketInfo, deliveryInfo, billInfo);\nMono<OrderDetails> orderDetails =                \ncombined.map(OrderDetails::makeOrderDetails);\nreturn orderDetails.flatMap(person -> ServerResponse.ok()   \n.contentType(MediaType.APPLICATION_JSON)\n.body(fromObject(person)));\n}\n}\nThe getOrderDetails() method implements API comp osition to fetch the order\ndetails. It\u2019s written in a scalable, reactive style using the Mono abstraction , which is pro-\nvided by Project Reactor. A Mono, which is a richer kind of Java 8 CompletableFuture,\ncontains the outcome of an asynchronous  operation that\u2019s either a value or an\nexception. It has a rich API for transforming and combining the values returned by\nasynchronous operations. You can use Monos to write concurrent code in a style that\u2019s\nTransform a TicketInfo into \nan Optional<TicketInfo>.\nIf the service invocation failed, \nreturn Optional.empty().\nCombine the four \nvalues into a single \nvalue, a Tuple4.\nTransform the Tuple4 \ninto an OrderDetails.\nTransform the\nOrderDetails into\na ServerResponse.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2125, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2a4734c-8b93-4b7e-a14c-afada0f3c500": {"__data__": {"id_": "c2a4734c-8b93-4b7e-a14c-afada0f3c500", "embedding": null, "metadata": {"page_label": "278", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48c54cdd-2a86-4027-8a95-48647167686e", "node_type": "4", "metadata": {"page_label": "278", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3d524b6b76fb7b40174e4f23fef35510973a119efcf59c65875e2f995f1141de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "278 CHAPTER 8 External API patterns\nsimple and easy to understand. In this example, the getOrderDetails() method\ninvokes the four services in parallel and combines the results to create an Order-\nDetails object.\n The getOrderDetails() method takes a ServerRequest, which is the Spring Web-\nFlux representation of an HTTP request, as a parameter and does the following:\n1 It extracts the orderId from the path.\n2 It invokes the four services asynchronously via their proxies, which return Monos.\nIn order to improve availability, getOrderDetails() treats the results of all ser-\nvices except the OrderService as optional. If a Mono returned by an optional\nservice contains an exception, the call to onErrorReturn() transforms it into a\nMono containing an empty Optional.\n3 It combines the results asynchronously using Mono.when(), which returns a\nMono<Tuple4> containing the four values.\n4 It transforms the Mono<Tuple4> into a Mono<OrderDetails> by calling Order-\nDetails::makeOrderDetails.\n5 It transforms the OrderDetails into a ServerResponse, which is the Spring\nWebFlux representation of the JSON/HTTP response.\nAs you can see, because getOrderDetails() uses Monos, it concurrently invokes the\nservices and combines the results without using messy, difficult-to-read callbacks. Let\u2019s\ntake a look at one of the service proxies th at return the results of a service API call\nwrapped in a Mono. \nTHE ORDERSERVICE CLASS\nThe OrderService class, shown in the following listing, is a remote proxy for the Order\nService. It invokes the Order Service using a WebClient, which is the Spring Web-\nFlux reactive HTTP client.\n@Service\npublic class OrderService {\nprivate OrderDestinations orderDestinations;\nprivate WebClient client;\npublic OrderService(OrderDestinations orderDestinations, WebClient client)\n{\nthis.orderDestinations = orderDestinations;\nthis.client = client;\n}\npublic Mono<OrderInfo> findOrderById(String orderId) {\nMono<ClientResponse> response = client\n.get()\nListing 8.5 OrderService class\u2014a remote proxy for Order Service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2035, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf66fa54-345d-41b2-a410-2e66876bb33d": {"__data__": {"id_": "bf66fa54-345d-41b2-a410-2e66876bb33d", "embedding": null, "metadata": {"page_label": "279", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "643e8a11-b1e2-47db-90fd-013db834636d", "node_type": "4", "metadata": {"page_label": "279", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b1aef1a214b35ee71f4f4436f771b4a6db17c41eefad79ad73ea0ecc41de74f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "279Implementing an API gateway\n.uri(orderDestinations.orderServiceUrl + \"/orders/{orderId}\",\norderId)\n.exchange();     \nreturn response.flatMap(resp -> resp.bodyToMono(OrderInfo.class));  \n}\n}\nThe findOrder() method retrieves the OrderInfo for an order. It uses the WebClient\nto make the HTTP request to the Order Service and deserializes the JSON response\nto an OrderInfo. WebClient has a reactive API, and the response is wrapped in a Mono.\nThe findOrder() method uses flatMap() to transform the Mono<ClientResponse>\ninto a Mono<OrderInfo>. As the name suggests, the bodyToMono() method returns the\nresponse body as a Mono. \nTHE APIGATEWAYAPPLICATION CLASS\nThe ApiGatewayApplication class, shown in the following listing, implements the API\ngateway\u2019s main() method. It\u2019s a standard Spring Boot main class.\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@EnableGateway\n@Import(OrdersConfiguration.class)\npublic class ApiGatewayApplication {\npublic static void main(String[] args) {\nSpringApplication.run(ApiGatewayApplication.class, args);\n}\n}\nThe @EnableGateway annotation imports the Spring configuration for the Spring\nCloud Gateway framework.\n Spring Cloud Gateway is an excellent framework for implementing an API gateway.\nIt enables you to configure basic proxying using a simple, concise routing rules DSL.\nIt\u2019s also straightforward to route requests to handler methods that perform API com-\nposition and protocol translation. Spring Cloud Gateway is built using the scalable,\nreactive Spring Framework 5 and Project Reactor frameworks. But there\u2019s another\nappealing option for developing your ow n API gateway: GraphQL, a framework that\nprovides graph-based query language. Let\u2019s look at how that works. \n8.3.3 Implementing an API gateway using GraphQL\nImagine that you\u2019re responsible for im plementing the FTGO\u2019s API Gateway\u2019s GET\n/orders/{orderId} endpoint, which returns the order details. On the surface, imple-\nmenting this endpoint might appear to be simple. But as described in section 8.1, this\nendpoint retrieves data from multiple services. Consequently, you need to use the\nListing 8.6 The main() method for the API gateway\nInvoke the\nservice.\nConvert the response\nbody to an OrderInfo.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2209, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "271ae6f8-910e-4032-b4fa-56e46c915f30": {"__data__": {"id_": "271ae6f8-910e-4032-b4fa-56e46c915f30", "embedding": null, "metadata": {"page_label": "280", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2cae1645-86ad-4caf-a08b-173f3dcb99ca", "node_type": "4", "metadata": {"page_label": "280", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b6f58a7fcbca6dc01bace5c77720efa7a52cd42f683619015edc9fb8324c9049", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "280 CHAPTER 8 External API patterns\nAPI composition pattern and write code that invokes the services and combines\nthe results.\n Another challenge, mentioned earlier, is that different clients need slightly differ-\nent data. For example, unlike the mobile application, the desktop SPA application dis-\nplays your rating for the order. One way to tailor the data returned by the endpoint, as\ndescribed in chapter 3, is to give the client the ability to specify the data they need. An\nendpoint can, for example, support query parameters such as the expand parameter,\nwhich specifies the related resources to return, and the field parameter, which speci-\nfies the fields of each resource to return. The other option is to define multiple ver-\nsions of this endpoint as part of applying the Backends for frontends pattern. This is a\nlot of work for just one of the many AP I endpoints that the FTGO\u2019s API Gateway\nneeds to implement.\n Implementing an API gateway with a REST API that supports a diverse set of cli-\nents well is time consuming. Consequently , you may want to consider using a graph-\nbased API framework, such as GraphQL, th at\u2019s designed to support efficient data\nfetching. The key idea with graph-based API frameworks is that, as figure 8.9 shows,\nthe server\u2019s API consists of a graph-based schema. The graph-based schema defines a\nset of nodes (types), which have properties (fields) and relationships with other nodes.\nThe client retrieves data by executing a query that specifies the required data in terms\nof the graph\u2019s nodes and their properties an d relationships. As a result, a client can\nretrieve the data it needs in a single round-trip to the API gateway.\nGraph-based API technology has a couple of important benefits. It gives clients con-\ntrol over what data is returned. Consequent ly, developing a single API that\u2019s flexible\nConsumer\nConsumer\nRestaurant Delivery\nConsumer Service\nAPI gateway\nGraph-based API framework\nGraph schema\nOrder\nOrder Service\nRestaurant\nRestaurant Service\nDelivery\nDelivery Service\nOrder\nSchema\n=>\nService\nmapping\nClient Query\nQuery\nQuery\nQuery\nQuery\nFigure 8.9 The API gateway\u2019s API consists of a graph- based schema that\u2019s mapped to the services. A client \nissues a query that retrieves multiple graph nodes. The graph-based API framework executes the query by \nretrieving data from one or more services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2358, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c85a71ab-3877-4d99-acfa-275d16ca1788": {"__data__": {"id_": "c85a71ab-3877-4d99-acfa-275d16ca1788", "embedding": null, "metadata": {"page_label": "281", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a16b931-3a53-43ad-8dbc-22b93775985a", "node_type": "4", "metadata": {"page_label": "281", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0979e7172f2c5fafd64f1daa520f1d8b9dadccc27688e741871ba5ba71f654ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "281Implementing an API gateway\nenough to support diverse clients becomes feasible. Another benefit is that even though\nthe API is much more flexible, this appr oach significantly reduces the development\neffort. That\u2019s because you write the server -side code using a query execution frame-\nwork that\u2019s designed to support API composition and projections. It\u2019s as if, rather than\nforce clients to retrieve data via stored pr ocedures that you need to write and main-\ntain, you let them execute queries against the underlying database.\nThis section talks about how to develop an  API gateway using Apollo GraphQL. I\u2019m\nonly going to cover a few of the key feat ures of GraphQL and Apollo GraphQL. For\nmore information, you should consult the GraphQL and Apollo GraphQL docu-\nmentation.\n The GraphQL-based API gateway, shown in  figure 8.10, is written in JavaScript\nusing the NodeJS Express web framework and the Apollo GraphQL server. The key\nparts of the design are as follows:\n\uf0a1 GraphQL schema\u2014The GraphQL schema defines the server-side data model and\nthe queries it supports.\n\uf0a1 Resolver functions \u2014The resolve functions map elements of the schema to the\nvarious backend services.\n\uf0a1 Proxy classes\u2014The proxy classes invoke the FTGO application\u2019s services.\nThere\u2019s also a small amount of glue code that integrates the GraphQL server with the\nExpress web framework. Let\u2019s look at each part, starting with the GraphQL schema.\nSchema-driven API technologies\nThe two most popular graph-based API technologies are GraphQL (http://graphql.org)\nand Netflix Falcor (http://netflix.github.io/falcor/). Netflix Falcor models server-side\ndata as a virtual JSON object graph. The Falc or client retrieves data from a Falcor\nserver by executing a query that retrieves properties of that JSON object. The client\ncan also update properties. In the Falcor server, the properties of the object graph\nare mapped to backend data sources, such as  services with REST APIs. The server\nhandles a request to set or get properties  by invoking one or more backend data\nsources.\nGraphQL, developed by Facebook and rel eased in 2015, is another popular graph-\nbased API technology. It models the server-side data as a graph of objects that have\nfields and references to other objects. The object graph is mapped to backend data\nsources. GraphQL clients can execute queries that retrieve data and mutations that\ncreate and update data. Unlike Netflix Falcor, which is an implementation, GraphQL\nis a standard, with clients and servers available for a variety of languages, including\nNodeJS, Java, and Scala.\nApollo GraphQL is a popular JavaScript/NodeJS implementation (www.apollographql\n.com). It\u2019s a platform that includes a Gr aphQL server and client. Apollo GraphQL\nimplements some powerful extensions to th e GraphQL specification, such as sub-\nscriptions that push changed data to the client.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2868, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b00043f1-a64d-4ba0-be98-793f31426791": {"__data__": {"id_": "b00043f1-a64d-4ba0-be98-793f31426791", "embedding": null, "metadata": {"page_label": "282", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a2edc2c-d598-43ef-89a4-52780d1e55b6", "node_type": "4", "metadata": {"page_label": "282", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e60615b55809ebb4142c57e70355a9c01ff5ddcf20e0a5c0dfc1583e30930a2c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "282 CHAPTER 8 External API patterns\nDEFINING A GRAPHQL SCHEMA\nA GraphQL API is centered around a schema, which consists of a collection of types\nthat define the structure of the server-s ide data model and the operations, such as\nqueries, that a client can pe rform. GraphQL has several different kinds of types. The\nexample code in this section uses just two kinds of types: object types, which are the\ntype Query{\norders(consumerId:Int!): [Order]\norder(orderId : int!): Order\nconsumer(consumerId : int!): Consumer\n}\ntype Order {\norderId: ID,\nconsumerId: Int,\nconsumer: Consumer\nrestaurant: Restaurant\ndeliveryInfo : DeliveryInfo\n...\nconst resolvers = {\nQuery:{\norders: resolveOrders,\norder: resolveOrder,\n...\n},\nOrder:{\nconsumer: resolveOrderConsumer,\nrestaurant: resolveOrderRestaurant,\ndeliveryInfo: resolveOrderDeliveryInfo\n},\n...\nfunction resolveOrder(_. {orderId}, context){\nreturn context.orderServiceProxy.\ufb01ndOrder(orderI d);\n}\nfunction resolveOrderDeliveryInfo({orderId}, args, context) {\nreturn context.deliveryServiceProxy.\ufb01ndDeliveryF orOrder(orderId);\n}\nApollo graphQL engine\nConsumerServiceProxy OrderServiceProxy RestaurantServiceProxy DeliveryServiceProxy\nConsumer Service\ninvokes invokes invokes invokes\nOrder Service Restaurant Service Delivery Service\nExpress web framework\nApollo\ngraphQL\nclient\nFTGO API gateway\nhttp://.../graphql?query={orders(consumerId:1){orde rId,restaurant{id}}}\nFigure 8.10 The design of the GraphQL-based FTGO API Gateway", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1466, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd4398fa-2696-4dc2-a121-6c7ab7dd1656": {"__data__": {"id_": "fd4398fa-2696-4dc2-a121-6c7ab7dd1656", "embedding": null, "metadata": {"page_label": "283", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2830745b-dfd0-41f0-a068-df96014859a2", "node_type": "4", "metadata": {"page_label": "283", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "54d487d732dba89e6e785d14dc9952e9198027819c49abff9935c09668cca7af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "283Implementing an API gateway\nprimary way of defining the data model, and enums, which are similar to Java enums.\nAn object type has a name and a collection of typed, named fields. A field can be a sca-\nlar type, such as a number, string, or enum; a list of scalar types; a reference to another\nobject type; or a collection of references to another object type. Despite resembling a\nfield of a traditional object-oriented class, a GraphQL field is conceptually a function\nthat returns a value. It can have argument s, which enable a GraphQL client to tailor\nthe data the function returns.\n GraphQL also uses fields to define the queries supported by the schema. You\ndefine the schema\u2019s queries by declaring an object type, which by convention is called\nQuery. Each field of the Query object is a named query, which has an optional set of\nparameters, and a return type. I found this way of defining queries a little confusing\nwhen I first encountered it, but it helps to  keep in mind that a GraphQL field is a\nfunction. It will become even clearer when we look at how fields are connected to the\nbackend data sources.\n The following listing shows part of th e schema for the GraphQL-based FTGO API\ngateway. It defines several object types. Mo st of the object types correspond to the\nFTGO application\u2019s Consumer, Order, and Restaurant entities. It also has a Query object\ntype that defines the schema\u2019s queries.\ntype Query {    \norders(consumerId : Int!): [Order]\norder(orderId : Int!): Order\nconsumer(consumerId : Int!): Consumer\n}\ntype Consumer {\nid: ID   \nfirstName: String\nlastName: String\norders: [Order]      \n}\ntype Order {\norderId: ID,\nconsumerId : Int,\nconsumer: Consumer\nrestaurant: Restaurant\ndeliveryInfo : DeliveryInfo\n...\n}\ntype Restaurant {\nid: ID\nname: String\n...\n}\nListing 8.7 The GraphQL schema for the FTGO API gateway\nDefines the queries \nthat a client can \nexecute\nThe unique ID \nfor a Consumer\nA consumer has \na list of orders.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1950, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c4382c28-9575-43ed-bff3-85ca693e7e42": {"__data__": {"id_": "c4382c28-9575-43ed-bff3-85ca693e7e42", "embedding": null, "metadata": {"page_label": "284", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a5af62f-370f-4a0e-9ad2-38ae4d579002", "node_type": "4", "metadata": {"page_label": "284", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "36aaf88a144dc22c5953b53d7d7a86850495b341b235d6fec2c776ff02160ca9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "284 CHAPTER 8 External API patterns\ntype DeliveryInfo {\nstatus : DeliveryStatus\nestimatedDeliveryTime : Int\nassignedCourier :String\n}\nenum DeliveryStatus {\nPREPARING\nREADY_FOR_PICKUP\nPICKED_UP\nDELIVERED\n}\nDespite having a different syntax, the Consumer, Order, Restaurant, and Delivery-\nInfo object types are structurally similar to the corresponding Java classes. One differ-\nence is the ID type, which represents a unique identifier.\n This schema defines three queries:\n\uf0a1 orders()\u2014Returns the Orders for the specified Consumer\n\uf0a1 order()\u2014Returns the specified Order\n\uf0a1 consumer()\u2014Returns the specified Consumer\nThese queries may seem not different from the equivalent REST endpoints, but\nGraphQL gives the client tremendous control over the data that\u2019s returned. To under-\nstand why, let\u2019s look at how a client executes GraphQL queries. \nEXECUTING GRAPHQL QUERIES\nThe principal benefit of using GraphQL is that its query language gives the client\nincredible control over the returned data . A client executes a query by making a\nrequest containing a query document to the server. In the simple case, a query docu-\nment specifies the name of the query, the argument values, and the fields of the result\nobject to return. Here\u2019s a simple query that retrieves firstName and lastName of the\nconsumer with a particular ID:\nquery {\nconsumer(consumerId:1)   \n{  \nfirstName\nlastName\n}\n}\nThis query returns those fields of the specified Consumer.\n Here\u2019s a more elaborate query that re turns a consumer, their orders, and the ID\nand name of each order\u2019s restaurant:\nquery {\nconsumer(consumerId:1) {\nid\nfirstName\nlastName\nSpecifies the query called consumer, \nwhich fetches a consumer\nThe fields of the \nConsumer to return", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1712, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e951ea1c-7897-46d3-8227-2421fe3bb671": {"__data__": {"id_": "e951ea1c-7897-46d3-8227-2421fe3bb671", "embedding": null, "metadata": {"page_label": "285", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "53228526-9a9b-4e69-953e-877ba8f92197", "node_type": "4", "metadata": {"page_label": "285", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3a6faa9db4ee1563fb4383f6a72d968ed3887f2d622b2b730f9c45b3daacf733", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "285Implementing an API gateway\norders {\norderId\nrestaurant {\nid\nname\n}\ndeliveryInfo {\nestimatedDeliveryTime\nname\n}\n}\n}\n}\nThis query tells the server to return  more than just the fields of the Consumer. It\nretrieves the consumer\u2019s Orders and each Order\u2019 s  r e s t a u r a n t .  A s  y o u  c a n  s e e ,  a\nGraphQL client can specify exactly the data to return, including the fields of transi-\ntively related objects.\n The query language is more flexible than  it might first appear. That\u2019s because a\nquery is a field of the Query object, and a query document specifies which of those fields\nthe server should return. These simple examples retrieve a single field, but a query doc-\nument can execute multiple queries by specifying multiple fields. For each field, the\nquery document supplies the field\u2019s arguments and specifies what fields of the result\nobject it\u2019s interested in. Here\u2019s a query that retrieves two different consumers:\nquery {\nc1: consumer (consumerId:1) { id, firstName, lastName}\nc2: consumer (consumerId:2) { id, firstName, lastName}\n}\nIn this query document, c1 and c2 are what GraphQL calls aliases. They\u2019re used to dis-\ntinguish between the two Consumers in the result, which would otherwise both be\ncalled consumer. This example retrieves two objects of the same type, but a client\ncould retrieve several objects of different types.\n A GraphQL schema defines the shape of the data and the supported queries. To\nbe useful, it has to be connected to the source of the data. Let\u2019s look at how to do that. \nCONNECTING THE SCHEMA TO THE DATA\nWhen the GraphQL server executes a query, it must retrieve the requested data from\none or more data stores. In the case of the FTGO application, the GraphQL server\nmust invoke the APIs of the services that own the data. You associate a GraphQL\nschema with the data sources by attaching resolver functions to the fields of the object\ntypes defined by the schema. The GraphQL server implements the API composition\npattern by invoking resolver functions to retrieve the data, first for the top-level query,\nand then recursively for the fields of the result object or objects.\n The details of how resolver functions ar e associated with the schema depend on\nwhich GraphQL server you are using. Listin g 8.8 shows how to define the resolvers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2300, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "776cc980-2c3f-474f-addd-a7d01357e4c9": {"__data__": {"id_": "776cc980-2c3f-474f-addd-a7d01357e4c9", "embedding": null, "metadata": {"page_label": "286", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e0f4f6f-d700-4410-9cda-4f2b6e933431", "node_type": "4", "metadata": {"page_label": "286", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7d236471cbbdbcfd8140e4568ff9da882b96dc15c49826f569a2d9cb0f042cd9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "286 CHAPTER 8 External API patterns\nwhen using the Apollo GraphQL server. You create a doubly nested JavaScript object.\nEach top-level property corresponds to an object type, such as Query and Order. Each\nsecond-level property, such as Order.consumer, defines a field\u2019s resolver function.\nconst resolvers = {\nQuery: {\norders: resolveOrders,\nconsumer: resolveConsumer,\norder: resolveOrder\n},\nOrder: {\nconsumer: resolveOrderConsumer,   \nrestaurant: resolveOrderRestaurant,\ndeliveryInfo: resolveOrderDeliveryInfo\n...\n};\nA resolver function has three parameters:\n\uf0a1 Object\u2014For a top-level query field, such as resolveOrders, object is a root\nobject that\u2019s usually ignored by the resolver function. Otherwise, object is the\nvalue returned by the resolver for the parent object. For example, the resolver\nfunction for the Order.consumer field is passed the value returned by the Order\u2019s\nresolver function.\n\uf0a1 Query arguments\u2014These are supplied by the query document.\n\uf0a1 Context\u2014Global state of the query execution that\u2019s accessible by all resolvers. It\u2019s\nused, for example, to pass user information and dependencies to the resolvers.\nA resolver function might invoke a single service or it might implement the API com-\nposition pattern and retrieve data from multiple services. An Apollo GraphQL server\nresolver function returns a Promise, which is JavaScript\u2019s version of Java\u2019s Completable-\nFuture. The promise contains the object (or a li st of objects) that the resolver func-\ntion retrieved from the data store. GraphQL engine includes the return value in the\nresult object.\n Let\u2019s look at a couple of examples. Here\u2019s the resolveOrders() function, which is\nthe resolver for the orders query:\nfunction resolveOrders(_, { consumerId }, context) {\nreturn context.orderServiceProxy.findOrders(consumerId);\n}\nThis function obtains the OrderServiceProxy from the context and invokes it to\nfetch a consumer\u2019s orders. It ignores its first parameter. It passes the consumerId argu-\nment, provided by the query document, to OrderServiceProxy.findOrders(). The\nfindOrders() method retrieves the consumer\u2019s orders from OrderHistoryService.\nListing 8.8 Attaching the resolver funct ions to fields of the GraphQL schema\nThe resolver for \nthe orders query\nThe resolver for \nthe consumer field \nof an Order", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2287, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd0c199b-8328-40c1-bbde-c2ea159d1477": {"__data__": {"id_": "fd0c199b-8328-40c1-bbde-c2ea159d1477", "embedding": null, "metadata": {"page_label": "287", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e20e775c-595b-4b99-9e72-5c00cbde6831", "node_type": "4", "metadata": {"page_label": "287", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f3694343f31eb9856437f2f6f4e683d8a8f6754fa1116a83872f7385c9e88cc1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "287Implementing an API gateway\n Here\u2019s the resolveOrderRestaurant() function, which is the resolver for the\nOrder.restaurant field that retrieves an order\u2019s restaurant:\nfunction resolveOrderRestaurant({restaurantId}, args, context) {\nreturn context.restaurantServiceProxy.findRestaurant(restaurantId);\n}\nIts first parameter is Order. It invokes RestaurantServiceProxy.findRestaurant()\nwith the Order\u2019s restaurantId, which was provided by resolveOrders().\n GraphQL uses a recursive algorithm to execute the resolver functions. First, it exe-\ncutes the resolver function for the top-le vel query specified by the Query document.\nNext, for each object returned by the query,  it iterates through the fields specified in\nthe Query document. If a field has a resolver , it invokes the resolver with the object\nand the arguments from the Query docume nt. It then recurses on the object or\nobjects returned by that resolver.\n Figure 8.11 shows how this algorithm executes the query that retrieves a consumer\u2019s\norders and each order\u2019s delivery information and restaurant. First, the GraphQL engine\ninvokes resolveConsumer(), which retrieves Consumer. Next, it invokes resolve-\nConsumerOrders(), which is the resolver for the Consumer.orders field that returns\nthe consumer\u2019s orders. The GraphQL engine then iterates through Orders, invok-\ning the resolvers for the Order.restaurant and Order.deliveryInfo fields.\nThe result of executing the resolvers is a Consumer object populated with data retrieved\nfrom multiple services.\n Let\u2019s now look at how to optimize the executing of resolvers by using batching and\ncaching. \nResolver functions\nSchema Query document\ntype Query{\nconsumer(consumerId:int!): Consumer\n}\ntype Order {\n...\nrestaurant: Restaurant\ndeliveryInfo : DeliveryInfo\n...\nquery{\nconsumer(consumerId:1){\nid\n\ufb01rstName\nlastName\norders{\norderId\nrestaurant{\nid\nname\n}\ndeliveryInfo{\nestimatedDeliveryTime\nname\n}\n}\n}\n}\nconsumer = resolveConsumer(..., 1)\norders = resolveConsumerOrders(consumer)\nresolveOrderRestaurant(order, ...)\nresolveOrderDeliveryInfo(order)\nQuery arguments passed to resolver\nFigure 8.11 GraphQL executes a query by recursively invoking t he resolver functions for the fields specified in \nthe Query document. First, it executes the resolver for the query, and then it recursively invokes the resolvers for \nthe fields in the result object hierarchy.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2366, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1927d964-f691-4f1f-9ecd-db1d21de115a": {"__data__": {"id_": "1927d964-f691-4f1f-9ecd-db1d21de115a", "embedding": null, "metadata": {"page_label": "288", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29a730c3-c612-4ab8-9376-93dc62a02b16", "node_type": "4", "metadata": {"page_label": "288", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ac7b92ef674ea74cfa3928c6b2b532456dca7fbb07835722d9dc20234a16d044", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "288 CHAPTER 8 External API patterns\nOPTIMIZING LOADING USING BATCHING AND CACHING\nGraphQL can potentially execute a large number of resolvers when executing a query.\nBecause the GraphQL server executes each resolver independently, there\u2019s a risk of\npoor performance due to excessive round-trips to the services. Consider, for example,\na query that retrieves a cons umer, their orders, and the or ders\u2019 restaurants. If there\nare N orders, then a simplistic implementation would make one call to Consumer\nService, one call to Order History Service, and then N calls to Restaurant Service.\nEven though the GraphQL engine will typically make the calls to Restaurant Service\nin parallel, there\u2019s a risk of poor perfor mance. Fortunately, you can use a few tech-\nniques to improve performance.\n One important optimization is to use a combination of server-side batching and\ncaching. Batching turns N calls to a service, such as Restaurant Service, into a sin-\ngle call that retrieves a batch of N objects. Caching reuses the result of a previous\nfetch of the same object to avoid making an unnecessary duplicate call. The combi-\nnation of batching and caching significan tly reduces the number of round-trips to\nbackend services.\n A NodeJS-based GraphQL server can use the DataLoader module to implement\nbatching and caching ( https://github.com/facebook/dataloader). It coalesces loads\nthat occur within a single execution of th e event loop and calls a batch loading func-\ntion that you provide. It also caches calls to eliminate duplicate loads. The following list-\ning shows how RestaurantServiceProxy can use DataLoader. The findRestaurant()\nmethod loads a Restaurant via DataLoader.\nconst DataLoader = require('dataloader');\nclass RestaurantServiceProxy {\nconstructor() {\nthis.dataLoader =       \nnew DataLoader(restaurantIds =>\nthis.batchFindRestaurants(restaurantIds));\n}\nfindRestaurant(restaurantId) {          \nreturn this.dataLoader.load(restaurantId);\n}\nbatchFindRestaurants(restaurantIds) {      \n...\n}\n}\nRestaurantServiceProxy and, hence, DataLoader are created for each request, so\nthere\u2019s no possibility of DataLoader mixing together different users\u2019 data.\n Let\u2019s now look at how to integrate the GraphQL engine with a web framework so\nthat it can be invoked by clients. \nListing 8.9 Using a DataLoader to optimize calls to Restaurant Service\nCreate a DataLoader, which uses \nbatchFindRestaurants() as the \nbatch loading functions.\nLoad the specified Restaurant \nvia the DataLoader.\nLoad a batch of \nRestaurants.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2522, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "097e916a-c630-43d0-ab4b-75a9a060275a": {"__data__": {"id_": "097e916a-c630-43d0-ab4b-75a9a060275a", "embedding": null, "metadata": {"page_label": "289", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e43e3eca-2c40-42e8-9303-83ad3fc3d57c", "node_type": "4", "metadata": {"page_label": "289", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "869a1475f640829e265bc36fb15df1118c35cf1fb85ffc6de6b6d029b54cbd57", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "289Implementing an API gateway\nINTEGRATING THE APOLLO GRAPHQL SERVER WITH EXPRESS\nThe Apollo GraphQL server executes GraphQL queries. In order for clients to invoke\nit, you need to integrate it with a web framework. Apollo GraphQL server supports\nseveral web frameworks, including Express, a popular NodeJS web framework.\n Listing 8.10 shows how to use the Apollo  GraphQL server in an Express applica-\ntion. The key function is graphqlExpress, which is provided by the apollo-server-\nexpress module. It builds an Express request handler that executes GraphQL queries\nagainst a schema. This example configures Express to route requests to the GET\n/graphql and POST /graphql endpoints of this GraphQL request handler. It also creates\na GraphQL context containing the proxies, which makes them available to the resolvers.\nconst {graphqlExpress} = require(\"apollo-server-express\");\nconst typeDefs = gql`    \ntype Query {\norders: resolveOrders,\n...\n}\ntype Consumer {\n...\nconst resolvers = {     \nQuery: {\n...\n}\n}\nconst schema = makeExecutableSchema({ typeDefs, resolvers });    \nconst app = express();\nfunction makeContextWithDependencies(req) {      \nconst orderServiceProxy = new OrderServiceProxy();\nconst consumerServiceProxy = new ConsumerServiceProxy();\nconst restaurantServiceProxy = new RestaurantServiceProxy();\n...\nreturn {orderServiceProxy, consumerServiceProxy,\nrestaurantServiceProxy, ...};\n}\nfunction makeGraphQLHandler() {    \nreturn graphqlExpress(req => {\nreturn {schema: schema, context: makeContextWithDependencies(req)}\n});\n}\napp.post('/graphql', bodyParser.json(), makeGraphQLHandler());   \napp.get('/graphql', makeGraphQLHandler());\napp.listen(PORT);\nListing 8.10 Integrating the GraphQL se rver with the Express web framework\nDefine the GraphQL \nschema.\nDefine the \nresolvers.\nCombine the \nschema with the \nresolvers to create \nan executable \nschema.\nInject repositories into \nthe context so they\u2019re \navailable to resolvers.\nMake an express request handler \nthat executes GraphQL queries \nagainst the executable schema.\nRoute POST /graphql and GET\n/graphql endpoints to the\nGraphQL server.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2108, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d15c929-6435-4ec5-a1da-70cecfa8568b": {"__data__": {"id_": "9d15c929-6435-4ec5-a1da-70cecfa8568b", "embedding": null, "metadata": {"page_label": "290", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6344791-e611-4c3e-9c02-f32fc2471201", "node_type": "4", "metadata": {"page_label": "290", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9e03c9ca26f014250c3f014e08cc7e4f376fc53119dbd1512ab634d368243bc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "290 CHAPTER 8 External API patterns\nThis example doesn\u2019t handle concerns such as security, but those would be straight-\nforward to implement. The API gateway coul d, for example, authenticate users using\nPassport, a NodeJS security framew ork described in chapter 11. The makeContext-\nWithDependencies() function would pass the user information to each repository\u2019s\nconstructor so that they can propagate the user information to the services.\n Let\u2019s now look at how a client can invoke this server to execute GraphQL queries. \nWRITING A GRAPHQL CLIENT\nThere are a couple of different ways a c lient application can invoke the GraphQL\nserver. Because the GraphQL server has an  HTTP-based API, a client application\ncould use an HTTP library to make requests, such as GET http://localhost:3000/\ngraphql?query={orders(consumerId :1){orderId,restaurant{id}}}'. It\u2019s easier,\nthough, to use a GraphQL client library, which takes care of properly formatting\nrequests and typically provides features such as client-side caching.\n The following listing shows the FtgoGraphQLClient class, which is a simple\nGraphQL-based client for the FTGO application. Its constructor instantiates Apollo-\nClient, which is provided by the Apollo GraphQL client library. The FtgoGraphQL-\nClient class defines a findConsumer() method that uses the client to retrieve the\nname of a consumer.\nclass FtgoGraphQLClient {\nconstructor(...) {\nthis.client = new ApolloClient({ ... });\n}\nfindConsumer(consumerId) {\nreturn this.client.query({\nvariables: { cid: consumerId},   \nquery: gql`\nquery foo($cid : Int!) {   \nconsumer(consumerId: $cid) {   \nid\nfirstName\nlastName\n}\n}` ,\n})\n}\n}\nThe FtgoGraphQLClient class can define a variety of query methods, such as find-\nConsumer(). Each one executes a query that retrieves exactly the data needed by the\nclient.\nListing 8.11 Using the Apollo GraphQL client to execute queries\nSupply the value \nof the $cid.\nDefine $cid as a \nvariable of type Int.\nSet the value of \nquery parameter \nconsumerid to $cid.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2010, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bbdadf4a-6ac9-4323-a385-312ba3ca2ea1": {"__data__": {"id_": "bbdadf4a-6ac9-4323-a385-312ba3ca2ea1", "embedding": null, "metadata": {"page_label": "291", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ccdbcfc-ed97-446d-97b1-8e0e134b6e5a", "node_type": "4", "metadata": {"page_label": "291", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1d046a80987cd10199619b9ff1bda4aa6eb80d6babab384aaa41aca10c8ee14b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "291Summary\n This section has barely scratched the surface of GraphQL\u2019s capabilities. I hope I\u2019ve\ndemonstrated that GraphQL is a very appe aling alternative to a more traditional,\nREST-based API gateway. It lets you implem ent an API that\u2019s flexible enough to sup-\nport a diverse set of client s. Consequently, you should consider using GraphQL to\nimplement your API gateway. \nSummary\n\uf0a1 Your application\u2019s external clients usually access the application\u2019s services via an\nAPI gateway. An API gateway provides each client with a custom API. It\u2019s respon-\nsible for request routing, API composition, protocol translation, and implemen-\ntation of edge functions such as authentication.\n\uf0a1 Your application can have a single API gateway or it can use the Backends for\nfrontends pattern, which defines an API gateway for each type of client. The\nmain advantage of the Backends for frontends pattern is that it gives the client\nteams greater autonomy, because they de velop, deploy, and operate their own\nAPI gateway.\n\uf0a1 There are numerous technologies you can use to implement an API gateway,\nincluding off-the-shelf API gateway products. Alternatively, you can develop\nyour own API gateway using a framework.\n\uf0a1 Spring Cloud Gateway is a good, easy-t o-use framework for developing an API\ngateway. It routes requests using any request attribute, including the method\nand the path. Spring Cloud Gateway can route a request either directly to a\nbackend service or to a custom handler method. It\u2019s built using the scalable,\nreactive Spring Framework 5 and Proj ect Reactor frameworks. You can write\nyour custom request handlers in a reac tive style using, for example, Project\nReactor\u2019s Mono abstraction.\n\uf0a1 GraphQL, a framework that provides gr aph-based query language, is another\nexcellent foundation for developing an API Gateway. You write a graph-oriented\nschema to describe the server-side data model and its supported queries. You\nthen map that schema to your services by writing resolvers, which retrieve data.\nGraphQL-based clients execute queries ag ainst the schema that specify exactly\nthe data that the server should return . As a result, a GraphQL-based API gate-\nway can support diverse clients.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2198, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de8bcafd-a41a-4909-b091-88b8280f24a1": {"__data__": {"id_": "de8bcafd-a41a-4909-b091-88b8280f24a1", "embedding": null, "metadata": {"page_label": "292", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9294e7f2-5c97-42af-9777-6e297f1166ce", "node_type": "4", "metadata": {"page_label": "292", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "23ed2454a9bf5bee03442025b493f1dc401f344c35d6b02346d8b43e5a331a60", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "292\nTesting microservices:\nPart 1\nFTGO, like many organizations, had adopted a traditional approach to testing. Test-\ning is primarily an activity that happens  after development. The FTGO developers\nthrow their code over a wall to the QA team, who verify that the software works as\nexpected. What\u2019s more, most of their testing is done manually. Sadly, this approach\nto testing is broken\u2014for two reasons:\n\uf0a1 Manual testing is extremely inefficient \u2014You should never ask a human to do\nwhat a machine can do better. Compared to machines, humans are slow and\ncan\u2019t work 24/7. You won\u2019t be able to deliver software rapidly and safely if\nyou rely on manual testing. It\u2019s essential that you write automated tests.\n\uf0a1 Testing is done far too late in the delivery process\u2014There certainly is a role for tests\nthat critique an application after it\u2019s been written, but experience has shown\nthat those tests are insufficient. A much better approach is for developers to\nThis chapter covers\n\uf0a1 Effective testing strategies for microservices\n\uf0a1 Using mocks and stubs to test a software \nelement in isolation\n\uf0a1 Using the test pyramid to determine where to \nfocus testing efforts\n\uf0a1 Unit testing the classes inside a service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1203, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13b89716-e3da-4e40-bfb3-ea17aa770fbe": {"__data__": {"id_": "13b89716-e3da-4e40-bfb3-ea17aa770fbe", "embedding": null, "metadata": {"page_label": "293", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ad8d495-7bed-49c8-9c61-e7cafb32d5e7", "node_type": "4", "metadata": {"page_label": "293", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9c9770adafe92027a073cbf687b5ce2eee2538b18441f35ad141ea33e48a2613", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "293\nwrite automated tests as part of develo pment. It improves their productivity\nbecause, for example, they\u2019ll have tests that provide immediate feedback while\nediting code.\nIn this regard, FTGO is a fairly typical organization. The Sauce Labs Testing Trends in\n2018 report paints a fairly gloomy picture of the state of test automation ( https://\nsaucelabs.com/resources/white-papers/testing-trends-for-2018). It describes how only\n26% of organizations are mostly automated, and a minuscule 3% are fully automated!\n The reliance on manual testing isn\u2019t because of a lack of tooling and frameworks.\nFor example, JUnit, a popular Java testing framework, was first released in 1998. The\nreason for the lack of automated tests is mostly cultural: \u201cTesting is QA\u2019s job,\u201d \u201cIt\u2019s not\nthe best use of a developers\u2019s time,\u201d and so on. It also doesn\u2019t help that developing a\nfast-running, yet effective, maintainable test  suite is challenging. And, a typical large,\nmonolithic application is extremely difficult to test.\n One key motivation for using the micros ervice architecture is, as described in\nchapter 2, improving testability. Yet at the same time, the complexity of the microser-\nvice architecture demands that you write automated tests. Furthermore, some aspects\nof testing microservices are challenging. That\u2019s because we need to verify that services\ncan interact correctly while minimizing the number of slow, complex, and unreliable\nend-to-end-tests that launch many services.\n This chapter is the first of two chapters on  testing. It\u2019s an introduction to testing.\nChapter 10 covers more advanced testing concepts. The two chapters are long, but\ntogether they cover testing ideas and techniques that are essential to modern software\ndevelopment in general, and to the microservice architecture in particular.\n I begin this chapter by describing effect ive testing strategies for a microservices-\nbased application. These strategies enable  you to be confident that your software\nworks, while minimizing test complexity and execution time. After that, I describe\nhow to write one particular kind of test for your services: unit tests. Chapter 10 covers\nthe other kinds of tests: integration, component, and end-to-end.\n Let\u2019s start by taking a look at testing strategies for microservices.\nWhy an introduction to testing?\nYou may be wondering why this chapter includes an introduction to basic testing con-\ncepts. If you\u2019re already familiar with concepts such as the test pyramid and the different\ntypes of tests, feel free to speed-read this chapter and move onto the next one, which\nfocuses on microservices-specific testing topics. But based on my experiences consult-\ning for and training clients all over the world, a fundamental weakness of many software\ndevelopment organizations is the lack of automated testing. That\u2019s because if you want\nto deliver software quickly and reliably, it\u2019s absolutely essential to do automated testing.\nIt\u2019s the only way to have a short lead time, which is the time it takes to get committed\ncode into production. Perhaps even more importantly, automated testing is essential\nbecause it forces you to develop a testable application. It\u2019s typically very difficult to\nintroduce automating testing into an already large, complex application. In other words,\nthe fast track to monolithic hell is to not write automated tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3365, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54000368-c24d-49a3-bdba-a8b023eb8bcd": {"__data__": {"id_": "54000368-c24d-49a3-bdba-a8b023eb8bcd", "embedding": null, "metadata": {"page_label": "294", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a917301f-5b0b-4852-b44c-f9f10a3c0abd", "node_type": "4", "metadata": {"page_label": "294", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fdf7bd17e48fb31dfdedde75ef748675f1d9d9e107b0d50cd558830d1c2e68de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "294 CHAPTER 9 Testing microservices: Part 1\n9.1 Testing strategies for microservice architectures\nLet\u2019s say you\u2019ve made a change to FTGO application\u2019s Order Service. Naturally, the\nnext step is for you to run your code and verify that the change works correctly. One\noption is to test the change manually. First, you run Order Service and all its depen-\ndencies, which include infrastructure servic es such as a database and other applica-\ntion services. Then you \u201ctest\u201d the service by either invoking its API or using the FTGO\napplication\u2019s UI. The downside of this approach is that it\u2019s a slow, manual way to test\nyour code.\n A much better option is to have automated tests that you can run during develop-\nment. Your development workflow should be: edit code, run tests (ideally with a single\nkeystroke), repeat. The fast-running tests quickly tell you whether your changes work\nwithin a few seconds. But how do you write fast-running tests? And are they sufficient\nor do you need more comprehensive tests? These are the kind of questions I answer in\nthis and other sections in this chapter.\n I start this section with an overview of important automated testing concepts. We\u2019ll\nlook at the purpose of testing and the struct ure of a typical test. I cover the different\ntypes of tests that you\u2019ll need to write. I also describe the test pyramid, which provides\nvaluable guidance about where you should focus your testing efforts. After covering\ntesting concepts, I discuss strategies for testing microservices. We\u2019ll look at the distinct\nchallenges of testing applications that ha ve a microservice architecture. I describe\ntechniques you can use to write simpler and faster, yet still-effective, tests for your\nmicroservices.\n Let\u2019s take a look at testing concepts.\n9.1.1 Overview of testing\nIn this chapter, my focus is on automated testing, and I use the term test as shorthand\nfor automated test. Wikipedia defines a test case, or test, as follows:\nA test case is a set of test inputs, executio n conditions, and expected results developed for\na particular objective, such as to exercise a particular program path or to verify compliance\nwith a specific requirement.\nhttps://en.wikipedia.org/wiki/Test_case\nIn other words, the purpose of a test is, as figure 9.1 shows, to verify the behavior of\nthe System Under Test (SUT). In this definition, system is a fancy term that means the\nsoftware element being tested. It might be something as small as a class, as large as the\nentire application, or something in between, such as a cluster of classes or an individ-\nual service. A collection of related tests form a test suite.\n Let\u2019s first look at the concept of an automated test. Then I discuss the different\nkinds of tests that you\u2019ll ne ed to write. After that, I discuss the test pyramid, which\ndescribes the relative proportions of the different types of tests that you should write.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2892, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5640bf2-659c-4396-81b6-cb74d6587e99": {"__data__": {"id_": "a5640bf2-659c-4396-81b6-cb74d6587e99", "embedding": null, "metadata": {"page_label": "295", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86ba5176-d208-4cf5-9b71-d01164598342", "node_type": "4", "metadata": {"page_label": "295", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "91a2bd32a32343f0d01c4534147cee5409000f40d72a42afd77c97066634985f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "295Testing strategies for microservice architectures\nWRITING AUTOMATED TESTS\nAutomated tests are usually written using a testing framework. JUnit, for example, is a\npopular Java testing framework. Figure 9.2 shows the structure of an automated test.\nEach test is implemented by a test method, which belongs to a test class.\nAn automated test typically consists of four phases ( http://xunitpatterns.com/\nFour%20Phase%20Test.html):\n1 Setup\u2014Initialize the test fixture, which consists of the SUT and its dependen-\ncies, to the desired initial state. For example, create the class under test and ini-\ntialize it to the state required for it to exhibit the desired behavior.\n2 Exercise\u2014Invoke the SUT\u2014for example, invoke a method on the class under test.\n3 Verify\u2014Make assertions about the invocation\u2019s outcome and the state of the\nSUT. For example, verify the method\u2019s return value and the new state of the class\nunder test.\nSystem Under\nTest (SUT)Test\nTest suite\nVeri\ufb01es behavior of\nFigure 9.1 The goal of a test is to \nverify the behavior of the system \nunder test. An SUT might be as \nsmall as a class or as large as an \nentire application.\nTest class\nSetup\nExecute\nVerify\nTeardown\nTest method\nTest methodTest runner SUT\nFixture\nExecutes\nTest method\nFigure 9.2 Each automated test is implemented by a test method, which belongs to a test class. A \ntest consists of four phases: setup, which initializes the test fixture, which is everything required to \nrun the test; execute, which invokes the SUT; verify, which verifies the outcome of the test; and \nteardown, which cleans up the test fixture.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1596, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "138d7652-2705-47c2-add3-24d8a26d8e7a": {"__data__": {"id_": "138d7652-2705-47c2-add3-24d8a26d8e7a", "embedding": null, "metadata": {"page_label": "296", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d11f6155-a810-4285-99e2-35b49cfecaff", "node_type": "4", "metadata": {"page_label": "296", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1e858b36463fad3c646b3480c20e50b421edddc61e8d60a98308156316ca690d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "296 CHAPTER 9 Testing microservices: Part 1\n4 Teardown\u2014Clean up the test fixture, if necessary. Many tests omit this phase,\nbut some types of database test will, fo r example, roll back a transaction initi-\nated by the setup phase.\nIn order to reduce code duplication and simp lify tests, a test class might have setup\nmethods that are run before a test method, and teardown methods that are run after-\nwards. A test suite is a set of test classes. The tests are executed by a test runner. \nTESTING USING MOCKS AND STUBS\nAn SUT often has dependencies. The trouble with dependencies is that they can com-\nplicate and slow down tests. For example, the OrderController class invokes Order-\nService, which ultimately depends on numero us other application services and\ninfrastructure services. It wouldn\u2019t be practical to test the OrderController class by\nrunning a large portion of the system. We need a way to test an SUT in isolation.\n The solution, as figure 9.3 shows, is to  replace the SUT\u2019s dependencies with test\ndoubles. A test double is an object that simulates the behavior of the dependency.\nThere are two types of test doubles: stubs and mocks. The terms stubs  and mocks  are\noften used interchangeably, although they have slightly different behavior. A stub is a\ntest double that returns values to the SUT. A mock is a test double that a test uses to ver-\nify that the SUT correctly invokes a dependency. Also, a mock is often a stub.\n Later on in this chapter, you\u2019ll see examples of test doubles in action. For example,\nsection 9.2.5 shows how to test the OrderController class in isolation by using a test\ndouble for the OrderService class. In that example, the OrderService test double is\nimplemented using Mockito, a popular mock object framework for Java. Chapter 10\nshows how to test Order Service using test doubles for the other services that it invokes.\nThose test doubles respond to command messages sent by Order Service.\n Let\u2019s now look at the different types of tests. \nSlow, complex\ntest\nTests\nReplaced with\nTests\nSystem Under\nTest (SUT) Dependency\nFaster, simpler\ntest\nSystem Under\nTest (SUT) Test double\nFigure 9.3 Replacing a dependency with a test double enables the SUT to \nbe tested in isolation. The test is simpler and faster.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2261, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b964172d-ba26-4d4b-81ad-9d4b0dffcd79": {"__data__": {"id_": "b964172d-ba26-4d4b-81ad-9d4b0dffcd79", "embedding": null, "metadata": {"page_label": "297", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9cd9d415-54ba-42f2-932e-ed5ce3abc806", "node_type": "4", "metadata": {"page_label": "297", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4895f53a8e8c0201657b4cc75d1279eba4cf3105817fb7911a6a03e47c322373", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "297Testing strategies for microservice architectures\nTHE DIFFERENT TYPES OF TESTS\nThere are many different types of tests. So me tests, such as performance tests and\nusability tests, verify that the application satisfies its quality of service requirements. In\nthis chapter, I focus on automated tests that verify the functional aspects of the appli-\ncation or service. I describe how to write four different types of tests:\n\uf0a1 Unit tests\u2014Test a small part of a service, such as a class.\n\uf0a1 Integration tests \u2014Verify that a service can interact with infrastructure services\nsuch as databases and other application services.\n\uf0a1 Component tests\u2014Acceptance tests for an individual service.\n\uf0a1 End-to-end tests\u2014Acceptance tests for the entire application.\nThey differ primarily in scope. At one end of the spectrum are unit tests, which verify\nbehavior of the smallest meaningful prog ram element. For an object-oriented lan-\nguage such as Java, that\u2019s a class. At the other end of the spectrum are end-to-end\ntests, which verify the behavior of an entire application. In the middle are component\ntests, which test individual services. Integration tests, as you\u2019ll see in the next chapter,\nhave a relatively small scope, but they\u2019re more complex than pure unit tests. Scope is\nonly one way of characterizing tests. Another way is to use the test quadrant.\nUSING THE TEST QUADRANT TO CATEGORIZE TESTS\nA good way to categorize tests is Brian Marick\u2019s test quadrant (www.exampler.com/old-\nblog/2003/08/21/#agile-testing-project-1). The test quadrant, shown in figure 9.4,\ncategorizes tests along two dimensions:\n\uf0a1 Whether the test is business facing or technology facing \u2014A business-facing test is\ndescribed using the terminology of a domain expert, whereas a technology-facing\ntest is described using the terminology of developers and the implementation.\n\uf0a1 Whether the goal of the test is to support programming or critique the application\u2014Devel-\nopers use tests that support programming as part of their daily work. Tests that\ncritique the application aim to identify areas that need improvement.\nCompile-time unit tests\nTesting is an integral part of development . The modern development workflow is to\nedit code, then run tests. Moreover, if you\u2019re a Test-Driven Development (TDD) prac-\ntitioner, you develop a new feature or fix a bug by first writing a failing test and then\nwriting the code to make it pass. Even if you\u2019re not a TDD adherent, an excellent way\nto fix a bug is to write a test that r eproduces the bug and then write the code that\nfixes it.\nThe tests that you run as part of this workflow are known as compile-time tests. In a\nmodern IDE, such as IntelliJ IDEA or Eclipse, you typically don\u2019t compile your code as\na separate step. Rather, you use a single keystroke to compile the code and run the\ntests. In order to stay in the flow, these tests need to execute quickly\u2014ideally, no\nmore than a few seconds.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2918, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6b61ca75-aa21-43f8-9cf5-c795604df287": {"__data__": {"id_": "6b61ca75-aa21-43f8-9cf5-c795604df287", "embedding": null, "metadata": {"page_label": "298", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7407748-41e9-4fc7-81d9-a33d7fa159fe", "node_type": "4", "metadata": {"page_label": "298", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b004d36c69e1d76bb075f16db6acd91e7b257d4cd3975ad18f77d46f9d2d3237", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "298 CHAPTER 9 Testing microservices: Part 1\nThe test quadrant defines four different categories of tests:\n\uf0a1 Q1\u2014Support programming/technology facing: unit and integration tests\n\uf0a1 Q2\u2014Support programming/business facing: component and end-to-end test\n\uf0a1 Q3\u2014Critique application/business facing : usability and exploratory testing\n\uf0a1 Q4\u2014Critique application/technology facing: nonfunctional acceptance tests such\nas performance tests\nThe test quadrant isn\u2019t the only way of organizing tests. There\u2019s also the test pyramid,\nwhich provides guidance on how many tests of each type to write. \nUSING THE TEST PYRAMID AS A GUIDE TO FOCUSING YOUR TESTING EFFORTS\nWe must write different kinds of tests in order to be confident that our application\nworks. The challenge, though, is that th e execution time and complexity of a test\nincrease with its scope. Also, the larger the scope of a test and the more moving parts\nit has, the less reliable it becomes. Unreliable tests are almost as bad as no tests,\nbecause if you can\u2019t trust a test, you\u2019re likely to ignore failures.\n On one end of the spectrum are unit te sts for individual classes. They\u2019re fast to\nexecute, easy to write, and reliable. At the other end of the spectrum are end-to-end\ntests for the entire application. These tend to be slow, difficult to write, and often\nunreliable because of their complexity. Because we don\u2019t have unlimited budget for\ndevelopment and testing, we want to focus on writing tests that have small scope with-\nout compromising the effectiveness of the test suite.\n The test pyramid, shown in figure 9.5, is a good guide (https://martinfowler.com/\nbliki/TestPyramid.html). At the base of the pyramid are the fast, simple, and reliable\nunit tests. At the top of the pyramid are the slow, complex, and brittle end-to-end tests.\nLike the USDA food pyramid, although more useful and less controversial (https://en\n.wikipedia.org/wiki/History_of_USDA_nutrition_guides), the test pyramid describes\nthe relative proportions of each type of test.\n The key idea of the test pyramid is that as we move up the pyramid we should write\nfewer and fewer tests. We should write lots of unit tests and very few end-to-end tests.\nQ2 AUTOMATED Q3 MANUAL\nBusiness facing\nTechnology facing\nSupport programming\nCritique project\nQ1 AUTOMATED Q4 MANUAL/\nAUTOMATED\nFunctional/\nacceptance tests\nExploratory\ntesting, usability\ntesting\nUnit,\nintegration,\ncomponent\nNon-functional\nacceptance tests:\nperformance\nand more\nFigure 9.4 The test quadrant categorizes tests along \ntwo dimensions. The first dimension is whether a test \nis business facing or technology facing. The second is \nwhether the purpose of the test is to support \nprogramming or critique the application.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2721, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86ae4a05-c444-44fe-8f13-aeff778b2ffb": {"__data__": {"id_": "86ae4a05-c444-44fe-8f13-aeff778b2ffb", "embedding": null, "metadata": {"page_label": "299", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c68e3d7f-d87e-477e-b4e0-6d8b343df819", "node_type": "4", "metadata": {"page_label": "299", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a43ade0ec900b14364e62fad37ce53db529c0a6db182ba6f10e81112e57b9ecf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "299Testing strategies for microservice architectures\nAs you\u2019ll see in this chapter, I describe a strategy that emphasizes testing the pieces of\na service. It even minimizes the number of component tests, which test an entire service.\n It\u2019s clear how to test individual microservices such as Consumer Service, which\ndon\u2019t depend on any other services. But what about services such as Order Service,\nthat do depend on numerous other servic es? And how can we be confident that the\napplication as a whole works? This is the key challenge of testing applications that\nhave a microservice architecture. The complexity of testing has moved from the\nindividual services to the interactions betw een them. Let\u2019s look at how to tackle this\nproblem. \n9.1.2 The challenge of testing microservices\nInterprocess communication plays a much more important role in a microservices-\nbased application than in a monolithic ap plication. A monolithic application might\ncommunicate with a few external clients and services. For example, the monolithic\nversion of the FTGO application uses a fe w third-party web services, such as Stripe\nfor payments, Twilio for messaging, and Amazon SES for email, which have stable\nAPIs. Any interaction between the modules of the application is through program-\nming language-based APIs. Interprocess communication is very much on the edge\nof the application.\n In contrast, interprocess communication is central to microservice architecture. A\nmicroservices-based application is a distributed system. Teams are constantly develop-\ning their services and evolving their APIs. It \u2019s essential that developers of a service\nwrite tests that verify that their service interacts with its dependencies and clients.\n As described in chapter 3, services co mmunicate with each other using a variety\nof interaction styles and IPC mechanisms. Some services use request/response-style\ninteraction that\u2019s implemented using a synchronous protocol, such as REST or gRPC.\nEnd-to-end\nSlow, brittle, costly\nFast, reliable, cheap\nComponent\nIntegration\nUnit\nAcceptance tests for\nan application\nAcceptance tests\nfor a service\nVerify that a service\ncommunicates with\nits dependencies\nTest the business logic\nFigure 9.5 The test pyramid describes the re lative proportions of each type of test that \nyou need to write. As you move up the pyramid, you should write fewer and fewer tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2379, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1cb6d61b-6a88-4243-b6ef-73894621dcdb": {"__data__": {"id_": "1cb6d61b-6a88-4243-b6ef-73894621dcdb", "embedding": null, "metadata": {"page_label": "300", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcc53ec0-55bc-4583-92ae-9effbdfd9cf8", "node_type": "4", "metadata": {"page_label": "300", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "13956c644ef3b4db16c90868bafea76a6f04d0013c06aaf7b6f0cb2ccff59a35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "300 CHAPTER 9 Testing microservices: Part 1\nOther services interact through request/ asynchronous reply or publish/subscribe\nusing asynchronous messaging. For instance, figure 9.6 shows how some of the ser-\nvices in the FTGO application communicate. Each arrow points from a consumer ser-\nvice to a producer service.\nThe arrow points in the direction of the dependency, from the consumer of the API\nto the provider of the API. The assumpti ons that a consumer makes about an API\ndepend on the nature of the interaction:\n\uf0a1 REST client \uf0ae service \u2014The API gateway routes requests to services and imple-\nments API composition.\n\uf0a1 Domain event consumer \uf0ae publisher\u2014 Order History Service consumes events pub-\nlished by Order Service.\n\uf0a1 Command message requestor \uf0ae replier \u2014 Order Service sends command messages\nto various services and consumes the replies.\nREST client REST service\nKey\nSubscriber Domain event\npublisher\n(Command message)\nrequestor Replier\nE\nE\nE\nE\nE\nC\nC\nC\nC\nRestaurant\nService\nConsumer\nService\nOrder History\nService\nDelivery\nService\nAPI\ngateway\nInvokes services\nusing HTTP\nSubscribes to\norder* events\nOrder Service saga\nsends commands\nto various services.\nAccounting\nService\nOrder\nService\nKitchen\nService\nFigure 9.6 Some of the interservice communicat ion in the FTGO application. Each arrow points \nfrom a consumer service to a producer service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1356, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa480a05-09b2-4e24-be40-7fce4c27e6ed": {"__data__": {"id_": "aa480a05-09b2-4e24-be40-7fce4c27e6ed", "embedding": null, "metadata": {"page_label": "301", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b05161e4-ffaf-48d9-8698-e92587c730dd", "node_type": "4", "metadata": {"page_label": "301", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0f2b9d39ab165b4a8f9045dab58e860c3c1704950feabbd9ee0e2df263ff9c50", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "301Testing strategies for microservice architectures\nEach interaction between a pair of servic es represents an agreement or contract\nbetween the two services. Order History Service and Order Service must, for exam-\nple, agree on the event message structure and the channel that they\u2019re published to.\nSimilarly, the API gateway an d the services must agree on the REST API endpoints.\nAnd Order Service and each service that it invokes using asynchronous request/\nresponse must agree on the command cha nnel and the format of the command and\nreply messages.\n As a developer of a service, you need to be confident that the services you consume\nhave stable APIs. Similarly, you don\u2019t want to unintentionally make breaking changes\nto your service\u2019s API. For example, if you\u2019re working on Order Service, you want to be\nsure that the developers of your service\u2019s dependencies, such as Consumer Service and\nKitchen Service, don\u2019t change their APIs in ways that are incompatible with your ser-\nvice. Similarly, you must ensure that you don\u2019t change the Order Services\u2019s API in a\nway that breaks the API Gateway or Order History Service.\n One way to verify that two services can interact is to run both services, invoke an API\nthat triggers the communication, and verify that it has the expected outcome. This will\ncertainly catch integration problems, but it\u2019s  basically an end-to-end. The test likely\nwould need to run numerous other transitive dependencies of those services. A test\nmight also need to invoke complex, high-level functionality such as business logic, even\nif its goal is to test relatively low-level IPC. It\u2019s best to avoid writing end-to-end tests like\nthese. Somehow, we need to write faster, simpler, and more reliable tests that ideally test\nservices in isolation. The solution is to use what\u2019s known as consumer-driven contract testing.\nCONSUMER-DRIVEN CONTRACT TESTING\nImagine that you\u2019re a member of the team developing API Gateway, described in chap-\nter 8. The API Gateway\u2019s OrderServiceProxy invokes various REST endpoints, includ-\ning the GET /orders/{orderId} endpoint. It\u2019s essential that we write tests that verify that\nAPI Gateway and Order Service agree on an API. In the terminology of consumer con-\ntract testing, the two services participate in a consumer-provider relationship. API Gateway is\na consumer, and Order Service is a provider. A consumer contract test is an integration\ntest for a provider, such as Order Service, that verifies that its API matches the expecta-\ntions of a consumer, such as API Gateway.\n A consumer contract test focuses on veri fying that the \u201cshape\u201d of a provider\u2019s API\nmeets the consumer\u2019s expectations. For a REST endpoint, a contract test verifies that\nthe provider implements an endpoint that\n\uf0a1 Has the expected HTTP method and path\n\uf0a1 Accepts the expected headers, if any\n\uf0a1 Accepts a request body, if any\n\uf0a1 Returns a response with the expected status code, headers, and body\nIt\u2019s important to remember that contract tests don\u2019t thoroughly test the provider\u2019s\nbusiness logic. That\u2019s the job of unit tests. Later on, you\u2019ll see that consumer contract\ntests for a REST API are in fact mock controller tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3169, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8338cc79-18a3-4deb-b0a5-1b347cad5b89": {"__data__": {"id_": "8338cc79-18a3-4deb-b0a5-1b347cad5b89", "embedding": null, "metadata": {"page_label": "302", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e64f90f0-707d-4736-bb94-31c84170a58e", "node_type": "4", "metadata": {"page_label": "302", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "803e40a6f78b752c5cf579d1bc26b1089c93602c4ceee9054e620372c3be0400", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "302 CHAPTER 9 Testing microservices: Part 1\n The team that develops the consumer writ es a contract test suite and adds it (for\nexample, via a pull request) to the provider\u2019s  test suite. The developers of other ser-\nvices that invoke Order Service also contribute a test suit e, as shown in figure 9.7.\nEach test suite will test those aspects of Order Service\u2019s API that are relevant to each\nconsumer. The test suite for Order History Service, for example, verifies that Order\nService publishes the expected events.\nThese test suites are executed by the deployment pipeline for Order Service. If a con-\nsumer contract test fails, that failure tells the producer team that they\u2019ve made a break-\ning change to the API. They must either fix the API or talk to the consumer team.\nConsumer-driven contract tests typically use testing by example. The interaction\nbetween a consumer and provider is defined by a set of examples, known as contracts.\nEach contract consists of example messages that are exchanged during one interaction.\nPattern: Consumer-driven contract test\nVerify that a service meets the expectations of its clients See http://microser-\nvices.io/patterns/testing/service-integration-contract-test.html.\nAPI gateway team\nWrites\nOrder Service deployment pipeline\nOrder\nService\nAPI gateway -\nOrder Service\ncontract test\nsuite\nOrder History Service team\nWrites\nTestsTests Tests\nOrder History\nService - Order\nService contract\ntest suite\n... Service team\nWrites\n... Service -\nOrder Service\ncontract test\nsuite\nFigure 9.7 Each team that develops a service that consumes Order Service\u2019s API contributes \na contract test suite. The test suite verifies that the API matches the consumer\u2019s expectations. \nThis test suite, along with those contributed by other teams, is run by Order Service\u2019s \ndeployment pipeline.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1815, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c4c52f8-5a79-4885-a223-867f9e5ca03e": {"__data__": {"id_": "0c4c52f8-5a79-4885-a223-867f9e5ca03e", "embedding": null, "metadata": {"page_label": "303", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3cb30127-fb39-4b12-850e-8400dd346fff", "node_type": "4", "metadata": {"page_label": "303", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cf9db45cab8af1807948ac1f956ae5dc108d7c742536d3603224774bd17f9d63", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "303Testing strategies for microservice architectures\nFor instance, a contract for a REST API consists of an example HTTP request and\nresponse. On the surface, it may seem bette r to define the interaction using schemas\nwritten using, for example, OpenAPI or JSON schema. But it turns out schemas aren\u2019t\nthat useful when writing tests. A test can validate the response using the schema but it\nstill needs to invoke the provider with an example request.\n What\u2019s more, consumer tests also need example responses. That\u2019s because even\nthough the focus of consumer-driven contract  testing is to test a provider, contracts\nare also used to verify that the consumer  conforms to the contract. For instance, a\nconsumer-side contract test for a REST client uses the contract to configure an HTTP\nstub service that verifies that the HTTP request matches the contract\u2019s request and\nsends back the contract\u2019s HTTP response. Testing both sides of interaction ensures\nthat the consumer and provider agree on th e API. Later on we\u2019ll look at examples of\nhow to write this kind of testing, but first let\u2019s see how to write consumer contract tests\nusing Spring Cloud Contract.\nTESTING SERVICES USING SPRING CLOUD CONTRACT\nTwo popular contract testing frameworks are Spring Cloud Contract ( https://cloud\n.spring.io/spring-cloud-contract/), which is a consumer contract testing framework\nfor Spring applications, and the Pact family of frameworks (https://github.com/pact-\nfoundation), which support a variety of languages. The FTGO application is a Spring\nframework-based application, so in this chapter I\u2019m going to describe how to use\nSpring Cloud Contract. It provides a Groovy domain-specific language (DSL) for writ-\ning contracts. Each contract is a concrete  example of an interaction between a con-\nsumer and a provider, such as an HTTP request and response. Spring Cloud Contract\ncode generates contract tests for the provid er. It also configures mocks, such as a\nmock HTTP server, for consumer integration tests.\n Say, for example, you\u2019re working on API Gateway and want to write a consumer\ncontract test for Order Service. Figure 9.8 shows the process, which requires you to col-\nlaborate with Order Service teams. You write contracts that define how API Gateway\ninteracts with Order Service. The Order Service team uses these contracts to test Order\nService, and you use them to test API Gateway. The sequence of steps is as follows:\n1 You write one or more contracts, such as the one shown in listing 9.1. Each con-\ntract consists of an HTTP request that API Gateway might send to Order Service\nand an expected HTTP response. You give the contracts, perhaps via a Git pull\nrequest, to the Order Service team.\n2 The Order Service team tests Order Service using consumer contract tests,\nwhich Spring Cloud Contract code generates from contracts.\nPattern: Consumer-side contract test\nVerify that the client of a service c an communicate with the service. See https://\nmicroservices.io/patterns/testing/consumer-side-contract-test.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3029, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2150910c-95d6-49d8-a9b5-57279512d9df": {"__data__": {"id_": "2150910c-95d6-49d8-a9b5-57279512d9df", "embedding": null, "metadata": {"page_label": "304", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb01cb13-263b-4b9d-88b2-35435ebcdfa7", "node_type": "4", "metadata": {"page_label": "304", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4f4a063480ecd0c1f1e7f51c05f68e764afc4cb4cb18048cd7f4e1e1167b9716", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "304 CHAPTER 9 Testing microservices: Part 1\n3 The Order Service team publishes the contracts that tested Order Service to a\nMaven repository.\n4 You use the published contracts to write tests for API Gateway.\nBecause you test API Gateway using the published contracts, you can be confident that\nit works with the deployed Order Service.\n The contracts are the key part of this testing strategy. The following listing shows an\nexample Spring Cloud Contract. It consists of an HTTP request and an HTTP response.\norg.springframework.cloud.contract.spec.Contract.make {\nrequest {                    \nmethod 'GET'\nurl '/orders/1223232'\n}\nresponse {        \nstatus 200\nheaders {\nheader('Content-Type': 'application/json;charset=UTF-8')\n}\nbody(\"{ ... }\")\n}\n}\nListing 9.1 A contract that describes how API Gateway invokes Order Service\nWrites Code generated\nfrom\nContract.make {\nrequest {..}\nresponse {...}\n}\n}\nOrder Service\nconsumer\ncontract tests\nAPI gateway\nAPI gateway team\nReads\nTests\nDevelops Tests\nDevelops\nPublishes\nPublished\ncontract\nMaven repository\nOrder\nService\nOrder Service team\nAPI gateway\nintegration test\nFigure 9.8 The API Gateway team writes the contracts. The Order Service team \nuses those contracts to test Order Service and publishes them to a repository. The \nAPI Gateway team uses the published contracts to test API Gateway.\nThe HTTP request\u2019s \nmethod and path\nThe HTTP response\u2019s status \ncode, headers, and body", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1429, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c46d50a6-416d-4789-bf64-5f0e49d849cc": {"__data__": {"id_": "c46d50a6-416d-4789-bf64-5f0e49d849cc", "embedding": null, "metadata": {"page_label": "305", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "694d0cfe-3170-4bc4-afd5-98f9290a15fe", "node_type": "4", "metadata": {"page_label": "305", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c63938216ceb5af6fe9de426d0a5e53af02b41b79fb0f56b20a13f2d3cae9ca3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "305Testing strategies for microservice architectures\nThe request element is an HTTP request for the REST endpoint GET /orders/\n{orderId}. The response element is an HTTP response that describes an Order\nexpected by API Gateway. The Groovy contracts are part of the provider\u2019s code base.\nEach consumer team writes contracts that  describe how their service interacts with\nthe provider and gives them, perhaps via a Git pull request, to the provider team.\nThe provider team is responsible for pack aging the contracts as a JAR and publish-\ning them to a Maven repository. The consumer-side tests download the JAR from the\nrepository.\n Each contract\u2019s request and response play  dual roles of test data and the specifi-\ncation of expected behavior. In a consumer-s ide test, the contract is used to config-\nure a stub, which is similar to a Mockito mock object and simulates the behavior of\nOrder Service. It enables API Gateway to be tested without running Order Service.\nIn the provider-side test, the generated test  class invokes the provider with the con-\ntract\u2019s request and verifies that it retu rns a response that matches the contract\u2019s\nresponse. The next chapter discusses the details of how to use Spring Cloud Con-\ntract, but now we\u2019re going to look at how to use consumer contract testing for mes-\nsaging APIs. \nCONSUMER CONTRACT TESTS FOR MESSAGING APIS\nA REST client isn\u2019t the only kind of consumer that has expectations of a provider\u2019s API.\nServices that subscribe to domain events and use asynchronous request/response-based\ncommunication are also consumers. They  consume some other service\u2019s messaging\nAPI, and make assumptions about the nature  of that API. We must also write con-\nsumer contract tests for these services.\n Spring Cloud Contract also provides s upport for testing messaging-based interac-\ntions. The structure of a contract and how it\u2019s used by the tests depend on the type of\ninteraction. A contract for domain event publishing consists of an example domain\nevent. A provider test causes the provider to emit an event and verifies that it matches\nthe contract\u2019s event. A consumer test verifies that the consumer can handle that event.\nIn the next chapter, I describe an example test.\n A contract for an asynchronous reques t/response interaction is similar to an\nHTTP contract. It consists of a request message and a response message. A provider\ntest invokes the API with the contract\u2019s request message and verifies that the response\nmatches the contract\u2019s response. A consumer test uses the contract to configure a stub\nsubscriber, which listens for the contract\u2019s request message and replies with the speci-\nfied response. The next chapter discusses an example test. But first we\u2019ll take a look at\nthe deployment pipeline, which runs these and other tests. \n9.1.3 The deployment pipeline\nEvery service has a deployment pipeline. Jez Humble\u2019s book, Continuous Delivery\n(Addison-Wesley, 2010) describes a deployment pipeline as the automated process of get-\nting code from the developer\u2019s desktop into production. As figure 9.9 shows, it consists", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3081, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "feabdc27-fef5-447e-9c17-8416e08e8506": {"__data__": {"id_": "feabdc27-fef5-447e-9c17-8416e08e8506", "embedding": null, "metadata": {"page_label": "306", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9bf6445d-3ad4-4c10-9f55-264080c9663a", "node_type": "4", "metadata": {"page_label": "306", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d3ba23e05b310ca1a8a6f38b4ffcbce03acf1fb70e25f8f329d1327b5d522790", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "306 CHAPTER 9 Testing microservices: Part 1\nof a series of stages that execute test suites, followed by a stage that releases or deploys\nthe service. Ideally, it\u2019s fully automated, but it might contain manual steps. A deploy-\nment pipeline is often implemented using a Continuous Integration (CI) server, such\nas Jenkins.\nAs code flows through the pipeline, the test suites subject it to increasingly more thor-\nough testing in environments that are more  production like. At the same time, the\nexecution time of each test suite typically grows. The idea is to provide feedback about\ntest failures as rapidly as possible.\n The example deployment pipeline shown in  figure 9.9 consists of the following\nstages:\n\uf0a1 Pre-commit tests stage \u2014Runs the unit tests. This is executed by the developer\nbefore committing their changes.\n\uf0a1 Commit tests stage\u2014Compiles the service, runs the unit tests, and performs static\ncode analysis.\n\uf0a1 Integration tests stage\u2014Runs the integration tests.\n\uf0a1 Component tests stage\u2014Runs the component tests for the service.\n\uf0a1 Deploy stage\u2014Deploys the service into production.\nThe CI server runs the commit stage when a developer commits a change. It executes\nextremely quickly, so it provides rapid feedback about the commit. The later stages\ntake longer to run, providing less immediat e feedback. If all the tests pass, the final\nstage is when this pipeline deploys it into production.\n In this example, the deployment pipeline is fully automated all the way from com-\nmit to deployment. There are,  however, situations that require manual steps. For\nexample, you might need a manual testing stage, such as a staging environment. In\nsuch a scenario, the code progresses to the next stage when a tester clicks a button to\nindicate that it was successful. Alternatively, a deployment pipeline for an on-premise\nPre-commit\ntests\nSlow feedbackFast feedback\nProduction\nready\nNot production\nready\nCommit\ntests\nstage\nDeployment pipeline\nIntegration\ntests\nstage\nComponent\ntests\nstage\nProduction\nenvironment\nDeploy\nstage\nFigure 9.9 An example deployment pipeline for Order Service. It consists of a series of stages. \nThe pre-commit tests are run by the developer prior to committing their code. The remaining stages \nare executed by an automated tool, such as the Jenkins CI server.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2295, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "74e1cd37-afe3-418a-9d6c-26959874dfa1": {"__data__": {"id_": "74e1cd37-afe3-418a-9d6c-26959874dfa1", "embedding": null, "metadata": {"page_label": "307", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f8470f0-98d7-4937-adb6-e97fd218e007", "node_type": "4", "metadata": {"page_label": "307", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d413b064a9db7f604d04e79ecbbdef05c0c3cf92af4a14d713411145570a0cc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "307Writing unit tests for a service\nproduct would release the new version of th e service. Later on, the released services\nwould be packaged into a product release and shipped to customers.\n Now that we\u2019ve looked at the organization of the deployment pipeline and when it\nexecutes the different types of tests, let\u2019s head to the bottom of the test pyramid and\nlook at how to write unit tests for a service. \n9.2 Writing unit tests for a service\nImagine that you want to write a test th at verifies that the FTGO application\u2019s Order\nService correctly calculates the subtotal of an Order. You could write tests that run\nOrder Service, invoke its REST API to create an Order, and check that the HTTP\nresponse contains the expected values. The drawback of this approach is that not only\nis the test complex, it\u2019s also slow. If th ese tests were the compile-time tests for the\nOrder class, you\u2019d waste a lot of time waiting for it to finish. A much more productive\napproach is to write unit tests for the Order class.\n As figure 9.10 shows, unit tests are the lowest level of the test pyramid. They\u2019re\ntechnology-facing tests that support development. A unit test verifies that a unit, which\nis a very small part of a service, works correctly. A unit is typically a class, so the goal of\nunit testing is to verify that it behaves as expected.\nEnd-to-end\nComponent\nIntegration\nUnit\nStub/mock\ndependency 1\nStub/mock\ndependency 2\nStub/mock\ndependency\n...\nDependency 1\nDependency 2\nDependency\n...\nSolitary\nunit test\nTests\nClass\nSocial\nunit test\nTests\nClass\nFigure 9.10 Unit tests are the base of the pyramid. They\u2019re fast running, easy to write, and reliable. \nA solitary unit test tests a class in isolation, using mocks or stubs for its dependencies. A sociable \nunit test tests a class and its dependencies.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1801, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ffce446f-8365-4101-99e9-3bbc23436ccc": {"__data__": {"id_": "ffce446f-8365-4101-99e9-3bbc23436ccc", "embedding": null, "metadata": {"page_label": "308", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef298f84-d704-471d-b77a-2bc3ff127838", "node_type": "4", "metadata": {"page_label": "308", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ce9126fe08d1d855f0ee9c4a211bcd78c16a0ebb20ee2e084e7f8ea0932264ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "308 CHAPTER 9 Testing microservices: Part 1\nThere are two types of unit tests (https://martinfowler.com/bliki/UnitTest.html):\n\uf0a1 Solitary unit test \u2014Tests a class in isolation using mock objects for the class\u2019s\ndependencies\n\uf0a1 Sociable unit test\u2014Tests a class and its dependencies\nThe responsibilities of the class and its role in the architecture determine which type\nof test to use. Figure 9.11 shows the hexagonal architecture of a typical service and the\ntype of unit test that you\u2019ll typically use for each kind of class. Controller and service\nclasses are often tested using solitary unit te sts. Domain objects, such as entities and\nvalue objects, are typically tested using sociable unit tests.\n\u00abMessage Channel\u00bb\n\u00abMessage Channel\u00bb\nPOST/something\nGET/something/id\nDomain logic\nService\nEntity\nSolitary\nunit test\nSociable\nunit test\nValue\nobject\nSaga\nInbound\nmessage\nadapter\nOutbound\nmessage\nadapter\nDatabase\nadapter\nDatabase\nRepository\nController\nSolitary\nunit test\nFigure 9.11 The responsibilities of a class determine w hether to use a solitary or sociable unit test.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1072, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "81b9625c-a7e9-40cf-ab50-aef2606d8788": {"__data__": {"id_": "81b9625c-a7e9-40cf-ab50-aef2606d8788", "embedding": null, "metadata": {"page_label": "309", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f826cc99-d876-4602-abbf-6fcdb1ee0a4d", "node_type": "4", "metadata": {"page_label": "309", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3dd73938b0906fb1069162c6abfe7775c5fd08fac8a264532521222dff6d86d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "309Writing unit tests for a service\nThe typical testing strategy for each class is as follows:\n\uf0a1 Entities, such as Order, which as described in chapter 5 are objects with per-\nsistent identity, are tested using sociable unit tests.\n\uf0a1 Value objects, such as Money, which as described in chapter 5 are objects that are\ncollections of values, are tested using sociable unit tests.\n\uf0a1 Sagas, such as CreateOrderSaga, which as described in chapter 4 maintain data\nconsistency across services, are tested using sociable unit tests.\n\uf0a1 Domain services, such as OrderService, which as described in chapter 5 are\nclasses that implement business logic that  doesn\u2019t belong in entities or value\nobjects, are tested using solitary unit tests.\n\uf0a1 Controllers, such as OrderController, which handle HTTP requests, are tested\nusing solitary unit tests.\n\uf0a1 Inbound and outbound messaging gateways are tested using solitary unit tests.\nLet\u2019s begin by looking at how to test entities.\n9.2.1 Developing unit tests for entities\nThe following listing shows an excerpt of OrderTest class, which implements the unit\ntests for the Order entity. The class has an @Before setUp() method that creates an Order\nbefore running each test. Its @Test methods might further initialize Order, invoke one of\nits methods, and then make assertions about the return value and the state of Order.\npublic class OrderTest {\nprivate ResultWithEvents<Order> createResult;\nprivate Order order;\n@Before\npublic void setUp() throws Exception {\ncreateResult = Order.createOrder(CONSUMER_ID, AJANTA_ID, CHICKEN_VINDALOO\n_LINE_ITEMS);\norder = createResult.result;\n}\n@Test\npublic void shouldCalculateTotal() {\nassertEquals(CHICKEN_VINDALOO_PRICE.multiply(CHICKEN_VINDALOO_QUANTITY),\norder.getOrderTotal());\n}\n...\n}\nThe @Test shouldCalculateTotal() method verifies that Order.getOrderTotal()\nreturns the expected value. Unit tests thor oughly test the business logic. They are\nListing 9.2 A simple, fast-running unit test for the Order entity", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1986, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e103ae29-5f64-4ff8-a098-601a8162c74f": {"__data__": {"id_": "e103ae29-5f64-4ff8-a098-601a8162c74f", "embedding": null, "metadata": {"page_label": "310", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32675069-43d0-4244-a639-559f512a1471", "node_type": "4", "metadata": {"page_label": "310", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ad4047f872b7eb0bc7c4cef6690915e0f0e6d7bbe1fe49f2a983d2d0b1e0724b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "310 CHAPTER 9 Testing microservices: Part 1\nsociable unit tests for the Order class and its dependencies. You can use them as\ncompile-time tests because they execute extremely quickly. The Order class relies on\nthe Money value object, so it\u2019s important to test that class as well. Let\u2019s see how to do that. \n9.2.2 Writing unit tests for value objects\nValue objects are immutable, so they tend to  be easy to test. You don\u2019t have to worry\nabout side effects. A test for a value object typically creates a value object in a particu-\nlar state, invokes one of its methods, and makes assertions about the return value. List-\ning 9.3 shows the tests for the Money value object, which is a simple class that\nrepresents a money value. These tests verify the behavior of the Money class\u2019s methods,\nincluding add(), which adds two Money objects, and multiply(), which multiplies a\nMoney object by an integer. They are solitary tests because the Money class doesn\u2019t\ndepend on any other application classes.\npublic class MoneyTest {\nprivate final int M1_AMOUNT = 10;\nprivate final int M2_AMOUNT = 15;\nprivate Money m1 = new Money(M1_AMOUNT);\nprivate Money m2 = new Money(M2_AMOUNT);\n@Test\npublic void shouldAdd() {          \nassertEquals(new Money(M1_AMOUNT + M2_AMOUNT), m1.add(m2));\n}\n@Test\npublic void shouldMultiply() {     \nint multiplier = 12;\nassertEquals(new Money(M2_AMOUNT * multiplier), m2.multiply(multiplier));\n}\n...\n}\nEntities and value objects are the building blocks of a service\u2019s business logic. But\nsome business logic also resides in the service\u2019s sagas and services. Let\u2019s look at how to\ntest those. \n9.2.3 Developing unit tests for sagas\nA saga, such as the CreateOrderSaga class, implements important business logic, so\nneeds to be tested. It\u2019s a persistent object that sends command messages to saga partic-\nipants and processes their replie s. As described in chapter 4, CreateOrderSaga\nexchanges command/reply messages with several services, such as Consumer Service\nand Kitchen Service. A test for this class creates a saga and verifies that it sends the\nListing 9.3 A simple, fast-running test for the Money value object\nVerify that two \nMoney objects can \nbe added together.\nVerify that a Money \nobject can be multiplied \nby an integer.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d393d29f-5db5-40b3-b4f9-f55645a5794d": {"__data__": {"id_": "d393d29f-5db5-40b3-b4f9-f55645a5794d", "embedding": null, "metadata": {"page_label": "311", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d56f6d5-b8bb-42e7-9119-27c2c5840963", "node_type": "4", "metadata": {"page_label": "311", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "813e9e8716433b1b5954b2028e9067a9c0c137038320cdfc54a8705e5504a77b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "311Writing unit tests for a service\nexpected sequence of messages to the saga participants. One test you need to write is\nfor the happy path. You must also write te sts for the various scenarios where the saga\nrolls back because a saga participant sent back a failure message.\n One approach would be to write tests that use a real database and message broker\nalong with stubs to simulate the various saga participants. For example, a stub for\nConsumer Service would subscribe to the consumerService command channel and\nsend back the desired reply message. But te sts written using this approach would be\nquite slow. A much more effective approach is to write tests that mock those classes\nthat interact with the database and message broker. That way, we can focus on testing\nthe saga\u2019s core responsibility.\n Listing 9.4 shows a test for CreateOrderSaga. It\u2019s a sociable unit test that tests the\nsaga class and its dependencies. It\u2019s written using the Eventuate Tram Saga testing\nframework ( https://github.com/eventuate-tram/eventuate-tram-sagas). This frame-\nwork provides an easy-to-use DSL that abstracts away the details of interacting with\nsagas. With this DSL, you can create a saga  and verify that it sends the correct com-\nmand messages. Under the covers, the Saga  testing framework configures the Saga\nframework with mocks for the database and messaging infrastructure.\npublic class CreateOrderSagaTest {\n@Test\npublic void shouldCreateOrder() {\ngiven()\n.saga(new CreateOrderSaga(kitchenServiceProxy),     \nnew CreateOrderSagaState(ORDER_ID,\nCHICKEN_VINDALOO_ORDER_DETAILS)).\nexpect().               \ncommand(new ValidateOrderByConsumer(CONSUMER_ID, ORDER_ID,\nCHICKEN_VINDALOO_ORDER_TOTAL)).\nto(ConsumerServiceChannels.consumerServiceChannel).\nandGiven().\nsuccessReply().                \nexpect().\ncommand(new CreateTicket(AJANTA_ID, ORDER_ID, null)).   \nto(KitchenServiceChannels.kitchenServiceChannel);\n}\n@Test\npublic void shouldRejectOrderDueToConsumerVerificationFailed() {\ngiven()\n.saga(new CreateOrderSaga(kitchenServiceProxy),\nnew CreateOrderSagaState(ORDER_ID,\nCHICKEN_VINDALOO_ORDER_DETAILS)).\nexpect().\ncommand(new ValidateOrderByConsumer(CONSUMER_ID, ORDER_ID,\nCHICKEN_VINDALOO_ORDER_TOTAL)).\nto(ConsumerServiceChannels.consumerServiceChannel).\nandGiven().\nListing 9.4 A simple, fast-running unit test for CreateOrderSaga\nCreate\nthe saga.\nVerify that it sends \na ValidateOrderBy-\nConsumer message \nto Consumer Service.\nSend a Success reply \nto that message.\nVerify that it sends \na CreateTicket \nmessage to \nKitchen Service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2545, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa5e4ada-0be8-4918-9017-43011be24329": {"__data__": {"id_": "fa5e4ada-0be8-4918-9017-43011be24329", "embedding": null, "metadata": {"page_label": "312", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3206fdbc-0ce4-4e93-a242-7e031572d3ed", "node_type": "4", "metadata": {"page_label": "312", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4f5e2ad2cf3d4b64793418e3f9e0bdd574ca6fac70acaa0253399c0fb2a56adc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "312 CHAPTER 9 Testing microservices: Part 1\nfailureReply().             \nexpect().\ncommand(new RejectOrderCommand(ORDER_ID)).\nto(OrderServiceChannels.orderServiceChannel);       \n}\n}\nThe @Test shouldCreateOrder() method tests the happy path. The @Test should-\nRejectOrderDueToConsumerVerificationFailed() method tests the scenario where\nConsumer Service rejects the order. It verifies that CreateOrderSaga sends a Reject-\nOrderCommand to compensate for the consumer being rejected. The CreateOrder-\nSagaTest class has methods that test other failure scenarios.\n Let\u2019s now look at how to test domain services. \n9.2.4 Writing unit tests for domain services\nThe majority of a service\u2019s business logic is implemented by the entities, value objects,\nand sagas. Domain service classes, such as the OrderService class, implement the\nremainder. This class is a typical domain service class. Its methods invoke entities and\nrepositories and publish domain events. An effective way to test this kind of class is to\nuse a mostly solitary unit test, which mock s dependencies such as repositories and\nmessaging classes.\n Listing 9.5 shows the OrderServiceTest class, which tests OrderService. It defines\nsolitary unit tests, which use Mockito mock s for the service\u2019s dependencies. Each test\nimplements the test phases as follows:\n1 Setup\u2014Configures the mock objects for the service\u2019s dependencies\n2 Execute\u2014Invokes a service method\n3 Verify\u2014Verifies that the value returned by the service method is correct and that\nthe dependencies have been invoked correctly\npublic class OrderServiceTest {\nprivate OrderService orderService;\nprivate OrderRepository orderRepository;\nprivate DomainEventPublisher eventPublisher;\nprivate RestaurantRepository restaurantRepository;\nprivate SagaManager<CreateOrderSagaState> createOrderSagaManager;\nprivate SagaManager<CancelOrderSagaData> cancelOrderSagaManager;\nprivate SagaManager<ReviseOrderSagaData> reviseOrderSagaManager;\n@Before\npublic void setup() {\norderRepository = mock(OrderRepository.class);         \neventPublisher = mock(DomainEventPublisher.class);\nrestaurantRepository = mock(RestaurantRepository.class);\nListing 9.5 A simple, fast-running unit test for the OrderService class\nSend a failure \nreply indicating \nthat Consumer \nService rejected \nOrder.Verify that the saga sends\na RejectOrderCommand\nmessage to Order Service.\nCreate Mockito \nmocks for \nOrderService\u2019s \ndependencies.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2419, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e10de3e-0ff9-4de5-a007-c78c1efb85db": {"__data__": {"id_": "4e10de3e-0ff9-4de5-a007-c78c1efb85db", "embedding": null, "metadata": {"page_label": "313", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1aab4aae-0cbc-42e1-b14e-bde25cdbae3d", "node_type": "4", "metadata": {"page_label": "313", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fb637df12ddd7ee25e2088f78a5f26b56eb5eadc4dac7a6e3cfc41da7bf094b9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "313Writing unit tests for a service\ncreateOrderSagaManager = mock(SagaManager.class);\ncancelOrderSagaManager = mock(SagaManager.class);\nreviseOrderSagaManager = mock(SagaManager.class);\norderService = new OrderService(orderRepository, eventPublisher,  \nrestaurantRepository, createOrderSagaManager,\ncancelOrderSagaManager, reviseOrderSagaManager);\n}\n@Test\npublic void shouldCreateOrder() {\nwhen(restaurantRepository        \n.findById(AJANTA_ID)).thenReturn(Optional.of(AJANTA_RESTAURANT_);\nwhen(orderRepository.save(any(Order.class))).then(invocation -> {  \nOrder order = (Order) invocation.getArguments()[0];\norder.setId(ORDER_ID);\nreturn order;\n});\nOrder order = orderService.createOrder(CONSUMER_ID,    \nAJANTA_ID, CHICKEN_VINDALOO_MENU_ITEMS_AND_QUANTITIES);\nverify(orderRepository).save(same(order));        \nverify(eventPublisher).publish(Order.class, ORDER_ID,     \nsingletonList(\nnew OrderCreatedEvent(CHICKEN_VINDALOO_ORDER_DETAILS)));\nverify(createOrderSagaManager)                   \n.create(new CreateOrderSagaState(ORDER_ID,\nCHICKEN_VINDALOO_ORDER_DETAILS),\nOrder.class, ORDER_ID);\n}\n}\nThe setUp() method creates an OrderService injected with mock dependencies.\nThe @Test shouldCreateOrder() method verifies that OrderService.createOrder()\ninvokes OrderRepository to save the newly created Order, publishes an OrderCreated-\nEvent, and creates a CreateOrderSaga.\n Now that we\u2019ve seen how to unit test the domain logic classes, let\u2019s look at how to\nunit test the adapters that interact with external systems. \n9.2.5 Developing unit tests for controllers\nServices, such as Order Service, typically have one or more controllers that handle\nHTTP requests from other services and the API gateway. A controller class consists of\na set of request handler methods. Each me thod implements a REST API endpoint. A\nmethod\u2019s parameters represent values from the HTTP request, such as path variables.\nIt typically invokes a domain service or a repository and returns a response object.\nCreate an OrderService injected\nwith mock dependencies.\nConfigure RestaurantRepository.findById() \nto return the Ajanta restaurant.\nConfigure OrderRepository.save()\nto set Order\u2019s ID.\n Invoke\nOrderService\n.create(). Verify that \nOrderService saved \nthe newly created \nOrder in the database.Verify that\nOrderService\npublished\nan Order-\nCreatedEvent. Verify that Order-\nService created a \nCreateOrderSaga.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2388, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aee719c0-f8e5-4d9f-b6fd-22631143b59d": {"__data__": {"id_": "aee719c0-f8e5-4d9f-b6fd-22631143b59d", "embedding": null, "metadata": {"page_label": "314", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f46a3057-5df1-4aa1-8613-aebbee04da65", "node_type": "4", "metadata": {"page_label": "314", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b48f46a07fff6bf4b2ad83ea7ba35e763f3e42cb36561ee45037e2df04c80278", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "314 CHAPTER 9 Testing microservices: Part 1\nOrderController, for instance, invokes OrderService and OrderRepository. An\neffective testing strategy for controllers is solitary unit tests that mock the services\nand repositories.\n You could write a test class similar to the OrderServiceTest class to instantiate a\ncontroller class and invoke its methods. Bu t this approach doesn\u2019t test some import-\nant functionality, such as request routing. It\u2019s much more effective to use a mock MVC\ntesting framework, such as Spring Mock Mv c, which is part of the Spring Framework,\nor Rest Assured Mock MVC, which builds on Spring Mock Mvc. Tests written using\none of these frameworks make what appear to be HTTP requests and make assertions\nabout HTTP responses. These frameworks en able you to test HTTP request routing\nand conversion of Java objects to and from JSON without having to make real network\ncalls. Under the covers, Spring Mock Mvc instantiates just enough of the Spring MVC\nclasses to make this possible.\nListing 9.6 shows the OrderControllerTest class, which tests Order Service\u2019s Order-\nController. It defines solitary unit tests that use mocks for OrderController\u2019s depen-\ndencies. It\u2019s written using Rest Assured Mock MVC , which provides a simple DSL that\nabstracts away the details of interacting with controllers. Rest Assured makes it easy to\nsend a mock HTTP request to a controller and verify the response. OrderController-\nTest creates a controller that\u2019s injected with Mockito mocks for OrderService and\nOrderRepository. Each test configures the mocks, makes an HTTP request, verifies that\nthe response is correct, and possibly verifies that the controller invoked the mocks.\npublic class OrderControllerTest {\nprivate OrderService orderService;\nprivate OrderRepository orderRepository;\n@Before\npublic void setUp() throws Exception {\norderService = mock(OrderService.class);       \norderRepository = mock(OrderRepository.class);\nAre these really unit tests?\nBecause these tests use the Spring Framework, you might argue that they\u2019re not unit\ntests. They\u2019re certainly more heavyweight than the unit tests I\u2019ve described so far.\nThe Spring Mock Mvc documentation refers to these as out-of-servlet-container inte-\ngration tests (https://docs.spring.io/spring/docs/current/spring-framework-reference/\ntesting.html#spring-mvc-test-vs-end-to-end-integration-tests). Yet Rest Assured Mock\nMVC describes these tests as unit tests ( https://github.com/rest-assured/rest-\nassured/wiki/Usage#spring-mock-mvc-module). Regardless of the debate over termi-\nnology, these are important tests to write.\nListing 9.6 A simple, fast-running unit test for the OrderController class\nCreate mocks for \nOrderController\u2019s \ndependencies.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2727, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9de05161-b2b4-408e-a862-b6011267e071": {"__data__": {"id_": "9de05161-b2b4-408e-a862-b6011267e071", "embedding": null, "metadata": {"page_label": "315", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ce2085c-8f89-4f34-8b35-b1c11c0698eb", "node_type": "4", "metadata": {"page_label": "315", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2f6bc893e27b4e113642f74e86c0f0a7d16f561c42b7de650916b6de7721ab42", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "315Writing unit tests for a service\norderController = new OrderController(orderService, orderRepository);\n}\n@Test\npublic void shouldFindOrder() {\nwhen(orderRepository.findById(1L))\n.thenReturn(Optional.of(CHICKEN_VINDALOO_ORDER_);    \ngiven().\nstandaloneSetup(configureControllers(       \nnew OrderController(orderService, orderRepository))).\nwhen().\nget(\"/orders/1\").     \nthen().\nstatusCode(200).    \nbody(\"orderId\",             \nequalTo(new Long(OrderDetailsMother.ORDER_ID).intValue())).\nbody(\"state\",\nequalTo(OrderDetailsMother.CHICKEN_VINDALOO_ORDER_STATE.name())).\nbody(\"orderTotal\",\nequalTo(CHICKEN_VINDALOO_ORDER_TOTAL.asString()))\n;\n}\n@Test\npublic void shouldFindNotOrder() { ... }\nprivate StandaloneMockMvcBuilder controllers(Object... controllers) { ... }\n}\nThe shouldFindOrder() test method first configures the OrderRepository mock to\nreturn an Order. It then makes an HTTP request to  retrieve the order. Finally, it\nchecks that the request was successful and that the response body contains the\nexpected data.\n Controllers aren\u2019t the only adapters that  handle requests from external systems.\nThere are also event/message handlers, so let\u2019s talk about how to unit test those. \n9.2.6 Writing unit tests for event and message handlers\nServices often process messages sent by external systems. Order Service, for example,\nhas OrderEventConsumer, which is a message adapter that handles domain events pub-\nlished by other services. Like controllers, me ssage adapters tend to be simple classes\nthat invoke domain services. Each of a message adapter\u2019s methods typically invokes a\nservice method with data from the message or event.\n We can unit test message adapters usin g an approach similar to the one we used\nfor unit testing controllers. Each test in stances the message adapter, sends a message\nto a channel, and verifies that the servic e mock was invoked correctly. Behind the\nConfigure the mock \nOrderRepository to \nreturn an Order.\nConfigure \nOrderController.\nMake an\nHTTP\nrequest.\nVerify the response \nstatus code.\nVerify\nelements\nof the JSON\nresponse\nbody.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2079, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10e3ff52-25bd-4d70-bfe1-f0116d03f5f5": {"__data__": {"id_": "10e3ff52-25bd-4d70-bfe1-f0116d03f5f5", "embedding": null, "metadata": {"page_label": "316", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0411985-37c7-40c3-b2b1-6f2cff2859b5", "node_type": "4", "metadata": {"page_label": "316", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1b2f15733b676112b986df9fb1bd4ecbacfee059eb4f4afcef222adcbed786b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "316 CHAPTER 9 Testing microservices: Part 1\nscenes, though, the messaging infrastructure  is stubbed, so no message broker is\ninvolved. Let\u2019s look at how to test the OrderEventConsumer class.\n Listing 9.7 shows part of the OrderEventConsumerTest class, which tests Order-\nEventConsumer. It verifies that OrderEventConsumer routes each event to the appro-\npriate handler method and correctly invokes OrderService. The test uses the\nEventuate Tram Mock Messaging framework,  which provides an easy-to-use DSL for\nwriting mock messaging tests that uses the same given-when-then format as Rest\nAssured. Each test instantiates OrderEventConsumer i n j e c t e d  w i t h  a  m o c k  Order-\nService, publishes a domain event, and verifies that OrderEventConsumer correctly\ninvokes the service mock.\npublic class OrderEventConsumerTest {\nprivate OrderService orderService;\nprivate OrderEventConsumer orderEventConsumer;\n@Before\npublic void setUp() throws Exception {\norderService = mock(OrderService.class);\norderEventConsumer = new OrderEventConsumer(orderService);   \n}\n@Test\npublic void shouldCreateMenu() {\ngiven().\neventHandlers(orderEventConsumer.domainEventHandlers()).  \nwhen().\naggregate(\"net.chrisrichardson.ftgo.restaurantservice.domain.Restaurant\",\nAJANTA_ID).\npublishes(new RestaurantCreated(AJANTA_RESTAURANT_NAME,   \nRestaurantMother.AJANTA_RESTAURANT_MENU))\nthen().\nverify(() -> {     \nverify(orderService)\n.createMenu(AJANTA_ID,\nnew RestaurantMenu(RestaurantMother.AJANTA_RESTAURANT_MENU_ITEMS));\n})\n;\n}\n}\nThe setUp() method creates an OrderEventConsumer injected with a mock Order-\nService. The shouldCreateMenu() method publishes a RestaurantCreated event\nand verifies that OrderEventConsumer invoked OrderService.createMenu(). The\nOrderEventConsumerTest class and the other unit test classes execute extremely quickly.\nThe unit tests run in just a few seconds.\nListing 9.7 A fast-running unit test for the OrderEventConsumer class\nInstantiate\nOrderEventConsumer with\nmocked dependencies.\nConfigure\nOrderEventConsumer\ndomain handlers.\nPublish a\nRestaurant-\nCreated\nevent. Verify that OrderEventConsumer \ninvoked OrderService.createMenu().", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2151, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d7f0feb-e490-41aa-bfcc-cf99427440d9": {"__data__": {"id_": "9d7f0feb-e490-41aa-bfcc-cf99427440d9", "embedding": null, "metadata": {"page_label": "317", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ebd2ec6-a3fc-4e15-a1f0-1d192b2a3b29", "node_type": "4", "metadata": {"page_label": "317", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "28b20e941463b40cfa554008dac9769e6ad247a2e37d9cd851135437b3a5170d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "317Summary\n But the unit tests don\u2019t verify that a service, such as Order Service, properly inter-\nacts with other services. For example, the unit tests don\u2019t verify that an Order can be\npersisted in MySQL. Nor do they verify that CreateOrderSaga sends command mes-\nsages in the right format to the right messag e channel. And they don\u2019t verify that the\nRestaurantCreated event processed by OrderEventConsumer has the same structure\nas the event published by Restaurant Service. In order to verify that a service prop-\nerly interacts with other services, we must write integration tests. We also need to write\ncomponent tests that test an entire servic e in isolation. The next chapter discusses\nhow to conduct those types of tests, as well as end-to-end tests. \nSummary\n\uf0a1 Automated testing is the key foundation of rapid, safe delivery of software.\nWhat\u2019s more, because of its inherent complexity, to fully benefit from the\nmicroservice architecture you must automate your tests.\n\uf0a1 The purpose of a test is to verify the behavior of the system under test (SUT). In\nthis definition, system is a fancy term that means the software element being\ntested. It might be something as small as a class, as large as the entire applica-\ntion, or something in between, such as a cluster of classes or an individual ser-\nvice. A collection of related tests form a test suite.\n\uf0a1 A good way to simplify and speed up a test is to use test doubles. A test double is\nan object that simulates the behavior  of a SUT\u2019s dependency. There are two\ntypes of test doubles: stubs and mocks. A stub is a test double that returns values\nto the SUT. A mock is a test double that  a test uses to verify that the SUT cor-\nrectly invokes a dependency.\n\uf0a1 Use the test pyramid to determine where to focus your testing efforts for your\nservices. The majority of your tests should be fast, reliable, and easy-to-write unit\ntests. You must minimize the number of end-to-end tests, because they\u2019re slow,\nbrittle, and time consuming to write.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2004, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06fcbdef-eea1-467e-a101-777449925acd": {"__data__": {"id_": "06fcbdef-eea1-467e-a101-777449925acd", "embedding": null, "metadata": {"page_label": "318", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4894b82c-9359-4d00-b7fc-c1c522101a93", "node_type": "4", "metadata": {"page_label": "318", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b7c7b7ed51a725e1cc7492031f066c2a73cb6a07a1570a94590fa276c2e9ea66", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "318\nTesting microservices:\nPart 2\nThis chapter builds on the previous chap ter, which introduced testing concepts,\nincluding the test pyramid. The test pyramid describes the relative proportions of\nthe different types of tests that you shou ld write. The previous chapter described\nhow to write unit tests, which are at the base of the testing pyramid. In this chapter,\nwe continue our ascent of the testing pyramid.\n This chapter begins with how to writ e integration tests, which are the level\nabove unit tests in the testing pyramid. Integration tests verify that a service can prop-\nerly interact with infrastructure services , such as databases, and other application\nservices. Next, I cover component tests, which are acceptance tests for services. A com-\nponent test tests a service in isolation by using stubs for its dependencies. After\nthat, I describe how to write end-to-end test s, which test a group of services or the\nThis chapter covers\n\uf0a1 Techniques for testing services in isolation\n\uf0a1 Using consumer-driven contract testing to write \ntests that quickly yet reliably verify interservice \ncommunication\n\uf0a1 When and how to do end-to-end testing of \napplications", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1174, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd6de242-7d63-4b36-85b6-9720e1661145": {"__data__": {"id_": "bd6de242-7d63-4b36-85b6-9720e1661145", "embedding": null, "metadata": {"page_label": "319", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d173d9ef-d7b7-4238-8130-1f33767ceea3", "node_type": "4", "metadata": {"page_label": "319", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d6d569d308a3c5eec0fa41a6a369c61b7858a62cf7937fca45532fda77f1023f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "319Writing integration tests\nentire application. End-to-end tests are at  the top of the test pyramid and should,\ntherefore, be used sparingly.\n Let\u2019s start by taking a look at how to write integration tests.\n10.1 Writing integration tests\nServices typically interact with other services. For example, Order Service, as fig-\nure 10.1 shows, interacts with several services. Its REST API is consumed by API Gateway,\nand its domain events are consumed by services, including Order History Service.\nOrder Service uses several other services. It persists Orders in MySQL. It also sends\ncommands to and consumes replies from several other services, such as Kitchen\nService.\nIn order to be confident that a service such as Order Service works as expected, we\nmust write tests that verify that the servic e can properly interact with infrastructure\nservices and other application services. One approach is to launch all the services and\ntest them through their APIs. This, however,  is what\u2019s known as end-to-end testing,\nwhich is slow, brittle, and costly. As explained in section 10.3, there\u2019s a role for end-to-end\nOrder History\nService\nAPI\ngateway\nOrder\nhistory\nevent\nhandlers\nKitchen\nService\nOrder\nService\nKitchen\nService\ncommand\nhandler\nClass under test\nLegend\nTest\nTest\nTest\nTest\nDatabase\nOrder\naggregate\nevent\npublisher\nEvent\nchannel\nCommand\nchannel\nReply\nchannel\nProvider\nProvider\nConsumer\nConsumer\nProvider\nProvider\nOrder\ncontroller\nOrder\nRepository\nKitchen\nService\nproxy\nOrder\nService\nproxy\nFigure 10.1 Integration tests must verify that a service can communicate with its clients and \ndependencies. But rather than testing whole services, the strategy is to test the individual adapter \nclasses that implement the communication.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1733, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90da4471-3aab-4ccc-bca9-ca54464802bd": {"__data__": {"id_": "90da4471-3aab-4ccc-bca9-ca54464802bd", "embedding": null, "metadata": {"page_label": "320", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d43263ef-4507-404e-9321-3c59d5cfce92", "node_type": "4", "metadata": {"page_label": "320", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a3e1a817b34d1e7e3738cea0632e8fbbf648026ecbe06739ec11362b8369c233", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "320 CHAPTER 10 Testing microservices: Part 2\ntesting sometimes, but it\u2019s at the top of the test pyramid, so you want to minimize the\nnumber of end-to-end tests.\n A much more effective strategy is to write what are known as integration tests. As fig-\nure 10.2 shows, integration tests are the laye r above unit tests in the testing pyramid.\nThey verify that a service can properly interact with infrastructure services and other ser-\nvices. But unlike end-to-end tests, they don\u2019t launch services. Instead, we use a couple of\nstrategies that significantly simplify the tests without impacting their effectiveness.\nThe first strategy is to test each of the service\u2019s adapters, along with, perhaps, the\nadapter\u2019s supporting classes. For example,  in section 10.1.1 you\u2019ll see a JPA per-\nsistence test that verifies that Orders are persisted correctly. Rather than test persistence\nthrough Order Service\u2019s API, it directly tests the OrderRepository class. Similarly, in\nsection 10.1.3 you\u2019ll see a test that verifies that Order Service publishes correctly\nstructured domain events by testing the OrderDomainEventPublisher class. The bene-\nfit of testing only a small number of classes rather than the entire service is that the\ntests are significantly simpler and faster.\n The second strategy for simplifying in tegration tests that verify interactions\nbetween application services is to use contracts, discussed in chapter 9. A contract is a\nconcrete example of an interaction between a pair of services. As table 10.1 shows, the\nstructure of a contract depends on the type of interaction between the services.\nTable 10.1 The structure of a contract depends on the type of interaction between the services.\nInteraction style Consumer Provider Contract\nREST-based, \nrequest/response\nAPI Gateway Order Service HTTP request and \nresponse\nPublish/subscribe Order History Service Order Service Domain event\nAsynchronous \nrequest/response\nOrder Service Kitchen Service Command message \nand reply message\nEnd-to-end\nComponent\nIntegration\nUnit\nFigure 10.2 Integration tests are the layer \nabove unit tests. They verify that a service \ncan communicate with its dependencies, \nwhich includes infrastructure services, such \nas the database, and application services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2252, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6209ee86-f245-43b2-9a04-33bc1df83a73": {"__data__": {"id_": "6209ee86-f245-43b2-9a04-33bc1df83a73", "embedding": null, "metadata": {"page_label": "321", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e9b9338-a94f-4514-bdae-93e0cefa7f46", "node_type": "4", "metadata": {"page_label": "321", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "957d79f10dec5624ac2f050e41323682d3e9227f4b8ac2236dc4ed5c1f5a7618", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "321Writing integration tests\nA contract consists of either one message, in the case of publish/subscribe style inter-\nactions, or two messages, in the case of request/response and asynchronous request/\nresponse style interactions.\n The contracts are used to test both the consumer and the provider, which ensures\nthat they agree on the API. They\u2019re used  in slightly different ways depending on\nwhether you\u2019re testing the consumer or the provider:\n\uf0a1 Consumer-side tests \u2014These are tests for the consumer\u2019s adapter. They use the\ncontracts to configure stubs that simula te the provider, enabling you to write\nintegration tests for a consumer that don\u2019t require a running provider.\n\uf0a1 Provider-side tests\u2014These are tests for the provider\u2019s adapter. They use the con-\ntracts to test the adapters using mocks for the adapters\u2019s dependencies.\nLater in this section, I describe examples of  these types of tests\u2014but first let\u2019s look at\nhow to write persistence tests.\n10.1.1 Persistence integration tests\nServices typically store data in a database. For instance, Order Service persists aggre-\ngates, such as Order, in MySQL using JPA. Similarly, Order History Service maintains\na CQRS view in AWS DynamoDB. The unit te sts we wrote earlier only test in-memory\nobjects. In order to be confident that a service works correctly, we must write per-\nsistence integration tests, which verify that  a service\u2019s database access logic works as\nexpected. In the case of Order Service, this means testing the JPA repositories, such\nas OrderRepository.\n Each phase of a persistence integration test behaves as follows:\n\uf0a1 Setup\u2014Set up the database by creating the database schema and initializing it to\na known state. It might also begin a database transaction.\n\uf0a1 Execute\u2014Perform a database operation.\n\uf0a1 Verify\u2014Make assertions about the state of the database and objects retrieved\nfrom the database.\n\uf0a1 Teardown\u2014An optional phase that might undo the changes made to the database\nby, for example, rolling back the transaction that was started by the setup phase.\nListing 10.1 shows a persistent integration test for the Order aggregate and Order-\nRepository. Apart from relying on JPA to create the database schema, the persistence\nintegration tests don\u2019t make any assumption about the state of the database. Conse-\nquently, tests don\u2019t need to roll back the changes they make to the database, which\navoids problems with the ORM caching data changes in memory.\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = OrderJpaTestConfiguration.class)\npublic class OrderJpaTest {\nListing 10.1 An integration test that verifies that an Order can be persisted", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2633, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e82b347-af0b-41f9-a05f-6457592f7270": {"__data__": {"id_": "9e82b347-af0b-41f9-a05f-6457592f7270", "embedding": null, "metadata": {"page_label": "322", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7556c0f7-1e4d-4ef0-9d00-93e8174885e2", "node_type": "4", "metadata": {"page_label": "322", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "14cb2af8399b9f33d3daceb05f37968b564acac0f60d3f720179daa15e99ca0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "322 CHAPTER 10 Testing microservices: Part 2\n@Autowired\nprivate OrderRepository orderRepository;\n@Autowired\nprivate TransactionTemplate transactionTemplate;\n@Test\npublic void shouldSaveAndLoadOrder() {\nLong orderId = transactionTemplate.execute((ts) -> {\nOrder order =\nnew Order(CONSUMER_ID, AJANTA_ID, CHICKEN_VINDALOO_LINE_ITEMS);\norderRepository.save(order);\nreturn order.getId();\n});\ntransactionTemplate.execute((ts) -> {\nOrder order = orderRepository.findById(orderId).get();\nassertEquals(OrderState.APPROVAL_PENDING, order.getState());\nassertEquals(AJANTA_ID, order.getRestaurantId());\nassertEquals(CONSUMER_ID, order.getConsumerId().longValue());\nassertEquals(CHICKEN_VINDALOO_LINE_ITEMS, order.getLineItems());\nreturn null;\n});\n}\n}\nThe shouldSaveAndLoadOrder() test method executes two transactions. The first\nsaves a newly created Order in the database. The second transaction loads the Order\nand verifies that its fields are properly initialized.\n One problem you need to solve is how to provision the database that\u2019s used in per-\nsistence integration tests. An effective solution to run an instance of the database during\ntesting is to use Docker. Section 10.2 describes how to use the Docker Compose Gradle\nplugin to automatically run services during component testing. You can use a similar\napproach to run MySQL, for example, during persistence integration testing.\n The database is only one of the external services a service interacts with. Let\u2019s now\nlook at how to write integration tests for interservice communication between applica-\ntion services, starting with REST. \n10.1.2 Integration testing REST-based request/response style \ninteractions\nREST is a widely used interservice comm unication mechanism. The REST client and\nREST service must agree on the REST AP I, which includes the REST endpoints and\nthe structure of the request and response bodies. The client must send an HTTP\nrequest to the correct endpoint, and the service must send back the response that the\nclient expects.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2006, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3ad39f4a-63d7-4591-93c4-84577495e1e2": {"__data__": {"id_": "3ad39f4a-63d7-4591-93c4-84577495e1e2", "embedding": null, "metadata": {"page_label": "323", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "88f1132c-bf2c-4b59-be88-208e0f876cb1", "node_type": "4", "metadata": {"page_label": "323", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "65ca909b687bacc4278e1e28167baecdb07a2e0c7f9cfdd0c52c53fbb0ccd748", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "323Writing integration tests\n For example, chapter 8 describes how the FTGO application\u2019s API Gateway makes\nREST API calls to numerous services, including ConsumerService, Order Service,\nand Delivery Service. The OrderService\u2019s GET /orders/{orderId} endpoint is one\nof the endpoints invoked by the API Gateway. In order to be confident that API Gateway\nand Order Service can communicate without using an end-to-end test, we need to\nwrite integration tests.\n As stated in the preceding chapter, a go od integration testing strategy is to use\nconsumer-driven contract test s. The interaction between API Gateway and GET\n/orders/{orderId} can be described using a set of HTTP-based contracts. Each con-\ntract consists of an HTTP request and an HTTP reply. The contracts are used to test\nAPI Gateway and Order Service.\n Figure 10.3 shows how to use Spring Cl oud Contract to test REST-based interac-\ntions. The consumer-side API Gateway integration tests use the contracts to configure\nan HTTP stub server that simulates the behavior of Order Service. A contract\u2019s\nrequest specifies an HTTP request from the API gateway, and the contract\u2019s response\nspecifies the response that the stub sends back to the API gateway. Spring Cloud Con-\ntract uses the contracts to code-generate the provider-side Order Service integration\ntests, which test the controllers using Sp ring Mock MVC or Rest Assured Mock MVC.\nThe contract\u2019s request specifies the HTTP request to make to the controller, and the\ncontract\u2019s response specifies the controller\u2019s expected response.\n The consumer-side OrderServiceProxyTest invokes OrderServiceProxy, which\nhas been configured to make HTTP requests to WireMock. WireMock is a tool for effi-\nciently mocking HTTP servers\u2014in this test it simulates Order Service. Spring Cloud\nWiremock-\nbased HTTP\nstub server\nOrder\ncontroller\nProvider-side integration\ntest for Order Service\nConsumer-side integration\ntest for API gateway\nSpring Cloud\nContract\nTests\nTests\nUses\nCon\ufb01gures Con\ufb01guresGenerates\nReads\nHTTP\nOrderService\nProxyTest\nclass HttpTest\nextends BaseHttp {\n}\nabstract class BaseHttp {\n@Before\npublic void setup() {\nRestAssuredMockMvc\n.standaloneSetup(...);\n}\n}\nContract.make {\nrequest {..}\nresponse {...}\n}\n}\nOrderService\nProxy\nFigure 10.3 The contracts are used to verify that the adapter classes on both sides of the \nREST-based communication between API Gateway and Order Service conform to the contract. \nThe consumer-side tests verify that OrderServiceProxy invokes Order Service correctly. The \nprovider-side tests verify that OrderController implements the REST API endpoints correctly.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2610, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cea77430-f8ae-4d1c-8cd2-cb39802f5a9b": {"__data__": {"id_": "cea77430-f8ae-4d1c-8cd2-cb39802f5a9b", "embedding": null, "metadata": {"page_label": "324", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19bcf5cc-013a-4a36-95de-9203d8f3f71b", "node_type": "4", "metadata": {"page_label": "324", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9f633239ed5d5764d6d42c84525c4524d77fbe0240d960142177361e3cfcfef9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "324 CHAPTER 10 Testing microservices: Part 2\nContract manages WireMock and configures  it to respond to the HTTP requests\ndefined by the contracts.\n On the provider side, Spring Cloud Contract generates a test class called HttpTest,\nwhich uses Rest Assured Mock MVC to test Order Service\u2019s controllers. Test classes\nsuch as HttpTest must extend a handwritten base class. In this example, the base class\nBaseHttp instantiates OrderController injected with mock dependencies and calls\nRestAssuredMockMvc.standaloneSetup() to configure Spring MVC.\n Let\u2019s take a closer look at how this works, starting with an example contract.\nAN EXAMPLE CONTRACT FOR A REST API\nA REST contract, such as the one shown in listing 10.2, specifies an HTTP request,\nwhich is sent by the REST client, and the HTTP response, which the client expects to\nget back from the REST server. A contract\u2019s request specifies the HTTP method, the\npath, and optional headers. A contract\u2019s response specifies the HTTP status code,\noptional headers, and, when appropriate, the expected body.\norg.springframework.cloud.contract.spec.Contract.make {\nrequest {\nmethod 'GET'\nurl '/orders/1223232'\n}\nresponse {\nstatus 200\nheaders {\nheader('Content-Type': 'application/json;charset=UTF-8')\n}\nbody('''{\"orderId\" : \"1223232\", \"state\" : \"APPROVAL_PENDING\"}''')\n}\n}\nThis particular contract describes a successful attempt by API Gateway to retrieve an\nOrder from Order Service. Let\u2019s now look at how to use this contract to write integra-\ntion tests, starting with the tests for Order Service. \nCONSUMER-DRIVEN CONTRACT INTEGRATION TESTS FOR ORDER SERVICE\nThe consumer-driven contract integration tests for Order Service verify that its API\nmeets its clients\u2019 expectations. Listing 10.3 shows HttpBase, which is the base class\nfor the test class code-generated by Spring Cloud Contract. It\u2019s responsible for the\nsetup phase of the test. It creates the controllers injected with mock dependencies\nand configures those mocks to return values that cause the controller to generate the\nexpected response.\npublic abstract class HttpBase {\nprivate StandaloneMockMvcBuilder controllers(Object... controllers) {\n...\nListing 10.2 A contract that describes an HTTP-based request/response style interaction\nListing 10.3 The abstract base class for the tests code-generated by Spring Cloud Contract", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2337, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae6c6c74-3b15-4abb-b420-320331f4ae49": {"__data__": {"id_": "ae6c6c74-3b15-4abb-b420-320331f4ae49", "embedding": null, "metadata": {"page_label": "325", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6325fc46-227c-4193-acd3-5f4ee3db427f", "node_type": "4", "metadata": {"page_label": "325", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "85aaf0aa0100fd368591623ac88a50de49c9f14cbbfecbe757fcc058b8ceb88a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "325Writing integration tests\nreturn MockMvcBuilders.standaloneSetup(controllers)\n.setMessageConverters(...);\n}\n@Before\npublic void setup() {\nOrderService orderService = mock(OrderService.class);   \nOrderRepository orderRepository = mock(OrderRepository.class);\nOrderController orderController =\nnew OrderController(orderService,orderRepository);\nwhen(orderRepository.findById(1223232L))             \n.thenReturn(Optional.of(OrderDetailsMother.CHICKEN_VINDALOO_ORDER));\n...\nRestAssuredMockMvc.standaloneSetup(controllers(orderController));  \n}\n}\nThe argument 1223232L that\u2019s passed to the mock OrderRepository\u2019s findById()\nmethod matches the orderId specified in the contract shown in listing 10.3. This test\nverifies that Order Service has a GET /orders/{orderId} endpoint that matches its\nclient\u2019s expectations.\n Let\u2019s take a look at the corresponding client test. \nCONSUMER-SIDE INTEGRATION TEST FOR API GATEWAY\u2019S ORDERSERVICEPROXY\nAPI Gateway\u2019s OrderServiceProxy invokes the GET /orders/{orderId} endpoint. List-\ning 10.4 shows the OrderServiceProxyIntegrationTest test class, which verifies that\nit conforms to the contracts. This class is annotated with @AutoConfigureStubRunner,\nprovided by Spring Cloud Contract. It tell s Spring Cloud Contract to run the Wire-\nMock server on a random port and conf igure it using the specified contracts. Order-\nServiceProxyIntegrationTest configures OrderServiceProxy to make requests to\nthe WireMock port.\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes=TestConfiguration.class,\nwebEnvironment= SpringBootTest.WebEnvironment.NONE)\n@AutoConfigureStubRunner(ids =         \n{\"net.chrisrichardson.ftgo.contracts:ftgo-order-service-contracts\"},\nworkOffline = false)\n@DirtiesContext\npublic class OrderServiceProxyIntegrationTest {\n@Value(\"${stubrunner.runningstubs.ftgo-order-service-contracts.port}\")  \nListing 10.4 A consumer-side integration test for API Gateway's \nOrderServiceProxy\nCreate\nOrderRepository\ninjected with mocks.\nConfigure OrderResponse to return an Order when findById()\nis invoked with the orderId specified in the contract.\nConfigure Spring MVC with\nOrderController.\nTell Spring Cloud Contract\nto configure WireMock with\nOrder Service\u2019s contracts.\nObtain the randomly assigned port \nthat WireMock is running on.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b498d79f-46c4-40d0-8267-8f19174e508d": {"__data__": {"id_": "b498d79f-46c4-40d0-8267-8f19174e508d", "embedding": null, "metadata": {"page_label": "326", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e80c9287-9e02-4043-987b-f7238695332a", "node_type": "4", "metadata": {"page_label": "326", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1e82d8a581d7f40937432350a983391a291aa590730f0569016389a6186bda4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "326 CHAPTER 10 Testing microservices: Part 2\nprivate int port;\nprivate OrderDestinations orderDestinations;\nprivate OrderServiceProxy orderService;\n@Before\npublic void setUp() throws Exception {\norderDestinations = new OrderDestinations();\nString orderServiceUrl = \"http://localhost:\" + port;\norderDestinations.setOrderServiceUrl(orderServiceUrl);\norderService = new OrderServiceProxy(orderDestinations,   \nWebClient.create());\n}\n@Test\npublic void shouldVerifyExistingCustomer() {\nOrderInfo result = orderService.findOrderById(\"1223232\").block();\nassertEquals(\"1223232\", result.getOrderId());\nassertEquals(\"APPROVAL_PENDING\", result.getState());\n}\n@Test(expected = OrderNotFoundException.class)\npublic void shouldFailToFindMissingOrder() {\norderService.findOrderById(\"555\").block();\n}\n}\nEach test method invokes OrderServiceProxy and verifies that either it returns the\ncorrect values or throws the expected exception. The shouldVerifyExisting-\nCustomer() test method verifies that findOrderById() returns values equal to those\nspecified in the contract\u2019s response. The shouldFailToFindMissingOrder() attempts\nto retrieve a nonexistent Order and verifies that OrderServiceProxy throws an Order-\nNotFoundException. Testing both the REST client and the REST service using the\nsame contracts ensures that they agree on the API.\n Let\u2019s now look at how to do the same kind of testing for services that interact using\nmessaging. \n10.1.3 Integration testing publish/subscribe-style interactions\nServices often publish domain events that  are consumed by one or more other ser-\nvices. Integration testing must verify that the publisher and its consumers agree on the\nmessage channel and the structure of the domain events. Order Service, for example,\npublishes Order* events whenever it creates or updates an Order aggregate. Order\nHistory Service is one of the consumers of those events. We must, therefore, write\ntests that verify that these services can interact.\n Figure 10.4 shows the approach to inte gration testing publish/subscribe interac-\ntions. Its quite similar to the approach used  for testing REST interactions. As before,\nthe interactions are defined by a set of contracts. What\u2019s different is that each contract\nspecifies a domain event.\nCreate an OrderServiceProxy\nconfigured to make requests\nto WireMock.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2316, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0dff0d38-445e-4a02-9dcc-a3bcb1d82afe": {"__data__": {"id_": "0dff0d38-445e-4a02-9dcc-a3bcb1d82afe", "embedding": null, "metadata": {"page_label": "327", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4d61893-1f34-4600-9600-5e57b33ac7fb", "node_type": "4", "metadata": {"page_label": "327", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d83b8f21f4b152b2a1f113d7875c393d8ce252675f0c0d1eb11518690603e74e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "327Writing integration tests\nEach consumer-side test publishes the event specified by the contract and verifies that\nOrderHistoryEventHandlers invokes its mocked dependencies correctly.\n On the provider side, Spring Cloud Co ntract code-generates test classes that\nextend MessagingBase, which is a hand-written abstract superclass. Each test method\ninvokes a hook method defined by MessagingBase, which is expected to trigger the\npublication of an event by the service. In this example, each hook method invokes\nOrderDomainEventPublisher, which is responsible for publishing Order aggregate\nevents. The test method then verifies that OrderDomainEventPublisher published\nthe expected event. Let\u2019s look at the details of how these tests work, starting with the\ncontract.\nTHE CONTRACT FOR PUBLISHING AN ORDERCREATED EVENT\nListing 10.5 shows the contract for an OrderCreated event. It specifies the event\u2019s\nchannel, along with the expected body and message headers.\nProvider-side integration\ntest for Order Service\nConsumer-side\nintegration test for\nOrder History Service\nSpring cloud\ncontract\nTests\nTests\nReads from\nPublishes to\nCon\ufb01gures\nCode\ngenerates\nPublishes to\nReads from\nInvokes\nUses\ncontract.make{\nlabel 'orderCreatedEvent'\ninput{\ntriggeredBy('orderCreated()')\n}\noutputMessage{...}\n}\nclass MessageTest extends MessagingBase{\n@Test\npublic void validate_orderCreatedEvent(){\norderCreated();\n...\n}\n}\nclass MessagingBase{\nvoid orderCreated(){\n}\nOrderHistory\nEventHandlers\nTest\nOrderHistory\nEventHandlers\nChannel\nOrder domain\nEventPublisher\nChannel\nMessaging stub\nClass under testClass under test\nTriggers\n'orderCreatedEvent'\nInvokes trigger function\nthat veri\ufb01es that the output\nmessage is published to the\nexpected channel\nFigure 10.4 The contracts are used to te st both sides of the publish/subscribe interaction. The provider-side \ntests verify that OrderDomainEventPublisher publishes events that confirm to the contract. The \nconsumer-side tests verify that OrderHistoryEventHandlers consume the example events from \nthe contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2037, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f8c09ce-8c66-44d6-997e-6a16c5f8e671": {"__data__": {"id_": "0f8c09ce-8c66-44d6-997e-6a16c5f8e671", "embedding": null, "metadata": {"page_label": "328", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "458c3adf-e45c-4ba8-89f5-8cb714651a6d", "node_type": "4", "metadata": {"page_label": "328", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3e341ef3daeb8447ef6b3b22060656d6c5216b5f783ad1a1e80a35730f9e0f75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "328 CHAPTER 10 Testing microservices: Part 2\npackage contracts;\norg.springframework.cloud.contract.spec.Contract.make {\nlabel 'orderCreatedEvent'   \ninput {\ntriggeredBy('orderCreated()')       \n}\noutputMessage {\nsentTo('net.chrisrichardson.ftgo.orderservice.domain.Order')\nbody('''{\"orderDetails\":{\"lineItems\":[{\"quantity\":5,\"menuItemId\":\"1\",\n                 \"name\":\"Chicken Vindaloo\",\"price\":\"12.34\",\"total\":\"61.70\"}],\n                 \"orderTotal\":\"61.70\",\"restaurantId\":1, \n        \"consumerId\":1511300065921},\"orderState\":\"APPROVAL_PENDING\"}''')\n        headers {\n            header('event-aggregate-type', \n                        'net.chrisrichardson.ftgo.orderservice.domain.Order')\n            header('event-aggregate-id', '1')\n        }\n}\n}\nThe contract also has two other important elements:\n\uf0a1 label\u2014is used by a consumer test to tri gger publication of the event by Spring\nContact\n\uf0a1 triggeredBy\u2014the name of the superclass method invoked by the generated\ntest method to trigger the publishing of the event\nLet\u2019s look at how the contract is used, starting with the provider-side test for Order-\nService.\nCONSUMER-DRIVEN CONTRACT TESTS FOR ORDER SERVICE\nThe provider-side test for Order Service is another consumer-driven contract inte-\ngration test. It verifies that OrderDomainEventPublisher, which is responsible for\npublishing Order aggregate domain events, publishes  events that match its clients\u2019\nexpectations. Listing 10.6 shows MessagingBase, which is the base class for the test\nclasses code-generated by Spring Cloud Contract. It\u2019s responsible for configuring the\nOrderDomainEventPublisher class to use in-memory messaging stubs. It also defines\nthe methods, such as orderCreated(), which are invoked by the generated tests to\ntrigger the publishing of the event.\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = MessagingBase.TestConfiguration.class,\nwebEnvironment = SpringBootTest.WebEnvironment.NONE)\n@AutoConfigureMessageVerifier\npublic abstract class MessagingBase {\nListing 10.5 A contract for a publish/subscribe interaction style\nListing 10.6 The abstract base class for the Spring Cloud Contract provider-side tests\nUsed by the \nconsumer test to \ntrigger the event \nto be published\nInvoked by the code-\ngenerated provider test\nAn Order-\nCreated\ndomain\nevent", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2293, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "643b99e5-b554-40ef-98c2-5a8f31e1a058": {"__data__": {"id_": "643b99e5-b554-40ef-98c2-5a8f31e1a058", "embedding": null, "metadata": {"page_label": "329", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2544ebd1-50b4-44de-9048-fde57b39f27e", "node_type": "4", "metadata": {"page_label": "329", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ac64339d50132b747eb127902939e2afdbb7254250d23139168a4641710f25ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "329Writing integration tests\n@Configuration\n@EnableAutoConfiguration\n@Import({EventuateContractVerifierConfiguration.class,\nTramEventsPublisherConfiguration.class,\nTramInMemoryConfiguration.class})\npublic static class TestConfiguration {\n@Bean\npublic OrderDomainEventPublisher\nOrderDomainEventPublisher(DomainEventPublisher eventPublisher) {\nreturn new OrderDomainEventPublisher(eventPublisher);\n}\n}\n@Autowired\nprivate OrderDomainEventPublisher OrderDomainEventPublisher;\nprotected void orderCreated() {     \nOrderDomainEventPublisher.publish(CHICKEN_VINDALOO_ORDER,\nsingletonList(new OrderCreatedEvent(CHICKEN_VINDALOO_ORDER_DETAILS)\n));\n}\n}\nThis test class configures OrderDomainEventPublisher with in-memory messaging\nstubs. orderCreated() is invoked by the test method generated from the contract\nshown earlier in listing 10.5. It invokes OrderDomainEventPublisher to publish an\nOrderCreated event. The test method attempts to  receive this event and then verifies\nthat it matches the event specified in the contract. Let\u2019s now look at the correspond-\ning consumer-side tests. \nCONSUMER-SIDE CONTRACT TEST FOR THE ORDER HISTORY SERVICE\nOrder History Service consumes events published by Order Service. As I described\nin chapter 7, the adapter class th at handles these events is the OrderHistoryEvent-\nHandlers class. Its event handlers invoke OrderHistoryDao to update the CQRS view.\nListing 10.7 shows the consumer-side integration test. It creates an OrderHistoryEvent-\nHandlers injected with a mock OrderHistoryDao. Each test method first invokes Spring\nCloud to publish the event defined in the contract and then verifies that OrderHistory-\nEventHandlers invokes OrderHistoryDao correctly.\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes= OrderHistoryEventHandlersTest.TestConfiguration.class,\nwebEnvironment= SpringBootTest.WebEnvironment.NONE)\n@AutoConfigureStubRunner(ids =\n{\"net.chrisrichardson.ftgo.contracts:ftgo-order-service-contracts\"},\nworkOffline = false)\nListing 10.7 The consumer-side integration test for the OrderHistoryEventHandlers \nclass\norderCreated() is invoked by a\ncode-generated test subclass\nto publish the event.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2151, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "380c1fdc-513e-47c3-9a0f-5306dc212b7d": {"__data__": {"id_": "380c1fdc-513e-47c3-9a0f-5306dc212b7d", "embedding": null, "metadata": {"page_label": "330", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b1d88691-51a9-4ffd-804d-08eccc6654f0", "node_type": "4", "metadata": {"page_label": "330", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7c36c7bb3cea58ceec59004feaa7191d058f4b31c60423c126bffb444812b0d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "330 CHAPTER 10 Testing microservices: Part 2\n@DirtiesContext\npublic class OrderHistoryEventHandlersTest {\n@Configuration\n@EnableAutoConfiguration\n@Import({OrderHistoryServiceMessagingConfiguration.class,\nTramCommandProducerConfiguration.class,\nTramInMemoryConfiguration.class,\nEventuateContractVerifierConfiguration.class})\npublic static classTestConfiguration {\n@Bean\npublic OrderHistoryDaoorderHistoryDao() {\nreturn mock(OrderHistoryDao.class);   \n}\n}\n@Test\npublic void shouldHandleOrderCreatedEvent() throws ... {\nstubFinder.trigger(\"orderCreatedEvent\");          \neventually(() -> {       \nverify(orderHistoryDao).addOrder(any(Order.class), any(Optional.class));\n});\n}\nThe shouldHandleOrderCreatedEvent() test method tells Spring Cloud Contract to\npublish the OrderCreated event. It then verifies that OrderHistoryEventHandlers\ninvoked orderHistoryDao.addOrder(). Testing both the domain event\u2019s publisher and\nconsumer using the same contracts ensures that they agree on the API. Let\u2019s now look at\nhow to do integration test services that interact using asynchronous request/response. \n10.1.4 Integration contract tests for asynchronous request/response \ninteractions\nPublish/subscribe isn\u2019t the only kind of messaging-based interaction style. Services\nalso interact using asynchronous request/response. For example, in chapter 4 we saw\nthat Order Service implements sagas that send command messages to various ser-\nvices, such as Kitchen Service, and processes the reply messages.\n The two parties in an asynchronous request/response interaction are the requestor,\nwhich is the service that sends the command, and the replier, which is the service that\nprocesses the command and sends back a reply. They must agree on the name of com-\nmand message channel and the structure of  the command and reply messages. Let\u2019s\nlook at how to write integration tests for asynchronous request/response interactions.\n Figure 10.5 shows how to test the interaction between Order Service and Kitchen\nService. The approach to integration testing asynchronous request/response interac-\ntions is quite similar to the approach used  for testing REST interactions. The interac-\ntions between the services are defined by a se t of contracts. What\u2019s different is that a\ncontract specifies an input message and an output message instead of an HTTP request\nand reply.\nCreate a mock OrderHistoryDao \nto inject into OrderHistory-\nEventHandlers.\nTrigger the \norderCreatedEvent \nstub, which emits an \nOrderCreated event.\nVerify that OrderHistoryEventHandlers\ninvoked orderHistoryDao.addOrder().", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2570, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14d386c7-01e5-42eb-88cd-60ef80dda3cc": {"__data__": {"id_": "14d386c7-01e5-42eb-88cd-60ef80dda3cc", "embedding": null, "metadata": {"page_label": "331", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06c3714d-02b0-4187-b166-79f980c0cc5d", "node_type": "4", "metadata": {"page_label": "331", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e9ed63d250497a1ce5ded5d264160ee8fcc0e8d2894875bd60c56a6dd77c65bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "331Writing integration tests\nThe consumer-side test verifies that the command message proxy class sends correctly\nstructured command messages and correctly processes reply messages. In this exam-\nple, KitchenServiceProxyTest tests KitchenServiceProxy. It uses Spring Cloud Con-\ntract to configure messaging stubs that ve rify that the command message matches a\ncontract\u2019s input message and replies with the corresponding output message.\n The provider-side tests are code-generat ed by Spring Cloud Contract. Each test\nmethod corresponds to a contract. It send s the contract\u2019s input message as a com-\nmand message and verifies that the reply message matches the contract\u2019s output mes-\nsage. Let\u2019s look at the details, starting with the contract.\nEXAMPLE ASYNCHRONOUS REQUEST/RESPONSE CONTRACT\nListing 10.8 shows the contract for one interaction. It consists of an input message and\nan output message. Both messages specify a message channel, message body, and mes-\nsage headers. The naming convention is fr om the provider\u2019s perspective. The input\nmessage\u2019s messageFrom element specifies the channel that the message is read from.\nProvider-side\nintegration test for\nKitchen Service\nConsumer-side\nintegration test for\nKitchen Service\nSpring cloud\ncontract\nReads\nTests\nSends to\nSends to\nReceives from\nCon\ufb01gures\nCode\ngenerates\nReceives\nfrom\nExtends\nCon\ufb01gures\nInvokes\nReads\ncommand\nReads reply\nSends\nreply\ncommand\nSends\ncommand\nMessage\nContract.make {\ninputMessage{...}\nOutputMessage{...}\n} abstract class BaseMessaging{\nvoid setUp(){...}\nclass MessageTest extends BaseMessaging{\n}\nKitchenService\nProxy\nIntegrationTest\nKitchenService\nProxy\nKitchenService\nCommandHandler\nReply\nchannel\nCommand\nchannel\nCommand\nchannel\nReply\nchannel\n\u00abmock\u00bb\nKitchenService\nMessaging stub\nSends input message and\nveri\ufb01es that reply matches\ncontract\u2019s output message\nFigure 10.5 The contracts are used to test the adapter classes that implement each side of the asynchronous \nrequest/response interaction. The provider-side tests verify that KitchenServiceCommandHandler handles \ncommands and sends back replies. The consumer-side tests verify KitchenServiceProxy sends commands \nthat conform to the contract, and that it handles the example replies from the contract.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2241, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "09c6d4e0-e810-4a82-8058-1562d9d32e1f": {"__data__": {"id_": "09c6d4e0-e810-4a82-8058-1562d9d32e1f", "embedding": null, "metadata": {"page_label": "332", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a65740a-f294-4ee8-8fa2-61edfaec1b9b", "node_type": "4", "metadata": {"page_label": "332", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a2eb3d81aae80970e9c1ff29fc5e594960bdfd3cc4d1a68f771b09c2b14c5c5b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "332 CHAPTER 10 Testing microservices: Part 2\nSimilarly, the output message\u2019s sentTo element specifies the channel that the reply\nshould be sent to.\npackage contracts;\norg.springframework.cloud.contract.spec.Contract.make {\nlabel 'createTicket'\ninput {     \nmessageFrom('kitchenService')\nmessageBody('''{\"orderId\":1,\"restaurantId\":1,\"ticketDetails\":{...}}''')\nmessageHeaders {\nheader('command_type','net.chrisrichardson...CreateTicket')\nheader('command_saga_type','net.chrisrichardson...CreateOrderSaga')\nheader('command_saga_id',$(consumer(regex('[0-9a-f]{16}-[0-9a-f]\n{16}'))))\nheader('command_reply_to','net.chrisrichardson...CreateOrderSaga-Reply')\n}\n}\noutputMessage {      \nsentTo('net.chrisrichardson...CreateOrderSaga-reply')\nbody([\nticketId: 1\n])\nheaders {\nheader('reply_type', 'net.chrisrichardson...CreateTicketReply')\nheader('reply_outcome-type', 'SUCCESS')\n}\n}\n}\nIn this example contract, the input message is a CreateTicket command that\u2019s sent to\nthe kitchenService channel. The output message is a successful reply that\u2019s sent to the\nCreateOrderSaga\u2019s reply channel. Let\u2019s look at how to use this contract in tests, start-\ning with the consumer-side tests for Order Service. \nCONSUMER-SIDE CONTRACT INTEGRATION TEST FOR AN ASYNCHRONOUS REQUEST/RESPONSE \nINTERACTION\nThe strategy for writing a consumer-side integration test for an asynchronous request/\nresponse interaction is similar to testing a REST client. The test invokes the service\u2019s\nmessaging proxy and verifies two aspects of it s behavior. First, it verifies that the mes-\nsaging proxy sends a command message that conforms to the contract. Second, it ver-\nifies that the proxy properly handles the reply message.\n Listing 10.9 shows the consumer-side integration test for KitchenServiceProxy,\nwhich is the messaging proxy used by Order Service to invoke Kitchen Service. Each\ntest sends a command message using KitchenServiceProxy and verifies that it returns\nthe expected result. It uses Spring Cloud Contract to configure messaging stubs for\nListing 10.8 Contract describing how Order Service asynchronously invokes \nKitchen Service\nThe command message \nsent by Order Service \nto the kitchenService \nchannel\nThe reply message sent \nby Kitchen Service", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2227, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31da92b4-3236-418b-ab14-fb0f92b5c38b": {"__data__": {"id_": "31da92b4-3236-418b-ab14-fb0f92b5c38b", "embedding": null, "metadata": {"page_label": "333", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ad44bc5f-bede-40d0-a124-53538c24719a", "node_type": "4", "metadata": {"page_label": "333", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "80f7460201fb7cbee35d158b58aed799e053d864814dfaec801e344e74330b55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "333Writing integration tests\nKitchen Service that find the contract whose input message matches the command\nmessage and sends its output message as the reply. The tests use in-memory messaging\nfor simplicity and speed.\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes= \nKitchenServiceProxyIntegrationTest.TestConfiguration.class,\nwebEnvironment= SpringBootTest.WebEnvironment.NONE)\n@AutoConfigureStubRunner(ids =       \n{\"net.chrisrichardson.ftgo.contracts:ftgo-kitchen-service-contracts\"},\nworkOffline = false)\n@DirtiesContext\npublic class KitchenServiceProxyIntegrationTest {\n@Configuration\n@EnableAutoConfiguration\n@Import({TramCommandProducerConfiguration.class,\nTramInMemoryConfiguration.class,\nEventuateContractVerifierConfiguration.class})\npublic static class TestConfiguration { ... }\n@Autowired\nprivate SagaMessagingTestHelper sagaMessagingTestHelper;\n@Autowired\nprivate KitchenServiceProxy kitchenServiceProxy;\n@Test\npublic void shouldSuccessfullyCreateTicket() {\nCreateTicket command = new CreateTicket(AJANTA_ID,\nOrderDetailsMother.ORDER_ID,\nnew TicketDetails(Collections.singletonList(\nnew TicketLineItem(CHICKEN_VINDALOO_MENU_ITEM_ID,\nCHICKEN_VINDALOO,\nCHICKEN_VINDALOO_QUANTITY))));\nString sagaType = CreateOrderSaga.class.getName();\nCreateTicketReply reply =\nsagaMessagingTestHelper       \n.sendAndReceiveCommand(kitchenServiceProxy.create,\ncommand,\nCreateTicketReply.class, sagaType);\nassertEquals(new CreateTicketReply(OrderDetailsMother.ORDER_ID), reply);  \n}\n}\nListing 10.9 The consumer-side contract integration test for Order Service\nConfigure the stub\nKitchen Service to\nrespond to messages.\nSend the \ncommand and \nwait for a reply.\nVerify the\nreply.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1677, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "817503aa-a9e4-4b71-9263-7b989e24abf1": {"__data__": {"id_": "817503aa-a9e4-4b71-9263-7b989e24abf1", "embedding": null, "metadata": {"page_label": "334", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b53f45d6-487a-46b2-a982-084a694bbc05", "node_type": "4", "metadata": {"page_label": "334", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "76c903c22b5685493e494f71ceefc184d6a74a9bc06ea54cf11be45522fad39c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "334 CHAPTER 10 Testing microservices: Part 2\nThe shouldSuccessfullyCreateTicket() test method sends a CreateTicket com-\nmand message and verifies that the repl y contains the expected data. It uses Saga-\nMessagingTestHelper, which is a test helper class that synchronously sends and receives\nmessages.\n Let\u2019s now look at how to write provider-side integration tests.\nWRITING PROVIDER-SIDE, CONSUMER-DRIVEN CONTRACT TESTS FOR ASYNCHRONOUS \nREQUEST/RESPONSE INTERACTIONS\nA provider-side integration test must verify that the provider handles a command mes-\nsage by sending the correct reply. Spring Cloud Contract generates test classes that\nhave a test method for each contract. Each  test method sends the contract\u2019s input\nmessage and verifies that the reply matches the contract\u2019s output message.\n The provider-side integration tests for Kitchen Service test KitchenService-\nCommandHandler. The KitchenServiceCommandHandler class handles a message by\ninvoking KitchenService. The following listing shows the AbstractKitchenService-\nConsumerContractTest class, which is the base class for the Spring Cloud Contract-\ngenerated tests. It creates a KitchenServiceCommandHandler injected with a mock\nKitchenService.\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = \nAbstractKitchenServiceConsumerContractTest.TestConfiguration.class,\nwebEnvironment = SpringBootTest.WebEnvironment.NONE)\n@AutoConfigureMessageVerifier\npublic abstract class AbstractKitchenServiceConsumerContractTest {\n@Configuration\n@Import(RestaurantMessageHandlersConfiguration.class)\npublic static class TestConfiguration {\n...\n@Bean\npublic KitchenService kitchenService() {    \nreturn mock(KitchenService.class);\n}\n}\n@Autowired\nprivate KitchenService kitchenService;\n@Before\npublic void setup() {\nreset(kitchenService);\nwhen(kitchenService\n.createTicket(eq(1L), eq(1L),     \nany(TicketDetails.class)))\n.thenReturn(new Ticket(1L, 1L,\nListing 10.10 Superclass of provider-sid e, consumer-driven contract tests for Kitchen\nService\nOverrides the definition \nof the kitchenService \n@Bean with a mock\nConfigures the mock to \nreturn the values that match \na contract\u2019s output message", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2148, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f593bb63-791a-49ad-a25e-a206606035cd": {"__data__": {"id_": "f593bb63-791a-49ad-a25e-a206606035cd", "embedding": null, "metadata": {"page_label": "335", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7ff2ff0-9cee-4134-b7b3-553d02bc8eff", "node_type": "4", "metadata": {"page_label": "335", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "32cde6ad71c4bd090641c7c910ed34a927e4547e50b4c16395d08789db0427b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "335Developing component tests\nnew TicketDetails(Collections.emptyList())));\n}\n}\nKitchenServiceCommandHandler invokes KitchenService with arguments that are\nderived from a contract\u2019s input message and creates a reply message that\u2019s derived\nfrom the return value. The test class\u2019s setup() method configures the mock Kitchen-\nService to return the values that match the contract\u2019s output message\n Integration tests and unit tests verify th e behavior of individual parts of a service.\nThe integration tests verify that services  can communicate with their clients and\ndependencies. The unit tests verify that a service\u2019s logic is correct. Neither type of test\nruns the entire service. In order to verify that a service as a whole works, we\u2019ll move up\nthe pyramid and look at how to write component tests. \n10.2 Developing component tests\nSo far, we\u2019ve looked at how to test individual classes and clusters of classes. But imag-\nine that we now want to verify that Order Service works as expected. In other words,\nwe want to write the service\u2019s acceptance tests, which treat it as a black box and verify\nits behavior through its API. One approach is to write what are essentially end-to-end\ntests and deploy Order Service and all of its transitive dependencies. As you should\nknow by now, that\u2019s a slow, brittle, and expensive way to test a service.\nA much better way to write acceptance test s for a service is to use component testing.\nAs figure 10.6 shows, component tests  are sandwiched between integration tests and\nend-to-end tests. Component testing verifies the behavior of a service in isolation. It\nreplaces a service\u2019s dependencies with stubs that simulate their behavior. It might even\nuse in-memory versions of infrastructure serv ices such as databases. As a result, com-\nponent tests are much easier to write and faster to run.\n I begin by briefly describing how to us e a testing DSL called Gherkin to write\nacceptance tests for services, such as Order Service. After that I discuss various com-\nponent testing design issues. I then show how to write acceptance tests for Order\nService.\n Let\u2019s look at writing acceptance tests using Gherkin.\n \n \nPattern: Service component test\nTest a service in isolation. See http://microservices.io/patterns/testing/service-\ncomponent-test.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2294, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "12750f03-d31c-4195-890a-f46fcfc52fcc": {"__data__": {"id_": "12750f03-d31c-4195-890a-f46fcfc52fcc", "embedding": null, "metadata": {"page_label": "336", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a6346c7f-715e-4aff-ab52-5095f44eadf3", "node_type": "4", "metadata": {"page_label": "336", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7653201b866edf12e12d13869d9b88cb91eb6db398347f631d92200c9580f0b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "336 CHAPTER 10 Testing microservices: Part 2\n10.2.1 Defining acceptance tests\nAcceptance tests are business-facing tests for a software component. They describe the\ndesired externally visible behavior from the perspective of the component\u2019s clients\nrather than in terms of the internal implementation. These tests are derived from user\nstories or use cases. For example, one of the key stories for Order Service is the Place\nOrder story:\nAs a consumer of the Order Service\nI should be able to place an order\nWe can expand this story into scenarios such as the following:\nGiven a valid consumer\nGiven using a valid credit card\nGiven the restaurant is accepting orders\nWhen I place an order for Chicken Vindaloo at Ajanta\nThen the order should be APPROVED\nAnd an OrderAuthorized event should be published\nThis scenario describes the desired behavior of Order Service in terms of its API.\n Each scenario defines an acceptance test. The givens correspond to the test\u2019s setup\nphase, the when maps to the execute phase, and the then and the and to the verifica-\ntion phase. Later, you see a test for this scenario that does the following:\n1 Creates an Order by invoking the POST /orders endpoint\n2 Verifies the state of the Order by invoking the GET /orders/{orderId} endpoint\n3 Verifies that the Order Service published an OrderAuthorized event by sub-\nscribing to the appropriate message channel\nWe could translate each scenario into Java code. An easier option, though, is to write\nthe acceptance tests using a DSL such as Gherkin. \nEnd-to-end\nComponent\nIntegration\nUnit\nComponent\ntest\nTests Service\nStub\ndependency 1\nStub\ndependency 2\nStub\ndependency\n...\nFigure 10.6 A component test tests a service in isolati on. It typically uses stubs for the service\u2019s \ndependencies.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1769, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c4cf2ab1-d729-49b4-b551-2115c039a358": {"__data__": {"id_": "c4cf2ab1-d729-49b4-b551-2115c039a358", "embedding": null, "metadata": {"page_label": "337", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10e528cb-e1ef-4589-b636-8ab6db0b2fa2", "node_type": "4", "metadata": {"page_label": "337", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "56f53c4f975afce183ab1de466c657f2e8e0902bdafd7e105d8e9e0c049271db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "337Developing component tests\n10.2.2 Writing acceptance tests using Gherkin\nWriting acceptance tests in Java is challenging. There\u2019s a risk that the scenarios and\nthe Java tests diverge. There\u2019s also a disconnect between the high-level scenarios and\nthe Java tests, which consist of low-level implementation details. Also, there\u2019s a risk\nthat a scenario lacks precision or is ambiguous and can\u2019t be translated into Java code.\nA much better approach is to eliminate the manual translation step and write execut-\nable scenarios.\n Gherkin is a DSL for writing executable specifications. When using Gherkin, you\ndefine your acceptance tests using English- like scenarios, such as the one shown ear-\nlier. You then execute the specifications using Cucumber, a test automation frame-\nwork for Gherkin. Gherkin and Cucumber eliminate the need to manually translate\nscenarios into runnable code.\n The Gherkin specification for a service such as Order Service consists of a set of fea-\ntures. Each feature is described by a set of scenarios such as the one you saw earlier. A sce-\nnario has the given-when-then structure. The givens are the preconditions, the when is\nthe action or event that occurs, and the then/and are the expected outcome.\n For example, the desired behavior of Order Service is defined by several features,\nincluding Place Order, Cancel Order, and Revise Order. Listing 10.11 is an excerpt of\nthe Place Order feature. This feature consists of several elements:\n\uf0a1 Name\u2014For this feature, the name is Place Order.\n\uf0a1 Specification brief \u2014This describes why the feature exists. For this feature, the\nspecification brief is the user story.\n\uf0a1 Scenarios\u2014 Order authorized and Order rejected due to expired credit card.\nFeature: Place Order\nAs a consumer of the Order Service\nI should be able to place an order\nScenario: Order authorized\nGiven a valid consumer\nGiven using a valid credit card\nGiven the restaurant is accepting orders\nWhen I place an order for Chicken Vindaloo at Ajanta\nThen the order should be APPROVED\nAnd an OrderAuthorized event should be published\nScenario: Order rejected due to expired credit card\nGiven a valid consumer\nGiven using an expired credit card\nGiven the restaurant is accepting orders\nWhen I place an order for Chicken Vindaloo at Ajanta\nThen the order should be REJECTED\nAnd an OrderRejected event should be published\n...\nListing 10.11 The Gherkin definition of the Place Order feature and some of its scenarios", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2451, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c38f7aca-a1d1-4b9b-80fb-be6b152187ef": {"__data__": {"id_": "c38f7aca-a1d1-4b9b-80fb-be6b152187ef", "embedding": null, "metadata": {"page_label": "338", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2afe7630-9f35-4350-b06d-5b0c7dedceed", "node_type": "4", "metadata": {"page_label": "338", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b8b11c281b67e0bd7e68fa3de64f2efada2a57af797a8b3ef91aeb1dfbaa7e2b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "338 CHAPTER 10 Testing microservices: Part 2\nIn both scenarios, a consumer attempts to place an order. In the first scenario, they\nsucceed. In the second scenario, the order is rejected because the consumer\u2019s credit\ncard has expired. For more information on Gherkin, see the book Writing Great Specifi-\ncations: Using Specification by Example and Gherkin by Kamil Nicieja (Manning, 2017).\nEXECUTING GHERKIN SPECIFICATIONS USING CUCUMBER\nCucumber is an automated testing framewor k that executes tests written in Gherkin.\nIt\u2019s available in a variety of languages, including Java. When using Cucumber for Java,\nyou write a step definition class, such as the one shown in listing 10.12. A step definition\nclass consists of methods that define the me aning of each given-then-when step. Each\nstep definition method is annotated with either @Given, @When, @Then, or @And. Each\nof these annotations has a value element that\u2019s a regular expression, which Cucum-\nber matches against the steps.\npublic class StepDefinitions ... {\n...\n@Given(\"A valid consumer\")\npublic void useConsumer() { ... }\n@Given(\"using a(.?) (.*) credit card\")\npublic void useCreditCard(String ignore, String creditCard) { ... }\n@When(\"I place an order for Chicken Vindaloo at Ajanta\")\npublic void placeOrder() { ... }\n@Then(\"the order should be (.*)\")\npublic void theOrderShouldBe(String desiredOrderState) { ... }\n@And(\"an (.*) event should be published\")\npublic void verifyEventPublished(String expectedEventClass) { ... }\n}\nEach type of method is part of a particular phase of the test:\n\uf0a1 @Given\u2014The setup phase\n\uf0a1 @When\u2014The execute phase\n\uf0a1 @Then and @And\u2014The verification phase\nLater in section 10.2.4, when I describe this  class in more detail, you\u2019ll see that many\nof these methods make REST calls to Order Service. For example, the placeOrder()\nmethod creates Order b y  i n v o k i n g  t h e  POST /orders REST endpoint. The the-\nOrderShouldBe() method verifies the status of the order by invoking GET /orders/\n{orderId}.\n But before getting into the details of ho w to write step classes, let\u2019s explore some\ndesign issues with component tests. \nListing 10.12 The Java step definitions cl ass makes the Gherkin scenarios executable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2206, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82e3dbc1-317b-4945-be71-acc4f5d4f414": {"__data__": {"id_": "82e3dbc1-317b-4945-be71-acc4f5d4f414", "embedding": null, "metadata": {"page_label": "339", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebddd389-d00d-4d3f-a1df-133b1ca365f6", "node_type": "4", "metadata": {"page_label": "339", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1272567d16f68670e0b40d429c4ddc58ddf01be6ad8438ba7d96cefce7f63987", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "339Developing component tests\n10.2.3 Designing component tests\nImagine you\u2019re implementing the component tests for Order Service. Section 10.2.2\nshows how to specify the desired behavior using Gherkin and execute it using Cucum-\nber. But before a component test can execute the Gherkin scenarios, it must first run\nOrder Service and set up the service\u2019s dependencies. You need to test Order Service\nin isolation, so the component test must configure stubs for several services, including\nKitchen Service. It also needs to set up a database and the messaging infrastructure.\nThere are a few different options that trade off realism with speed and simplicity.\nIN-PROCESS COMPONENT TESTS\nOne option is to write in-process component tests. An in-process component test runs the\nservice with in-memory stubs and mocks fo r its dependencies. For example, you can\nwrite a component test for a Spring Boot-bas ed service using the Spring Boot testing\nframework. A test class, which is annotated with @SpringBootTest, runs the service in\nthe same JVM as the test. It uses dependency  injection to configure the service to use\nmocks and stubs. For instance, a test for Order Service would configure it to use an\nin-memory JDBC database, such as H2, HS QLDB, or Derby, and in-memory stubs for\nEventuate Tram. In-process tests are simpler to write and faster, but have the downside\nof not testing the deployable service. \nOUT-OF-PROCESS COMPONENT TESTING\nA more realistic approach is to package th e service in a production-ready format and\nrun it as a separate process. For example, chapter 12 explains that it\u2019s increasingly\ncommon to package services as Docker container images. An out-of-process component\ntest uses real infrastructure services, such as databases and message brokers, but uses\nstubs for any dependencies that are application services. For example, an out-of-process\ncomponent test for FTGO Order Service would use MySQL and Apache Kafka, and\nstubs for services including Consumer Service and Accounting Service. Because Order\nService interacts with those services using messaging, these stubs would consume\nmessages from Apache Kafka and send back reply messages.\n A key benefit of out-of-process component testing is that it improves test coverage,\nbecause what\u2019s being tested is much closer to what\u2019s being deployed. The drawback is\nthat this type of test is more complex to write, slower to execute, and potentially more\nbrittle than an in-process component test. You also have to figure out how to stub the\napplication services. Let\u2019s look at how to do that.\nHOW TO STUB SERVICES IN OUT-OF-PROCESS COMPONENT TESTS\nThe service under test often invokes dependencies using interaction styles that involve\nsending back a response. Order Service, for example, uses asynchronous request/\nresponse and sends command messages to various services. API Gateway uses HTTP,\nwhich is a request/response interaction styl e. An out-of-process test must configure\nstubs for these kinds of dependencies, which handle requests and send back replies.\n One option is to use Spring Cloud Cont ract, which we looked at earlier in sec-\ntion 10.1 when discussing integration tests.  We could write contracts that configure", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3211, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "30fc79ae-8a35-40dd-9c76-cdad10f8dd02": {"__data__": {"id_": "30fc79ae-8a35-40dd-9c76-cdad10f8dd02", "embedding": null, "metadata": {"page_label": "340", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37029450-9cf9-4b59-a53d-03073efcdc0f", "node_type": "4", "metadata": {"page_label": "340", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ad52b4a4815df4fa12791508dc1269bfa3c051d69e18399a7e49ea3db9e6c409", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "340 CHAPTER 10 Testing microservices: Part 2\nstubs for component tests. One thing to consid er, though, is that it\u2019s likely that these\ncontracts, unlike those used for integration, would only be used by the component tests.\n Another drawback of using Spring Clo ud Contract for component testing is that\nbecause its focus is consumer contract te sting, it takes a somewhat heavyweight\napproach. The JAR files containing the co ntracts must be deployed in a Maven\nrepository rather than merely being on the classpath. Handling interactions involving\ndynamically generated values is also challenging. Consequently, a simpler option is to\nconfigure stubs from within the test itself.\n A test can, for example, configure an  HTTP stub using the WireMock stubbing\nDSL. Similarly, a test for a service that uses Eventuate Tram messaging can configure\nmessaging stubs. Later in this section I show an easy-to-use Java library that does this.\n Now that we\u2019ve looked at how to design  component tests, let\u2019s consider how to\nwrite component tests for the FTGO Order Service. \n10.2.4 Writing component tests for the FTGO Order Service\nAs you saw earlier in this section, there are a few different ways to implement compo-\nnent tests. This section describes the component tests for Order Service that use the\nout-of-process strategy to test the service running as a Docker container. You\u2019ll see\nhow the tests use a Gradle plugin to start and stop the Docker container. I discuss how\nto use Cucumber to execute the Gherkin-based scenarios that define the desired\nbehavior for Order Service.\n Figure 10.7 shows the design of the component tests for Order Service. Order-\nServiceComponentTest is the test class that runs Cucumber:\n@RunWith(Cucumber.class)\n@CucumberOptions(features = \"src/component-test/resources/features\")\npublic class OrderServiceComponentTest {\n}\nIt has an @CucumberOptions annotation that specifies where to find the Gherkin\nfeature files. It\u2019s also annotated with @RunWith(Cucumber.class), which tells JUNIT\nto use the Cucumber test runner. But unlike a typical JUNIT-based test class, it\ndoesn\u2019t have any test methods. Instead, it defines the tests by reading the Gherkin\nfeatures and uses the OrderServiceComponentTestStepDefinitions class to make\nthem executable.\n Using Cucumber with the Spring Boot testing framework requires a slightly unusual\nstructure. Despite not being a test class, OrderServiceComponentTestStepDefinitions\nis still annotated with @ContextConfiguration, which is part of the Spring Testing\nframework. It creates Spring ApplicationContext, which defines the various Spring\ncomponents, including messaging stubs. Let\u2019s look at the details of the step definitions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2696, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31d6e295-0e01-49d6-9eec-6e589cd0149b": {"__data__": {"id_": "31d6e295-0e01-49d6-9eec-6e589cd0149b", "embedding": null, "metadata": {"page_label": "341", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86e88310-d654-4de4-9639-7206f41cd392", "node_type": "4", "metadata": {"page_label": "341", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c680e68a3657415dda4e0b5419474c4d11365ed0c7cf0b14fd0df7ca9487cf42", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "341Developing component tests\nTHE ORDERSERVICECOMPONENTTESTSTEPDEFINITIONS CLASS\nThe OrderServiceComponentTestStepDefinitions class is the heart of the tests. This\nclass defines the meaning of each step in Order Service\u2019s component tests. The fol-\nlowing listing shows the usingCreditCard() method, which defines the meaning of\nthe Given using \u2026 credit card step.\n@ContextConfiguration(classes = \nOrderServiceComponentTestStepDefinitions.TestConfiguration.class)\npublic class OrderServiceComponentTestStepDefinitions {\n...\n@Autowired\nprotected SagaParticipantStubManager sagaParticipantStubManager;\n@Given(\"using a(.?) (.*) credit card\")\npublic void useCreditCard(String ignore, String creditCard) {\nif (creditCard.equals(\"valid\"))\n  sagaParticipantStubManager    \n.forChannel(\"accountingService\")\n.when(AuthorizeCommand.class).replyWithSuccess();\nelse if (creditCard.equals(\"invalid\"))\nsagaParticipantStubManager     \nListing 10.13 The @GivenuseCreditCard() method defines the meaning of the \nGiven using \u2026 credit card step.\nAs a consumer of the Order Service\nIs h o u l db ea b l et oc r e a t ea no r d e r\nScenario: Order authorized\nGiven a valid consumer\nGiven using a valid credit card\ndockerCompose {\n...\n}\nftgo-order-service:\nbuild: .\nports:\n- \"8082:8080\"\nOrderService\nComponent\nTest\nOrder Service\ndocker\ncontainer\nsrc/component-test/resources/\ncreateorder.feature\nDocker-compose.yml\nbuild.gradle\nWritten using the\nCucumber testing framework\nKafka\nMySQL\nInvokes\nREST API Runs\nRuns\nRunsReads command\nand sends\nreplies\nReads events\nReads\nUses\nUses\nOrderService\nComponent\nStep\nDe\ufb01nitions\nFigure 10.7 The component tests for Order Service use the Cucumber testing framework to \nexecute tests scenarios written using Gherkin acceptance testing DSL. The tests use Docker to run \nOrder Service along with its infrastructure services, such as Apache Kafka and MySQL.\nSend a \nsuccess reply.\nSend a failure \nreply.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1912, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8acbbe41-6dd3-441f-bcaf-326752a28c8c": {"__data__": {"id_": "8acbbe41-6dd3-441f-bcaf-326752a28c8c", "embedding": null, "metadata": {"page_label": "342", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4fcdb6f-d363-4723-ba9d-fb86af272416", "node_type": "4", "metadata": {"page_label": "342", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0e41f36448385efbeaa19e25d6e08c59c84db6b0111efb9a90f12e42da7ec1ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "342 CHAPTER 10 Testing microservices: Part 2\n.forChannel(\"accountingService\")\n.when(AuthorizeCommand.class).replyWithFailure();\nelse\nfail(\"Don't know what to do with this credit card\");\n}\nThis method uses the SagaParticipantStubManager class, a test helper class that con-\nfigures stubs for saga participants. The useCreditCard() method uses it to configure\nthe Accounting Service stub to reply with either a success or a failure message,\ndepending on the specified credit card.\n The following listing shows the placeOrder() method, which defines the When I\nplace an order for Chicken Vindaloo at Ajanta step. It invokes the Order Service\nREST API to create Order and saves the response for validation in a later step.\n@ContextConfiguration(classes = \nOrderServiceComponentTestStepDefinitions.TestConfiguration.class)\npublic class OrderServiceComponentTestStepDefinitions {\nprivate int port = 8082;\nprivate String host = System.getenv(\"DOCKER_HOST_IP\");\nprotected String baseUrl(String path) {\nreturn String.format(\"http://%s:%s%s\", host, port, path);\n}\nprivate Response response;\n@When(\"I place an order for Chicken Vindaloo at Ajanta\")\npublic void placeOrder() {\n    response = given().                                               \n            body(new CreateOrderRequest(consumerId,\n                    RestaurantMother.AJANTA_ID, Collections.singletonList(\n                        new CreateOrderRequest.LineItem(\n                           RestaurantMother.CHICKEN_VINDALOO_MENU_ITEM_ID,\n                          OrderDetailsMother.CHICKEN_VINDALOO_QUANTITY)))).\n            contentType(\"application/json\").\n            when().\n            post(baseUrl(\"/orders\"));\n}\nThe baseUrl() help method returns the URL of the order service.\n Listing 10.15 shows the theOrderShouldBe() method, which defines the meaning\nof the Then the order should be \u2026 step. It verifies that Order was successfully created\nand that it\u2019s in the expected state.\n \n \nListing 10.14 The placeOrder() method defines the When I place an order for \nChicken Vindaloo at Ajanta step.\nInvokes the Order \nService REST API \nto create Order", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2109, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa40d2e0-58d7-49a1-9fbf-15dbb5197830": {"__data__": {"id_": "fa40d2e0-58d7-49a1-9fbf-15dbb5197830", "embedding": null, "metadata": {"page_label": "343", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84fa0acb-733c-4dd6-a31d-ef520221af2b", "node_type": "4", "metadata": {"page_label": "343", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "633a94de432da14c65ebebd17b1bb153af2037f644e5dbec520ebd363672c05e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "343Developing component tests\n@ContextConfiguration(classes = \nOrderServiceComponentTestStepDefinitions.TestConfiguration.class)\npublic class OrderServiceComponentTestStepDefinitions {\n@Then(\"the order should be (.*)\")\npublic void theOrderShouldBe(String desiredOrderState) {\nInteger orderId =   \nthis.response. then(). statusCode(200).\nextract(). path(\"orderId\");\nassertNotNull(orderId);\neventually(() -> {\nString state = given().\nwhen().\nget(baseUrl(\"/orders/\" + orderId)).\nthen().\nstatusCode(200)\n.extract().\npath(\"state\");\nassertEquals(desiredOrderState, state);   \n});\n}\n]\nThe assertion of the expected state is wrapped in a call to eventually(), which\nrepeatedly executes the assertion.\n The following listing shows the verifyEventPublished() method, which defines\nthe And an \u2026 event should be published step. It verifies that the expected domain\nevent was published.\n@ContextConfiguration(classes = \nOrderServiceComponentTestStepDefinitions.TestConfiguration.class)\npublic class OrderServiceComponentTestStepDefinitions {\n@Autowired\nprotected MessageTracker messageTracker;\n@And(\"an (.*) event should be published\")\npublic void verifyEventPublished(String expectedEventClass) throws ClassNot\nFoundException {\nmessageTracker.assertDomainEventPublished(\"net.chrisrichardson.ftgo.order\nservice.domain.Order\",\nListing 10.15 The @ThentheOrderShouldBe() method verifies HTTP request was \nsuccessful.\nListing 10.16 The Cucumber step definitions class for the Order Service component \ntests\nVerify that Order \nwas created \nsuccessfully.\nVerify the \nstate of \nOrder.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1564, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7e54f89a-9d69-4ea3-8ed7-e88c03256c9d": {"__data__": {"id_": "7e54f89a-9d69-4ea3-8ed7-e88c03256c9d", "embedding": null, "metadata": {"page_label": "344", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e277b692-ffc3-4907-8051-27669adfe81d", "node_type": "4", "metadata": {"page_label": "344", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "81b2af2a5b25f7c3de3b415ce73c8034b9862ebf23311ff89615daf1d72e6f90", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "344 CHAPTER 10 Testing microservices: Part 2\n(Class<DomainEvent>)Class.forName(\"net.chrisrichardson.ftgo.order\nservice.domain.\" + expectedEventClass));\n}\n....\n}\nThe verifyEventPublished() method uses the MessageTracker class, a test helper\nclass that records the events that have been published during the test. This class\nand SagaParticipantStubManager  are instantiated by the TestConfiguration\n@Configuration class.\n Now that we\u2019ve looked at the step definitions, let\u2019s look at how to run the compo-\nnent tests. \nRUNNING THE COMPONENT TESTS\nBecause these tests are relatively slow, we don\u2019t want to run them as part of ./gradlew\ntest. Instead, we\u2019ll put the test code in a separate src/component-test/java directory\nand run them using ./gradlew componentTest. Take a look at the ftgo-order-service/\nbuild.gradle file to see the Gradle configuration.\n The tests use Docker to run Order Service and its dependencies. As described in\nchapter 12, a Docker container is a ligh tweight operating system virtualization\nmechanism that lets you deploy a service instance in an isolated sandbox. Docker\nCompose is an extremely useful tool with  which you can define a set of containers\nand start and stop them as a un it. The FTGO application has a docker-compose file\nin the root directory that defines containe rs for all the services, and the infrastruc-\nture service.\n We can use the Gradle Docker Compose plugin to run the containers before exe-\ncuting the tests and stop the containers once the tests complete:\napply plugin: 'docker-compose'\ndockerCompose.isRequiredBy(componentTest)\ncomponentTest.dependsOn(assemble)\ndockerCompose {\nstartedServices = [ 'ftgo-order-service']\n}\nThe preceding snippet of Gradle configurat ion does two things. First, it configures\nthe Gradle Docker Compose plugin to ru n before the component tests and start\nOrder Service along with the infrastructure services that it\u2019s configured to depend\non. Second, it configures componentTest to depend on assemble so that the JAR file\nrequired by the Docker image is built first.  With that in place, we can run these com-\nponent tests with the following commands:\n./gradlew :ftgo-order-service:componentTest", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2180, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f87cd4d6-bd45-463b-b143-a98afdc6b15c": {"__data__": {"id_": "f87cd4d6-bd45-463b-b143-a98afdc6b15c", "embedding": null, "metadata": {"page_label": "345", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e736685e-c12a-4228-abd4-781781ee81c4", "node_type": "4", "metadata": {"page_label": "345", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0c446b97f5d63c8111c801fb60d46facbfcd7eaea4d2d2bdf089a04ecf8314e1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "345Writing end-to-end tests\nThose commands, which take a couple of minutes, perform the following actions:\n1 Build Order Service.\n2 Run the service and its infrastructure services.\n3 Run the tests.\n4 Stop the running services.\nNow that we\u2019ve looked at how to test a serv ice in isolation, we\u2019ll see how to test the\nentire application. \n10.3 Writing end-to-end tests\nComponent testing tests each service separately. End-to-end testing, though, tests the\nentire application. As figure 10.8 shows, end-to-end testing is the top of the test pyra-\nmid. That\u2019s because these kinds of tests are\u2014say it with me now\u2014slow, brittle, and\ntime consuming to develop.\nEnd-to-end tests have a large number of mo ving parts. You must deploy multiple ser-\nvices and their supporting infrastructure services. As a result, end-to-end tests are slow.\nAlso, if your test needs to deploy a larg e number of services, there\u2019s a good chance\none of them will fail to deploy, making the tests unreliable. Consequently, you should\nminimize the number of end-to-end tests.\n10.3.1 Designing end-to-end tests\nAs I\u2019ve explained, it\u2019s best to write as fe w of these as possible. A good strategy is to\nwrite user journey tests. A user journey test corresponds to a user\u2019s journey through the\nsystem. For example, rather than test create order, revise order, and cancel order sep-\narately, you can write a single test that do es all three. This approach significantly\nreduces the number of tests you must write and shortens the test execution time. \nEnd-to-end\nComponent\nIntegration\nUnit\nEnd-to-end\ntest\nTests Service\nService 1\nService 2\nService ...\nFigure 10.8 End-to-end tests are at the top of the test pyramid. They are slow, brittle, and time \nconsuming to develop. You should minimize the number of end-to-end tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1787, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a88e983f-f45f-4714-89f1-fd7ed2fba780": {"__data__": {"id_": "a88e983f-f45f-4714-89f1-fd7ed2fba780", "embedding": null, "metadata": {"page_label": "346", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "468c4424-db9a-4680-8bd7-cf779f75ac0a", "node_type": "4", "metadata": {"page_label": "346", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "473f2f8b2f558dadb08dfd9ae2763f1d58cfd4f2762da2e602b66af29447d605", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "346 CHAPTER 10 Testing microservices: Part 2\n10.3.2 Writing end-to-end tests\nEnd-to-end tests are, like the acceptance tests covered in section 10.2, business-facing\ntests. It makes sense to write them in a high-level DSL that\u2019s understood by the busi-\nness people. You can, for example, write the end-to-end tests using Gherkin and exe-\ncute them using Cucumber. The following listing shows an example of such a test. It\u2019s\nsimilar to the acceptance tests we looked at earlier. The main difference is that rather\nthan a single Then, this test has multiple actions.\nFeature: Place Revise and Cancel\nAs a consumer of the Order Service\nI should be able to place, revise, and cancel an order\nScenario: Order created, revised, and cancelled\nGiven a valid consumer\nGiven using a valid credit card\nGiven the restaurant is accepting orders\nWhen I place an order for Chicken Vindaloo at Ajanta   \nThen the order should be APPROVED\nThen the order total should be 16.33\nAnd when I revise the order by adding 2 vegetable samosas   \nThen the order total should be 20.97\nAnd when I cancel the order\nThen the order should be CANCELLED       \nThis scenario places an order, revises it, and then cancels it. Let\u2019s look at how to run it. \n10.3.3 Running end-to-end tests\nEnd-to-end tests must run the entire applic ation, including any required infrastruc-\nture services. As you saw in earlier in section 10.2, the Gradle Docker Compose plugin\nprovides a convenient way to do this. Inst ead of running a single application service,\nthough, the Docker Compose file runs all the application\u2019s services.\n Now that we\u2019ve looked at different as pects of designing and writing end-to-end\ntests, let\u2019s see an example end-to-end test.\n The ftgo-end-to-end-test module implements the end-to-end tests for the FTGO\napplication. The implementation of the end- to-end test is quite similar to the imple-\nmentation of the component tests discussed earlier in section 10.2. These tests are\nwritten using Gherkin and executed usin g Cucumber. The Gradle Docker Compose\nplugin runs the containers before the tests run. It takes around four to five minutes to\nstart the containers and run the tests.\n That may not seem like a long time, but th is is a relatively simple application with\njust a handful of containers and tests. Im agine if there were hundreds of containers\nand many more tests. The tests could take quite a long time. Consequently, it\u2019s best to\nfocus on writing tests that are lower down the pyramid. \nListing 10.17 A Gherkin-based specification of a user journey\nCreate \nOrder.\nRevise \nOrder.\nCancel \nOrder.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2589, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e934064d-2bb0-45c8-85e3-60e15cca3fbb": {"__data__": {"id_": "e934064d-2bb0-45c8-85e3-60e15cca3fbb", "embedding": null, "metadata": {"page_label": "347", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e3ffd63d-69d2-4a83-9e5b-e69e67ab0d64", "node_type": "4", "metadata": {"page_label": "347", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "092b72d4071392841686a83778c334a4701279fd9747afece32f91079469120c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "347Summary\nSummary\n\uf0a1 Use contracts, which are example messages,  to drive the testing of interactions\nbetween services. Rather than write slow-running tests that run both services\nand their transitive dependencies, write tests that verify that the adapters of\nboth services conform to the contracts.\n\uf0a1 Write component tests to verify the behavior of a service via its API. You should\nsimplify and speed up component tests by testing a service in isolation, using\nstubs for its dependencies.\n\uf0a1 Write user journey tests to minimize the number of end-to-end tests, which are\nslow, brittle, and time consuming. A user journey test simulates a user\u2019s journey\nthrough the application and verifies high -level behavior of a relatively large\nslice of the application\u2019s functionality. Because there are few tests, the amount\nof per-test overhead, such as test setup, is minimized, which speeds up the tests.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 898, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "111d23ef-169a-4438-8477-363c15ee0f6a": {"__data__": {"id_": "111d23ef-169a-4438-8477-363c15ee0f6a", "embedding": null, "metadata": {"page_label": "348", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8c56e58-48b8-401c-9048-a38384860fb0", "node_type": "4", "metadata": {"page_label": "348", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "70b90b90afb84b3560bf71ea0547e8bb438096a8aae32c9c9ae2e503dd2047b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "348\nDeveloping\nproduction-ready services\nMary and her team felt that they had ma stered service decomposition, interservice\ncommunication, transaction management, querying and business logic design, and\ntesting. They were confident that they co uld develop services that met their func-\ntional requirements. But in order for a service to be ready to be deployed into\nproduction, they needed to ensure that it would also satisfy three critically import-\nant quality attributes: security, configurability, and observability.\nThis chapter covers:\n\uf0a1 Developing secure services\n\uf0a1 Applying the Externalized configuration pattern\n\uf0a1 Applying the observability patterns:\n\u2013 Health check API\n\u2013 Log aggregation\n\u2013 Distributed tracing\n\u2013 Exception tracking\n\u2013 Application metrics\n\u2013 Audit logging\n\uf0a1 Simplifying the development of services by \napplying the Microservice chassis pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 867, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "307a3e75-e242-4ceb-a8d6-d9af608055ed": {"__data__": {"id_": "307a3e75-e242-4ceb-a8d6-d9af608055ed", "embedding": null, "metadata": {"page_label": "349", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87de75c1-8298-4de5-bbb0-19df43d376af", "node_type": "4", "metadata": {"page_label": "349", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0f287346a5f7d8fee6fe2a09f1a649731dd69c01db7da10efd2870ab7e9a2223", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "349Developing secure services\n The first quality attribute is application security. It\u2019s essential to develop secure appli-\ncations, unless you want your company to be in the headlines for a data breach. Fortu-\nnately, most aspects of security in a micr oservice architecture are not any different\nthan in a monolithic application. The FTGO  team knew that much of what they had\nlearned over the years developing the monolith also applied to microservices. But the\nmicroservice architecture fo rces you to implement some aspects of application-level\nsecurity differently. For example, you ne ed to implement a mechanism to pass the\nidentity of the user from one service to another.\n The second quality attribute you must address is service configurability. A service typ-\nically uses one or more external services, such as message brokers and databases. The\nnetwork location and credentials of each ex ternal service often depend on the envi-\nronment that the service is running in. You can\u2019t hard-wire the configuration proper-\nties into the service. Instead, you must use an externalized configuration mechanism\nthat provides a service with configuration properties at runtime.\n The third quality attribute is observability. The FTGO team had implemented\nmonitoring and logging for the existing application. But a microservice architecture\nis a distributed system, and that presents some additional challenges. Every request\nis handled by the API gateway and at least one service. Imagine, for example, that\nyou\u2019re trying to determine which of six serv ices is causing a latency issue. Or imag-\nine trying to understand how a request is handled when the log entries are scattered\nacross five different services. In order to make it easier to understand the behavior\nof your application and troubleshoot pr oblems, you must implement several observ-\nability patterns.\n I begin this chapter by describing how to implement security in a microservice\narchitecture. Next, I discuss how to design services that are configurable. I cover a\ncouple of different service configuration mechanisms. After that I talk about how to\nmake your services easier to understand and troubleshoot by using the observability\npatterns. I end the chapter by showing how to simplify the implementation of these\nand other concerns by developing your se rvices on top of a microservice chassis\nframework.\n Let\u2019s first look at security.\n11.1 Developing secure services\nCybersecurity has become a critical issue for every organization. Almost every day\nthere are headlines about how hackers have  stolen a company\u2019s data. In order to\ndevelop secure software and stay out of the headlines, an organization needs to\ntackle a diverse range of security issues, including physical security of the hardware,\nencryption of data in transit and at rest , authentication and authorization, and pol-\nicies for patching software vu lnerabilities. Most of these issues are the same regard-\nless of whether you\u2019re using a monolithic or  microservice architecture. This section\nfocuses on how the microservice architectu re impacts security at the application\nlevel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3123, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f07648f-0da7-4f57-88d3-1bd83af3a8da": {"__data__": {"id_": "3f07648f-0da7-4f57-88d3-1bd83af3a8da", "embedding": null, "metadata": {"page_label": "350", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "436c473a-d4cb-4af8-ab36-ea05b01e2657", "node_type": "4", "metadata": {"page_label": "350", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0861ae0a2ee4eccba7fbf7091b4d40d46484f38adc74b1a86f9407c461cc55da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "350 CHAPTER 11 Developing production-ready services\n An application developer is primarily responsible for implementing four different\naspects of security:\n\uf0a1 Authentication\u2014Verifying the identity of the application or human (a.k.a. the\nprincipal) that\u2019s attempting to access the application. For example, an applica-\ntion typically verifies a principal\u2019s credentials, such as a user ID and password or\nan application\u2019s API key and secret.\n\uf0a1 Authorization\u2014Verifying that the principal is allowed to perform the requested\noperation on the specified data. Applicat ions often use a combination of role-\nbased security and access control lists (ACLs). Role-based security assigns each\nuser one or more roles that grant them permission to invoke particular opera-\ntions. ACLs grant users or roles permission to perform an operation on a partic-\nular business object, or aggregate.\n\uf0a1 Auditing\u2014Tracking the operations that a principal performs in order to detect\nsecurity issues, help customer support, and enforce compliance.\n\uf0a1 Secure interprocess communication \u2014Ideally, all communication in and out of ser-\nvices should be over Transport Layer Security (TLS). Interservice communica-\ntion may even need to use authentication.\nI describe auditing in detail in section 11 .3 and touch on securing interservice com-\nmunication when discussing service meshes in section 11.4.1. This section focuses on\nimplementing authentication and authorization.\n I begin by first describing how securi ty is implemented in the FTGO monolith\napplication. I then describe the challenges with implementing security in a microser-\nvice architecture and how techniques that work well in a monolithic architecture can\u2019t\nbe used in a microservice architecture. After that I cover how to implement security in\na microservice architecture.\n Let\u2019s start by reviewing how the monolithic FTGO application handles security.\n11.1.1 Overview of security in a traditional monolithic application\nThe FTGO application has several kinds of human users, including consumers, cou-\nriers, and restaurant staff. They access  the application using browser-based web\napplications and mobile applications. All FTGO users must log in to access the appli-\ncation. Figure 11.1 shows how the clients of the monolithic FTGO application authen-\nticate and make requests.\n When a user logs in with their user ID an d password, the client m akes a POST\nrequest containing the user\u2019s credentials to the FTGO application. The FTGO appli-\ncation verifies the credentials and return s a session token to the client. The client\nincludes the session token in each subsequent request to the FTGO application.\n Figure 11.2 shows a high-level view of how the FTGO application implements secu-\nrity. The FTGO application is written in Java and uses the Spring Security framework,\nbut I\u2019ll describe the design using generic terms that are applicable to other frame-\nworks, such as Passport for NodeJS.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2935, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7942d18a-3762-4d72-9a44-b73125876f64": {"__data__": {"id_": "7942d18a-3762-4d72-9a44-b73125876f64", "embedding": null, "metadata": {"page_label": "351", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56d75f39-4020-43b5-8bcf-860a9aed42fd", "node_type": "4", "metadata": {"page_label": "351", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "520faa58f310be0ee8f8a2ac7d651056a420bde9ed753cc9743185a72db2281e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "351Developing secure services\nOne key part of the security architecture is the session, which stores the principal\u2019s ID\nand roles. The FTGO application is a traditional Java EE application, so the session is\nan HttpSession in-memory session. A session is identified by a session token, which the\nclient includes in each request. It\u2019s usuall y an opaque token such as a cryptographi-\ncally strong random number. The FTGO application\u2019s session token is an HTTP\ncookie called JSESSIONID.\n The other key part of the security  implementation is the security context, which\nstores information about the user making the current request. The Spring Security\nUsing a security framework\nImplementing authentication and authorization correctly is challenging. It\u2019s best to\nuse a proven security framework. Which framework to use depends on your applica-\ntion\u2019s technology stack. Some popular frameworks include the following:\n\uf0a1 Spring Security (https://projects.spring.io/spring-security/)\u2014A popular frame-\nwork for Java applications. It\u2019s a sophisticated framework that handles authen-\ntication and authorization.\n\uf0a1 Apache Shiro (https://shiro.apache.org)\u2014Another Java framework.\n\uf0a1 Passport (http://www.passportjs.org)\u2014A popular security framework for NodeJS\napplications that\u2019s focused on authentication.\nLog in to obtain session\ntoken, which is a cookie.\nInclude session token cookie,\nwhich identi\ufb01es the user, in\nsubsequent requests.\nConsumer\nrestaurant\ncourier\nBrowser\nor mobile\napplication\nPOST /login\nid=...\npassword=...\nHTTP/1.1 200 OK\nSet-cookie: JSESSIONID=...\n...\nGET /orders/order-xyz\nCookie: JSESSIONID=...\nFTGO\napplication\nFigure 11.1 A client of the FTGO application first lo gs in to obtain a session token, which is often a \ncookie. The client includes the session token in each subsequent request it makes to the application.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a4be14e-44e1-457b-80f6-3864eb0a6742": {"__data__": {"id_": "1a4be14e-44e1-457b-80f6-3864eb0a6742", "embedding": null, "metadata": {"page_label": "352", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c045498-f2d0-4fd6-9f06-ade4a1ad899a", "node_type": "4", "metadata": {"page_label": "352", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a801ba23e11245fad6dbe384ac4429467f73db2b24b55fc0178e64686433de8e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "352 CHAPTER 11 Developing production-ready services\nframework uses the standard Java EE approa ch of storing the security context in a\nstatic, thread-local variable, which is readily accessible to any code that\u2019s invoked to han-\ndle the request. A request handler can call SecurityContextHolder.getContext()\n.getAuthentication() to obtain information about th e current user, such as their\nidentity and roles. In contrast, the Passpor t framework stores the security context as\nthe user attribute of the request.\nThe sequence of events shown in Figure 11.2 is as follows:\n1 The client makes a login request to the FTGO application.\n2 The login request is handled by LoginHandler, which verifies the credentials, cre-\nates the session, and stores information about the principal in the session.\n3 Login Handler returns a session token to the client.\n4 The client includes the session token in requests that invoke operations.\n5 These requests are first processed by SessionBasedSecurityInterceptor. The\ninterceptor authenticates each request by verifying the session token and estab-\nlishes a security context. The security context describes the principal and its roles.\nUser\ndatabase\nLog in with user ID\nand password.\nInitializes\nProvides session cookie\nEstablishes Reads\nReturn session cookie.\nJane\nLogin-based\nclient\nSessionBased\nSecurity\nInterceptor\nOrderDetails\nRequestHandler\nUserId: jane\nrules: [CONSUMER]\n...\nUserId: jane\nrules: [CONSUMER]\n...\nLogin\nhandler\nPOST /login\nuserId-Jane&password=..\nHTTP/1.1 200 OK\nSet-cookie: JSESSIONID=...\n...\nGET /orders/order-xyz\nCookie: JSESSIONID=...\nFTGO application\nRetrieves user information\nfrom database\nReads\nEstablishes\nSecurity context\nSession\nFigure 11.2 When a client of the FTGO application makes a login request, Login Handler authenticates the \nuser, initializes the session user information, and returns a session token cookie, which securely identifies the \nsession. Next, when the client makes a request containing the session token, SessionBasedSecurity-\nInterceptor retrieves the user information from the specified session and establishes the security context. \nRequest handlers, such as OrderDetailsRequestHandler, retrieve the user information from the security \ncontext.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2234, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3addccae-d68f-4a0d-8185-225fc9477a88": {"__data__": {"id_": "3addccae-d68f-4a0d-8185-225fc9477a88", "embedding": null, "metadata": {"page_label": "353", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac99dbf0-0ad9-48ad-ba50-fc72b1e0c0bd", "node_type": "4", "metadata": {"page_label": "353", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "21a268dce099b816880775048a853dcd718087f3cc9b6d1f35b0e126e10a48b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "353Developing secure services\n6 A request handler uses the security co ntext to determine whether to allow a\nuser to perform the requested operation and obtain their identity.\nThe FTGO application uses role-based authorization. It defines several roles corre-\nsponding to the different kinds of users, including CONSUMER, RESTAURANT, COURIER,\nand ADMIN. It uses Spring Security\u2019s declarative security mechanism to restrict access to\nURLs and service methods to specific roles.  Roles are also interwoven into the busi-\nness logic. For example, a consumer can only access their orders, whereas an adminis-\ntrator can access all orders.\n The security design used by the monolithic FTGO application is only one possible\nway to implement security. For example, one drawback of using an in-memory session\nis that it requires all requests for a particular session to be routed to the same applica-\ntion instance. This requirement complicates load balancing and operations. You must,\nfor example, implement a session draining  mechanism that waits for all sessions to\nexpire before shutting down an applicatio n instance. An alternative approach, which\navoids these problems, is to store the session in a database.\n You can sometimes eliminate the server-s ide session entirely. For example, many\napplications have API clients that provide their credentials, such as an API key and\nsecret, in every request. As a result, there\u2019s no need to maintain a server-side session.\nAlternatively, the application can store se ssion state in the session token. Later in\nthis section, I describe one way to use a session token to store the session state. But\nlet\u2019s begin by looking at the challenges of implementing security in a microservice\narchitecture. \n11.1.2 Implementing security in a microservice architecture\nA microservice architecture is a distributed architecture. Each external request is han-\ndled by the API gateway and at least on e service. Consider, for example, the get-\nOrderDetails() query, discussed in chapter 8. The API gateway handles this query by\ninvoking several services, including Order Service, Kitchen Service, and Accounting\nService. Each service must implement some aspects of security. For instance, Order\nService must only allow a consumer to see their orders, which requires a combina-\ntion of authentication and authorization. In order to implement security in a micros-\nervice architecture we need to determine who is responsible for authenticating the\nuser and who is responsible for authorization.\n One challenge with implementing security in a microservices application is that we\ncan\u2019t just copy the design from a monolithic application. That\u2019s because two aspects of\nthe monolithic application\u2019s security archit ecture are nonstarters for a microservice\narchitecture:\n\uf0a1 In-memory security context\u2014Using an in-memory security context, such as a thread-\nlocal, to pass around user identity. Serv ices can\u2019t share memory, so they can\u2019t\nuse an in-memory security context, such  as a thread-local, to pass around the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3036, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "38d7fb5a-2c39-4c30-8db9-0fe934b0fbb6": {"__data__": {"id_": "38d7fb5a-2c39-4c30-8db9-0fe934b0fbb6", "embedding": null, "metadata": {"page_label": "354", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d08869d-8e6e-4b2d-a67b-46294e326cd4", "node_type": "4", "metadata": {"page_label": "354", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "37dbb1b391a9fb4721fc4c188edf737b37221e71aa29711010345baa85ff8ad7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "354 CHAPTER 11 Developing production-ready services\nuser identity. In a microservice architecture, we need a different mechanism for\npassing user identity from one service to another.\n\uf0a1 Centralized session \u2014Because an in-memory security context doesn\u2019t make sense,\nneither does an in-memory session. In th eory, multiple services could access a\ndatabase-based session, except that it would violate the principle of loose cou-\npling. We need a different session mechanism in a microservice architecture.\nLet\u2019s begin our exploration of security in a microservice architecture by looking at\nhow to handle authentication.\nHANDLING AUTHENTICATION IN THE API GATEWAY\nThere are a couple of different ways to ha ndle authentication. One option is for the\nindividual services to authenticate the user. The problem with this approach is that it\npermits unauthenticated requests to enter th e internal network. It relies on every\ndevelopment team correctly implementing security in all of their services. As a result,\nthere\u2019s a significant risk of an application containing security vulnerabilities.\n Another problem with implementing authentication in the services is that differ-\nent clients authenticate in different ways . Pure API clients supply credentials with\neach request using, for example, basic authentication. Other clients might first log in\nand then supply a session token with each request. We want to avoid requiring services\nto handle a diverse set of authentication mechanisms.\n A better approach is for the API gateway to authenticate a request before forward-\ning it to the services. Centralizing API authentication in the API gateway has the\nadvantage that there\u2019s only one place to get right. As a result, there\u2019s a much smaller\nchance of a security vulnerability. Another benefit is that only the API gateway has to\ndeal with the various different authentication mechanisms. It hides this complexity\nfrom the services.\n Figure 11.3 shows how this approach works. Clients authenticate with the API gate-\nway. API clients include credentials in  each request. Login-based clients POST the\nuser\u2019s credentials to the API gateway\u2019s authentication and receive a session token.\nOnce the API gateway has authenticated a request, it invokes one or more services.\nA service invoked by the API gateway needs to know the principal making the request.\nIt must also verify that the request has been authenticated. The solution is for the API\ngateway to include a token in each service request. The service uses the token to vali-\ndate the request and obtain information a bout the principal. The API gateway might\nalso give the same token to session-oriented clients to use as the session token.\nPattern: Access token\nThe API gateway passes a token containing information about the user, such as their\nidentity and their roles, to the services that it invokes. See http://microservices.io/\npatterns/security/access-token.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2925, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "12b7a5b1-b207-4e58-a522-ff74686c70d9": {"__data__": {"id_": "12b7a5b1-b207-4e58-a522-ff74686c70d9", "embedding": null, "metadata": {"page_label": "355", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26b72d64-ce08-46b2-b3b6-3c4217bbdb05", "node_type": "4", "metadata": {"page_label": "355", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ec0c110856af41e7becb29e4097138b0ffc1573649980d62edc41c1925406668", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "355Developing secure services\nThe sequence of events for API clients is as follows:\n1 A client makes a request containing credentials.\n2 The API gateway authenticates the credentials, creates a security token, and\npasses that to the service or services.\nThe sequence of events for login-based clients is as follows:\n1 A client makes a login request containing credentials.\n2 The API gateway returns a security token.\n3 The client includes the security token in requests that invoke operations.\n4 The API gateway validates the security to ken and forwards it to the service or\nservices.\nA little later in this chapter, I describe how to implement tokens, but let\u2019s first look at\nthe other main aspect of security: authorization. \nOrder\nService\nAPI clients supply credentials\nin the Authorization header.\nPass token to services so\nthat they can identify and\nauthorize the user.\nInclude the security token\nin each request.\nLogin clients \ufb01rst obtain\na security token.\nAuthentication\nInterceptor\nAPI gateway\nLogin-based\nclient\nGET /orders/1\nAuthorization: ...CREDENTIALS...\n...\nGET /orders/1\n...SECURITY_TOKEN...\nHTTP/1.1 200 OK\n...SECURITY_TOKEN...\nGET /orders/1\n...SECURITY_TOKEN...\nPOST /login\nid=...\npassword=...\nAPI client\nFigure 11.3 The API gateway authenticates requests from clients and includes a security token in the requests \nit makes to services. The services use the token to obtain information about the principal. The API gateway can \nalso use the security token as a session token.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "024802cb-def9-45aa-b6a5-96e88441edc6": {"__data__": {"id_": "024802cb-def9-45aa-b6a5-96e88441edc6", "embedding": null, "metadata": {"page_label": "356", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "130285dc-0bc9-498d-bc29-5f5afccaf16f", "node_type": "4", "metadata": {"page_label": "356", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4dd01dcc9bd254f8ac88052e899fd43252c7d49ea5445982f13943b7790e2568", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "356 CHAPTER 11 Developing production-ready services\nHANDLING AUTHORIZATION\nAuthenticating a client\u2019s credentials is important but insufficient. An application\nmust also implement an authorization mech anism that verifies that the client is\nallowed to perform the requested operation. For example, in the FTGO application\nthe getOrderDetails() query can only be invoked by the consumer who placed the\nOrder (an example of instance-based security) and a customer service agent who is\nhelping the consumer.\n One place to implement authorization is  the API gateway. It can, for example,\nrestrict access to GET /orders/{orderId} to only users who are consumers and cus-\ntomer service agents. If a user isn\u2019t allowed to access a particular path, the API gateway\ncan reject the request before forwarding it on to the service. As with authentication,\ncentralizing authorization within the API gateway reduces the risk of security vulnera-\nbilities. You can implement authorization in  the API gateway using a security frame-\nwork, such as Spring Security.\n One drawback of implementing authorizat ion in the API gateway is that it risks\ncoupling the API gateway to the services, re quiring them to be updated in lockstep.\nWhat\u2019s more, the API gateway can typically only implement role-based access to URL\npaths. It\u2019s generally not practical for the API gateway to implement ACLs that control\naccess to individual domain objects, because that requires detailed knowledge of a ser-\nvice\u2019s domain logic.\n The other place to implement authorization is in the services. A service can imple-\nment role-based authorization for URLs and for service methods. It can also implement\nACLs to manage access to aggregates. Order Service can, for example, implement the\nrole-based and ACL-based authorization mechanism for controlling access to orders.\nOther services in the FTGO application implement similar authorization logic. \nUSING JWTS TO PASS USER IDENTITY AND ROLES\nWhen implementing security in a microservice architecture, you need to decide which\ntype of token an API gateway should use to pass user information to the services.\nThere are two types of tokens to ch oose from. One option is to use opaque tokens,\nwhich are typically UUIDs. The downside of opaque tokens is that they reduce perfor-\nmance and availability and increase latency. That\u2019s because the recipient of such a\ntoken must make a synchronous RPC call to a security service to validate the token\nand retrieve the user information.\n An alternative approach, which eliminates the call to the security service, is to use a\ntransparent token containing information about the user. One such popular standard\nfor transparent tokens is the JSON Web Token (JWT). JWT is standard way to securely\nrepresent claims, such as user identity and roles, between two parties. A JWT has a pay-\nload, which is a JSON object that contains  information about the user, such as their\nidentity and roles, and other metadata, such as an expiration date. It\u2019s signed with a\nsecret that\u2019s only known to the creator of the JWT, such as the API gateway and the\nrecipient of the JWT, such as a service. The secret ensures that a malicious third party\ncan\u2019t forge or tamper with a JWT.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3213, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "74a4e749-1181-44f9-924f-9868e17f4e2a": {"__data__": {"id_": "74a4e749-1181-44f9-924f-9868e17f4e2a", "embedding": null, "metadata": {"page_label": "357", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a747d33-f30b-434a-a3aa-05985b1799d5", "node_type": "4", "metadata": {"page_label": "357", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c77d942807725f4288366915716b0275daec0e1f459bbeea38b8f67bd616d06c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "357Developing secure services\n One issue with JWT is that because a toke n is self-contained, it\u2019s irrevocable. By\ndesign, a service will perform the request operation after verifying the JWT\u2019s signature\nand expiration date. As a result, there\u2019s no practical way to revoke an individual JWT\nthat has fallen into the hands of a malicious third party. The solution is to issue JWTs\nwith short expiration times, because that limits what a malicious party could do. One\ndrawback of short-lived JWTs, though, is that the application must somehow continually\nreissue JWTs to keep the session active. Fortunately, this is one of the many protocols\nthat are solved by a security standard calling OAuth 2.0. Let\u2019s look at how that works. \nUSING OAUTH 2.0 IN A MICROSERVICE ARCHITECTURE\nLet\u2019s say you want to implement a User Service for the FTGO application that man-\nages a user database containing user inform ation, such as credentials and roles. The\nAPI gateway calls the User Service to authenticate a client request and obtain a JWT.\nYou could design a User Service API and implement it using your favorite web frame-\nwork. But that\u2019s generic functionality that  isn\u2019t specific to the FTGO application\u2014\ndeveloping such a service wouldn\u2019t be an efficient use of development resources.\n Fortunately, you don\u2019t need to develop this kind of security infrastructure. You can\nuse an off-the-shelf service or framework that implements a standard called OAuth 2.0.\nOAuth 2.0 is an authorization protocol that was originally designed to enable a user of\na public cloud service, such as GitHub or Google, to grant a third-party application\naccess to its information without revealing its password. For example, OAuth 2.0 is the\nmechanism that enables you to securely grant a third party cloud-based Continuous\nIntegration (CI) service access to your GitHub repository.\n Although the original focus of OAuth 2.0 was authorizing access to public cloud\nservices, you can also use it for authentication and authorization in your application.\nLet\u2019s take a quick look at how a microservice architecture might use OAuth 2.0.\nThe key concepts in OAuth 2.0 are the following:\n\uf0a1 Authorization Server\u2014Provides an API for authen ticating users and obtain-\ning an access token and a refresh token.  Spring OAuth is a great example of a\nframework for building an OAuth 2.0 authorization server.\n\uf0a1 Access Token\u2014A token that grants access to a Resource Server. The format of\nthe access token is implementation de pendent. But some implementations,\nsuch as Spring OAuth, use JWTs.\nAbout OAuth 2.0\nOAuth 2.0 is a complex topic. In this chapter, I can only provide a brief overview and\ndescribe how it can be used in a microservice architecture. For more information\non OAuth 2.0, check out the online book OAuth 2.0 Servers  by Aaron Parecki\n(www.oauth.com). Chapter 7 of Spring Microservices in Action (Manning, 2017) also\ncovers this topic ( https://livebook.manning.com/#!/book/spring-microservices-in-\naction/chapter-7/).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2994, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d294ada-bdc6-4925-b7a0-77ca374d1b39": {"__data__": {"id_": "8d294ada-bdc6-4925-b7a0-77ca374d1b39", "embedding": null, "metadata": {"page_label": "358", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4f7362a8-ae6c-4d72-8a7b-595020f0ad22", "node_type": "4", "metadata": {"page_label": "358", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "acfa029925e30bdd39a7b1d6cf81bd4041c934e0561d5a67c865ab4732749013", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "358 CHAPTER 11 Developing production-ready services\n\uf0a1 Refresh Token\u2014A long-lived yet revocable token that a Client uses to obtain a\nnew AccessToken.\n\uf0a1 Resource Server\u2014A service that uses an access token to authorize access. In a\nmicroservice architecture, the services are resource servers.\n\uf0a1 Client\u2014A client that wants to access a Resource Server. In a microservice\narchitecture, API Gateway is the OAuth 2.0 client.\nLater in this section, I describe how to suppo rt login-based clients. But first, let\u2019s talk\nabout how to authenticate API clients.\n Figure 11.4 shows how the API gateway authenticates a request from an API client.\nThe API gateway authenticate the API client by making a request to the OAuth 2.0\nauthorization server, which returns an access token. The API gateway then makes one\nor more requests containing the access token to the services.\n The sequence of events shown in figure 11.4 is as follows:\n1 The client makes a request, supplying its credentials using basic authentication.\n2 The API gateway makes an OAuth 2.0 Password Grant request (www.oauth.com/\noauth2-servers/access-tokens/password-grant/) to the OAuth 2.0 authentication\nserver.\nOrder\nService\nUser\ndatabase\nContains the user\nID and their roles\nPassword grant request\nAPI gateway\nSpring OAuth2\nAuthentication\nServer\nGET /orders/1\nAuthorization: Basic...\n....\nPOST/oauth/token\nuserid=...&password=...\nGET /orders/1\nAuthorization: Bearer AccessToken\nHTTP/1.1 200 OK\n...\n{\n\"access_token\": \"AccessToken\"\n...\n}API client\nFigure 11.4 An API gateway authenticates  an API client by making a Password Grant request to the OAuth 2.0 \nauthentication server. The server returns an access token, which the API gateway passes to the services. A service \nverifies the token\u2019s signature and extracts information about the user, including their identity and roles.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1834, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01235999-7e4e-438b-89c4-8f095790be01": {"__data__": {"id_": "01235999-7e4e-438b-89c4-8f095790be01", "embedding": null, "metadata": {"page_label": "359", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a376874-9478-4e48-9f75-a06c17a07f05", "node_type": "4", "metadata": {"page_label": "359", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "247da90e41d6010a61df54fe07ae41d537c1359d8eda3be3d485b49a88228ca3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "359Developing secure services\n3 The authentication server validates the API client\u2019s credentials and returns an\naccess token and a refresh token.\n4 The API gateway includes the access token in the requests it makes to the ser-\nvices. A service validates the access token and uses it to authorize the request.\nAn OAuth 2.0-based API gateway can authenticate session-oriented clients by using an\nOAuth 2.0 access token as a session toke n. What\u2019s more, when the access token\nexpires, it can obtain a new access token using the refresh token. Figure 11.5 shows\nhow an API gateway can use OAuth 2.0 to ha ndle session-oriented clients. An API cli-\nent initiates a session by POSTing its credentials to the API gateway\u2019s /login end-\npoint. The API gateway returns an access token and a refresh token to the client. The\nAPI client then supplies both tokens when it makes requests to the API gateway.\nThe sequence of events is as follows:\n1 The login-based client POSTs its credentials to the API gateway.\n2 The API gateway\u2019s Login Handler makes an OAuth 2.0 Password Grant request\n(www.oauth.com/oauth2-servers/access-tokens/password-grant/) to the OAuth\n2.0 authentication server.\nOrder\nService\nUser\ndatabase\nPassword grant request\nAPI gateway\nSpring OAuth2\nAuthentication\nServer\nPOST/login\nuserId=...&password=...\nGET/orders/1\nCookie: access_token=...;refresh_token...\nHTTP/1.1 200 OK\nSet-Cookie: access_token=...\nSet-Cookie:refresh_token=...\nPOST/oauth/token\nuserid=...&password=...\nGET /orders/1\nAuthorization: Bearer AccessToken\nHTTP/1.1 200 OK\n...\n{\n\"access_token\": \"AccessToken\"\n...\n}\nLogin-based\nclient\nLogin\nhandler\nSession\nauthentication\ninterceptor\nFigure 11.5 A client logs in by POSTing its credentials to the API gateway. The API gateway authenticates the \ncredentials using the OAuth 2.0 authentication server and returns the access token and refresh token as cookies. \nA client includes these tokens in the requests it makes to the API gateway.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1954, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c5a5fed-3ff7-453a-9f95-9855920ac060": {"__data__": {"id_": "4c5a5fed-3ff7-453a-9f95-9855920ac060", "embedding": null, "metadata": {"page_label": "360", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6c0ba1f-d4d7-45d4-a645-70c79b5b8c6d", "node_type": "4", "metadata": {"page_label": "360", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ac77b2afc4e937381bfc53241096efbb0466f6c1b6c1c29f9e7a6992b8e7afe9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "360 CHAPTER 11 Developing production-ready services\n3 The authentication server validates the client\u2019s credentials and returns an access\ntoken and a refresh token.\n4 The API gateway returns the access and refresh tokens to the client\u2014as cookies,\nfor example.\n5 The client includes the access and refresh tokens in requests it makes to the API\ngateway.\n6 The API gateway\u2019s Session Authentication Interceptor validates the access\ntoken and includes it in requests it makes to the services.\nIf the access token has expired or is abou t to expire, the API gateway obtains a new\naccess token by making an OAuth 2.0 Refresh Grant request ( www.oauth.com/\noauth2-servers/access-tokens/refreshing-access-tokens/), which contains the refresh\ntoken, to the authorization server. If the refresh token hasn\u2019t expired or been revoked,\nthe authorization server returns a new access token. API Gateway passes the new\naccess token to the services and returns it to the client.\n An important benefit of using OAuth 2.0 is  that it\u2019s a proven security standard.\nUsing an off-the-shelf OAuth 2.0 Authentication Server means you don\u2019t have to\nwaste time reinventing the wheel or risk developing an insecure design. But OAuth\n2.0 isn\u2019t the only way to implement security in a microservice architecture. Regardless\nof which approach you use, the three key ideas are as follows:\n\uf0a1 The API gateway is responsible for authenticating clients.\n\uf0a1 The API gateway and the services use a transparent token, such as a JWT, to pass\naround information about the principal.\n\uf0a1 A service uses the token to obtain the principal\u2019s identity and roles.\nNow that we\u2019ve looked at how to make se rvices secure, let\u2019s see how to make them\nconfigurable. \n11.2 Designing configurable services\nImagine that you\u2019re responsible for Order History Service. As figure 11.6 shows, the\nservice consumes events from Apache Kafka and reads and writes AWS DynamoDB\ntable items. In order for this service to ru n, it needs various configuration properties,\nincluding the network location of Apache Kafka and the credentials and network loca-\ntion for AWS DynamoDB.\n The values of these configuration properties depend on which environment the\nservice is running in. For example, the de veloper and production environments will\nuse different Apache Kafka brokers and di fferent AWS credentials. It doesn\u2019t make\nsense to hard-wire a particular environment\u2019s configuration property values into the\ndeployable service because that would requir e it to be rebuilt for each environment.\nInstead, a service should be built once by the deployment pipeline and deployed into\nmultiple environments.\n Nor does it make sense to hard-wire different sets of configuration properties into\nthe source code and use, for example, th e Spring Framework\u2019s profile mechanism to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2798, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d10159e-7f1c-4e30-be95-561d44649fa8": {"__data__": {"id_": "8d10159e-7f1c-4e30-be95-561d44649fa8", "embedding": null, "metadata": {"page_label": "361", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c32bcd9e-8f82-4dd2-b041-c5739a3832f7", "node_type": "4", "metadata": {"page_label": "361", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a9aa3503ac3a9046f51a0ab07e8abac45575506edd1f3c2f3a3fb83335b8aa88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "361Designing configurable services\nselect the appropriate set at runtime. That\u2019s because doing so would introduce a secu-\nrity vulnerability and limit where it can be deployed. Additionally, sensitive data such\nas credentials should be stored securely using a secrets storage mechanism, such as\nHashicorp Vault ( www.vaultproject.io ) or AWS Parameter Store ( https://docs.aws\n.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html).\nInstead, you should supply the appropriate configuration properties to the service at\nruntime by using the Externalized configuration pattern.\nAn externalized configuration mechanism provides the configuration property values\nto a service instance at runtime. There are two main approaches:\n\uf0a1 Push model\u2014The deployment infrastructure passes the configuration properties\nto the service instance using, for exam ple, operating system environment vari-\nables or a configuration file.\n\uf0a1 Pull model\u2014The service instance reads its co nfiguration properties from a con-\nfiguration server.\nWe\u2019ll look at each approach, starting with the push model.\nPattern: Externalized configuration\nSupply configuration property values, such as database credentials and network\nlocation, to a service at runtime. See http://microservices.io/patterns/externalized-\nconfiguration.html.\nOrder\nHistory\nService\nEnvironment-speci\ufb01c con\ufb01guration\nEnvironment-speci\ufb01c con\ufb01guration\nApache\nKafka\nconsumer\nApache Kafka\nbootstrap.servers=kafka1:9092\n..\naws.access.key.id=...\naws.secret.access.key=...\naws.region=...\n\u00abOrder event channel\u00bb\nDynamoDB\nadapter AWS DynamoDB\n\u00abDelivery event channel\u00bb\nFigure 11.6 Order History Service uses Apache Kafka and AWS DynamoDB. It needs to be \nconfigured with each service\u2019s network location, credentials, and so on.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1772, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63374de0-66e3-41f4-96ca-9b5ffa822401": {"__data__": {"id_": "63374de0-66e3-41f4-96ca-9b5ffa822401", "embedding": null, "metadata": {"page_label": "362", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "628b1a3d-9748-46c9-b5a0-e9ce084ec7bb", "node_type": "4", "metadata": {"page_label": "362", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b32d76729e9ce8f404a241bc56e1d7ed8dc1d3757b2c6228a0904335f6736ee8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "362 CHAPTER 11 Developing production-ready services\n11.2.1 Using push-based externalized configuration\nThe push model relies on the collaboratio n of the deployment environment and the\nservice. The deployment environment supp lies the configuration properties when it\ncreates a service instance. It might, as figu re 11.7 shows, pass the configuration prop-\nerties as environment variables. Alternat ively, the deployment environment may sup-\nply the configuration properties using a co nfiguration file. The service instance then\nreads the configuration properties when it starts up.\nThe deployment environment and the servic e must agree on how the configuration\nproperties are supplied. The precise mechanism depends on the specific deployment\nenvironment. For example, chapter 12 describes how you can specify the environment\nvariables of a Docker container.\n Let\u2019s imagine that you\u2019ve decided to s upply externalized configuration property\nvalues using environment variables. Your application could call System.getenv() to\nobtain their values. But if you\u2019re a Java developer, it\u2019s likely that you\u2019re using a frame-\nwork that provides a more convenient mechanism. The FTGO services are built using\nSpring Boot, which has an extremely flexib le externalized configuration mechanism\nthat retrieves configuration properties from a variety of sources with well-defined pre-\ncedence rules (https://docs.spring.io/spring-boot/docs/current/reference/html/boot-\nfeatures-external-config.html). Let\u2019s look at how it works.\n Spring Boot reads properties from a variety of sources. I find the following sources\nuseful in a microservice architecture:\n \nOrder\nHistory Service\ninstance\nProcess\nEnvironment variables\nDeployment\ninfrastructure\nCon\ufb01gures\nCreates\nReads\nBOOTSTRAP_SERVERS=kafka1:9092\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=...\nAWS_REGION=...\n....\nFigure 11.7 When the deployment infrastructure creates an instance of Order History \nService, it sets the environment variables containing the externalized configuration. Order \nHistory Service reads those environment variables.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2079, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7371e89c-7d64-444c-8067-821c60fdc33b": {"__data__": {"id_": "7371e89c-7d64-444c-8067-821c60fdc33b", "embedding": null, "metadata": {"page_label": "363", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fec73a45-1ce5-4787-849b-0909dbfa447c", "node_type": "4", "metadata": {"page_label": "363", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "91f9e830636c53c48485edc5b0c7b603efc62d35787885ebce0e90b59b94d6ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "363Designing configurable services\n1 Command-line arguments\n2 SPRING_APPLICATION_JSON, an operating system environment variable or JVM\nsystem property that contains JSON\n3 JVM System properties\n4 Operating system environment variables\n5 A configuration file in the current directory\nA particular property value from a source ea rlier in this list overrides the same prop-\nerty from a source later in this list. For example, operating system environment vari-\nables override properties read from a configuration file.\n Spring Boot makes these properties available to the Spring Framework\u2019s\nApplicationContext. A service can, for example, obtain the value of a property using\nthe @Value annotation:\npublic class OrderHistoryDynamoDBConfiguration {\n@Value(\"${aws.region}\")\nprivate String awsRegion;\nThe Spring Framework initializes the awsRegion field to the value of the aws.region\nproperty. This property is read from one of the sources listed earlier, such as a config-\nuration file or from the AWS_REGION environment variable.\n The push model is an effective and wide ly used mechanism for configuring a ser-\nvice. One limitation, however, is that reco nfiguring a running service might be chal-\nlenging, if not impossible. The deployme nt infrastructure might not allow you to\nchange the externalized configuration of a running service without restarting it. You\ncan\u2019t, for example, change the environment variables of a running process. Another\nlimitation is that there\u2019s a risk of the co nfiguration property values being scattered\nthroughout the definition of numerous services. As a result, you may want to consider\nusing a pull-based model. Let\u2019s look at how it works. \n11.2.2 Using pull-based externalized configuration\nIn the pull model, a service instance reads its configuration properties from a configura-\ntion server. Figure 11.8 shows how it works. On startup, a service instance queries the\nconfiguration service for its configuration. The configuration properties for accessing\nthe configuration server, such as its netw ork location, are provided to the service\ninstance via a push-based configuration mechanism, such as environment variables.\n There are a variety of ways to implem ent a configuration server, including the\nfollowing:\n\uf0a1 Version control system such as Git\n\uf0a1 SQL and NoSQL databases\n\uf0a1 Specialized configuration servers, such as Spring Cloud Config Server, Hashicorp\nVault, which is a store for sensitive data such as credentials, and AWS Parameter\nStore", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2487, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6d2923c-c052-4c3e-97da-2ee2bc6cd84b": {"__data__": {"id_": "d6d2923c-c052-4c3e-97da-2ee2bc6cd84b", "embedding": null, "metadata": {"page_label": "364", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe887ef0-9717-4e51-a898-1280560b7b11", "node_type": "4", "metadata": {"page_label": "364", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f17a14fd0b1b41d87caf3aeff7bf5a61219366327db8417d5401b23e9391ef49", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "364 CHAPTER 11 Developing production-ready services\nThe Spring Cloud Config project is a good  example of a configuration server-based\nframework. It consists of a server and a client. The server supports a variety of backends\nfor storing configuration properties, including version control systems, databases, and\nHashicorp Vault. The client retrieves conf iguration properties from the server and\ninjects them into the Spring ApplicationContext.\n Using a configuration server has several benefits:\n\uf0a1 Centralized configuration \u2014All the configuration properties are stored in one\nplace, which makes them easier to manage. What\u2019s more, in order to eliminate\nduplicate configuration properties, some implementations let you define global\ndefaults, which can be overridden on a per-service basis.\n\uf0a1 Transparent decryption of sensitive data\u2014Encrypting sensitive data such as database\ncredentials is a security best practice. One challenge of using encryption, though,\nis that usually the service instance needs to decrypt them, which means it needs\nthe encryption keys. Some configuration server implementations automatically\ndecrypt properties before returning them to the service.\n\uf0a1 Dynamic reconfiguration\u2014A service could potentially detect updated property val-\nues by, for example, polling, and reconfigure itself.\nThe primary drawback of using a configuratio n server is that unless it\u2019s provided by\nthe infrastructure, it\u2019s yet another piece of infrastructure that needs to be set up and\nmaintained. Fortunately, there are various open source frameworks, such as Spring\nCloud Config, which make it easier to run a configuration server.\n Now that we\u2019ve looked at how to design configurable services, let\u2019s talk about how\nto design observable services. \n11.3 Designing observable services\nLet\u2019s say you\u2019ve deployed the FTGO application into production. You probably want\nto know what the application is doing: requ ests per second, resource utilization, and\nOrder\nHistory Service\ninstance\nProcess\nCon\ufb01gures\nCreates\nCONFIG_SERVER_URL=...\ngetCon\ufb01guration(\u201corderHistoryService\u201d)\nBOOTSTRAP_SERVERS=kafka1:9092\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=...\nAWS_REGION=...\n....\nEnvironment variables\nDeployment\ninfrastructure\nCon\ufb01guration\nserver\nFigure 11.8 On startup, a service instance retrieves it s configuration properties from a configuration server. The \ndeployment infrastructure provides the configuration properties for accessing the configuration server.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2459, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3d66b24a-dba2-4fff-91d8-e9cea78b94b5": {"__data__": {"id_": "3d66b24a-dba2-4fff-91d8-e9cea78b94b5", "embedding": null, "metadata": {"page_label": "365", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db5903af-d9eb-4978-add5-3ce8cd5d9e61", "node_type": "4", "metadata": {"page_label": "365", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ed7e996bba40fa651e85c8ab2e840a4ef24f9697789f49d022e608d7c886f6ec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "365Designing observable services\nso on. You also need to be alerted if there\u2019s a problem, such as a failed service instance\nor a disk filling up\u2014ideally before it impa cts a user. And, if there\u2019s a problem, you\nneed to be able to troubleshoot and identify the root cause.\n Many aspects of managing an application in production are outside the scope of\nthe developer, such as monitoring hardware  availability and utilization. These are\nclearly the responsibility of operations. But there are several patterns that you, as a ser-\nvice developer, must implement to make your service easier to manage and trouble-\nshoot. These patterns, shown in figure 11.9, expose a service instance\u2019s behavior and\nhealth. They enable a monitoring system to  track and visualize the state of a service\nand generate alerts when there\u2019s a problem. These patterns also make troubleshoot-\ning problems easier.\nYou can use the following patterns to design observable services:\n\uf0a1 Health check API\u2014Expose an endpoint that returns the health of the service.\n\uf0a1 Log aggregation \u2014Log service activity and write logs into a centralized logging\nserver, which provides searching and alerting.\nPattern\nparticipant\nKey\nOperations\nresponsibility\nDistributed\ntracing\nserver\nException\nTracking\nService\nLogging\nServer\nLogging\naggregation\npipeline\nLog \ufb01le\nMetrics\nService\nDeveloper\nresponsibility\nPattern\nObservable\nService\nDistributed\ntracing\nexporter\nException\nreporter\nMetrics\nexporter\nHealth\ncheck\nAPI\nHealth check\ninvoker, such as\nmonitoring service\nInvokes\nAudit\ndatabase\nadapter\nAuditing\ndatabase\nLogging\nadapter\nDistributed\ntracing pattern\nApplication\nmetrics pattern\nAudit\nlogging pattern\nHealth check\nAPI pattern\nException\ntracking pattern\nLog aggregation\npattern\nFigure 11.9 The observability patterns enable developers and operations to understand the behavior of an \napplication and troubleshoot problems. Developers are responsible for ensuring that their services are observable. \nOperations are responsible for the infrastructure that collects the information exposed by the services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2061, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c3c5d9ca-b6ec-472f-a0b4-deee60155623": {"__data__": {"id_": "c3c5d9ca-b6ec-472f-a0b4-deee60155623", "embedding": null, "metadata": {"page_label": "366", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "43406a28-4625-4d84-8e6a-c56d40a09bbf", "node_type": "4", "metadata": {"page_label": "366", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6ba1033d9d88ed840676183c20ecd0e4484d2ceee0df9d3ac1736f9d4a9febbb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "366 CHAPTER 11 Developing production-ready services\n\uf0a1 Distributed tracing\u2014Assign each external request a unique ID and trace requests\nas they flow between services.\n\uf0a1 Exception tracking \u2014Report exceptions to an exception tracking service, which\nde-duplicates exceptions, alerts develope rs, and tracks the resolution of each\nexception.\n\uf0a1 Application metrics\u2014Services maintain metrics, such as counters and gauges, and\nexpose them to a metrics server.\n\uf0a1 Audit logging\u2014Log user actions.\nA distinctive feature of most of these patt erns is that each pattern has a developer\ncomponent and an operations component. Consider, for example, the Health check\nAPI pattern. The developer is responsible for ensuring that their service implements a\nhealth check endpoint. Operations is responsible for the monitoring system that peri-\nodically invokes the health check API. Simi larly, for the Log aggregation pattern, a\ndeveloper is responsible for ensuring that  their services log useful information,\nwhereas operations is responsible for log aggregation.\n Let\u2019s take a look at each of these patterns, starting with the Health check API pattern.\n11.3.1 Using the Health check API pattern\nSometimes a service may be running but unab le to handle requests. For instance, a\nnewly started service instance may not be  ready to accept requests. The FTGO Con-\nsumer Service, for example, takes around 10 second s to initialize the messaging and\ndatabase adapters. It would be pointless fo r the deployment infrastructure to route\nHTTP requests to a service instance until it\u2019s ready to process them.\n Also, a service instance can fail withou t terminating. For example, a bug might\ncause an instance of Consumer Service to run out of database connections and\nbe unable to access the database. The depl oyment infrastructure shouldn\u2019t route\nrequests to a service instance that has faile d yet is still running. And, if the service\ninstance does not recover, the deployment infrastructure must terminate it and create\na new instance.\nA service instance needs to be able to tell the deployment infrastructure whether or\nnot it\u2019s able to handle requests. A good solution is for a service to implement a health\ncheck endpoint, which is shown in figure 11.10. The Spring Boot Actuator Java library,\nfor example, implements a GET /actuator/health endpoint, which returns 200 if and\nonly if the service is healthy, and 503 otherwise. Similarly, the HealthChecks .NET\nPattern: Health check API\nA service exposes a health check API endpoint, such as GET /health, which returns\nthe health of the service. See http://microservices.io/patterns/observability/health-\ncheck-api.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2653, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8152991-3253-437b-9e3f-f176d1ea97ea": {"__data__": {"id_": "d8152991-3253-437b-9e3f-f176d1ea97ea", "embedding": null, "metadata": {"page_label": "367", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "301cf99c-8389-4622-a5b1-7c429527fba6", "node_type": "4", "metadata": {"page_label": "367", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8b8c96bccec9bc35e1d911e70ad220d6efa4c0fd63cf570108011427b312fdc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "367Designing observable services\nlibrary implements a GET /hc endpoint ( https://docs.microsoft.com/en-us/dotnet/\nstandard/microservices-architecture/implem ent-resilient-applications/monitor-app-\nhealth). The deployment infrastructure periodically invokes this endpoint to determine\nthe health of the service instance and takes the appropriate action if it\u2019s unhealthy.\nA Health Check Request Handler typically tests the service instance\u2019s connections to\nexternal services. It might, for example, execute a test query against a database. If all\nthe tests succeed, Health Check Request Handler returns a healthy response, such as\nan HTTP 200 status code. If any of them fa ils, it returns an unhealthy response, such\nas an HTTP 500 status code.\n Health Check Request Handler might simply return an empty HTTP response with\nthe appropriate status code. Or it might return a detailed description of the health of\neach of the adapters. The detailed inform ation is useful for troubleshooting. But\nbecause it may contain sensitive informatio n, some frameworks, such as Spring Boot\nActuator, let you configure the level of detail in the health endpoint response.\n There are two issues you need to consider when using health checks. The first is\nthe implementation of the endpoint, which must report back on the health of the ser-\nvice instance. The second issue is how to configure the deployment infrastructure to\ninvoke the health check endpoint. Let\u2019s first look at how to implement the endpoint.\nIMPLEMENTING THE HEALTH CHECK ENDPOINT\nThe code that implements the health ch eck endpoint must somehow determine the\nhealth of the service instance. One simple approach is to verify that the service\ninstance can access its external infrastructure services. How to do this depends on the\nService\nChecks\nChecks\nHealth check\ninvoker\nInvokes\nHealth check\nendpoint\nHealth check\nrequest\nhandler\nMessaging\nadapter\nMessage\nbroker\nDatabase\nadapter\nMySQL\nTests the service\u2019s connections\nto infrastructure services\nFor example: monitoring\nsystem, Service registry, and others\nFigure 11.10 A service implements a health check endpoint, which is periodically invoked by the \ndeployment infrastructure to determine the health of the service instance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2233, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa7db7c0-dc88-4a48-8e75-a823b98c33a2": {"__data__": {"id_": "fa7db7c0-dc88-4a48-8e75-a823b98c33a2", "embedding": null, "metadata": {"page_label": "368", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d0934e0e-d408-4094-9f81-44ef5d4d72ce", "node_type": "4", "metadata": {"page_label": "368", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "88655b8f3cd00c5b9cc627f4275f6ccbe4c818aeeb314cff521bb95bc38379bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "368 CHAPTER 11 Developing production-ready services\ninfrastructure service. The health check code  can, for example, verify that it\u2019s con-\nnected to an RDBMS by obtaining a databa se connection and executing a test query.\nA more elaborate approach is to execute a synthetic transaction that simulates the\ninvocation of the service\u2019s API by a client. This kind of health check is more thorough,\nbut it\u2019s likely to be more time consuming to implement and take longer to execute.\n A great example of a health check library  is Spring Boot Actuator. As mentioned\nearlier, it implements a /actuator/health endpoint. The code that implements this\nendpoint returns the result of executing a set of health checks. By using convention\nover configuration, Spring Boot Actuator implements a sensible set of health checks\nbased on the infrastructure services used by the service. If, for example, a service uses\na JDBC DataSource, Spring Boot Actuator configures  a health check that executes a\ntest query. Similarly, if the service uses the RabbitMQ message broker, it automatically\nconfigures a health check that verifies that the RabbitMQ server is up.\n You can also customize this behavior by implementing additional health checks for\nyour service. You implement a custom health check by defining a class that imple-\nments the HealthIndicator interface. This interface defines a health() method,\nwhich is called by the implementation of the /actuator/health endpoint. It returns\nthe outcome of the health check. \nINVOKING THE HEALTH CHECK ENDPOINT\nA health check endpoint isn\u2019t much use if nobody calls it. When you deploy your ser-\nvice, you must configure the deployment in frastructure to invoke the endpoint. How\nyou do that depends on the specific detail s of your deployment infrastructure. For\nexample, as described in chapter 3, you can configure some service registries, such as\nNetflix Eureka, to invoke the health chec k endpoint in order to determine whether\ntraffic should be routed to the service instance. Chapter 12 discusses how to configure\nDocker and Kubernetes to invoke a health check endpoint. \n11.3.2 Applying the Log aggregation pattern\nLogs are a valuable troubleshooting tool. If you want to know what\u2019s wrong with your\napplication, a good place to start is the log files. But using logs in a microservice archi-\ntecture is challenging. For example, imag ine you\u2019re debugging a problem with the\ngetOrderDetails() query. As described in chapte r 8, the FTGO application imple-\nments this query using API composition. As a result, the log entries you need are scat-\ntered across the log files of the API ga teway and several services, including Order\nService and Kitchen Service.\nPattern: Log aggregation\nAggregate the logs of all services in a centralized database that supports searching\nand alerting. See http://microservices.io/patterns/observability/application-logging\n.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2897, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9e83dcd-c993-4c2f-8928-fa135c4d3042": {"__data__": {"id_": "b9e83dcd-c993-4c2f-8928-fa135c4d3042", "embedding": null, "metadata": {"page_label": "369", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd632bb8-53ef-4e2f-a92c-cb0d98d2f51a", "node_type": "4", "metadata": {"page_label": "369", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "aae689ba4746fd4f8ca16ede22371d79a73cbf7ddd7eab1bd29336b821924214", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "369Designing observable services\nThe solution is to use log aggregation. As figure 11.11 shows, the log aggregation pipe-\nline sends the logs of all of the service in stances to a centralized logging server. Once\nthe logs are stored by the logging server, you can view, search, and analyze them. You\ncan also configure alerts that are triggered when certain messages appear in the logs.\nThe logging pipeline and server are usually the responsibility of operations. But ser-\nvice developers are responsible for writing services that generate useful logs. Let\u2019s first\nlook at how a service generates a log.\nHOW A SERVICE GENERATES A LOG\nAs a service developer, there are a couple of  issues you need to consider. First you\nneed to decide which logging library to use. The second issue is where to write the log\nentries. Let\u2019s first look at the logging library.\n Most programming languages have one or more logging libraries that make it easy\nto generate correctly structured log entries. For example, three popular Java logging\nlibraries are Logback, log4j, and JUL (java.util.logging). There\u2019s also SLF4J, which is a\nlogging facade API for the various logging frameworks. Similarly, Log4JS is a popular\nlogging framework for NodeJS. One reasonable way to use logging is to sprinkle calls\nto one of these logging libraries in your se rvice\u2019s code. But if you have strict logging\nrequirements that can\u2019t be enforced by th e logging library, you may need to define\nyour own logging API that wraps a logging library.\n You also need to decide where to log. Traditionally, you would configure the log-\nging framework to write to a log file in a well-known location in the filesystem. But\nwith the more modern deployment technolo gies, such as containers and serverless,\nService A\ninstance 1\nLogging\nlibrary\nService B\ninstance 1\nLogging\nlibrary\nService A\ninstance 2\nLogging\nlibrary\nLog\nView Notify\nLog\nLog\nLog\npipeline\nLogging\nserver\nUser\nFigure 11.11 The log aggregation infrastructure ships the logs of each service instance to a \ncentralized logging server. Users can view and search the logs. They can also set up alerts, which are \ntriggered when log entries match search criteria.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2178, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7f75ca4-09d6-436c-9e90-825c043d5fc9": {"__data__": {"id_": "a7f75ca4-09d6-436c-9e90-825c043d5fc9", "embedding": null, "metadata": {"page_label": "370", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4ebb428-0646-4b50-857c-78128c8fec82", "node_type": "4", "metadata": {"page_label": "370", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ead5f98f3d43c89b6e2129a184a8aacef04e0c9e4ba5dfbee37d431a293482df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "370 CHAPTER 11 Developing production-ready services\ndescribed in chapter 12, this is often not the best approach. In some environments,\nsuch as AWS Lambda, there isn\u2019t even a \u201cpermanent\u201d filesystem to write the logs to!\nInstead, your service should log to stdout. The deployment infrastructure will then\ndecide what to do with the output of your service. \nTHE LOG AGGREGATION INFRASTRUCTURE\nThe logging infrastructure is responsible for aggregating the logs, storing them, and\nenabling the user to search them. One popular logging infrastructure is the ELK\nstack. ELK consists of three open source products:\n\uf0a1 Elasticsearch\u2014A text search-oriented NoSQL data base that\u2019s used as the logging\nserver\n\uf0a1 Logstash\u2014A log pipeline that aggregates th e service logs and writes them to\nElasticsearch\n\uf0a1 Kibana\u2014A visualization tool for Elasticsearch\nOther open source log pipelines include Fluentd and Apache Flume. Examples of log-\nging servers include cloud services, such as AWS CloudWatch Logs, as well as numerous\ncommercial offerings. Log aggregation is a useful debugging tool in a microservice\narchitecture.\n Let\u2019s now look at distributed tracing, which is another way of understanding the\nbehavior of a microservices-based application. \n11.3.3 Using the Distributed tracing pattern\nImagine you\u2019re a FTGO develope r who is investigating why the getOrderDetails()\nquery has slowed down. You\u2019ve ruled out the problem being an external networking\nissue. The increased latency must be caused  by either the API gateway or one of the\nservices it has invoked. One option is to look at each service\u2019s average response time.\nThe trouble with this option is that it\u2019s an average across requests rather than the tim-\ning breakdown for an individual request. Plus more complex scenarios might involve\nmany nested service invocations. You may not even be familiar with all services. As a\nresult, it can be challenging to troubleshoot and diagnose these kinds of performance\nproblems in a microservice architecture.\nA good way to get insight into what your application is doing is to use distributed trac-\ning. Distributed tracing is analogous to a performance pr ofiler in a monolithic applica-\ntion. It records information (for example, start time and end time) about the tree of\nservice calls that are made when handling a request. You can then see how the services\nPattern: Distributed tracing\nAssign each external request a unique ID and record how it flows through the system\nfrom one service to the next in a centraliz ed server that provides visualization and\nanalysis. See http://microservices.io/patterns/observability/distributed-tracing.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ead52f24-e1c3-4e1c-84a3-7da24bf12257": {"__data__": {"id_": "ead52f24-e1c3-4e1c-84a3-7da24bf12257", "embedding": null, "metadata": {"page_label": "371", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bff5035f-eee4-470b-9c5d-b6c63ea77821", "node_type": "4", "metadata": {"page_label": "371", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "65d5bafc1c8711d458d08e18e56adf9f1bf974ce230b0a40f9b9a4da31cebb56", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "371Designing observable services\ninteract during the handling of external requests, including a breakdown of where\nthe time is spent.\n Figure 11.12 shows an example of how a distributed tracing server displays what\nhappens when the API gateway handles a request. It shows the inbound request to the\nAPI gateway and the request that the gateway makes to Order Service. For each\nrequest, the distributed tracing server sh ows the operation that\u2019s performed and the\ntiming of the request.\nFigure 11.12 shows what in distribu ted tracing terminology is called a trace. A trace\nrepresents an external request and consists of one or more spans. A span represents\nan operation, and its key attributes are an operation name, start timestamp, and end\ntime. A span can have one or more child spans, which represent nested operations.\nFor example, a top-level span might represent the invocation of the API gateway, as\nis the case in figure 11.12. Its child spans represent the invocations of services by the\nAPI gateway.\n A valuable side effect of distributed trac ing is that it assigns a unique ID to each\nexternal request. A service can include the request ID in its log entries. When com-\nbined with log aggregation, the request ID enables you to easily find all log entries\nfor a particular external request. For example, here\u2019s an example log entry from\nOrder Service:\n2018-03-04 17:38:12.032 DEBUG [ftgo-order-\nservice,8d8fdc37be104cc6,8d8fdc37be104cc6,false]\n7 --- [nio-8080-exec-6] org.hibernate.SQL :\nselect order0_.id as id1_3_0_, order0_.consumer_id as consumer2_3_0_, order\n0_.city as city3_3_0_,\norder0_.delivery_state as delivery4_3_0_, order0_.street1 as street5_3_0_,\norder0_.street2 as street6_3_0_, order0_.zip as zip7_3_0_,\norder0_.delivery_time as delivery8_3_0_, order0_.a\nParent span Child span Trace\nFigure 11.12 The Zipkin server shows how the FTG O application handles a request that\u2019s routed \nby the API gateway to Order Service. Each request is represented by a trace. A trace is a set of \nspans. Each span, which can contain child spans, is the invocation of a service. Depending on the \nlevel of detail collected, a span can also represent the invocation of an operation inside a service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2208, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ba40e518-c82e-4784-80ec-dc12d404a057": {"__data__": {"id_": "ba40e518-c82e-4784-80ec-dc12d404a057", "embedding": null, "metadata": {"page_label": "372", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac450977-ce13-4b69-b8ad-6fe968f24625", "node_type": "4", "metadata": {"page_label": "372", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "34f3fb74f2edf110a93003e39f1879486f1de1cd4528c508228f5f6117192c3b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "372 CHAPTER 11 Developing production-ready services\nThe [ftgo-order-service,8d8fdc37be104cc6,8d8fdc37be104cc6,false] part of the\nlog entry (the SLF4J Mapped Diagnostic Context\u2014see www.slf4j.org/manual.html)\ncontains information from the distributed tr acing infrastructure. It consists of four\nvalues:\n\uf0a1 ftgo-order-service\u2014The name of the application\n\uf0a1 8d8fdc37be104cc6\u2014The traceId\n\uf0a1 8d8fdc37be104cc6\u2014The spanId\n\uf0a1 false\u2014Indicates that this span wasn\u2019t exported to the distributed tracing server\nIf you search the logs for 8d8fdc37be104cc6, you\u2019ll find all log entries for that request.\n Figure 11.13 shows how distributed tracin g works. There are two parts to distrib-\nuted tracing: an instrumentation library, which is used by each service, and a distributed\ntracing server. The instrumentation library manages the traces and spans. It also adds\nSpan ABC: API gateway\nTrace XYZ\nAPI\ngateway\nGET/orders/1 HTTP/1.1\n....\nGET/orders/1 HTTP/1.1\nX-B3-TraceId: XYZ\nX-B3-ParentSpanId: ABC\nService: API gateway\nTraceId: XYZ\nParentSpan: NONE\nSpan: ABC\nViews traces\nService: Order Service\nTraceId: XYZ\nParentSpan: ABC\nSpan: DEF\nSpan DEF: Order Service\nTransport\nDistributed tracing server\nOrder\nService\nInstrumentation\nlibrary\nInstrumentation\nlibrary\nUser\nTrace\ndatabase\nFigure 11.13 Each service (including the API ga teway) uses an instrumentation library. The \ninstrumentation library assigns an ID to each external request, propagates tracing state between \nservices, and reports spans to the distributed tracing server.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1d35efe-5abc-41f1-bab4-333df4bea9a4": {"__data__": {"id_": "f1d35efe-5abc-41f1-bab4-333df4bea9a4", "embedding": null, "metadata": {"page_label": "373", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff774a4c-532f-4ae2-a948-7d9027f5adb0", "node_type": "4", "metadata": {"page_label": "373", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a2feedf2917bbb39867286e6b59d62db06b08c754f2b068af916b840f6977e67", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "373Designing observable services\ntracing information, such as the current trace ID and the parent span ID, to outbound\nrequests. For example, one common standa rd for propagating trace information is\nthe B3 standard (https://github.com/openzipkin/b3-propagation), which uses head-\ners such as X-B3-TraceId and X-B3-ParentSpanId. The instrumentation library also\nreports traces to the distributed tracing se rver. The distributed tracing server stores\nthe traces and provides a UI for visualizing them.\n Let\u2019s take a look at the instrumentation library and the distribution tracing server,\nbeginning with the library.\nUSING AN INSTRUMENTATION LIBRARY\nThe instrumentation library builds the tree of spans and sends them to the distributed\ntracing server. The service code could call the instrumentation library directly, but that\nwould intertwine the instrumentation logic with business and other logic. A cleaner\napproach is to use interceptors or aspect-oriented programming (AOP).\n A great example of an AOP-based framewor k is Spring Cloud Sleuth. It uses the\nSpring Framework\u2019s AOP mechanism to auto magically integrate distributed tracing\ninto the service. As a result, you have to add Spring Cloud Sleuth as a project depen-\ndency. Your service doesn\u2019t need to call a distributed tracing API except in those cases\nthat aren\u2019t handled by Spring Cloud Sleuth. \nABOUT THE DISTRIBUTED TRACING SERVER\nThe instrumentation library sends the spans to a distributed tracing server. The dis-\ntributed tracing server stitches the spans to gether to form complete traces and stores\nthem in a database. One popular distributed tracing server is Open Zipkin. Zipkin was\noriginally developed by Twit ter. Services can deliver spans to Zipkin using either\nHTTP or a message broker. Zipkin stores the traces in a storage backend, which is\neither a SQL or NoSQL database. It has a UI  that displays traces, as shown earlier in\nfigure 11.12. AWS X-ray is another example of a distributed tracing server. \n11.3.4 Applying the Application metrics pattern\nA key part of the production environment is monitoring and alerting. As figure 11.14\nshows, the monitoring system gathers metr ics, which provide critical information\nabout the health of an application, from ev ery part of the technology stack. Metrics\nrange from infrastructure-level metrics, such as CPU, memory, and disk utilization, to\napplication-level metrics, such as service request latency and number of requests exe-\ncuted. Order Service, for example, gathers metrics about the number of placed,\napproved, and rejected orders. The metrics are collected by a metrics service, which\nprovides visualization and alerting.\nPattern: Application metrics\nServices report metrics to a central server that provides aggregation, visualization,\nand alerting.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2795, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d51a7015-3934-4d76-87a6-105370e066eb": {"__data__": {"id_": "d51a7015-3934-4d76-87a6-105370e066eb", "embedding": null, "metadata": {"page_label": "374", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1119cad2-5a4e-4142-b873-3f17794becf9", "node_type": "4", "metadata": {"page_label": "374", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "07f41df24a6c77bad7761a5a724123adacaf565f968ac5bc7b8a7913ff580e0f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "374 CHAPTER 11 Developing production-ready services\nMetrics are sampled periodically. A metric sample has the following three properties:\n\uf0a1 Name\u2014The name of the metric, such as jvm_memory_max_bytes or placed_orders\n\uf0a1 Value\u2014A numeric value\n\uf0a1 Timestamp\u2014The time of the sample\nIn addition, some monitoring systems support the concept of dimensions, which are\narbitrary name-value pairs. For example, jvm_memory_max_bytes is reported with dimen-\nsions such as area=\"heap\",id=\"PS Eden Space\" and area=\"heap\",id=\"PS Old Gen\".\nDimensions are often used to provide addi tional information, such as the machine\nname or service name, or a service instance  identifier. A monitoring system typically\naggregates (sums or averages) metric samples along one or more dimensions.\n Many aspects of monitoring are the resp onsibility of operations. But a service\ndeveloper is responsible for two aspects of me trics. First, they must instrument their\nservice so that it collects metrics about it s behavior. Second, they must expose those\nservice metrics, along with metrics from the JVM and the application framework, to\nthe metrics server.\n Let\u2019s first look at how a service collects metrics.\nCOLLECTING SERVICE-LEVEL METRICS\nHow much work you need to do to collec t metrics depends on the frameworks that\nyour application uses and the metrics you want to collect. A Spring Boot-based service\ncan, for example, gather (and expose) basic metrics, such as JVM metrics, by including\nView Notify\nMetrics\nService\nUser\nService instance\nDeployment infrastructure\nMetrics sample:\nname=cpu_percent\nvalue=68\ntimestamp=34938934893\ndimensions:\nmachine=node1\n...\nApplication framework\nLanguage runtime\nApplication code\nMetrics library Visualization\nMetrics\ningestion\nAlerts\nMetrics\ndatabase\nFigure 11.14 Metrics at every level of the stack ar e collected and stored in a metrics service, which \nprovides visualization and alerting.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1902, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "05cdcbaf-8a97-4bda-8464-980930e4f6f4": {"__data__": {"id_": "05cdcbaf-8a97-4bda-8464-980930e4f6f4", "embedding": null, "metadata": {"page_label": "375", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aab9a64d-7fc3-4669-8371-4ec64af9646e", "node_type": "4", "metadata": {"page_label": "375", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d8b4ec18dd9d930bddbf8c2aea41d64bf1d0597ac21ea37f24615085fece5858", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "375Designing observable services\nthe Micrometer Metrics library as a depend ency and using a few lines of configura-\ntion. Spring Boot\u2019s autoconfiguration takes care of configuring the metrics library and\nexposing the metrics. A service only needs to use the Micrometer Metrics API directly\nif it gathers application-specific metrics.\n The following listing shows how OrderService can collect metrics about the number\nof orders placed, approved, and rejected. It uses MeterRegistry, which is the interface-\nprovided Micrometer Metrics, to gather custom metrics. Each method increments an\nappropriately named counter.\npublic class OrderService {\n@Autowired\nprivate MeterRegistry meterRegistry;     \npublic Order createOrder(...) {\n...\nmeterRegistry.counter(\"placed_orders\").increment();    \nreturn order;\n}\npublic void approveOrder(long orderId) {\n...\nmeterRegistry.counter(\"approved_orders\").increment();\n}\npublic void rejectOrder(long orderId) {\n...\nmeterRegistry.counter(\"rejected_orders\").increment();      \n}\nDELIVERING METRICS TO THE METRICS SERVICE\nA service delivers metrics to the Metrics Service in one of two ways: push or pull. With\nthe push model, a service instance sends the metrics to the Metrics Service by invoking\nan API. AWS Cloudwatch metrics, for example, implements the push model.\n With the pull model, the Metrics Service (or its agent running locally) invokes a\nservice API to retrieve the metrics from the service instance. Prometheus, a popular\nopen source monitoring and alerting system, uses the pull model.\n The FTGO application\u2019s Order Service uses the micrometer-registry-prometheus\nlibrary to integrate with Prometheus. Because this library is on the classpath, Spring\nBoot exposes a GET /actuator/prometheus endpoint, which returns metrics in the\nformat that Prometheus expects. The custom metrics from OrderService are reported\nas follows:\n$ curl -v http://localhost:8080/actuator/prometheus | grep _orders\n# HELP placed_orders_total\n# TYPE placed_orders_total counter\nListing 11.1 OrderService tracks the number of orders placed, approved, and \nrejected.\nThe Micrometer Metrics \nlibrary API for managing \napplication-specific meters\nIncrements the \nplacedOrders counter \nwhen an order has \nsuccessfully been \nplaced\nIncrements the \napprovedOrders \ncounter when an \norder has been \napproved\nIncrements the \nrejectedOrders \ncounter when an \norder has been \nrejected", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f4058d5-758b-4493-8b61-cb814fce011e": {"__data__": {"id_": "6f4058d5-758b-4493-8b61-cb814fce011e", "embedding": null, "metadata": {"page_label": "376", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f8b454c-88a1-49ac-a710-0e5a93a9e919", "node_type": "4", "metadata": {"page_label": "376", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "561638adee62801f36147008d00ccd601e2961349475aa42a2b510b52a497ac8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "376 CHAPTER 11 Developing production-ready services\nplaced_orders_total{service=\"ftgo-order-service\",} 1.0\n# HELP approved_orders_total\n# TYPE approved_orders_total counter\napproved_orders_total{service=\"ftgo-order-service\",} 1.0\nThe placed_orders counter is, for example, reported as a metric of type counter.\n The Prometheus server periodically polls this endpoint to retrieve metrics. Once\nthe metrics are in Prometheus, you can view them using Grafana, a data visualization\ntool (https://grafana.com). You can also set up alerts for these metrics, such as when\nthe rate of change for placed_orders_total falls below some threshold.\n Application metrics provide valuable insi ghts into your application\u2019s behavior.\nAlerts triggered by metrics enable you to quickly respond to a production issue, per-\nhaps before it impacts users. Let\u2019s now look at how to observe and respond to another\nsource of alerts: exceptions. \n11.3.5 Using the Exception tracking pattern\nA service should rarely log an exception, and when it does, it\u2019s important that you\nidentify the root cause. The exception might be a symptom of a failure or a program-\nming bug. The traditional way to view exceptions is to look in the logs. You might even\nconfigure the logging server to alert you if an exception appears in the log file. There\nare, however, several problems with this approach:\n\uf0a1 Log files are oriented around single-line log entries, whereas exceptions consist\nof multiple lines.\n\uf0a1 There\u2019s no mechanism to track the resolution of exceptions that occur in log\nfiles. You would have to manually copy/paste the exception into an issue tracker.\n\uf0a1 There are likely to be duplicate except ions, but there\u2019s no automatic mecha-\nnism to treat them as one.\nA better approach is to use an exception tracking service. As figure 11.15 shows, you\nconfigure your service to report exceptions to an exception tracking service via, for\nexample, a REST API. The exception tracking service de-duplicates exceptions, gener-\nates alerts, and manages the resolution of exceptions.\n There are a couple of ways to integrate the exception tracking service into your\napplication. Your service could invoke the exception tracking service\u2019s API directly. A\nbetter approach is to use a client library provided by the exception tracking service.\nFor example, HoneyBadger\u2019s client library provides several easy-to-use integration\nmechanisms, including a Servlet Filter that catches and reports exceptions.\nPattern: Exception tracking\nServices report exceptions to a central service that de-duplicates exceptions, gener-\nates alerts, and manages the resolution of exceptions. See http://microservices.io/\npatterns/observability/audit-logging.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2701, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5597e8f2-3b29-43e9-955b-636ffdd58777": {"__data__": {"id_": "5597e8f2-3b29-43e9-955b-636ffdd58777", "embedding": null, "metadata": {"page_label": "377", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72693c76-8058-4924-af00-6e0f309e49da", "node_type": "4", "metadata": {"page_label": "377", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "edc79f25f68220c8f18d6e9f6bbff0a7d37b7b4bba990472398177a08b735838", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "377Designing observable services\nThe Exception tracking pattern is a useful way to quickly identify and respond to pro-\nduction issues.\n It\u2019s also important to track user behavior. Let\u2019s look at how to do that. \n11.3.6 Applying the Audit logging pattern\nThe purpose of audit logging is to record each user\u2019s actions. An audit log is typically\nused to help customer support, ensure co mpliance, and detect suspicious behavior.\nEach audit log entry records the identity of  the user, the action they performed, and\nthe business object(s). An application usually stores the audit log in a database table.\nException tracking services\nThere are several exception tracking services. Some, such as Honeybadger ( www\n.honeybadger.io), are purely cloud-based. Others, such as Sentry.io (https://sentry.io/\nwelcome/), also have an open source version that you can deploy on your own infra-\nstructure. These services receive exceptions from your application and generate alerts.\nThey provide a console for viewing exceptions and managing their resolution. An excep-\ntion tracking service typically provides client libraries in a variety of languages.\nPattern: Audit logging\nRecord user actions in a database in or der to help customer support, ensure com-\npliance, and detect suspicious behavior. See http://microservices.io/patterns/\nobservability/audit-logging.html.\nView & manage Notify\nUser\nPOST/exceptions\njava.lang.NullPointerException\nat net.chrisrichardson.ftgo...\nat net.chrisrichardson.ftgo...\nat net.chrisrichardson.ftgo...\nOrder Service\nException tracking\nclient library\nException database\nException tracking service\nReport exception\nFigure 11.15 A service reports exceptions to an exception tracking service, which de-duplicates \nexceptions and alerts developers. It has a UI for viewing and managing exceptions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1814, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7e300343-5b0b-4748-bdcb-2a7bcb25a77f": {"__data__": {"id_": "7e300343-5b0b-4748-bdcb-2a7bcb25a77f", "embedding": null, "metadata": {"page_label": "378", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "937deebe-d47c-401f-a879-5adf82368915", "node_type": "4", "metadata": {"page_label": "378", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "849f223253e8e99c7dcb8c59d70bcd0c86004f9b0c757cca0dbedaa2c32002c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "378 CHAPTER 11 Developing production-ready services\nThere are a few different ways to implement audit logging:\n\uf0a1 Add audit logging code to the business logic.\n\uf0a1 Use aspect-oriented programming (AOP).\n\uf0a1 Use event sourcing.\nLet\u2019s look at each option.\nADD AUDIT LOGGING CODE TO THE BUSINESS LOGIC\nThe first and most straightforward option is  to sprinkle audit logging code through-\nout your service\u2019s business logic. Each se rvice method, for example, can create an\naudit log entry and save it in the database. The drawback with this approach is that it\nintertwines auditing logging code and busi ness logic, which reduces maintainability.\nThe other drawback is that it\u2019s potentially error prone, because it relies on the devel-\noper writing audit logging code. \nUSE ASPECT-ORIENTED PROGRAMMING\nT h e  s ec on d o p ti on  i s  to  u s e A O P . Y o u c a n  u s e  a n  A O P  fr a m e w or k,  s u ch  a s  S pr i n g\nAOP, to define advice that automatically intercepts each service method call and per-\nsists an audit log entry. This is a much mo re reliable approach, because it automati-\ncally records every service method invoca tion. The main drawback of using AOP is\nthat the advice only has access to the meth od name and its arguments, so it might be\nchallenging to determine the business object being acted upon and generate a business-\noriented audit log entry. \nUSE EVENT SOURCING\nThe third and final option is to implement your business logic using event sourcing.\nAs mentioned in chapter 6, event sourcing automatically provides an audit log for cre-\nate and update operations. You need to record the identity of the user in each event.\nOne limitation with using event sourcing, though, is that it doesn\u2019t record queries. If\ny o u r  s e r v i c e  m u s t  c r e a t e  l o g  e n t r i e s  f o r  q u e r i e s ,  t h e n  y o u \u2019 l l  h a v e  t o  u s e  o n e  o f  t h e\nother options as well. \n11.4 Developing services using the Microservice chassis \npattern\nThis chapter has described numerous concerns that a service must implement, includ-\ning metrics, reporting exceptions to an exception tracker, logging and health checks,\nexternalized configuration, and security. Mo reover, as described in chapter 3, a ser-\nvice may also need to handle service discovery and implement circuit breakers. That\u2019s\nnot something you\u2019d want to set up from scratch each time you implement a new ser-\nvice. If you did, it would potentially be days , if not weeks, before you wrote your first\nline of business logic.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2520, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe71fa1e-64f5-4082-8606-f8bac0362109": {"__data__": {"id_": "fe71fa1e-64f5-4082-8606-f8bac0362109", "embedding": null, "metadata": {"page_label": "379", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94c1ce8c-3802-489e-8b00-f87f6d62dc6a", "node_type": "4", "metadata": {"page_label": "379", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "942c075b6181e690f463c11021b4b81b50abd2442621f60cdc4383698d57fcdf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "379Developing services using the Microservice chassis pattern\nA much faster way to develop services is to build your services upon a microservices\nchassis. As figure 11.16 shows, a microservice chassis is a framework or set of frameworks\nthat handle these concerns. When using a microservice chassis, you write little, if any,\ncode to handle these concerns.\nIn this section, I first describe the concept of a microservice chassis and suggest some\nexcellent microservice chassis frameworks. After that I introduce the concept of a ser-\nvice mesh, which at the time of writing is  emerging as an intriguing alternative to\nusing frameworks and libraries.\n Let\u2019s first look at the idea of a microservice chassis.\n11.4.1 Using a microservice chassis\nA microservices chassis is a framework or set of frameworks that handle numerous\nconcerns including the following:\n\uf0a1 Externalized configuration\n\uf0a1 Health checks\n\uf0a1 Application metrics\n\uf0a1 Service discovery\nPattern: Microservice chassis\nBuild services on a framework or collection of frameworks that handle cross-cutting\nconcerns, such as exception tracking, logging, health checks, externalized configu-\nration, and distributed tracing. See http://microservices.io/patterns/microservice-\nchassis.html.\nService\nService code\nCircuit breaker\nMicroservice chassis\nService discovery\nDistributed tracing Application metrics\nLogging Health check\nExternalized con\ufb01g. ...\nFigure 11.16 A microservice chassis \nis a framework that handles numerous \nconcerns, such as exception tracking, \nlogging, health checks, externalized \nconfiguration, and distributed tracing.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1595, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50a21aac-cf87-4d8b-8f84-69a72eb1da35": {"__data__": {"id_": "50a21aac-cf87-4d8b-8f84-69a72eb1da35", "embedding": null, "metadata": {"page_label": "380", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2958e6e0-2142-40e1-9606-22ddd40c9660", "node_type": "4", "metadata": {"page_label": "380", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ae8f8d82f7c803e354866bcb68c8f8450b477bba5cab96bd2852a3a31f18b490", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "380 CHAPTER 11 Developing production-ready services\n\uf0a1 Circuit breakers\n\uf0a1 Distributed tracing\nIt significantly reduces the amount of code you need to write. You may not even need\nto write any code. Instead, you configure th e microservice chassis to fit your require-\nments. A microservice chassis enables you to  focus on developing your service\u2019s busi-\nness logic.\n The FTGO application uses Spring Boot  and Spring Cloud as the microservice\nchassis. Spring Boot provides functions su ch as externalized configuration. Spring\nCloud provides functions such as circuit br eakers. It also implements client-side ser-\nvice discovery, although the FTGO application relies on the infrastructure for service\ndiscovery. Spring Boot and Spring Cloud ar en\u2019t the only microservice chassis frame-\nworks. If, for example, you\u2019re writing services in GoLang, you could use either Go Kit\n(https://github.com/go-kit/kit) or Micro (https://github.com/micro/micro).\n One drawback of using a microservice ch assis is that you need one for every lan-\nguage/platform combination that you use to develop services. Fortunately, it\u2019s likely\nthat many of the functions implemented by a microservice chassis will instead be\nimplemented by the infrastructure. For example, as described in chapter 3, many\ndeployment environments handle service discovery. What\u2019s more, many of the network-\nrelated functions of a microservice chassis will be handled by what\u2019s known as a service\nmesh, an infrastructure layer running outside of the services. \n11.4.2 From microservice chassis to service mesh\nA microservice chassis is a good way to implement various cross-cutting concerns, such\nas circuit breakers. But one obstacle to us ing a microservice chassis is that you need\none for each programming language you us e. For example, Spring Boot and Spring\nCloud are useful if you\u2019re a Java/Spring de veloper, but they aren\u2019t any help if you\nwant to write a NodeJS-based service.\nAn emerging alternative that avoids this pr oblem is to implement some of this func-\ntionality outside of the service in what\u2019s known as a service mesh. A service mesh is net-\nworking infrastructure that mediates the communication between a service and other\nservices and external applications. As figure 11.17 shows, all network traffic in and out\nof a service goes through the service mesh. It implements various concerns including\ncircuit breakers, distributed tracing, service discovery, load balancing, and rule-based\ntraffic routing. A service mesh can also secure interprocess communication by using\nPattern: Service mesh\nRoute all network traffic in and out of services through a networking layer that imple-\nments various concerns, including circuit breakers, distributed tracing, service dis-\ncovery, load balancing, and rule-based traffic routing. See http://microservices.io/\npatterns/deployment/service-mesh.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2869, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "818adf8c-4076-4724-b575-035ef3744d01": {"__data__": {"id_": "818adf8c-4076-4724-b575-035ef3744d01", "embedding": null, "metadata": {"page_label": "381", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5510b9d5-addb-4198-8eaa-995e5e80d45b", "node_type": "4", "metadata": {"page_label": "381", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d1ff1f8fd65832a2c274aa2286acf8b375783d003f2f9e580ac10febb233e3ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "381Developing services using the Microservice chassis pattern\nTLS-based IPC between services. As a result, you no longer need to implement these\nparticular concerns in the services.\n When using a service mesh, the microservice chassis is much simpler. It only needs\nto implement concerns that are tightly inte grated with the application code, such as\nexternalized configuration and health checks. The microservice chassis must support\ndistributed tracing by propagating distribu ted tracing information, such as the B3\nstandard headers I discussed earlier in section 11.3.3.\nThe service mesh concept is an extremely promising idea. It frees the developer from\nhaving to deal with various cross-cutting concerns. Also, the ability of a service mesh to\nThe current state of service mesh implementations\nThere are various service mesh implementations, including the following:\n\uf0a1 Istio (https://istio.io)\n\uf0a1 Linkerd (https://linkerd.io)\n\uf0a1 Conduit (https://conduit.io)\nAs of the time of writing, Linkerd is the most mature, with Istio and Conduit still under\nactive development. For more information about this exciting new technology, take a\nlook at each product\u2019s documentation.\nAPI\ngateway\nMicroservice\nchassis\nOrder\nService\nService\nmesh\nMicroservice\nchassis\nRestaurant\nService\nMicroservice\nchassis\nDeployment infrastructure\nCircuit breaker Service discovery\nDistributed tracing\nSmart traf\ufb01c routing\nLoad balancing\nLogging\nMicroservice chassis\nFunctionality moved from\nmicroservice chassis to\nservice mesh\nFewer functions\nExternalized con\ufb01g.\nDistributed tracing\nApplication metrics\nHealth check\n...\nSecure communications\nFigure 11.17 All network traffic in and out of a service flows through the service mesh. The service \nmesh implements various functions including circuit breakers, distributed tracing, service discovery, \nand load balancing. Fewer functions are implemented by the microservice chassis. It also secures \ninterprocess communication by using TLS-based IPC between services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1989, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8af81a23-390a-4f9d-b0e2-80c4e2ad836b": {"__data__": {"id_": "8af81a23-390a-4f9d-b0e2-80c4e2ad836b", "embedding": null, "metadata": {"page_label": "382", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a1f68b9-27ff-4ad9-86b0-abc0f06938fa", "node_type": "4", "metadata": {"page_label": "382", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b72375e243c3e1268eabeadd257a6deb38ef6c5d3528387985934ea16a515cd3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "382 CHAPTER 11 Developing production-ready services\nroute traffic enables you to separate deployme nt from release. It gives you the ability\nto deploy a new version of a service into production but only release it to certain users,\nsuch as internal test users. Chapter 12 di scusses this concept further when describing\nhow to deploy services using Kubernetes. \nSummary\n\uf0a1 It\u2019s essential that a service implements its functional requirements, but it must\nalso be secure, configurable, and observable.\n\uf0a1 Many aspects of security in a microservice architecture are no different than in\na monolithic architecture. But there are some aspects of application security\nthat are necessarily different, including how user identity is passed between the\nAPI gateway and the services and who is responsible for authentication and autho-\nrization. A commonly used approach is for the API gateway to authenticate clients.\nThe API gateway includes a transparent token, such as a JWT, in each request to a\nservice. The token contains the identity of the principal and their roles. The ser-\nvices use the information in the token to authorize access to resources. OAuth 2.0\nis a good foundation for security in a microservice architecture.\n\uf0a1 A service typically uses one or more exte rnal services, such as message brokers\nand databases. The network location and credentials of each external service\noften depend on the environment that the service is running in. You must apply\nthe Externalized configuration patter n and implement a mechanism that pro-\nvides a service with configuration prop erties at runtime. One commonly used\napproach is for the deployment infrastr ucture to supply those properties via\noperating system environment variables or  a properties file when it creates a\nservice instance. Another option is for a service instance to retrieve its configu-\nration from a configuration properties server.\n\uf0a1 Operations and developers share respon sibility for implementing the observ-\nability patterns. Operations is responsi ble for the observability infrastructure,\nsuch as servers that handle log aggreg ation, metrics, exception tracking, and\ndistributed tracing. Developers are resp onsible for ensuring that their services\nare observable. Services must have health check API endpoints, generate log\nentries, collect and expose metrics, report exceptions to an exception tracking\nservice, and implement distributed tracing.\n\uf0a1 In order to simplify and accelerate de velopment, you should develop services\non top of a microservices chassis. A microservices chassis is framework or set of\nframeworks that handle various cross-cutting concerns, including those described\nin this chapter. Over time, though, it\u2019s  likely that many of the networking-\nrelated functions of a microservice cha ssis will migrate into a service mesh, a\nlayer of infrastructure software through which all of a service\u2019s network traffic\nflows.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2916, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6ef5679d-f645-443d-8571-4c0f84ca9475": {"__data__": {"id_": "6ef5679d-f645-443d-8571-4c0f84ca9475", "embedding": null, "metadata": {"page_label": "383", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cba182f3-ff38-4066-a5cf-ea2fd8feb51b", "node_type": "4", "metadata": {"page_label": "383", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d8e960ccb7e7cb29d43a64960f679daf6ecdc6d59953294df3d0b5db327718dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "383\nDeploying microservices\nMary and her team at FTGO are almost finished writing their first service. Although\nit\u2019s not yet feature complete, it\u2019s running on developer laptops and the Jenkins CI\nserver. But that\u2019s not good enough. Software has no value to FTGO until it\u2019s run-\nning in production and available to users. FTGO needs to deploy their service into\nproduction.\nThis chapter covers\n\uf0a1 The four key deployment patterns, how they work, \nand their benefits and drawbacks:\n\u2013 Language-specific packaging format\n\u2013 Deploying a service as a VM\n\u2013 Deploying a service as a container\n\u2013 Serverless deployment\n\uf0a1 Deploying services with Kubernetes\n\uf0a1 Using a service mesh to separate deployment \nfrom release\n\uf0a1 Deploying services with AWS Lambda\n\uf0a1 Picking a deployment pattern", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 771, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9af0238-6ac9-49f2-ba9d-d9979b5954aa": {"__data__": {"id_": "d9af0238-6ac9-49f2-ba9d-d9979b5954aa", "embedding": null, "metadata": {"page_label": "384", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6f80db0-c230-4f45-96ad-bf680e3490a2", "node_type": "4", "metadata": {"page_label": "384", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "065f36ba5d5cfcf02efb6f25dfdec56534af92307a000f826fdbee2ff971184c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "384 CHAPTER 12 Deploying microservices\n Deployment is a combination of two interrelated concepts: process and architecture.\nThe deployment process consists of the st eps that must be performed by people\u2014\ndevelopers and operations\u2014in order to get software into production. The deploy-\nment architecture defines the structure of  the environment in which that software\nruns. Both aspects of deployment have chan ged radically since I first started develop-\ning Enterprise Java applications in the la te 1990s. The manual process of developers\nthrowing code over the wall to production has become highly automated. As figure 12.1\nshows, physical production environments ha ve been replaced by increasingly light-\nweight and ephemeral computing infrastructure.\nBack in the 1990s, if you wanted to deploy  an application into production, the first\nstep was to throw your application along with  a set of operating instructions over the\nwall to operations. You might, for example, file a trouble ticket asking operations to\ndeploy the application. Whatever happened next was entirely the responsibility of\noperations, unless they encountered a proble m they needed your help to fix. Typi-\ncally, operations bought and installed ex pensive and heavyweight application servers\nsuch as WebLogic or WebSphere. Then they would log in to the application server\nconsole and deploy your applications. They would lovingly care for those machines, as\nif they were pets, installing patches and updating the software.\n In the mid 2000s, the expensive applic ation servers were replaced with open\nsource, lightweight web containers such as  Apache Tomcat and Jetty. You could still\nrun multiple applications on each web container, but having one application per web\ncontainer became feasible. Also, virtual machines started to replace physical machines.\nPhysical\nmachine\nApplication\nPhysical\nmachine\nVirtual\nmachine\nApplication\nPhysical\nmachine\nVirtual\nmachine\nContainer\nruntime\nApplication\nPhysical\nmachine\n1990s 2006 2013 2014\nAWS EC2\nreleased\nInitial Docker\nrelease\nAWS Lambda\nintroduced\nHidden\ninfrastructure\nServerless\nruntime\nApplication\nLightweight,\nephemeral,\nautomated\nHeavyweight,\npermanent,\nmanual\nTime\nFigure 12.1 Heavyweight and long-lived physical machines have been abstracted away \nby increasingly lightweight and ephemeral technologies.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2334, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b473eb01-a305-4123-a7a4-3524e5b101db": {"__data__": {"id_": "b473eb01-a305-4123-a7a4-3524e5b101db", "embedding": null, "metadata": {"page_label": "385", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c992dc5-0990-46c0-9384-299ec9403ead", "node_type": "4", "metadata": {"page_label": "385", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "38f0ddded7539f9f38bc788b17b75b4844779de792e09572fd150cb2511737d7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "385\nBut machines were still treated as beloved pets, and deployment was still a fundamen-\ntally manual process.\n Today, the deployment process is radically different. Instead of handing off code to\na separate production team, the adoption of DevOps means that the development\nteam is also responsible for deploying their application or services. In some organiza-\ntions, operations provides developers with a console for deploying their code. Or, bet-\nter yet, once the tests pass, the deployme nt pipeline automatically deploys the code\ninto production.\n The computing resources used in a production environment have also changed rad-\nically with physical machines being abstracted away. Virtual machines running on a\nhighly automated cloud, such as AWS, have replaced the long-lived, pet-like physical and\nvirtual machines. Today\u2019s virtual machines are immutable. They\u2019re treated as disposable\ncattle instead of pets and are discarded and recreated rather than being reconfigured.\nContainers, an even more lightweight abstraction layer of top of virtual machines, are an\nincreasingly popular way of deploying applications. You can also use an even more light-\nweight serverless deployment platform, such as AWS Lambda, for many use cases.\n It\u2019s no coincidence that the evolution of deployment processes and architectures has\ncoincided with the growing adoption of the microservice architecture. An application\nm i g h t  h a v e  t e n s  o r  h u n d r e d s  o f  s e r v i c e s  written in a variety of languages and frame-\nworks. Because each service is a small application, that means you have tens or hundreds\nof applications in production. It\u2019s no longer practical, for example, for system adminis-\ntrators to hand configure servers and servic es. If you want to deploy microservices at\nscale, you need a highly automated deployment process and infrastructure.\n Figure 12.2 shows a high-level view of a production environment. The production\nenvironment enables developers to configure and manage their services, the deployment\nService\nA\nConsumes\nservicesService\nC\nService\nB\nService\nD\nUser\nObserve and\ntroubleshoot\nservices\nUpdate\nservices\nCon\ufb01gure\nand manage\nservices\nDeveloper\nRouting\nDash-\nboards\nMonitoring\nService\nmanagement\ninterface\nRuntime\nService\nmanagement\nAlerting\nDeployment\npipeline\nFigure 12.2 A simplified view of the production environment. It provides four main capabilities: \nservice management enables developers to deploy and manage their services, runtime management \nensures that the services are running, monitoring visualizes service behavior and generates alerts, \nand request routing routes requests from users to the services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2663, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dbbbd2a1-9eab-4ae8-b509-d0abe7056fde": {"__data__": {"id_": "dbbbd2a1-9eab-4ae8-b509-d0abe7056fde", "embedding": null, "metadata": {"page_label": "386", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52e81e4a-dce5-4b7a-aa20-89eb102271bf", "node_type": "4", "metadata": {"page_label": "386", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9a8a21f9e1f0db9a5656db871cc6b61f03b77e3ed0e62d62a695b2b1f08ee10c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "386 CHAPTER 12 Deploying microservices\npipeline to deploy new versions of servic es, and users to access functionality imple-\nmented by those services.\n A production environment must implement four key capabilities:\n\uf0a1 Service management interface \u2014Enables developers to create, update, and config-\nure services. Ideally, this interface is a REST API invoked by command-line and\nGUI deployment tools.\n\uf0a1 Runtime service management\u2014Attempts to ensure that the desired number of ser-\nvice instances is running at all times. If a service instance crashes or is somehow\nunable to handle requests, the producti on environment must restart it. If a\nmachine crashes, the production environment must restart those service instances\non a different machine.\n\uf0a1 Monitoring\u2014Provides developers with insight into what their services are doing,\nincluding log files and metrics. If ther e are problems, the production environ-\nment must alert the developers. Chapte r 11 describes monitoring, also called\nobservability.\n\uf0a1 Request routing\u2014Routes requests from users to the services.\nIn this chapter I discuss the four main deployment options:\n\uf0a1 Deploying services as language-specific packages, such as Java JAR or WAR files.\nIt\u2019s worthwhile exploring this option, because even though I recommend using\none of the other options, its drawbacks motivate the other options.\n\uf0a1 Deploying services as virtual machines, which simplifies deployment by packag-\ning a service as a virtual machine image that encapsulate the service\u2019s technol-\nogy stack.\n\uf0a1 Deploying services as containers, whic h are more lightweight than virtual\nmachines. I show how to deploy the FTGO application\u2019s Restaurant Service\nusing Kubernetes, a popular Docker orchestration framework.\n\uf0a1 Deploying services using serverless deployment, which is even more modern than\ncontainers. We\u2019ll look at how to deploy Restaurant Service using AWS Lambda,\na popular serverless platform.\nLet\u2019s first look at how to deploy services as language-specific packages.\n12.1 Deploying services using the Language-specific \npackaging format pattern\nLet\u2019s imagine that you want to deploy the FTGO application\u2019s Restaurant Service,\nwhich is a Spring Boot-based Java application. One way to deploy this service is by\nusing the Service as a language-specific pa ckage pattern. When using this pattern,\nwhat\u2019s deployed in production and what\u2019s managed by the service runtime is a service\nin its language-specific package. In the case of Restaurant Service, that\u2019s either the\nexecutable JAR file or a WAR file. For other languages, such as NodeJS, a service is a\ndirectory of source code and modules. For some languages, such as GoLang, a service\nis an operating system-specific executable.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2711, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "40a90dc2-4941-423f-a39b-2ba9a50c7f40": {"__data__": {"id_": "40a90dc2-4941-423f-a39b-2ba9a50c7f40", "embedding": null, "metadata": {"page_label": "387", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b3693ec-1de8-4072-8027-9cbf79713153", "node_type": "4", "metadata": {"page_label": "387", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e89d2845a90f90f5a94837dd2480db0c712f7d898b0c65978d5bf59c82068c93", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "387Deploying services using the Language-specific packaging format pattern\nTo deploy Restaurant Service on a machine, you would first install the necessary\nruntime, which in this case is the JDK. If it\u2019s a WAR file, you also need to install a\nweb container such as Apache Tomcat. On ce you\u2019ve configured the machine, you\ncopy the package to the machine and start th e service. Each service instance runs as\na JVM process.\n Ideally, you\u2019ve set up your deployment pipeline to automatically deploy the service\nto production, as shown in figure 12.3. The deployment pipeline builds an executable\nJAR file or WAR file. It then invokes th e production environment\u2019s service manage-\nment interface to deploy the new version.\nA service instance is typically a single pr ocess but sometimes may be a group of pro-\ncesses. A Java service instance, for exampl e, is a process running the JVM. A NodeJS\nservice might spawn multiple worker proce sses in order to process requests concur-\nrently. Some languages support deploying mu ltiple service instances within the same\nprocess.\n Sometimes you might deploy a single serv ice instance on a machine, while retain-\ning the option to deploy multiple service instances on the same machine. For exam-\nple, as figure 12.4 shows, you could run multiple JVMs on a single machine. Each JVM\nruns a single service instance.\nPattern: Language-specific packaging format\nDeploy a language-specific package into production. See http://microservices.io/\npatterns/deployment/language-specific-packaging.html.\nJVM\nprocess\nJVM\nprocess\nJVM\nprocess\nService instanceBuild time Runtime\nService runtime management\nMachine\nProduction\nJDK/JRE\nMachine\nJDK/JRE\nService\ncode\nExecutable\nJAR/WAR \ufb01le\nDeployment\npipeline\nFigure 12.3 The deployment pipeline builds an execut able JAR file and deploys it into production. \nIn production, each service instance is a JVM running on a machine that has the JDK or JRE installed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1929, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7b8908a-f6fa-4d42-be8c-51e7d1a13b28": {"__data__": {"id_": "e7b8908a-f6fa-4d42-be8c-51e7d1a13b28", "embedding": null, "metadata": {"page_label": "388", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b49f49fb-69d5-4c57-a60c-d67fd91a4a61", "node_type": "4", "metadata": {"page_label": "388", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cc34b89b87331c0f02182c16354c7d167addb105006b921b429c93159b89c115", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "388 CHAPTER 12 Deploying microservices\nSome languages also let you run multiple se rvices instances in a single process. For\nexample, as figure 12.5 shows,  you can run multiple Java services on a single Apache\nTomcat.\nThis approach is commonly used when de ploying applications on traditional expen-\nsive and heavyweight application servers, such as WebLogic and WebSphere. You can\nalso package services as OSGI bundles and run multiple service instances in each\nOSGI container.\n The Service as a language-specific pack age pattern has both benefits and draw-\nbacks. Let\u2019s first look at the benefits.\n12.1.1 Benefits of the Service as a language-specific package pattern\nThe Service as a language-specific package pattern has a few benefits:\n\uf0a1 Fast deployment\n\uf0a1 Efficient resource utilization, especial ly when running multiple instances on\nthe same machine or within the same process\nLet\u2019s look at each one.\nJVM\nProcess\nPhysical or virtual machine\nTomcat\nService\ninstance A\nJVM\nProcess\nTomcat\nService\ninstance B\nJVM\nProcess\nTomcat\nService\ninstance ...\nFigure 12.4 Deploying multiple service \ninstances on the same machine. They \nmight be instances of the same service \nor instances of different services. The \noverhead of the OS is shared among the \nservice instances. Each service instance \nis a separate process, so there\u2019s some \nisolation between them.\nProcess\nPhysical or virtual machine\nService\ninstance A\nJVM\nTomcat\nService\ninstance B\nService\ninstance ... Figure 12.5 Deploying multiple \nservices instances on the same web \ncontainer or application server. They \nmight be instances of the same service \nor instances of different services. The \noverhead of the OS and runtime is shared \namong all the service instances. But \nbecause the service instances are in the \nsame process, there\u2019s no isolation \nbetween them.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1823, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "486f5470-a1ff-4217-b802-5616d4709e67": {"__data__": {"id_": "486f5470-a1ff-4217-b802-5616d4709e67", "embedding": null, "metadata": {"page_label": "389", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0199680f-db76-4c51-b437-5d0f5500cba9", "node_type": "4", "metadata": {"page_label": "389", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "df1e1ef1ceff8f1ee7c5ec1849c792528d56caa1dafd95d773616a1e47d616c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "389Deploying services using the Language-specific packaging format pattern\nFAST DEPLOYMENT\nOne major benefit of this pattern is that deploying a service instance is relatively\nfast: you copy the service to a host and start it. If the service is written in Java, you\ncopy a JAR or WAR file. For other languages, such as NodeJS or Ruby, you copy the\nsource code. In either case, the number of  bytes copied over the network is rela-\ntively small.\n Also, starting a service is rarely time co nsuming. If the service is its own process,\nyou start it. Otherwise, if the service is one of several instances running in the same\ncontainer process, you either dynamically de ploy it into the container or restart the\ncontainer. Because of the lack of overhead, starting a service is usually fast. \nEFFICIENT RESOURCE UTILIZATION\nAnother major benefit of this pattern is that it uses resources relatively efficiently. Mul-\ntiple service instances share the machine and its operating system. It\u2019s even more effi-\ncient if multiple service instances run within the same process. For example, multiple\nweb applications could share the same Apache Tomcat server and JVM. \n12.1.2 Drawbacks of the Service as a language-specific package pattern\nDespite its appeal, the Service as a language-specific package pattern has several signif-\nicant drawbacks:\n\uf0a1 Lack of encapsulation of the technology stack.\n\uf0a1 No ability to constrain the resources consumed by a service instance.\n\uf0a1 Lack of isolation when running multiple service instances on the same machine.\n\uf0a1 Automatically determining where to place service instances is challenging.\nLet\u2019s look at each drawback.\nLACK OF ENCAPSULATION OF THE TECHNOLOGY STACK\nThe operation team must know the specific details of how to deploy each and every\nservice. Each service needs a particular version of the runtime. A Java web application,\nfor example, needs particular versions of  Apache Tomcat and the JDK. Operations\nmust install the correct version of each required software package.\n To make matters worse, services can be written in a variety of languages and frame-\nworks. They might also be written in mult iple versions of those languages and frame-\nworks. Consequently, the development team must share lots of details with operations.\nThis complexity increases the risk of errors during deployment. A machine might, for\nexample, have the wrong version of the language runtime. \nNO ABILITY TO CONSTRAIN THE RESOURCES CONSUMED BY A SERVICE INSTANCE\nAnother drawback is that you can\u2019t constr ain the resources consumed by a service\ninstance. A process can potentially consume all of a machine\u2019s CPU or memory, starv-\ning other service instances and operating systems of resources. This might happen, for\nexample, because of a bug.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2760, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "faf89278-ca8f-4034-99db-4425d1b111e7": {"__data__": {"id_": "faf89278-ca8f-4034-99db-4425d1b111e7", "embedding": null, "metadata": {"page_label": "390", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae91df21-ae47-4199-81f3-a2fe71bc3dce", "node_type": "4", "metadata": {"page_label": "390", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fa2dd5256d9500ddf684ebbf85a1b040ba1524d0ab87c54e25ae762c1574dd06", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "390 CHAPTER 12 Deploying microservices\nLACK OF ISOLATION WHEN RUNNING MULTIPLE SERVICE INSTANCES ON THE SAME MACHINE\nThe problem is even worse when running multiple instances on the same machine.\nThe lack of isolation means that a misbehav ing service instance can impact other ser-\nvice instances. As a result, the application risks being unreliable, especially when run-\nning multiple service instances on the same machine. \nAUTOMATICALLY DETERMINING WHERE TO PLACE SERVICE INSTANCES IS CHALLENGING\nAnother challenge with running multiple service instances on the same machine is\ndetermining the placement of service inst ances. Each machine has a fixed set of\nresources, CPU, memory, and so on, and each service instance needs some amount of\nresources. It\u2019s important to assign service instances to machines in a way that uses the\nmachines efficiently without overloading them. As I explain shortly, VM-based clouds\nand container orchestration frameworks hand le this automatically. When deploying\nservices natively, it\u2019s likely that you\u2019ll need to manually decide the placement.\n As you can see, despite its familiarity, the Service as a language-specific package\npattern has some significant drawbacks. Yo u should rarely use this approach, except\nperhaps when efficiency outweighs all other concerns.\n Let\u2019s now look at modern ways of deploying services that avoid these problems. \n12.2 Deploying services using the Service as a virtual \nmachine pattern\nOnce again, imagine you want to deploy the FTGO Restaurant Service, except this\ntime it\u2019s on AWS EC2. One option would be to create and configure an EC2 instance\nand copy onto it the executable or WAR file. Although you would get some benefit\nfrom using the cloud, this approach suffer s from the drawbacks described in the pre-\nceding section. A better, more modern approach is to package the service as an Ama-\nzon Machine Image (AMI), as shown in figure  12.6. Each service instance is an EC2\ninstance created from that AMI. The EC2 instances would typically be managed by an\nAWS Auto Scaling group, which attempts to ensure that the desired number of\nhealthy instances is always running.\nThe virtual machine image is built by the service\u2019s deployment pipeline. The deploy-\nment pipeline, as figure 12.6 shows, runs  a VM image builder to create a VM image\nthat contains the service\u2019s code and whatever software is required to run it. For\nexample, the VM builder for a FTGO servic e installs the JDK and the service\u2019s exe-\ncutable JAR. The VM image builder config ures the VM image machine to run the\napplication when the VM boots, using Linux\u2019s init system, such as upstart.\nPattern: Deploy a service as a VM\nDeploy services packaged as VM images into production. Each service instance is a\nVM. See http://microservices.io/patterns/deployment/service-per-vm.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2827, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "abe1941b-45f1-4441-a95f-91494bedc3b0": {"__data__": {"id_": "abe1941b-45f1-4441-a95f-91494bedc3b0", "embedding": null, "metadata": {"page_label": "391", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b63ddaa-c29c-4be7-ba67-34deba098af2", "node_type": "4", "metadata": {"page_label": "391", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a0293035f63c4f6d1076a88ae51b61840dcb00640487fafd5bdbdf125a7e775e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "391Deploying services using the Service as a virtual machine pattern\nThere are a variety of tools that your deployment pipeline can use to build VM\nimages. One early tool for creating EC2 AM Is is Aminator, created by Netflix, which\nused it to deploy its video-streaming service on AWS ( https://github.com/Netflix/\naminator). A more modern VM image builder is  Packer, which unlike Aminator sup-\nports a variety of virtualization technologi es, including EC2, Digital Ocean, Virtual\nBox, and VMware (www.packer.io). To use Packer to create an AMI, you write a config-\nuration file that specifies the base image and a set of provisioners that install software\nand configure the AMI.\nAbout Elastic Beanstalk\nElastic Beanstalk, which is provided by AWS, is an easy way to deploy your services\nusing VMs. You upload your code, such as a WAR file, and Elastic Beanstalk deploys\nit as one or more load-balanced and managed EC2 instances. Elastic Beanstalk is\nperhaps not quite as fashionable as, say, Kubernetes, but it\u2019s an easy way to deploy\na microservices-based application on EC2.\nInterestingly, Elastic Beanstalk combines elements of the three deployment patterns\ndescribed in this chapter. It supports several packaging formats for several lan-\nguages, including Java, Ruby, and .NET. It deploys the application as VMs, but rather\nthan building an AMI, it uses a base image that installs the application on startup.\nBuild time Runtime\nRequests\nDeployed as\nService\nEC2 instance\nAutoscaling group\nService\nEC2 instance\nService\nEC2 instance\nService\ncode\nDeployment pipeline\nCreatesVM image\nbuilder\nElastic load\nbalancer\nAMI\n(VM\nimage)\nFigure 12.6 The deployment pipeline packages a servi ce as a virtual machine image, such as an EC2 \nAMI, containing everything required to run the service, including the language runtime. At runtime, \neach service instance is a VM, such as an EC2 instance, instantiated from that image. An EC2 Elastic \nLoad Balancer routes requests to the instances.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1983, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f3daf57-46b7-4c87-9c42-b6fb6d5eec4a": {"__data__": {"id_": "4f3daf57-46b7-4c87-9c42-b6fb6d5eec4a", "embedding": null, "metadata": {"page_label": "392", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9aeb4493-cb74-4e76-8445-afad596967cd", "node_type": "4", "metadata": {"page_label": "392", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8d91634d0a1dec5703cd2611ac9be9ded46b606c7cb85953f06ec2236339f0ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "392 CHAPTER 12 Deploying microservices\nLet\u2019s look at the benefits and drawbacks of using this approach.\n12.2.1 The benefits of deploying services as VMs\nThe Service as a virtual machine pattern has a number of benefits:\n\uf0a1 The VM image encapsulates the technology stack.\n\uf0a1 Isolated service instances.\n\uf0a1 Uses mature cloud infrastructure.\nLet\u2019s look at each one.\nTHE VM IMAGE ENCAPSULATES THE TECHNOLOGY STACK\nAn important benefit of this pattern is that the VM image contains the service and all\nof its dependencies. It eliminates the error-prone requirement to correctly install and\nset up the software that a service needs in order to run. Once a service has been pack-\naged as a virtual machine, it becomes a black box that encapsulates your service\u2019s tech-\nnology stack. The VM image can be deployed anywhere without modification. The API\nfor deploying the service becomes the VM  management API. Deployment becomes\nmuch simpler and more reliable. \nSERVICE INSTANCES ARE ISOLATED\nA major benefit of virtual machines is that each service instance runs in complete iso-\nlation. That, after all, is one of the main goals of virtual machine technology. Each vir-\ntual machine has a fixed amount of CPU and memory and can\u2019t steal resources from\nother services. \nUSES MATURE CLOUD INFRASTRUCTURE\nAnother benefit of deploying your microservi ces as virtual machines is that you can\nleverage mature, highly automated cloud in frastructure. Public clouds such as AWS\nattempt to schedule VMs on physical machines in a way that avoids overloading the\nmachine. They also provide valuable features  such as load balancing of traffic across\nVMs and autoscaling. \n12.2.2 The drawbacks of deploying services as VMs\nThe Service as a VM pattern also has some drawbacks:\n\uf0a1 Less-efficient resource utilization\n\uf0a1 Relatively slow deployments\n\uf0a1 System administration overhead\nLet\u2019s look at each drawback in turn.\n(continued)\nElastic Beanstalk can also deploy Docker containers. Each EC2 instance runs a col-\nlection of one or more containers. Unlike a Docker orchestration framework, covered\nlater in the chapter, the unit of scaling is the EC2 instance rather than a container.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2157, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b4a0d705-4d0c-4761-a3ab-83daafa4a564": {"__data__": {"id_": "b4a0d705-4d0c-4761-a3ab-83daafa4a564", "embedding": null, "metadata": {"page_label": "393", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90a11c50-c372-45d9-823f-7caf8a63fcd0", "node_type": "4", "metadata": {"page_label": "393", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "898e71cf94bc6d69e6a1236124ff330b648ba6735ecf844212e3dbe72fa98c97", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "393Deploying services using the Service as a container pattern\nLESS-EFFICIENT RESOURCE UTILIZATION\nEach service instance has the overhead of an entire virtual machine, including its\noperating system. Moreover, a typical public IaaS virtual machine offers a limited set\nof VM sizes, so the VM will probably be un derutilized. This is less likely to be a prob-\nlem for Java-based services because they\u2019re relatively heavyweight. But this pattern\nmight be an inefficient way of deploying lightweight NodeJS and GoLang services. \nRELATIVELY SLOW DEPLOYMENTS\nBuilding a VM image typically takes some number of minutes because of the size of\nthe VM. There are lots of bits to be move d over the network. Also, instantiating a VM\nfrom a VM image is time consuming because of, once again, the amount of data that\nmust be moved over the network. The oper ating system running inside the VM also\ntakes some time to boot, though slow is a relative term. This process, which perhaps\ntakes minutes, is much faster than the traditional deployment process. But it\u2019s much\nslower than the more lightweight deployment patterns you\u2019ll read about soon. \nSYSTEM ADMINISTRATION OVERHEAD\nYou\u2019re responsible for patching the operation system and runtime. System administra-\ntion may seem inevitable when deploying software, but later in section 12.5, I describe\nserverless deployment, which eliminates this kind of system administration.\n Let\u2019s now look at an alternative way to deploy microservices that\u2019s more light-\nweight, yet still has many of the benefits of virtual machines. \n12.3 Deploying services using the Service as \na container pattern\nContainers are a more modern and lightwe ight deployment mechanism. They\u2019re an\noperating-system-level virtualization mechanism. A container, as figure 12.7 shows,\nconsists of usually one but sometimes multiple processes running in a sandbox, which\nisolates it from other containers. A cont ainer running a Java service, for example,\nwould typically consist of the JVM process.\n From the perspective of a process running in a container, it\u2019s as if it\u2019s running on\nits own machine. It typically has its own IP address, which eliminates port conflicts. All\nJava processes can, for example, listen on  port 8080. Each container also has its own\nroot filesystem. The container runtime uses  operating system mechanisms to isolate\nthe containers from each other. The most popular example of a container runtime is\nDocker, although there are others, such as Solaris Zones.\nPattern: Deploy a service as a container\nDeploy services packaged as container images into production. Each service instance\nis a container. See http://microservices.io/patterns/deployment/service-per-container\n.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2709, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69556f94-d127-4a5f-a767-c3f8a5edf496": {"__data__": {"id_": "69556f94-d127-4a5f-a767-c3f8a5edf496", "embedding": null, "metadata": {"page_label": "394", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5eff7c9a-c33c-414d-bc25-1f5e675b95fb", "node_type": "4", "metadata": {"page_label": "394", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "612f38b6f8b3614962a78ace7bc8cf7f5ff82a2f0f4c54c598522c8284e6cde0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "394 CHAPTER 12 Deploying microservices\nWhen you create a container, you can specify its CPU, memory resources, and, depend-\ning on the container implementation, perhaps the I/O resources. The container run-\ntime enforces these limits and prevents a container from hogging the resources of its\nmachine. When using a Docker orchestration framework such as Kubernetes, it\u2019s espe-\ncially important to specify a container\u2019s re sources. That\u2019s because the orchestration\nframework uses a container\u2019s requested reso urces to select the machine to run the\ncontainer and thereby ensure that machines aren\u2019t overloaded.\n Figure 12.8 shows the process of deployin g a service as a container. At build-time,\nthe deployment pipeline uses a container image-building tool, which reads the ser-\nvice\u2019s code and a description of the image, to create the container image and stores it\nin a registry. At runtime, the container im age is pulled from the registry and used to\ncreate containers.\n Let\u2019s take a look at build-time and runtime steps in more detail.\n \n \nContainer\nMachine\nService\nprocess\nContainer\nContainer runtime,such as Docker\nService\nprocess\nContainer\nService\nprocess\nOperating System\nEach container is a sandbox\nthat isolates the processes.\nShared by all of the containers\nFigure 12.7 A container consists of one or more processes \nrunning in an isolated sandbox. Multiple containers usually run \non a single machine. The containers share the operating system.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1456, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f77f7b0f-94cc-4019-910b-88e5972c6b95": {"__data__": {"id_": "f77f7b0f-94cc-4019-910b-88e5972c6b95", "embedding": null, "metadata": {"page_label": "395", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe9d13c0-5c2d-457d-88cc-3236648be547", "node_type": "4", "metadata": {"page_label": "395", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6a587cc9dbb4f966a2e6cd9102779b754ff6512bc8cc6586525e3df5e7a1fc8f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "395Deploying services using the Service as a container pattern\n12.3.1 Deploying services using Docker\nTo deploy a service as a container, you must package it as a container image. A container\nimage is a filesystem image consisting of th e application and any software required to\nrun the service. It\u2019s often a complete Linux root filesystem, although more lightweight\nimages are also used. For example, to deploy a Spring Boot-based service, you build a\ncontainer image containing the service\u2019s executable JAR and the correct version of\nthe JDK. Similarly, to deploy a Java we b application, you would build a container\nimage containing the WAR file, Apache Tomcat, and the JDK.\nBUILDING A DOCKER IMAGE\nThe first step in building an image is to create a Dockerfile. A Dockerfile describes how\nto build a Docker container image. It spec ifies the base container image, a series of\ninstructions for installing software and co nfiguring the container, and the shell com-\nmand to run when the container is created. Listing 12.1 shows the Dockerfile used to\nbuild an image for Restaurant Service. It builds a container image containing the\nservice\u2019s executable JAR file. It co nfigures the container to run the java -jar com-\nmand on startup.\nBuild time Runtime\n$ docker build ... Deployed\nas\nDeployed\nas\nService\ninstance\nContainer\nVM\nVM\nContainer\nimage registry\nService\ninstance\nContainer\nService\ninstance\nContainer\nService\ncode\nContainer runtime\nContainer runtime\nDeployment pipeline\nCreatesContainer\nbuilder tool\nDocker\n\ufb01le\nService\ncontainer\nimage\nFigure 12.8 A service is packaged as a container im age, which is stored in a registry. At runtime \nthe service consists of multiple containers instantiated from that image. Containers typically run on \nvirtual machines. A single VM will usually run multiple containers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1816, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "392b0370-3995-400a-a94b-d6adb0985276": {"__data__": {"id_": "392b0370-3995-400a-a94b-d6adb0985276", "embedding": null, "metadata": {"page_label": "396", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22e8afdb-be9a-46a7-bf4a-a90de495aef3", "node_type": "4", "metadata": {"page_label": "396", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "359e62ffc9761988bf7e20eeb421d8328d893f09a40815ba390a9f22714c9894", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "396 CHAPTER 12 Deploying microservices\nFROM openjdk:8u171-jre-alpine\nRUN apk --no-cache add curl   \nCMD java ${JAVA_OPTS} -jar ftgo-restaurant-service.jar   \nHEALTHCHECK --start-period=30s --\ninterval=5s CMD curl http://localhost:8080/actuator/health || exit 1      \nCOPY build/libs/ftgo-restaurant-service.jar .   \nThe base image openjdk:8u171-jre-alpine is a minimal footprint Linux image con-\ntaining the JRE. The Dockerfile copies th e service\u2019s JAR into the image and config-\nures the image to execute the JAR on startup. It also configures Docker to periodically\ninvoke the health check endpoint, described in chapter 11. The HEALTHCHECK direc-\ntive says to invoke the health check endpoint API, described in chapter 11, every 5 sec-\nonds after an initial 30-second delay, which gives the service time to start.\n Once you\u2019ve written the Dockerfile, you can then build the image. The following\nlisting shows the shell commands to build the image for Restaurant Service. The\nscript builds the service\u2019s JAR file and executes the docker build command to create\nthe image.\ncd ftgo-restaurant-service\n../gradlew assemble   \ndocker build -t ftgo-restaurant-service .   \nThe docker build command has two arguments: the -t argument specifies the name\nof the image, and the . specifies what Docker calls the context. The context, which in\nthis example is the current directory, consists of Dockerfile and the files used to\nbuild the image. The docker build command uploads the context to the Docker dae-\nmon, which builds the image. \nPUSHING A DOCKER IMAGE TO A REGISTRY\nThe final step of the build process is to push the newly built Docker image to what is\nknown as a registry. A Docker registry is the equivalent of a Java Maven repository for\nJava libraries, or a NodeJS npm registry for NodeJS packages. Docker hub is an exam-\nple of a public Docker registry and is equi valent to Maven Central or NpmJS.org. But\nfor your applications you\u2019ll probably want to use a private registry provided by ser-\nvices, such as Docker Cloud registry or AWS EC2 Container Registry.\n You must use two Docker commands to pus h an image to a registry. First, you use\nthe docker tag command to give the image a name that\u2019s prefixed with the hostname\nListing 12.1 The Dockerfile used to build Restaurant Service\nListing 12.2 The shell commands used to build the container image for \nRestaurant Service\nThe base image Install curl for \nuse by the \nhealth check.\nConfigure Docker \nto run java -jar .. \nwhen the container \nis started.\nConfigure Docker to\ninvoke the health\ncheck endpoint.\nCopies the JAR in Gradle\u2019s build\ndirectory into the image\nChange to the \nservice\u2019s directory. Build the \nservice\u2019s JAR.\nBuild the image.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2703, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e67fc170-a791-454f-bc83-7d1b069498fe": {"__data__": {"id_": "e67fc170-a791-454f-bc83-7d1b069498fe", "embedding": null, "metadata": {"page_label": "397", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8f017dd-818c-4de0-99f7-29b33ec191e0", "node_type": "4", "metadata": {"page_label": "397", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0ad7c908e57a3f39606f920d664e9aef36833343105a5a0f1de64ea8147dcc42", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "397Deploying services using the Service as a container pattern\nand optional port of the registry. The imag e name is also suffixed with the version,\nwhich will be important when you make a ne w release of the service. For example, if\nthe hostname of the registry is registry.acme.com, you would use this command to\ntag the image:\ndocker tag ftgo-restaurant-service registry.acme.com/ftgo-restaurant-\nservice:1.0.0.RELEASE\nNext you use the docker push command to upload that tagged image to the registry:\ndocker push registry.acme.com/ftgo-restaurant-service:1.0.0.RELEASE\nThis command often takes much less time than you might expect. That\u2019s because a\nDocker image has what\u2019s known as a layered file system , which enables Docker to only\ntransfer part of the image over the networ k. An image\u2019s operating system, Java run-\ntime, and the application are in separate la yers. Docker only needs to transfer those\nlayers that don\u2019t exist in the destination. As a result, transferring an image over a net-\nwork is quite fast when Docker only has to  move the application\u2019s layers, which are a\nsmall fraction of the image.\n Now that we\u2019ve pushed the image to a re gistry, let\u2019s look at how to create a\ncontainer. \nRUNNING A DOCKER CONTAINER\nOnce you\u2019ve packaged your service as a container image, you can then create one or\nmore containers. The container infrastruc ture will pull the image from the registry\nonto a production server. It will then create one or more containers from that image.\nEach container is an instance of your service.\n As you might expect, Docker provides a docker run command that creates and\nstarts a container. Listing 12.3 show s how to use this command to run Restaurant\nService. The docker run command has several arguments, including the container\nimage and a specification of environment va riables to set in the runtime container.\nThese are used to pass an externalized configuration, such as the database\u2019s network\nlocation and more.\ndocker run \\\n-d \\   \n--name ftgo-restaurant-service \\    \n-p 8082:8080 \\    \n-e SPRING_DATASOURCE_URL=... -e SPRING_DATASOURCE_USERNAME=... \\  \n-e SPRING_DATASOURCE_PASSWORD=... \\\nregistry.acme.com/ftgo-restaurant-service:1.0.0.RELEASE   \nListing 12.3 Using docker run to run a containerized service\nRuns it as a \nbackground daemon The name of \nthe container Binds port 8080 of the \ncontainer to port 8082 \nof the host machine\nEnvironment \nvariables\nImage to run", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2424, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad164da4-bdee-4ca9-910b-a6a09ce96397": {"__data__": {"id_": "ad164da4-bdee-4ca9-910b-a6a09ce96397", "embedding": null, "metadata": {"page_label": "398", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2eaaa18b-b17a-484d-99b1-5832726c7b68", "node_type": "4", "metadata": {"page_label": "398", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9e86383bf775239f5b1edd6de7d31c5f21b7474c937239da7e6574dbe6aed70a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "398 CHAPTER 12 Deploying microservices\nThe docker run command pulls the image from the re gistry if necessary. It then cre-\nates and starts the container, which runs the java -jar command specified in the\nDockerfile.\n Using the docker run command may seem simple, but there are a couple of prob-\nlems. One is that docker run isn\u2019t a reliable way to deploy a service, because it creates\na container running on a single machine. The Docker engine provides some basic\nmanagement features, such as automatically restarting containers if they crash or if\nthe machine is rebooted. But it doesn\u2019t handle machine crashes.\n Another problem is that services typically don\u2019t exist in isolation. They depend on\nother services, such as databases and message  brokers. It would be nice to deploy or\nundeploy a service and its dependencies as a unit.\n A better approach that\u2019s especially useful during development is to use Docker\nCompose. Docker Compose is a tool that lets you declaratively define a set of contain-\ners using a YAML file, and then start and stop those containers as a group. What\u2019s\nmore, the YAML file is a convenient way to  specify numerous externalized configura-\ntion properties. To learn more about Docker Compose, I recommend reading Docker\nin Action by Jeff Nickoloff (Manning, 2016) and looking at the docker-compose.yml\nfile in the example code.\n The problem with Docker Compose, though, is that it\u2019s limited to a single machine.\nTo deploy services reliably, you must use a Docker orchestration framework, such as\nKubernetes, which turns a set of machines in to a pool of resources. I describe how to\nuse Kubernetes later, in section 12.4. First, let\u2019s review the benefits and drawbacks of\nusing containers. \n12.3.2 Benefits of deploying services as containers\nDeploying services as containers has severa l benefits. First, containers have many of\nthe benefits of virtual machines:\n\uf0a1 Encapsulation of the technology stack in which the API for managing your ser-\nvices becomes the container API.\n\uf0a1 Service instances are isolated.\n\uf0a1 Service instances\u2019s resources are constrained.\nBut unlike virtual machines, containers are a lightweight technology. Container\nimages are typically fast to build. For example, on my laptop it takes as little as five sec-\nonds to package a Spring Boot application as a container image. Moving a container\nimage over the network, such as to and from  the container registry, is also relatively\nfast, primarily because only a subset of an image\u2019s layers need to be transferred. Con-\ntainers also start very quickly, because th ere\u2019s no lengthy OS boot process. When a\ncontainer starts, all that runs is the service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2656, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f20ac1b-f311-4ec8-a41b-c14389bf168d": {"__data__": {"id_": "0f20ac1b-f311-4ec8-a41b-c14389bf168d", "embedding": null, "metadata": {"page_label": "399", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f9c6db17-b33e-4b28-9753-a3f17dd3c4ef", "node_type": "4", "metadata": {"page_label": "399", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "22eca3b4504d8f7da5895f5d947af42f468b6ffc78d124943a88590b267120e0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "399Deploying the FTGO application with Kubernetes\n12.3.3 Drawbacks of deploying services as containers\nOne significant drawback of containers is that you\u2019re responsible for the undifferenti-\nated heavy lifting of administering the co ntainer images. You must patch the operat-\ning system and runtime. Also, unless you\u2019re using a hosted container solution such as\nGoogle Container Engine or AWS ECS, you must administer the container infrastruc-\nture and possibly the VM infrastructure it runs on. \n12.4 Deploying the FTGO application with Kubernetes\nNow that we\u2019ve looked at containers and th eir trade-offs, let\u2019s look at how to deploy\nthe FTGO application\u2019s Restaurant Service using Kubernetes. Docker Compose,\ndescribed in section 12.3.1, is great for de velopment and testing. But to reliably run\ncontainerized services in production, you need to use a much more sophisticated con-\ntainer runtime, such as Kubernetes. Kubernetes is a Docker orchestration framework,\na layer of software on top of Docker that turns a set of machines into a single pool of\nresources for running services. It endeavors to keep the desired number of instances\nof each service running at all times, even  when service instances or machines crash.\nThe agility of containers combined with the sophistication of Kubernetes is a compel-\nling way to deploy services.\n In this section, I first give an overview of Kubernetes, its functionality, and its archi-\ntecture. After that, I show how to deploy a service using Kubernetes. Kubernetes is a\ncomplex topic, and covering it exhaustively is beyond the scope of this book, so I only\nshow how to use Kubernetes from the pers pective of a developer. For more informa-\ntion, I recommend Kubernetes in Action by Marko Luksa (Manning, 2018).\n12.4.1 Overview of Kubernetes\nKubernetes is a Docker orchestration framework. A Docker orchestration framework treats\na set of machines running Docker as a pool of resources. You tell the Docker orches-\ntration framework to run N instances of your service, and it handles the rest. Figure 12.9\nshows the architecture of a Docker orchestration framework.\n A Docker orchestration framework, such as Kubernetes , has three main functions:\n\uf0a1 Resource management \u2014Treats a cluster of machines as a pool of CPU, memory,\nand storage volumes, turning the collection of machines into a single machine.\n\uf0a1 Scheduling\u2014Selects the machine to run your container. By default, scheduling\nconsiders the resource requirements of the container and each node\u2019s available\nresources. It might also implement affinity, which colocates containers on the\nsame node, and anti-affinity, which places containers on different nodes.\n\uf0a1 Service management \u2014Implements the concept of named and versioned services\nthat map directly to services in the microservice architecture. The orchestration\nframework ensures that the desired numb er of healthy instances is running at\nall times. It load balances requests across them. The orchestration framework\nperforms rolling upgrades of services and lets you roll back to an old version.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3062, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b52d3e9-99eb-4e80-a47f-c385c0a24dd5": {"__data__": {"id_": "5b52d3e9-99eb-4e80-a47f-c385c0a24dd5", "embedding": null, "metadata": {"page_label": "400", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdece252-d9e0-4056-a725-99f43e75a60e", "node_type": "4", "metadata": {"page_label": "400", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "426c3dd0383c0e2b88c07466a2b533afa81e7b197def943ef45fb23d7e9d7c5d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "400 CHAPTER 12 Deploying microservices\nDocker orchestration frameworks are an in creasingly popular way to deploy applica-\ntions. Docker Swarm is part of the Docker engine, so is easy to set up and use. Kuber-\nnetes is much more complex to set up and administer, but it\u2019s much more sophisticated.\nAt the time of writing, Kubernetes has tremendous momentum, with a massive open\nsource community. Let\u2019s take a closer look at how it works.\nKUBERNETES ARCHITECTURE\nKubernetes runs on a cluster of machines. Figure 12.10 shows the architecture of a\nKubernetes cluster. Each machine in a Kubernetes cluster is either a master or a node.\nA typical cluster has a small number of masters\u2014perhaps just one\u2014and many nodes.\nA master machine is responsible for managing the cluster. A node is a worker than runs\none or more pods. A pod is Kubernetes\u2019s unit of deployment and consists of a set of\ncontainers.\n A master runs several components, including the following:\n\uf0a1 API server \u2014The REST API for deploying and managing services, used by the\nkubectl command-line interface, for example.\n\uf0a1 Etcd\u2014A key-value NoSQL database that stores the cluster data.\nSVC\nA\nSVC\nB\nSVC\nC\nContainer\nDocker orchestration framework\nContainer Container\nDocker\nOperating\nsystem\nMachine\nDocker\nOperating\nsystem\nMachine\nDocker\nOperating\nsystem\nMachine\nService management\nScheduling\nResource management\nFigure 12.9 A Docker orchestration \nframework turns a set of machines running \nDocker into a cluster of resources. It assigns \ncontainers to machines. The framework \nattempts to keep the desired number of \nhealthy containers running at all times.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1611, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dcb15ee6-bdef-411b-89f8-1e5bddd6f4ee": {"__data__": {"id_": "dcb15ee6-bdef-411b-89f8-1e5bddd6f4ee", "embedding": null, "metadata": {"page_label": "401", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5df1b8e3-374a-45d5-9d81-b4983056aace", "node_type": "4", "metadata": {"page_label": "401", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fefbbb5c0fb30f2681823cdef88c6aa2277db268f9b39030d977d9822bb61455", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "401Deploying the FTGO application with Kubernetes\n\uf0a1 Scheduler\u2014Selects a node to run a pod.\n\uf0a1 Controller manager\u2014Runs the controllers, which ensure that the state of the clus-\nter matches the intended state. For example, one type of controller known as a\nreplication controller ensures that the desire d number of instances of a service\nare running by starting and terminating instances.\nA node runs several components, including the following:\n\uf0a1 Kubelet\u2014Creates and manages the pods running on the node\n\uf0a1 Kube-proxy\u2014Manages networking, including load balancing across pods\n\uf0a1 Pods\u2014The application services\nSVC\nPod\nKubernetes master\netcd\nKubelet Kube-proxy\nKubernetes node\nSVC\nPod\nKubelet Kube-proxy\nKubernetes node\nApplication\nrequests\nCon\ufb01guration\ncommands\nDeveloper\nAplication\nuser\nDeployment\npipeline\nKubecti\nCLI API Server\nController\nmanagement\nScheduler\nFigure 12.10 A Kubernetes cluster consists of a master, which manages the cluster, and nodes, \nwhich run the services. Developers and the deployment pipeline interact with Kubernetes through the \nAPI server, which along with other cluster-management software runs on the master. Application \ncontainers run on nodes. Each node runs a Kubelet, which manages the application container, and a \nkube-proxy, which routes application requests to the pods, either directly as a proxy or indirectly by \nconfiguring iptables routing rules built into the Linux kernel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1416, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93138e18-c2d9-4193-935e-ed49ca1334d0": {"__data__": {"id_": "93138e18-c2d9-4193-935e-ed49ca1334d0", "embedding": null, "metadata": {"page_label": "402", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ee05932-7ebf-44db-88ef-279c1bbe76da", "node_type": "4", "metadata": {"page_label": "402", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ee110e52a4521d64b1922d7c94ec5a901121ecd458ea25c03e30edaa588b7f44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "402 CHAPTER 12 Deploying microservices\nLet\u2019s now look at key Kubernetes concepts you\u2019ll need to master to deploy services on\nKubernetes. \nKEY KUBERNETES CONCEPTS\nAs mentioned in the introduction to this section, Kubernetes is quite complex. But it\u2019s\npossible to use Kubernetes productively on ce you master a few key concepts, called\nobjects. Kubernetes defines many types of object s. From a developer\u2019s perspective, the\nmost important objects are the following:\n\uf0a1 Pod\u2014A pod is the basic unit of deployment in Kubernetes. It consists of one or\nmore containers that share an IP addr ess and storage volumes. The pod for a\nservice instance often consists of a single container, such as a container running\nthe JVM. But in some scenarios a pod contains one or more sidecar containers,\nwhich implement supporting functions. For example, an NGINX server could\nhave a sidecar that periodically does a git pull to download the latest version\nof the website. A pod is ephemeral, beca use either the pod\u2019s containers or the\nnode it\u2019s running on might crash.\n\uf0a1 Deployment\u2014A declarative specification of a pod. A deployment is a controller\nthat ensures that the desired number of instances of the pod (service instances)\nare running at all times. It supports ve rsioning with rolling upgrades and roll-\nbacks. Later in section 12.4.2, you\u2019ll see that each service in a microservice\narchitecture is a Kubernetes deployment.\n\uf0a1 Service\u2014Provides clients of an application service with a static/stable network\nlocation. It\u2019s a form of infrastructure -provided service discovery, described in\nchapter 3. A service has an IP address and a DNS name that resolves to that IP\naddress and load balances TCP and UDP traffic across one or more pods. The\nIP address and a DNS name are only acce ssible within the Kubernetes. Later, I\ndescribe how to configure services that are accessible from outside the cluster.\n\uf0a1 ConfigMap\u2014A named collection of name-value pairs that defines the external-\nized configuration for one or more app lication services (see chapter 11 for an\noverview of externalized configuration) . The definition of a pod\u2019s container\ncan reference a ConfigMap to define th e container\u2019s environment variables. It\ncan also use a ConfigMap to create configuration files inside the container. You\ncan store sensitive information, such as passwords, in a form of ConfigMap\ncalled a Secret.\nNow that we\u2019ve reviewed the key Kubernetes concepts, let\u2019s see them in action by look-\ning at how to deploy an application service on Kubernetes. \n12.4.2 Deploying the Restaurant service on Kubernetes\nAs mentioned earlier, to deploy a service on Kubernetes, you need to define a deploy-\nment. The easiest way to create a Kubernetes object such as a deployment is by writing\na YAML file. Listing 12.4 is a YAML file defining a deployment for Restaurant Service.\nThis deployment specifies running two replicas of a pod. The pod has just one container.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2928, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "848770ce-9a3a-4b51-bd1e-d032a63ff4c0": {"__data__": {"id_": "848770ce-9a3a-4b51-bd1e-d032a63ff4c0", "embedding": null, "metadata": {"page_label": "403", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c9bc197-ec46-4bba-8051-9e5f2344e1e2", "node_type": "4", "metadata": {"page_label": "403", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3b921f3aa3ae00a48d67888f58a21ab0c609c0c24ab0fb18f0a388aa936e515a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "403Deploying the FTGO application with Kubernetes\nThe container definition specifies the Dock er image running along with other attri-\nbutes, such as the values of environment variables. The container\u2019s environment vari-\nables are the service\u2019s externalized configuration. They are read by Spring Boot and\nmade available as properties in the application context.\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\nname: ftgo-restaurant-service\nspec:\nreplicas: 2\ntemplate:\nmetadata:\nlabels:\napp: ftgo-restaurant-service    \nspec:   \n   containers:\n- name: ftgo-restaurant-service\n  image: msapatterns/ftgo-restaurant-service:latest\n  imagePullPolicy: Always\n  ports:\n  - containerPort: 8080          \n    name: httpport\n  env:                              \n    - name: JAVA_OPTS\n      value: \"-Dsun.net.inetaddr.ttl=30\"\n    - name: SPRING_DATASOURCE_URL\n      value: jdbc:mysql://ftgo-mysql/eventuate\n    - name: SPRING_DATASOURCE_USERNAME\n      valueFrom:\n        secretKeyRef:\n          name: ftgo-db-secret\n          key: username\n    - name: SPRING_DATASOURCE_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: ftgo-db-secret            \n          key: password\n    - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME\n      value: com.mysql.jdbc.Driver\n    - name: EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS\n      value: ftgo-kafka:9092\n    - name: EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING\n      value: ftgo-zookeeper:2181\n  livenessProbe:\n    httpGet:\n      path: /actuator/health\n      port: 8080\n    initialDelaySeconds: 60\n    periodSeconds: 20\n  readinessProbe:\nListing 12.4 Kubernetes Deployment for ftgo-restaurant-service\nSpecifies that this is an \nobject of type Deployment\nThe name of the deployment\nNumber of pod replicas\nGives each pod a label \ncalled app whose value is \nftgo-restaurant-service\nThe specification of \nthe pod, which defines \njust one container\n The container\u2019s port\nThe container\u2019s environment \nvariables, which are read by \nSpring Boot\nSensitive values that \nare retrieved from the \nKubernetes Secret \ncalled ftgo-db-secret\nConfigure Kubernetes \nto invoke the health \ncheck endpoint.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2126, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "67d89315-18f5-4c66-aed3-21578b807699": {"__data__": {"id_": "67d89315-18f5-4c66-aed3-21578b807699", "embedding": null, "metadata": {"page_label": "404", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "455b72f8-cad0-44e5-8e6c-f5e3c96bca1e", "node_type": "4", "metadata": {"page_label": "404", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "8e2df75e41d09123f07b1001b9a4a6584b321c9d4311f5b007184a0949d5150b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "404 CHAPTER 12 Deploying microservices\n    httpGet:\n      path: /actuator/health\n      port: 8080\n    initialDelaySeconds: 60\n    periodSeconds: 20\nThis deployment definition conf igures Kubernetes to invoke Restaurant Service\u2019s\nhealth check endpoint. As described in ch apter 11, a health check endpoint enables\nKubernetes to determine the health of the service instance. Kubernetes implements\ntwo different checks. The first check is readinessProbe, which it uses to determine\nwhether it should route traffic to a serv ice instance. In this example, Kubernetes\ninvokes the /actuator/health HTTP endpoint every 20 seconds after an initial 30-\nsecond delay, which gives it a chance to in itialize. If some number (default is 1) of\nconsecutive readinessProbes succeeds, Kubernetes considers the service to be ready,\nwhereas if some number (default, 3) of consecutive readinessProbes fail, it\u2019s consid-\nered not to be ready. Kubernetes will only  route traffic to the service instance when\nthe readinessProbe indicates that it\u2019s ready.\n The second health check is the livenessProbe. It\u2019s configured the same way as the\nreadinessProbe. But rather than determine whether traffic should be routed to a ser-\nvice instance, the livenessProbe determines whether Kubernetes should terminate\nand restart the service instance. If some number (default, 3) of consecutive liveness-\nProbes fail in a row, Kubernetes will terminate and restart the service.\n Once you\u2019ve written the YAML file, you can create or update the deployment by\nusing the kubectl apply command:\nkubectl apply -f ftgo-restaurant-service/src/deployment/kubernetes/ftgo-\nrestaurant-service.yml\nThis command makes a request to the Kubernetes API server that results in the cre-\nation of the deployment and the pods.\n To create this deployment, you must fi rst create the Kubernetes Secret called\nftgo-db-secret. One quick and insecure way to do that is as follows:\nkubectl create secret generic ftgo-db-secret \\\n--from-literal=username=mysqluser --from-literal=password=mysqlpw\nThis command creates a secret containing the database user ID and password speci-\nfied on the command line. See the Kubernetes documentation ( https://kubernetes\n.io/docs/concepts/configuration/secret/#creating-your-own-secrets) for more secure\nways to create secrets.\nCREATING A KUBERNETES SERVICE\nAt this point the pods are running, and the Kubernetes deployment will do its best to\nkeep them running. The problem is that the pods have dynamically assigned IP\naddresses and, as such, aren\u2019t that useful  to a client that wants to make an HTTP\nrequest. As described in chapter 3, the solution is to use a service discovery mechanism.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2667, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a268d3c4-18ce-4fe4-8478-f9e5196a2656": {"__data__": {"id_": "a268d3c4-18ce-4fe4-8478-f9e5196a2656", "embedding": null, "metadata": {"page_label": "405", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8a27f18-8c99-4aaf-98fe-1cf27c9d8f8c", "node_type": "4", "metadata": {"page_label": "405", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0d639b14ca650f75eae003bc905e7829f0eeccc16ddf5c05055e33f047cdc316", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "405Deploying the FTGO application with Kubernetes\nOne approach is to use a client-side discovery mechanism and install a service registry,\nsuch as Netflix OSS Eureka. Fortunately, we can avoid doing that by using the service\ndiscovery mechanism built in to Kubernetes and define a Kubernetes service.\n A service is a Kubernetes object that provides the clients of one or more pods with a\nstable endpoint. It has an IP address and a DNS name that resolves that IP address.\nThe service load balances traffic to that  IP address across the pods. Listing 12.5\nshows the Kubernetes service for Restaurant Service. This service routes traffic\nfrom http://ftgo-restaurant-service:8080 to the pods defined by the deploy-\nment shown in the listing.\napiVersion: v1\nkind: Service\nmetadata:\nname: ftgo-restaurant-service  \nspec:\nports:\n- port: 8080\ntargetPort: 8080\nselector:\n app: ftgo-restaurant-service   \n---\nThe key part of the service definition is selector, which selects the target pods. It selects\nthose pods that have a label named app with the value ftgo-restaurant-service. If\nyou look closely, you\u2019ll see that the container defined in listing 12.4 has such a label.\n Once you\u2019ve written the YAML file, you can create the service using this command:\nkubectl apply -f ftgo-restaurant-service-service.yml\nNow that we\u2019ve created the Kubern etes service, any clients of Restaurant Service\nthat are running inside the Kubernetes cluster can access its REST API via http://\nftgo-restaurant-service:8080. Later, I discuss how to upgrade running services,\nbut first let\u2019s take a look at how to make  the services accessible from outside the\nKubernetes cluster. \n12.4.3 Deploying the API gateway\nThe Kubernetes service for Restaurant Service, shown in listing 12.5, is only accessi-\nble from within the cluster.  That\u2019s not a problem for Restaurant Service, but what\nabout API Gateway? Its role is to route traffic from the outside world to the service. It\ntherefore needs to be accessible from outs ide the cluster. Fortunately, a Kubernetes\nservice supports this use case as well. The service we looked at earlier is a ClusterIP\nservice, which is the default, but there are, however, two other types of services: Node-\nPort and LoadBalancer.\nListing 12.5 The YAML definition of the Kubernetes service for \nftgo-restaurant-service\nThe name of the service, \nalso the DNS name\nThe exposed \nport The container port \nto route traffic to\nSelects the containers \nto route traffic to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2468, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afe696a2-d011-4257-b877-1da601bc64a2": {"__data__": {"id_": "afe696a2-d011-4257-b877-1da601bc64a2", "embedding": null, "metadata": {"page_label": "406", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78b599cc-f5cb-49cc-b6e6-f77918029864", "node_type": "4", "metadata": {"page_label": "406", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1f2b154a02f94e7a480a3cb076c7b6dbc7b9c14db167af62ccb713b9d8c0354c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "406 CHAPTER 12 Deploying microservices\n A NodePort service is accessible via a cluster-wide port on all the nodes in the clus-\nter. Any traffic to that port on any cluster node is load balanced to the backend pods.\nYou must select an available port in the range of 30000\u201332767. For example, listing 12.6\nshows a service that routes traffic to port 30000 of Consumer Service.\napiVersion: v1\nkind: Service\nmetadata:\nname: ftgo-api-gateway\nspec:\ntype: NodePort   \nports:\n- nodePort: 30000   \nport: 80\ntargetPort: 8080\nselector:\napp: ftgo-api-gateway\n---\nAPI Gateway is within the cluster using the URL http://ftgo-api-gateway and out-\nside the URL http://<node-ip-address>:3000/, where node-ip-address is the IP\naddress of one of the nodes. After configuring a NodePort service you can, for exam-\nple, configure an AWS Elastic Load Balancer (ELB) to load balance requests from the\ninternet across the nodes. A key benefit of this approach is that the ELB is entirely\nunder your control. You have complete flexibility when configuring it.\n A NodePort type service isn\u2019t the only op tion, though. You can also use a Load-\nBalancer service, which automatically configures  a cloud-specific load balancer. The\nload balancer will be an ELB if Kubernetes is running on AWS. One benefit of this\ntype of service is that you no longer have  to configure your own load balancer. The\ndrawback, however, is that although Kubernetes does give a few options for configur-\ning the ELB, such the SSL certificate, you have a lot less control over its configuration. \n12.4.4 Zero-downtime deployments\nImagine you\u2019ve updated Restaurant Service and want to deploy those changes into\nproduction. Updating a running service is a simple three-step process when using\nKubernetes:\n1 Build a new container image and push it to  the registry using the same process\ndescribed earlier. The only difference is that the image will be tagged with a dif-\nferent version tag\u2014for example, ftgo-restaurant-service:1.1.0.RELEASE.\n2 Edit the YAML file for the service\u2019s deployment so that it references the new image.\n3 Update the deployment using the kubectl apply -f command.\nKubernetes will then perform a rolling upgrade of the pods. It will incrementally cre-\nate pods running version 1.1.0.RELEASE and terminate the po ds running version\nListing 12.6 The YAML definition of a NodePort service that routes traffic to port \n8082 of Consumer Service\nSpecifies a type \nof NodePort\nThe cluster-\nwide port", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2464, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9880a2a3-b675-4d96-853f-3f5a2ff6ff6b": {"__data__": {"id_": "9880a2a3-b675-4d96-853f-3f5a2ff6ff6b", "embedding": null, "metadata": {"page_label": "407", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9f17980-27df-403c-8b84-c8e3d7080145", "node_type": "4", "metadata": {"page_label": "407", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1b1f30779d93263d725f50fef6ae3601bd735b36c29363bef0e52246aaba5265", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "407Deploying the FTGO application with Kubernetes\n1.0.0.RELEASE. What\u2019s great about how Kubernetes does this is that it doesn\u2019t ter-\nminate old pods until their replacements are ready to handle requests. It uses the\nreadinessProbe mechanism, a health check mechanism described earlier in this\nsection, to determine whether a pod is ready. As a result, there will always be pods\navailable to handle requests. Eventually, assuming the new pods start successfully, all\nthe deployment\u2019s pods will be running the new version.\n But what if there\u2019s a problem and the version 1.1.0.RELEASE pods don\u2019t start?\nPerhaps there\u2019s a bug, such as a misspelled  container image name or a missing envi-\nronment variable for a new configuration property. If the pods fail to start, the deploy-\nment will become stuck. At that point, you have two options. One option is to fix the\nYAML file and rerun kubectl apply -f to update the deployment. The other option is\nto roll back the deployment.\n A deployment maintains the history of what are termed rollouts. Each time you\nupdate the deployment, it creates a new rollout.  As a result, you can easily roll back a\ndeployment to a previous version by executing the following command:\nkubectl rollout undo deployment ftgo-restaurant-service\nKubernetes will then replace the pods running version 1.1.0.RELEASE with pods run-\nning the older version, 1.0.0.RELEASE.\n A Kubernetes deployment is a good way to deploy a service without downtime. But\nwhat if a bug only appears after the pod is  ready and receiving production traffic? In\nthat situation, Kubernetes will continue to roll out new versions, so a growing number\nof users will be impacted. Though your monitoring system will hopefully detect the issue\nand quickly roll back the deployment, you won\u2019t avoid impacting at least some users. To\naddress this issue and make rolling out a new version of a service more reliable, we need\nto separate deploying, which means getting the service running in production, from\nreleasing the service, which means making it av ailable to handle production traffic.\nLet\u2019s look at how to accomplish that using a service mesh. \n12.4.5 Using a service mesh to separate deployment from release\nThe traditional way to roll out a new version of a service is to first test it in a staging\nenvironment. Then, once it\u2019s passed the test in staging, you deploy in production by\ndoing a rolling upgrade that replaces old instances of the service with new service\ninstances. On one hand, as you just saw, Kubernetes deployments make doing a roll-\ning upgrade very straightforward. On th e other hand, this approach assumes that\nonce a service version has passed the tests in  the staging environment, it will work in\nproduction. Sadly, this is not always the case.\n One reason is because staging is unlikely to be an exact clone, if for no other reason\nthan the production environment is likely to be much larger and handle much more\ntraffic. It\u2019s also time consuming to keep the two environments synchronized. As a result\nof discrepancies, it\u2019s likely that some bugs will only show up in production. And even it\nwere an exact clone, you can\u2019t guarantee that testing will catch all bugs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3189, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6dda1ab-41be-4b1b-b40b-14d03f8eb721": {"__data__": {"id_": "b6dda1ab-41be-4b1b-b40b-14d03f8eb721", "embedding": null, "metadata": {"page_label": "408", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c0a37d0-a018-4b8d-ab93-e9be40a3866f", "node_type": "4", "metadata": {"page_label": "408", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e747112c0c734a47908c21a1486cec0f5fc6376ab0aa940eac631e6be046c91e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "408 CHAPTER 12 Deploying microservices\n A much more reliable way to roll out a new version is to separate deployment from\nrelease:\n\uf0a1 Deployment\u2014Running in the production environment\n\uf0a1 Releasing a service\u2014Making it available to end users\nYou then deploy a service into production using the following steps:\n1 Deploy the new version into production without routing any end-user requests\nto it.\n2 Test it in production.\n3 Release it to a small number of end users.\n4 Incrementally release it to an increasingly larger number of users until it\u2019s han-\ndling all the production traffic.\n5 If at any point there\u2019s an issue, revert back to the old version\u2014otherwise, once\nyou\u2019re confident the new version is working correctly, delete the old version.\nIdeally, those steps will be performed by a fully automated deployment pipeline that\ncarefully monitors the newly deployed service for errors.\n Traditionally, separating deployments and releases in this way has been challeng-\ning because it requires a lot of work to implement it. But one of the benefits of using a\nservice mesh is that using this style of deployment is a lot easier. A service mesh is, as\ndescribed in chapter 11, networking infras tructure that mediates all communication\nbetween a service and other services and exte rnal applications. In addition to taking\non some of the responsibilities of the mi croservice chassis framework, a service mesh\nprovides rule-based load balancing and traffic routing that lets you safely run multiple\nversions of your services simultaneously. Late r in this section, you\u2019ll see that you can\nroute test users to one version of a servic e and end-users to a different version, for\nexample.\n As described in chapter 11, there are several service meshes to choose from. In this\nsection, I show you how to use Istio, a po pular, open source service mesh originally\ndeveloped by Google, IBM, and Lyft. I begin by providing a brief overview of Istio and\na few of its many features. Next I describe  how to deploy an application using Istio.\nAfter that, I show how to use its traffic-ro uting capabilities to deploy and release an\nupgrade to a service.\nOVERVIEW OF THE ISTIO SERVICE MESH\nThe Istio website describes Istio as an \u201cA n open platform to connect, manage, and\nsecure microservices\u201d (https://istio.io). It\u2019s a networking layer through which all of\nyour services\u2019 network traffic flows. Istio has a rich set of features organized into four\nmain categories:\n\uf0a1 Traffic management \u2014Includes service discovery, load balancing, routing rules,\nand circuit breakers\n\uf0a1 Security \u2014Secures interservice communication using Transport Layer Security\n(TLS)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2639, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "94b5f737-7bc4-4058-83ab-5438b26830da": {"__data__": {"id_": "94b5f737-7bc4-4058-83ab-5438b26830da", "embedding": null, "metadata": {"page_label": "409", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98b8e276-0b3d-41da-b0cf-ec3227a06ac4", "node_type": "4", "metadata": {"page_label": "409", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "58c2c5f369be6848b9507cedc66926779976f7bd5ac5b8013d3aadec15a520e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "409Deploying the FTGO application with Kubernetes\n\uf0a1 Telemetry\u2014Captures metrics about network traffic and implements distributed\ntracing\n\uf0a1 Policy enforcement\u2014Enforces quotas and rate limits\nThis section focuses on Istio\u2019s traffic-management capabilities.\n Figure 12.11 shows Istio\u2019s architecture. It  consists of a control plane and a data\nplane. The control plane implements mana gement functions, including configuring\nthe data plane to route traffic. The data plane consists of Envoy proxies, one per ser-\nvice instance.\n The two main components of the control plane are the Pilot and the Mixer. The Pilot\nextracts information about deployed services from the underlying infrastructure. When\nrunning on Kubernetes, for example, the Pilot retrieves the services and healthy pods. It\nconfigures the Envoy proxies to route traffic according to the defined routing rules. The\nMixer collects telemetry from the Envoy proxies and enforces policies.\nAPI Gateway\ncontainer\nGET/consumers/1\nGET/consumers/1\nGET/consumers/1\nHost: ftgo-consumer-service\nGET/consumers/1\nHost: ftgo-consumer-service\nPod\nService registry\nConsumer\nService\ncontainer\nIstio Envoy\ncontainer\nLogging\nServer\nService Pod\nMetrics\nServer\nIstio Envoy\ncontainer\nMixerPilot\nIstio control plane\nCon\ufb01gures Checks\nTelemetry\nKubernetes\nPod\nKey\nCon\ufb01guration\nRequests\nPolicy check\nTelemetry\nMonitoring infrastructure\nIstio data plane\nQueries for deployed services\nFigure 12.11 Istio consists of a control plane, whos e components include the Pilot and the Mixer, and a data \nplane, which consists of Envoy proxy servers. The Pilot extracts information about deployed services from the \nunderlying infrastructure and configures the data plane. The Mixer enforces policies such as quotas and gathers \ntelemetry, reporting it to the monitoring infrastructure servers. The Envoy proxy servers route traffic in and out of \nservices. There\u2019s one Envoy proxy server per service instance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8a4913e-bd00-4259-b45d-b299bf32e6a2": {"__data__": {"id_": "c8a4913e-bd00-4259-b45d-b299bf32e6a2", "embedding": null, "metadata": {"page_label": "410", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b2af2e4-49a7-422f-818e-b1599b9aad00", "node_type": "4", "metadata": {"page_label": "410", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0fe9230e1df0336fa84ba001f82664f7ece8e7560ef589058255a7f834b2f9db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "410 CHAPTER 12 Deploying microservices\nThe Istio Envoy proxy is a modified version of Envoy (www.envoyproxy.io). It\u2019s a high-\nperformance proxy that supports a variety of  protocols, including TCP, low-level pro-\ntocols such as HTTP and HTTPS, and high er-level protocols. It also understands\nMongoDB, Redis, and DynamoDB protocols. Envoy also supports robust interservice\ncommunication with features such as circuit breakers, rate limiting, and automatic\nretries. It can secure communication with in the application by using TLS for inter-\nEnvoy communication.\n Istio uses Envoy as a sidecar, a process or container that runs alongside the service\ninstance and implements cross-cutting concerns. When running on Kubernetes, the\nEnvoy proxy is a container within the service\u2019s pod. In other environments that don\u2019t\nhave the pod concept, Envoy runs in the sa me container as the service. All traffic to\nand from a service flows through its Envoy proxy, which routes traffic according to the\nrouting rules given to it by the contro l plane. For example, direct Service \uf0ae Service\ncommunication becomes Service \uf0ae Source Envoy \uf0ae Destination Envoy \uf0ae Service.\nIstio is configured using Kubernetes-style YAML configuration files. It has a command-\nline tool called istioctl that\u2019s similar to kubectl. You use istioctl for creating,\nupdating, and deleting rules and policies. When using Istio on Kubernetes, you can\nalso use kubectl.\n Let\u2019s look at how to deploy a service with Istio. \nDEPLOYING A SERVICE WITH ISTIO\nDeploying a service on Istio is quite straightforward. You define a Kubernetes Service\nand a Deployment for each of your application\u2019s services. Listing 12.7 shows the defini-\ntion of Service and Deployment for Consumer Service. Although it\u2019s almost identical\nto the definitions I showed earlier, there are a few differences. That\u2019s because Istio has\na few requirements for the Kubernetes services and pods:\n\uf0a1 A Kubernetes service port must use the Istio naming convention of <proto-\ncol>[-<suffix>], where protocol is http, http2, grpc, mongo, or redis. If the\nport is unnamed, Istio will treat the po rt as a TCP port and won\u2019t apply rule-\nbased routing.\n\uf0a1 A pod should have an app label such as app: ftgo-consumer-service, which\nidentifies the service, in order to support Istio distributed tracing.\n\uf0a1 In order to run multiple versions of a service simultaneously, the name of a\nKubernetes deployment must include the version, such as ftgo-consumer-\nservice-v1, ftgo-consumer-service-v2, and so on. A deployment\u2019s pods should\nhave a version label, such as version: v1, which specifies the version, so that\nIstio can route to a specific version.\nPattern: Sidecar\nImplement cross-cutting concerns in a sidecar process or container that runs alongside\nthe service instance. See http://microservices.io/patterns/deployment/sidecar.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2843, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57d270a0-955b-444a-97cb-f2b6fa1db0ff": {"__data__": {"id_": "57d270a0-955b-444a-97cb-f2b6fa1db0ff", "embedding": null, "metadata": {"page_label": "411", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aecae5a2-3704-4b43-a248-74fe1b8742df", "node_type": "4", "metadata": {"page_label": "411", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "06e6bafabdf9f2aad40aab8f4ecd812acf747f073865ad1fabe2dacaf5c56a80", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "411Deploying the FTGO application with Kubernetes\napiVersion: v1\nkind: Service\nmetadata:\nname: ftgo-consumer-service\nspec:\nports:\n- name: http   \nport: 8080\ntargetPort: 8080\nselector:\napp: ftgo-consumer-service\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\nname: ftgo-consumer-service-v2   \nspec:\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: ftgo-consumer-service   \nversion: v2\nspec:\ncontainers:\n- image: image: ftgo-consumer-service:v2   \n...\nBy now, you may be wondering how to run the Envoy proxy container in the service\u2019s\npod. Fortunately, Istio makes that remarkab ly easy by automating modifying the pod\ndefinition to include the Envoy proxy. There are two ways to do that. The first is to use\nmanual sidecar injection  and run the istioctl kube-inject command:\nistioctl kube-inject -f ftgo-consumer-service/src/deployment/kubernetes/ftgo-\nconsumer-service.yml | kubectl apply -f -\nThis command reads a Kubernetes YAML f ile and outputs the modified configura-\ntion containing the Envoy proxy. The modified configuration is then piped into\nkubectl apply.\n The second way to add the Envoy sidecar to the pod is to use automatic sidecar injec-\ntion. When this feature is enabled, you deploy a service using kubectl apply. Kubernetes\nautomatically invokes Istio to modify the pod definition to include the Envoy proxy.\n If you describe your service\u2019s pod, you\u2019ll see that it consists of more than your ser-\nvice\u2019s container:\n$ kubectl describe po ftgo-consumer-service-7db65b6f97-q9jpr\nName: ftgo-consumer-service-7db65b6f97-q9jpr\nNamespace: default\n...\nListing 12.7 Deploying Consumer Service with Istio\nNamed port\nVersioned \ndeployment\nRecommended \nlabels\nImage \nversion", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1693, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8cd3fb6c-4887-4881-bb6b-3be16cf09008": {"__data__": {"id_": "8cd3fb6c-4887-4881-bb6b-3be16cf09008", "embedding": null, "metadata": {"page_label": "412", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8feca3d4-19e4-4c67-8b51-bd383bf613df", "node_type": "4", "metadata": {"page_label": "412", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "35775a99384519a55a3ebac8bba53cecbd2ae010f3c6ecc8b2499a7dac94c6b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "412 CHAPTER 12 Deploying microservices\nInit Containers:\nistio-init:  \nImage: docker.io/istio/proxy_init:0.8.0\n....\nContainers:\nftgo-consumer-service:  \nImage: msapatterns/ftgo-consumer-service:latest\n...\nistio-proxy:\nImage: docker.io/istio/proxyv2:0.8.0   \n...\nNow that we\u2019ve deployed the service, let\u2019s look at how to define routing rules. \nCREATE ROUTING RULES TO ROUTE TO THE V1 VERSION\nLet\u2019s imagine that you deployed the ftgo-consumer-service-v2 deployment. In the\nabsence of routing rules, Istio load balances requests across all versions of a service. It\nwould, therefore, load balance across versions 1 and 2 of ftgo-consumer-service,\nwhich defeats the purpose of using Istio. In order to safely roll out a new version, you\nmust define a routing rule that routes all traffic to the current v1 version.\nInitializes the pod\nThe service \ncontainer\nThe Envoy \ncontainer\nAPI gateway\npod VirtualService DestinationRule\nConsumer\nService\nv1 pod\nmetadata:\nlabels:\napp: ftgo-consumer-service\nversion: v1\nConsumer\nService\nv2 pod\nRoutes to the v subset1\nRouting rule for the\nConsumer Service\nDe\ufb01nes subsets of\npods of a service\nNo traf\ufb01c routed to v2.\nDe\ufb01nes subsets\nv and v21\nAll traf\ufb01c routed to v1\nmetadata:\nlabels:\napp: ftgo-consumer-service\nversion: v2\nkind: DestinationRule\nmetadata:\nname:ftgo-consumer-service\nspec:\nhost: ftgo-consumer-service\nsubsets:\n-name: v1\nlabels:\nversion: v1\n-name: v2\nlabels:\nversion: v2\nkind: VirtualService\nmetadata:\nname:ftgo-consumer-service\nspec:\nhosts:\n-ftgo-consumer-service\nhttp:\n-route:\n-destination:\nhost: ftgo-consumer-service\nsubset: v1\nweight: 100\nGET/consumers/1\nhost:ftgo-consumer-\nservice\nFigure 12.12 The routing rule for Consumer Service, which routes all traffic to the v1 pods. It consists of a \nVirtualService, which routes its traffic to the v1 subset, and a DestinationRule, which defines the v1 \nsubset as the pods labeled with version: v1. Once you\u2019ve defined this rule, you can safely deploy a new version \nwithout routing any traffic to it initially.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2005, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e35aad0-322d-4de8-921d-a243c777f259": {"__data__": {"id_": "0e35aad0-322d-4de8-921d-a243c777f259", "embedding": null, "metadata": {"page_label": "413", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de5bfe81-fbd3-4a8a-9db8-193075045b53", "node_type": "4", "metadata": {"page_label": "413", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "99c70651a00b0d152090374b9fb61588deb1e003ca12303f3685f77367fbf818", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "413Deploying the FTGO application with Kubernetes\nFigure 12.12 shows the routing rule for Consumer Service that routes all traffic to v1.\nIt consists of two Istio objects: a VirtualService and a DestinationRule.\n A VirtualService defines how to route requests for one or more hostnames. In this\nexample, VirtualService defines the routes for a single hostname: ftgo-consumer-\nservice. Here\u2019s the definition of VirtualService for Consumer Service:\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\nname: ftgo-consumer-service\nspec:\nhosts:\n- ftgo-consumer-service   \nhttp:\n- route:\n- destination:\nhost: ftgo-consumer-service   \nsubset: v1\nIt routes all requests for the v1 subset of the pods of Consumer Service. Later, I show\nmore complex examples that route based on  HTTP requests and load balance across\nmultiple weighted destinations.\n In addition to VirtualService, you must also define a DestinationRule, which\ndefines one or more subsets of pods for a service. A subset of pods is typically a service\nversion. A DestinationRule can also define traffic policies, such as the load-balancing\nalgorithm. Here\u2019s the DestinationRule for Consumer Service:\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\nname: ftgo-consumer-service\nspec:\nhost: ftgo-consumer-service\nsubsets:\n- name: v1   \nlabels:\nversion: v1   \n- name: v2\nlabels:\nversion: v2\nThis DestinationRule defines two subsets of pods: v1 and v2. The v1 subset selects\npods with the label version: v1. The v2 subset selects pods with the label version: v2.\n Once you\u2019ve defined these rules, Istio will only route traffic pods labeled version:\nv1. It\u2019s now safe to deploy v2. \n \n \nApplies to the \nConsumer Service\nRoutes to \nConsumer Service\nThe v1 subset\nThe name of \nthe subset\nThe pod selector \nfor the subset", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1814, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5fedafc-b4a4-40bc-93b3-bd0448bd7c5e": {"__data__": {"id_": "e5fedafc-b4a4-40bc-93b3-bd0448bd7c5e", "embedding": null, "metadata": {"page_label": "414", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "279b815f-e930-4efb-bab5-49ae9ab53a2f", "node_type": "4", "metadata": {"page_label": "414", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ddc7bf8bbd04247395c9c87d5a08ac711d9a7bb86c24abe5630071c0156b4299", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "414 CHAPTER 12 Deploying microservices\nDEPLOYING VERSION 2 OF CONSUMER SERVICE\nHere\u2019s an excerpt of the version 2 Deployment for Consumer Service:\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\nname: ftgo-consumer-service-v2   \nspec:\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: ftgo-consumer-service\nversion: v2   \n...\nThis deployment is called ftgo-consumer-service-v2. It labels its pods with version:\nv2. After creating this deployment, both versions of the ftgo-consumer-service will be\nrunning. But because of the routing rules, Istio won\u2019t route any traffic to v2. You\u2019re\nnow ready to route some test traffic to v2. \nROUTING TEST TRAFFIC TO VERSION 2\nOnce you\u2019ve deployed a new version of a servic e, the next step is to test it. Let\u2019s sup-\npose that requests from test users have a testuser header . We can enhance the ftgo-\nconsumer-service VirtualService to route requests with this header to v2 instances\nby making the following change:\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\nname: ftgo-consumer-service\nspec:\nhosts:\n- ftgo-consumer-service\nhttp:\n- match:\n- headers:\ntestuser:\nregex: \"^.+$\"   \nroute:\n- destination:\nhost: ftgo-consumer-service\nsubset: v2   \n- route:\n- destination:\nhost: ftgo-consumer-service\nsubset: v1   \nIn addition to the original default route, VirtualService has a routing rule that\nroutes requests with the testuser header to the v2 subset. After you\u2019ve updated the\nrules, you can now test Consumer Service. Then, once you feel confident that the v2 is\nworking, you can route some production traffic to it. Let\u2019s look at how to do that. \nVersion 2\nPod is labeled \nwith the version\nMatches a nonblank \ntestuser header\nRoutes test \nusers to v2\nRoutes everyone \nelse to v1", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1748, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a06f941c-dd69-467b-93cd-6f7188f5050b": {"__data__": {"id_": "a06f941c-dd69-467b-93cd-6f7188f5050b", "embedding": null, "metadata": {"page_label": "415", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e05f165-c77a-4e09-9e78-6d05408f6aee", "node_type": "4", "metadata": {"page_label": "415", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "87006b7cc66763287d186f41cf59206dd3504706fec63e94c15ebe9618b6ccb1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "415Deploying services using the Serverless deployment pattern\nROUTING PRODUCTION TRAFFIC TO VERSION 2\nAfter you\u2019ve tested a newly deployed service, the next step is to start routing produc-\ntion traffic to it. A good stra tegy is to initially only ro ute a small amount of traffic.\nHere, for example, is a rule that routes 95% of traffic to v1 and 5% to v2:\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\nname: ftgo-consumer-service\nspec:\nhosts:\n- ftgo-consumer-service\nhttp:\n- route:\n- destination:\nhost: ftgo-consumer-service\nsubset: v1\nweight: 95\n- destination:\nhost: ftgo-consumer-service\nsubset: v2\nweight: 5\nAs you gain confidence that the service ca n handle production traffic, you can incre-\nmentally increase the amount of traffic go ing to the version 2 pods until it reaches\n100%. At that point, Istio isn\u2019t routing any traffic to the v1 pods. You could leave them\nrunning for a little while longer before deleting the version 1 Deployment.\n By letting you easily separate deployment  from release, Istio makes rolling out a\nnew version of a service much more reliable . Yet I\u2019ve barely scratched the surface of\nIstio\u2019s capabilities. As of the time of writin g, the current version of Istio is 0.8. I\u2019m\nexcited to watch it and the other service meshes mature and become a standard part\nof a production environment. \n12.5 Deploying services using the Serverless deployment \npattern\nThe Language-specific packaging (section 12.1 ), Service as a VM (section 12.2), and\nService as a container (section 12.3) pattern s are all quite different, but they share\nsome common characteristics. The first is that with all three patterns you must prepro-\nvision some computing resources\u2014either ph ysical machines, virtual machines, or con-\ntainers. Some deployment platforms implement autoscaling, which dynamically adjusts\nthe number of VMs or containers based on the load. But you\u2019ll always need to pay for\nsome VMs or containers, even if they\u2019re idle.\n Another common characteristic is that you\u2019re responsible for system administra-\ntion. If you\u2019re running any kind of machine, you must patch the operating system. In\nthe case of physical machines, this also includes racking and stacking. You\u2019re also\nresponsible for administering the language runtime. This is an example of what Ama-\nzon called \u201cundifferentiated heavy lifting.\u201d Since the early days of computing, system", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "92d2c188-70ea-4298-b33f-66a6e2c676ee": {"__data__": {"id_": "92d2c188-70ea-4298-b33f-66a6e2c676ee", "embedding": null, "metadata": {"page_label": "416", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "423fb52e-4e40-4a28-8efe-e5c7bf64d8e6", "node_type": "4", "metadata": {"page_label": "416", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5d8eebbb04552349269ebaf0b6a6fba1d95d90d8121d576e0537fe6b077d218a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "416 CHAPTER 12 Deploying microservices\nadministration has been one of those things you need to do. As it turns out, though,\nthere\u2019s a solution: serverless.\n12.5.1 Overview of serverless deployment with AWS Lambda\nAt AWS Re:Invent 2014, Werner Vogels , the CTO of Amazon, introduced AWS\nLambda with the amazing phrase \u201cmagic ha ppens at the intersection of functions,\nevents, and data.\u201d As this phrase suggest s, AWS Lambda was initially for deploying\nevent-driven services. It\u2019s \u201cmagic\u201d because, as you\u2019ll see, AWS Lambda is an example of\nserverless deployment technology.\nAWS Lambda supports Java, NodeJS, C#, GoLang, and Python. A lambda function is a\nstateless service. It typically handles requests by invoking AWS services. For example, a\nlambda function that\u2019s invoked when an image is uploaded to an S3 bucket could\ninsert an item into a DynamoDB IMAGES  table and publish a message to Kinesis to\ntrigger image processing. A lambda function can also invoke third-party web services.\n To deploy a service, you package your application as a ZIP file or JAR file, upload it\nto AWS Lambda, and specify the name of the function to invoke to handle a request\n(also called an event) .  A W S  L a m b d a  a u t o m a t i c a l l y  r u n s  e n o u g h  i n s t a n c e s  o f  y o u r\nmicroservice to handle incoming requests. You\u2019re billed for each request based on the\ntime taken and the memory consumed. Of course, the devil is in the details, and later\nyou\u2019ll see that AWS Lambda has limitations. But the notion that neither you as a devel-\noper nor anyone in your organization need worry about any aspect of servers, virtual\nmachines, or containers is incredibly powerful.\nServerless deployment technologies\nThe main public clouds all provide a serv erless deployment option, although AWS\nLambda is the most advanced. Google Cloud has Google Cloud functions, which as\nof the time writing is in beta (https://cloud.google.com/functions/). Microsoft Azure\nhas Azure functions (https://azure.microsoft.com/en-us/services/functions).\nThere are also open source serverless frameworks, such as Apache Openwhisk\n(https://openwhisk.apache.org) and Fission for Kubernetes (https://fission.io), that\nyou can run on your own infrastructure. But I\u2019m not entirely convinced of their value.\nYou need to manage the infrastructure that  runs the serverless framework\u2014which\ndoesn\u2019t exactly sound like serverless. Moreover, as you\u2019ll see later in this section,\nserverless provides a constrained programming model in exchange for minimal sys-\ntem administration. If you need to manage infrastructure, then you have the con-\nstraints without the benefit.\nPattern: Serverless deployment\nDeploy services using a serverless deployment mechanism provided by a public cloud.\nSee http://microservices.io/patterns/deployment/serverless-deployment.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ec3962b-ed21-4cd4-9c8a-c12c7569c052": {"__data__": {"id_": "8ec3962b-ed21-4cd4-9c8a-c12c7569c052", "embedding": null, "metadata": {"page_label": "417", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5c46abe-9bd6-419e-b4f9-dcc0674382b5", "node_type": "4", "metadata": {"page_label": "417", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "fc143ce473de30ccad80b6b15e3b781c95828d38581931baa7385f07d4c241a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "417Deploying services using the Serverless deployment pattern\n12.5.2 Developing a lambda function\nUnlike when using the other three patterns,  you must use a different programming\nmodel for your lambda functions. A lambda function\u2019s code and the packaging\ndepend on the programming language. A Java lambda function is a class that imple-\nments the generic interface RequestHandler, which is defined by the AWS Lambda\nJava core library and shown in the follow ing listing. This interface takes two type\nparameters: I, which is the input type, and O, which is the output type. The type of I\nand O depend on the specific kind of request that the lambda handles.\npublic interface RequestHandler<I, O> {\npublic O handleRequest(I input, Context context);\n}\nThe RequestHandler interface defines a single handleRequest() method. This method\nhas two parameters, an input object and a context, which provide access to the lambda\nexecution environment, such as the request ID. The handleRequest() method\nreturns an output object. For lambda functi ons that handle HTTP requests that are\nproxied by an AWS API Gateway, I and O are APIGatewayProxyRequestEvent and\nAPIGatewayProxyResponseEvent, respectively. As you\u2019ll soon see, the handler func-\ntions are quite similar to old-style Java EE servlets.\n A Java lambda is packaged as either a ZIP file or a JAR file. A JAR file is an uber JAR\n(or fat JAR) created by, for example, the Maven Shade plugin. A ZIP file has the\nclasses in the root directory and JAR dependencies in the lib directory. Later, I show\nhow a Gradle project can create a ZIP file. Bu t first, let\u2019s look at the different ways of\ninvoking lambda function. \n12.5.3 Invoking lambda functions\nThere are four ways to invoke a lambda function:\n\uf0a1 HTTP requests\n\uf0a1 Events generated by AWS services\n\uf0a1 Scheduled invocations\n\uf0a1 Directly using an API call\nLet\u2019s look at each one.\nHANDLING HTTP REQUESTS\nOne way to invoke a lambda function is to configure an AWS API Gateway to route\nHTTP requests to your lambda. The API gateway exposes your lambda function as\nan HTTPS endpoint. It functions as an HTTP proxy, invokes the lambda function\nwith an HTTP request object, and expects the lambda function to return an HTTP\nresponse object. By using the API gatewa y with AWS Lambda you can, for example,\ndeploy RESTful services as lambda functions. \nListing 12.8 A Java lambda function is a class that implements the RequestHandler \ninterface.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2432, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39f31b6e-f89a-4240-9aff-3efd908c6732": {"__data__": {"id_": "39f31b6e-f89a-4240-9aff-3efd908c6732", "embedding": null, "metadata": {"page_label": "418", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c08a64d3-8d6d-4c7d-9e42-1d1daf47445b", "node_type": "4", "metadata": {"page_label": "418", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b0c21a34c0379e936b09886b3ea5dc6ad795c770e7a848c74cc15d9ecdcb0628", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "418 CHAPTER 12 Deploying microservices\nHANDLING EVENTS GENERATED BY AWS SERVICES\nThe second way to invoke a lambda function is to configure your lambda function to\nh a n d l e  e v e n t s  g e n e r a t e d  b y  a n  A W S  s e r v i c e .  E x a m p l e s  o f  e v e n t s  t h a t  c a n  t r i g g e r  a\nlambda function include the following:\n\uf0a1 An object is created in an S3 bucket.\n\uf0a1 An item is created, updated, or deleted in a DynamoDB table.\n\uf0a1 A message is available to read from a Kinesis stream.\n\uf0a1 An email is received via the Simple email service.\nBecause of this integration with other AWS services, AWS Lambda is useful for a wide\nrange of tasks. \nDEFINING SCHEDULED LAMBDA FUNCTIONS\nAnother way to invoke a lambda function is to use a Linux cron-like schedule. You can\nconfigure your lambda function to be invoked periodically\u2014for example, every minute,\n3 hours, or 7 days. Alternatively, you can use a cron expression to specify when AWS\nshould invoke your lambda. cron expressions give you tremendous flexibility. For exam-\nple, you can configure a lambda to be invoked at 2:15 p.m. Monday through Friday. \nINVOKING A LAMBDA FUNCTION USING A WEB SERVICE REQUEST\nThe fourth way to invoke a lambda function is for your application to invoke it using a\nweb service request. The web service request specifies the name of the lambda function\nand the input event data. Your application can invoke a lambda function synchronously\nor asynchronously. If your application invokes the lambda function synchronously, the\nweb service\u2019s HTTP response contains the response of the lambda function. Other-\nwise, if it invokes the lambda function as ynchronously, the web service response indi-\ncates whether the execution of the lambda was successfully initiated. \n12.5.4 Benefits of using lambda functions\nDeploying services using lambda functions has several benefits:\n\uf0a1 Integrated with many AWS services\u2014It\u2019s remarkably straightforward to write lamb-\ndas that consume events generated by AWS services, such as DynamoDB and\nKinesis, and handle HTTP requests via the AWS API Gateway.\n\uf0a1 Eliminates many system administration tasks\u2014You\u2019re no longer responsible for low-\nlevel system administration. There are no operating systems or runtimes to\npatch. As a result, you can focus on developing your application.\n\uf0a1 Elasticity\u2014AWS Lambda runs as many instances of your application as are needed\nto handle the load. You don\u2019t have the challenge of predicting needed capacity or\nrun the risk of underprovisioning or overprovisioning VMs or containers.\n\uf0a1 Usage-based pricing\u2014Unlike a typical IaaS cloud, which charges by the minute or\nhour for a VM or container even when it\u2019s idle, AWS Lambda only charges you\nfor the resources that are consumed while processing each request.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b0ccf0c7-22dc-4249-826d-5934bf291d2b": {"__data__": {"id_": "b0ccf0c7-22dc-4249-826d-5934bf291d2b", "embedding": null, "metadata": {"page_label": "419", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4af92f21-f822-4d76-8848-b8dd03b30fcf", "node_type": "4", "metadata": {"page_label": "419", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "666f8ed69fe5758be1700a593bffb52024d1671d73a7ff86956982e43b93bba9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "419Deploying a RESTful service using AWS Lambda and AWS Gateway\n12.5.5 Drawbacks of using lambda functions\nAs you can see, AWS Lambda is an extremely convenient way to deploy services, but\nthere are some significant drawbacks and limitations:\n\uf0a1 Long-tail latency \u2014Because AWS Lambda dynamically runs your code, some\nrequests have high latency because of th e time it takes for AWS to provision an\ninstance of your application and for the application to start. This is particularly\nchallenging when running Java-based services because they typically take at least\nseveral seconds to start. For instance, the example lambda function described in\nthe next section takes a while to star t up. Consequently, AWS Lambda may not\nbe suited for latency-sensitive services.\n\uf0a1 Limited event/request-based programming model\u2014AWS Lambda isn\u2019t intended to be\nused to deploy long-running services, such as a service that consumes messages\nfrom a third-party message broker.\nBecause of these drawbacks and limitation s, AWS Lambda isn\u2019t a good fit for all\nservices. But when choosing a deployment  pattern, I recommend first evaluating\nwhether serverless deployment supports your service\u2019s requirements before consid-\nering alternatives. \n12.6 Deploying a RESTful service using AWS Lambda \nand AWS Gateway\nLet\u2019s take a look at how to deploy Restaurant Service using AWS Lambda. It\u2019s a ser-\nvice that has a REST API for creating and managing restaurants. It doesn\u2019t have long-\nlived connections to Apache Kafka, for example, so it\u2019s a good fit for AWS lambda. Fig-\nure 12.13 shows the deployment architecture for this service. The service consists of\nseveral lambda functions, one for each  REST endpoint. An AWS API Gateway is\nresponsible for routing HTTP requests to the lambda functions.\n Each lambda function has a request handler class. The ftgo-create-restaurant\nlambda function invokes the CreateRestaurantRequestHandler class, and the ftgo-\nfind-restaurant lambda function invokes FindRestaurantRequestHandler. Because\nthese request handler classes implement clos ely related aspects of the same service,\nthey\u2019re packaged together in the same ZIP file, restaurant-service-aws-lambda\n.zip. Let\u2019s look at the design of the service, including those handler classes.\n12.6.1 The design of the AWS Lambda version of Restaurant Service\nThe architecture of the service, shown in figu re 12.14, is quite similar to that of a tra-\nditional service. The main difference is that Spring MVC controllers have been\nreplaced by AWS Lambda request handler cl asses. The rest of the business logic is\nunchanged.\n The service consists of a presentation tier consisting of the request handlers, which\nare invoked by AWS Lambda to handle the HTTP requests, and a traditional business", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2752, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a8f9569-8637-4234-8e27-56f6bd115c5a": {"__data__": {"id_": "7a8f9569-8637-4234-8e27-56f6bd115c5a", "embedding": null, "metadata": {"page_label": "420", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82f248e7-b722-466c-9c09-ddd6a3d21d67", "node_type": "4", "metadata": {"page_label": "420", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "60cb80313bd14661b07fb95f75d5d76058350f63e0dce48c40ff39868fd2a653", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "420 CHAPTER 12 Deploying microservices\nAPI gateway\nAWS Lambda\nfunctions\nftgo-create-restaurant ftgo-\ufb01nd-restaurant\nftgo-restaurant-service-aws-lambda.zip\nftgo-...\nPOST/restaurant GET/restaurant/\n{restaurantId}\n\u00abclass\u00bb\nCreate\nRestaurant\nRequest\nHandler\n\u00abclass\u00bb\nFindRestaurant\nRequest\nHandler\n\u00abclass\u00bb\n...\nRequest\nHandler\nFigure 12.13 Deploying Restaurant Service as AWS Lambda functions. The \nAWS API Gateway routes HTTP requests to the AWS Lambda functions, which are \nimplemented by request handler classes defined by Restaurant Service.\nCreate\nRestaurant\nRequest\nHandler\nPresentation layer\nPOST/restaurant GET/restaurant/{restaurantId}\nBusiness and\ndata access layer\nFind\nRestaurant\nRequest\nHandler\nRestaurantService\nRestaurantRepository Restaurant\n...\nRequest\nHandler\nFigure 12.14 The design of the AWS Lambda-based Restaurant Service. The \npresentation layer consists of request handler classes, which implement the lambda \nfunctions. They invoke the business tier, which is written in a traditional style \nconsisting of a service class, an entity, and a repository.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1069, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dcd75c83-b587-4861-b509-03283beb6dad": {"__data__": {"id_": "dcd75c83-b587-4861-b509-03283beb6dad", "embedding": null, "metadata": {"page_label": "421", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "266f6b83-88a5-4c53-a687-36afe3c3ac4c", "node_type": "4", "metadata": {"page_label": "421", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9e61f645b7f38fd9b919f3b925ea918c5ef2ad869cabb3dface8837e5f20552b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "421Deploying a RESTful service using AWS Lambda and AWS Gateway\ntier. The business tier consists of RestaurantService, the Restaurant JPA entity, and\nRestaurantRepository, which encapsulates the database.\n Let\u2019s take a look at the FindRestaurantRequestHandler class.\nTHE FINDRESTAURANTREQUESTHANDLER CLASS\nThe FindRestaurantRequestHandler class implements the GET /restaurant/\n{restaurantId} endpoint. This class along with the other request handler classes are\nthe leaves of the class hierarchy shown in figure 12.15. The root of the hierarchy is\nRequestHandler, which is part of the AWS SDK. It s abstract subclasses handle errors\nand inject dependencies.\nThe AbstractHttpHandler class is the abstract base class for HTTP request handlers.\nIt catches unhandled exceptions thrown during request handling and returns a 500 -\ninternal server error response. The AbstractAutowiringHttpRequestHandler class\nimplements dependency injection for requ est handlers. I\u2019ll describe these abstract\nsuperclasses shortly, but first let\u2019s look at the code for FindRestaurantRequestHandler.\n Listing 12.9 shows the code for the FindRestaurantRequestHandler class. The\nFindRestaurantRequestHandler class has a handleHttpRequest() method, which\ntakes an APIGatewayProxyRequestEvent representing an HTTP request as a parame-\nter. It invokes RestaurantService to find the restaurant and returns an APIGateway-\nProxyResponseEvent describing the HTTP response.\nRequest\nHandler\nAbstract\nHttpHandler\nAbstract\nAutowiring\nHttpRequest\nHandler\nCreate\nRestaurant\nRequest\nHandler\nFind\nRestaurant\nRequest\nHandler\n...\nRequest\nHandlerFigure 12.15 The design of the request handler \nclasses. The abstract superclasses implement \ndependency injection and error handling.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c3a64159-a8ee-49f7-a881-0c7f9f38b419": {"__data__": {"id_": "c3a64159-a8ee-49f7-a881-0c7f9f38b419", "embedding": null, "metadata": {"page_label": "422", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "47cf6c27-a891-48da-a2ea-78716870c1c9", "node_type": "4", "metadata": {"page_label": "422", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "6f96afa3885f819d3f754f97d4033e3984cd5a5f0fd8e6311b34b48a19da4e76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "422 CHAPTER 12 Deploying microservices\npublic class FindRestaurantRequestHandler \nextends AbstractAutowiringHttpRequestHandler {\n@Autowired\nprivate RestaurantService restaurantService;\n@Override\nprotected Class<?> getApplicationContextClass() {\nreturn CreateRestaurantRequestHandler.class;   \n}\n@Override\nprotected APIGatewayProxyResponseEvent\nhandleHttpRequest(APIGatewayProxyRequestEvent request,Context context) {\nlong restaurantId;\ntry {\nrestaurantId = Long.parseLong(request.getPathParameters()\n          .get(\"restaurantId\"));\n} catch (NumberFormatException e) {\nreturn makeBadRequestResponse(context);   \n}\nOptional<Restaurant> possibleRestaurant = restaurantService.findById(restaur\nantId);\nreturn possibleRestaurant   \n.map(this::makeGetRestaurantResponse)\n.orElseGet(() -> makeRestaurantNotFoundResponse(context,\nrestaurantId));\n}\nprivate APIGatewayProxyResponseEvent makeBadRequestResponse(Context context) {\n...\n}\nprivate APIGatewayProxyResponseEvent\nmakeRestaurantNotFoundResponse(Contextcontext, long restaurantId) { ... }\nprivate APIGatewayProxyResponseEvent\nmakeGetRestaurantResponse(Restaurant restaurant) { ... }\n}\nAs you can see, it\u2019s quite similar to a servlet, except that instead of a service()\nmethod, which takes an HttpServletRequest and returns HttpServletResponse, it\nhas a handleHttpRequest(), which takes an APIGatewayProxyRequestEvent and returns\nAPIGatewayProxyResponseEvent.\n Let\u2019s now take a look at its superclass, which implements dependency injection. \nListing 12.9 The handler class for GET /restaurant/{restaurantId}\nThe Spring Java \nconfiguration class to use \nfor the application context\nReturns a 400 - bad request \nresponse if the restaurantId \nis missing or invalid\nReturns either the \nrestaurant or a 404 - \nnot found response", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1770, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f86d5ebe-10e1-4d8a-848a-5e552e0db52b": {"__data__": {"id_": "f86d5ebe-10e1-4d8a-848a-5e552e0db52b", "embedding": null, "metadata": {"page_label": "423", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9940cffb-6fe0-4699-8443-a700f5fcf292", "node_type": "4", "metadata": {"page_label": "423", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2d18ecc7387f6238757c403312e63a124f01149c307b3212df0b59304dcbff87", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "423Deploying a RESTful service using AWS Lambda and AWS Gateway\nDEPENDENCY INJECTION USING THE ABSTRACTAUTOWIRINGHTTPREQUESTHANDLER CLASS\nAn AWS Lambda function is neither a we b application nor an application with a\nmain() method. But it would be a shame to not be able to use the features of Spring\nBoot that we\u2019ve been accustomed to. The AbstractAutowiringHttpRequestHandler\nclass, shown in the following listing, implements dependency injection for request han-\ndlers. It creates an ApplicationContext using SpringApplication.run() and autowires\ndependencies prior to handling the first request. Subclasses such as FindRestaurant-\nRequestHandler must implement the getApplicationContextClass() method.\npublic abstract class AbstractAutowiringHttpRequestHandler \nextends AbstractHttpHandler {\nprivate static ConfigurableApplicationContext ctx;\nprivate ReentrantReadWriteLock ctxLock = new ReentrantReadWriteLock();\nprivate boolean autowired = false;\nprotected synchronized ApplicationContext getAppCtx() {   \nctxLock.writeLock().lock();\ntry {\nif (ctx == null) {\nctx = SpringApplication.run(getApplicationContextClass());\n}\nreturn ctx;\n} finally {\nctxLock.writeLock().unlock();\n}\n}\n@Override\nprotected void\nbeforeHandling(APIGatewayProxyRequestEvent request, Context context) {\nsuper.beforeHandling(request, context);\nif (!autowired) {\ngetAppCtx().getAutowireCapableBeanFactory().autowireBean(this);  \nautowired = true;\n}\n}\nprotected abstract Class<?> getApplicationContextClass();   \n}\nThis class overrides the beforeHandling() method defined by AbstractHttpHandler.\nIts beforeHandling() method injects dependencies using autowiring before handling\nthe first request. \nTHE ABSTRACTHTTPHANDLER CLASS\nThe request handlers for Restaurant Service ultimately extend AbstractHttpHandler,\nshown in listing 12.11. This class implements RequestHandler<APIGatewayProxy-\nRequestEvent and APIGatewayProxyResponseEvent>. Its key responsibility is to catch\nexceptions thrown when handling a request and throw a 500 error code. \nListing 12.10 An abstract RequestHandler that implements dependency injection\nCreates the Spring \nBoot application \ncontext just once\nInjects dependencies into\nthe request handler using\nautowiring before handling\nthe first request\nReturns the @Configuration\nclass used to create\nApplicationContext", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2314, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "507fcc48-9c34-4972-a563-1ce93d98bf18": {"__data__": {"id_": "507fcc48-9c34-4972-a563-1ce93d98bf18", "embedding": null, "metadata": {"page_label": "424", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcf7ee72-120a-443d-9086-cf8f0d0b0bb5", "node_type": "4", "metadata": {"page_label": "424", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "1fc4e4ad23b7ecb4767d125dfaf3e5bd83e0d287d97970fd3648f3f4f9362f00", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "424 CHAPTER 12 Deploying microservices\npublic abstract class AbstractHttpHandler implements\nRequestHandler<APIGatewayProxyRequestEvent,APIGatewayProxyResponseEvent> {\nprivate Logger log = LoggerFactory.getLogger(this.getClass());\n@Override\npublic APIGatewayProxyResponseEvent handleRequest(\nAPIGatewayProxyRequestEvent input, Context context) {\nlog.debug(\"Got request: {}\", input);\ntry {\nbeforeHandling(input, context);\nreturn handleHttpRequest(input, context);\n} catch (Exception e) {\nlog.error(\"Error handling request id: {}\", context.getAwsRequestId(), e);\nreturn buildErrorResponse(new AwsLambdaError(\n\"Internal Server Error\",\n\"500\",\ncontext.getAwsRequestId(),\n\"Error handling request: \" + context.getAwsRequestId()+\"\"  \n+ input.toString()));\n}\n}\nprotected void beforeHandling(APIGatewayProxyRequestEvent request, \nContext context) {\n// do nothing\n}\nprotected abstract APIGatewayProxyResponseEvent handleHttpRequest(\nAPIGatewayProxyRequestEvent request, Context context);\n}\n12.6.2 Packaging the service as ZIP file\nBefore the service can be deployed, we must  package it as a ZIP file. We can easily\nbuild the ZIP file using the following Gradle task:\ntask buildZip(type: Zip) {\nfrom compileJava\nfrom processResources\ninto('lib') {\nfrom configurations.runtime\n}\n}\nThis task builds a ZIP with the classes and resources at the top level and the JAR\ndependencies in the lib directory.\n Now that we\u2019ve built the ZIP file, let\u2019s look at how to deploy the lambda function. \nListing 12.11 An abstract RequestHandler that catches exceptions and returns \na 500 HTTP response", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1569, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8167c69-8761-432a-9793-ebfb61919a14": {"__data__": {"id_": "d8167c69-8761-432a-9793-ebfb61919a14", "embedding": null, "metadata": {"page_label": "425", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b1085fc-0265-4471-acfd-5b41c7c32d0e", "node_type": "4", "metadata": {"page_label": "425", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d4fa30c5724fb21f14b600cf6d06be9dd538a888dd68709ee55fb4f257e9016b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "425Deploying a RESTful service using AWS Lambda and AWS Gateway\n12.6.3 Deploying lambda functions using the Serverless framework\nUsing the tools provided by AWS to deploy  lambda functions and configure the API\ngateway is quite tedious. Fortunately, the Serverless open source project makes using\nlambda functions a lot easier. When using Serverless, you write a simple server-\nless.yml file that defines your lambda functions and their RESTful endpoints.\nServerless then deploys the lambda functions and creates and configures an API gate-\nway that routes requests to them.\n The following listing is an excerpt of the serverless.yml that deploys Restaurant\nService as a lambda.\nservice: ftgo-application-lambda\nprovider:\nname: aws   \nruntime: java8\ntimeout: 35\nregion: ${env:AWS_REGION}\nstage: dev\nenvironment:   \nSPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\nSPRING_DATASOURCE_URL: ...\nSPRING_DATASOURCE_USERNAME: ...\nSPRING_DATASOURCE_PASSWORD: ...\npackage:   \nartifact: ftgo-restaurant-service-aws-lambda/build/distributions/\nftgo-restaurant-service-aws-lambda.zip\nfunctions:   \ncreate-restaurant:\nhandler: net.chrisrichardson.ftgo.restaurantservice.lambda\n.CreateRestaurantRequestHandler\nevents:\n- http:\npath: restaurants\nmethod: post\nfind-restaurant:\nhandler: net.chrisrichardson.ftgo.restaurantservice.lambda\n.FindRestaurantRequestHandler\nevents:\n- http:\npath: restaurants/{restaurantId}\nmethod: get\nYou can then use the serverless deploy command, which reads the serverless.yml\nfile, deploys the lambda functions, and configures the AWS API Gateway. After a short\nListing 12.12 The serverless.yml deploys Restaurant Service.\nTells serverless to \ndeploy on AWS\nSupplies the service\u2019s \nexternalized configuration \nvia environment variables\nThe ZIP file \ncontaining the \nlambda functions\nLambda function definitions \nconsisting of the handler \nfunction and HTTP endpoint", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1888, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "937a3642-9ba8-402e-90c9-4727e55cab05": {"__data__": {"id_": "937a3642-9ba8-402e-90c9-4727e55cab05", "embedding": null, "metadata": {"page_label": "426", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1b148a6-8f9f-4cd6-a110-cc95630f97e0", "node_type": "4", "metadata": {"page_label": "426", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "161904e30862c9c04c968b4d4cd859d56d8950760d08cfc7eed0d875f630c559", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "426 CHAPTER 12 Deploying microservices\nwait, your service will be accessible via the API gateway\u2019s endpoint URL. AWS Lambda\nwill provision as many instances of each Restaurant Service lambda function that are\nneeded to support the load. If you change the code, you can easily update the lambda\nby rebuilding the ZIP file and rerunning serverless deploy. No servers involved!\n The evolution of infrastructure is rema rkable. Not that long ago, we manually\ndeployed applications on physical machin es. Today, highly automated public clouds\nprovide a range of virtual deployment options. One option is to deploy services as vir-\ntual machines. Or better yet, we can pack age services as containers and deploy them\nusing sophisticated Docker orchestration frameworks such as Kubernetes. Sometimes\nwe even avoid thinking about infrastructure entirely and deploy services as light-\nweight, ephemeral lambda functions. \nSummary\n\uf0a1 You should choose the most lightweight deployment pattern that supports your\nservice\u2019s requirements. Evaluate the options in the following order: serverless,\ncontainers, virtual machines, and language-specific packages.\n\uf0a1 A serverless deployment isn\u2019t a good fit for every service, because of long-tail\nlatencies and the requirement to use an event/request-based programming\nmodel. When it is a good fit, though , serverless deployment is an extremely\ncompelling option because it eliminates  the need to administer operating sys-\ntems and runtimes and provides automated elastic provisioning and request-\nbased pricing.\n\uf0a1 Docker containers, which are a lightwei ght, OS-level virtualization technol-\nogy, are more flexible than serverless  deployment and have more predictable\nlatency. It\u2019s best to use a Docker or chestration framework such as Kuberne-\ntes, which manages containers on a cluster of machines. The drawback of\nusing containers is that you must ad minister the operating systems and run-\ntimes and most likely the Docker orchestration framework and the VMs that\nit runs on.\n\uf0a1 The third deployment option is to deploy your service as a virtual machine. On\none hand, virtual machines are a heavyweight deployment option, so deploy-\nment is slower and it will most likel y use more resources than the second\noption. On the other hand, modern cl ouds such as Amazon EC2 are highly\nautomated and provide a rich set of fe atures. Consequently, it may sometimes\nbe easier to deploy a small, simple a pplication using virtual machines than to\nset up a Docker orchestration framework.\n\uf0a1 Deploying your services as language-speci fic packages is generally best avoided\nunless you only have a small number of services. For example, as described in\nc h a p t e r  1 3 ,  w h e n  s t a r t i n g  o n  y o u r  j ourney to microservices you\u2019ll probably\ndeploy the services using the same mechanism you use for your monolithic\napplication, which is most likely this option. You should only consider setting", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "882c7106-8165-403a-aeaf-3dc1a55f096a": {"__data__": {"id_": "882c7106-8165-403a-aeaf-3dc1a55f096a", "embedding": null, "metadata": {"page_label": "427", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4931e09a-5305-4eee-832e-4117067424be", "node_type": "4", "metadata": {"page_label": "427", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7fbf5576f67de18e5ae8d1ca0eea753002c8a58f5ca9f24b795c81a9c8c9269a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "427Summary\nup a sophisticated deployment infrastruc ture such as Kubernetes once you\u2019ve\ndeveloped some services.\n\uf0a1 One of the many benefits of using a service mesh\u2014a networking layer that\nmediates all network traffic in and out of services\u2014is that it enables you to\ndeploy a service in production, test it, and only then route production traffic to\nit. Separating deployment from release improves the reliability of rolling out\nnew versions of services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 453, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55a03b56-1463-4c3e-8a54-c5be4fc8ad47": {"__data__": {"id_": "55a03b56-1463-4c3e-8a54-c5be4fc8ad47", "embedding": null, "metadata": {"page_label": "428", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c27e9b5-8f38-4817-a5e9-6d3e23dcafe9", "node_type": "4", "metadata": {"page_label": "428", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "25d92300f2558f0b54c9b081deae6fe6b646db41aad64a606c2125d7bd204c72", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "428\nRefactoring to\nmicroservices\nI hope that this book has given you a good understanding of the microservice\narchitecture, its benefits and drawbacks, and when to use it. There is, however, a\nf a i r l y  g o o d  c h a n c e  y o u \u2019 r e  w o r k i n g  o n  a large, complex monolithic application.\nYour daily experience of developing and deploying your application is slow and\npainful. Microservices, which appear like a good fit for your application, seem like\ndistant nirvana. Like Mary and the rest of the FTGO development team, you\u2019re\nwondering how on earth you can adopt the microservice architecture?\n Fortunately, there are strategies you can use to escape from monolithic hell\nwithout having to rewrite your application from scratch. You incrementally convert\nThis chapter covers\n\uf0a1 When to migrate a monolithic application to a \nmicroservice architecture\n\uf0a1 Why using an incremental approach is essential \nwhen refactoring a monolithic application to \nmicroservices\n\uf0a1 Implementing new features as services\n\uf0a1 Extracting services from the monolith\n\uf0a1 Integrating a service and the monolith", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1097, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "add39b60-34eb-42bb-aac7-2c47e159c0ee": {"__data__": {"id_": "add39b60-34eb-42bb-aac7-2c47e159c0ee", "embedding": null, "metadata": {"page_label": "429", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c47c9d3-06aa-465a-8947-ff17015ead6e", "node_type": "4", "metadata": {"page_label": "429", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "bb8ce6127275622639071c7fb2c4951a0d622ef45fd10f8116e1744f5cf0d1d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "429Overview of refactoring to microservices\nyour monolith into microservices by develo ping what\u2019s known as a strangler applica-\ntion. The idea of a strangler application comes from strangler vines, which grow in\nrain forests by enveloping and sometimes killing trees. A strangler application is a new\napplication consisting of microservices th at you develop by implementing new func-\ntionality as services and extracting services from the monolith. Over time, as the stran-\ngler application implements more and more  functionality, it shrinks and ultimately\nkills the monolith. An important benefit of developing a strangler application is that,\nunlike a big bang rewrite, it delivers value to the business early and often.\n I begin this chapter by describing the motivations for refactoring a monolith to a\nmicroservice architecture. I then describe how to develop the strangler application\nby implementing new functionality as services and extracting services from the\nmonolith. Next, I cover various design topi cs, including how to integrate the mono-\nlith and services, how to maintain data base consistency across the monolith and\nservices, and how to handle security. I en d the chapter by describing a couple of\nexample services. One service is Delayed Order Service, which implements brand\nnew functionality. The other service is Delivery Service, which is extracted from\nthe monolith. Let\u2019s start by taking a look at the concept of refactoring to a micro-\nservice architecture.\n13.1 Overview of refactoring to microservices\nPut yourself in Mary\u2019s shoes. You\u2019re responsible for the FTGO application, a large and\nold monolithic application. The business is  extremely frustrated with engineering\u2019s\ninability to deliver features rapidly and reliably. FTGO appears to be suffering from a\nclassic case of monolithic hell. Microservice s seem, at least on the surface, to be the\nanswer. Should you propose diverting development resources away from feature devel-\nopment to migrating to a microservice architecture?\n I start this section by discussing why yo u should consider refactoring to microser-\nvices. I also discuss why it\u2019s important to be sure that your software development prob-\nlems are because you\u2019re in monolithic he ll rather than in, for example, a poor\nsoftware development process. I then describe strategies for incrementally refactoring\nyour monolith to a microservice architecture. Next, I discuss the importance of deliv-\nering improvements earlier and often in or der to maintain the support of the busi-\nness. I then describe why you should avoi d investing in a sophisticated deployment\ninfrastructure until you\u2019ve developed a fe w services. Finally, I describe the various\nstrategies you can use to introduce services into your architecture, including imple-\nmenting new features as services and extracting services from the monolith.\n13.1.1 Why refactor a monolith?\nThe microservice architecture has, as described in chapter 1, numerous benefits. It\nhas much better maintainability, testability, and deployability, so it accelerates devel-\nopment. The microservice architecture is mo re scalable and improves fault isolation.\nIt\u2019s also much easier to evolve your technology stack. But refactoring a monolith to", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "424d23ea-90f2-4801-b13a-8a884a3a0f69": {"__data__": {"id_": "424d23ea-90f2-4801-b13a-8a884a3a0f69", "embedding": null, "metadata": {"page_label": "430", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62ae3be8-a3ae-4572-8e9e-f598308437e9", "node_type": "4", "metadata": {"page_label": "430", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c43fe034d5d919d51e81ab552592c29036773f1e1c9ca75e1607bb5231243066", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "430 CHAPTER 13 Refactoring to microservices\nmicroservices is a significant undertaking. It will divert resources away from new fea-\nture development. As a result, it\u2019s likely that the business will only support the adop-\ntion of microservices if it solves a significant business problem.\n If you\u2019re in monolithic hell, it\u2019s likely that you already have at least one business\nproblem. Here are some examples of business problems caused by monolithic hell:\n\uf0a1 Slow delivery \u2014The application is difficult to understand, maintain, and test, so\ndeveloper productivity is low. As a result, the organization is unable to compete\neffectively and risks being overtaken by competitors.\n\uf0a1 Buggy software releases \u2014The lack of testability means that software releases are\noften buggy. This makes customers unhappy, which results in losing customers\nand reduced revenue.\n\uf0a1 Poor scalability\u2014Scaling a monolithic application is difficult because it combines\nmodules with very different resource requirements into one executable compo-\nnent. The lack of scalability means that it\u2019s either impossible or prohibitively\nexpensive to scale the application beyond a certain point. As a result, the appli-\ncation can\u2019t support the current or predicted needs of the business.\nIt\u2019s important to be sure that these problems are there because you\u2019ve outgrown your\narchitecture. A common reason for slow delivery and buggy releases is a poor software\ndevelopment process. For example, if you\u2019 re still relying on manual testing, then\nadopting automated testing alone can sign ificantly increase development velocity.\nSimilarly, you can sometimes solve scalabil ity problems without changing your archi-\ntecture. You should first try simpler solutions. If, and only if, you still have software\ndelivery problems should you then migrate to the microservice architecture. Let\u2019s\nlook at how to do that. \n13.1.2 Strangling the monolith\nThe process of transforming a monolithic application into microservices is a form of\napplication modernization ( https://en.wikipedia.org/wiki/Software_modernization).\nApplication modernization is the process of converting a legacy application to one having\na modern architecture and technology stack. Developers have been modernizing appli-\ncations for decades. As a result, there is  wisdom accumulated through experience we\ncan use when refactoring an application into a microservice architecture. The most\nimportant lesson learned over the years is to not do a big bang rewrite.\n A big bang rewrite is when you develop a new application\u2014in this case, a microservices-\nbased application\u2014from scratch. Although starting from scratch and leaving the legacy\ncode base behind sounds appealing, it\u2019s extremely risky and will likely end in failure.\nYou will spend months, possibly years, duplicating the existing functionality, and only\nthen can you implement the features that  the business needs today! Also, you\u2019ll\nneed to develop the legacy application an yway, which diverts effort away from the\nrewrite and means that you have a constantly moving target. What\u2019s more, it\u2019s possible", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3087, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "292a7e2e-27e4-49d5-8237-f6631e996c0b": {"__data__": {"id_": "292a7e2e-27e4-49d5-8237-f6631e996c0b", "embedding": null, "metadata": {"page_label": "431", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cafadfdd-48ea-4d54-932b-c73a60bafa80", "node_type": "4", "metadata": {"page_label": "431", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "90c83013b804ab389f14f667950019ba58f29e40acf7374ae8cc70fc5eff2b3b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "431Overview of refactoring to microservices\nthat you\u2019ll waste time reimplementing features that are no long er needed. As Martin\nFowler reportedly said, \u201cthe only thing a Big Bang rewrite guarantees is a Big Bang!\u201d\n(www.randyshoup.com/evolutionary-architecture).\n Instead of doing a big bang rewrite, you should, as figure 13.1 shows, incrementally\nrefactor your monolithic application. You gradually build a new application, which is\ncalled a strangler application. It consists of microservices that runs in conjunction\nwith your monolithic application. Over time, the amount of functionality imple-\nmented by the monolithic application shrinks until either it disappears entirely or it\nbecomes just another microservice. This stra tegy is akin to servicing your car while\ndriving down the highway at 70 mph. It\u2019s challenging, but is far less risky that attempt-\ning a big bang rewrite.\nMartin Fowler refers to this application modernization strategy as the Strangler appli-\ncation pattern ( www.martinfowler.com/bliki/StranglerApplication.html). The name\ncomes from the strangler vi ne (or strangler fig\u2014see https://en.wikipedia.org/wiki/\nStrangler_fig) that is found in rain forests. A strangler vine grows around a tree in\nThe monolith shrinks over time.\nThe strangler application\ngrows larger over time.\nMonolith Monolith\nService\nStrangler application\nMonolith\nService\nMonolith\nService ...\n... Monolith\nService Service\nService Service Service Service\nService Service Service\nService Service Service\nService Service\nService Service\nService Service\nService\nTime\nFigure 13.1 The monolith is incrementally replaced by  a strangler application comprised of services. \nEventually, the monolith is replaced entirely by the strangler application or becomes another \nmicroservice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1776, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2104435-c993-45be-badf-5d5a06a640db": {"__data__": {"id_": "c2104435-c993-45be-badf-5d5a06a640db", "embedding": null, "metadata": {"page_label": "432", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7336271-cf7f-4195-b460-a26d78b78675", "node_type": "4", "metadata": {"page_label": "432", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "63ae8b1f228f172b26d736713e77aacb681e6a51dff822b19969e6c7869b5b44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "432 CHAPTER 13 Refactoring to microservices\norder to reach the sunlight above the forest canopy. Often the tree dies, because\neither it\u2019s killed by the vine or it dies of old age, leaving a tree-shaped vine.\nThe refactoring process typically takes months, or years. For example, according to\nSteve Yegge (https://plus.google.com/+RipRowan/posts/eVeouesvaVX) it took Ama-\nzon.com a couple of years to refactor its mo nolith. In the case of a very large system,\nyou may never complete the process. You could, for example, get to a point where you\nhave tasks that are more important than breaking up the monolith, such as imple-\nmenting revenue-generating features. If the monolith isn\u2019t an obstacle to ongoing\ndevelopment, you may as well leave it alone. \nDEMONSTRATE VALUE EARLY AND OFTEN\nAn important benefit of incrementally refa ctoring to a microservice architecture is\nthat you get an immediate return on your investment. That\u2019s very different than a big\nbang rewrite, which doesn\u2019t deliver any be nefit until it\u2019s complete. When incremen-\ntally refactoring the monolith, you can develop each new service using a new technology\nstack and a modern, high-velocity, DevOps-style development and delivery process. As a\nresult, your team\u2019s delivery velocity steadily increases over time.\n What\u2019s more, you can migrate the high-value areas of your application to microser-\nvices first. For instance, imagine you\u2019re working on the FTGO application. The business\nmight, for example, decide that the delivery scheduling algorithm is a key competitive\nadvantage. It\u2019s likely that delivery management will be an area of constant, ongoing\ndevelopment. By extracting delivery management into a standalone service, the delivery\nmanagement team will be able to work independently of the rest of the FTGO develop-\ners and significantly increase their development velocity. They\u2019ll be able to frequently\ndeploy new versions of the algorithm and evaluate their effectiveness.\n Another benefit of being able to deliver va lue earlier is that it helps maintain the\nbusiness\u2019s support for the migration effort. Their ongoing support is essential, because\nthe refactoring effort will mean that less ti me is spent on developing features. Some\norganizations have difficulty eliminating technical debt because past attempts were\ntoo ambitious and didn\u2019t provide much be nefit. As a result, the business becomes\nreluctant to invest in further cleanup efforts. The incremental nature of refactoring to\nmicroservices means that the development te am is able to demonstrate value early\nand often. \nMINIMIZE CHANGES TO THE MONOLITH\nA recurring theme in this chapter is th at you should avoid making widespread\nchanges to the monolith when migrating to a microservice architecture. It\u2019s inevitable\nPattern: Strangler application\nModernize an application by incrementally developing a new (strangler) application\naround the legacy application. See http://microservices.io/patterns/refactoring/\nstrangler-application.html.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2994, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c008fbbb-13d9-4768-a33b-5505393cefd2": {"__data__": {"id_": "c008fbbb-13d9-4768-a33b-5505393cefd2", "embedding": null, "metadata": {"page_label": "433", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ca65241-1025-43a0-9494-4c65be65af9b", "node_type": "4", "metadata": {"page_label": "433", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "af803412d5da612ad4936017838ca338d24cfb0921513acf7fce6bc768843656", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "433Strategies for refactoring a monolith to microservices\nthat you\u2019ll need to make some changes in order to support migration to services. Sec-\ntion 13.3.2 talks about how the monolith often needs to be modified so that it can par-\nticipate in sagas that maintain data consis tency across the monolith and services. The\nproblem with making widespread changes to the monolith is that it\u2019s time consuming,\ncostly, and risky. After all, that\u2019s probably why you want to migrate to microservices in\nthe first place.\n Fortunately, there are strategies you can use for reducing the scope of the changes\nyou need to make. For example, in section 13.2.3, I describe the strategy of replicating\ndata from an extracted service back to the monolith\u2019s database. And in section 13.3.2,\nI show how you can carefully sequence the extraction of services to reduce the impact\non the monolith. By applying these strate gies, you can reduce the amount of work\nrequired to refactor the monolith. \nTECHNICAL DEPLOYMENT INFRASTRUCTURE: YOU DON\u2019T NEED ALL OF IT YET\nThroughout this book I\u2019ve discussed a lot of shiny new technology, including deploy-\nment platforms such as Kubernetes and AWS Lambda and service discovery mecha-\nnisms. You might be tempted to begin your  migrating to microservices by selecting\ntechnologies and building out that infrastructure. You might even feel pressure from\nthe business people and from your friendly  PaaS vendor to start spending money on\nthis kind of infrastructure.\n As tempting as it seems to build out this infrastructure up front, I recommend only\nmaking a minimal up-front investment in developing it. The only thing you can\u2019t live\nwithout is a deployment pipeline that performs automating testing. For example, if\nyou only have a handful of services, you don\u2019t need a sophisticated deployment and\nobservability infrastructure. Initially, you can even get away with just using a hard-\ncoded configuration file for service discovery. I suggest deferring any decisions about\ntechnical infrastructure that involve signif icant investment until you\u2019ve gained real\nexperience with the microservice architectu re. It\u2019s only once you have a few services\nrunning that you\u2019ll have the experience to pick technologies.\n Let\u2019s now look at the strategies you can use for migrating to a microservice\narchitecture. \n13.2 Strategies for refactoring a monolith to microservices\nThere are three main strategies for strangling the monolith and incrementally replac-\ning it with microservices:\n1 Implement new features as services.\n2 Separate the presentation tier and backend.\n3 Break up the monolith by extracting functionality into services.\nThe first strategy stops the monolith from  growing. It\u2019s typically a quick way to\ndemonstrate the value of microservices, helping build support for the migration\neffort. The other two strategies break apart the monolith. When refactoring your\nmonolith, you might sometimes use the second  strategy, but you\u2019ll definitely use the", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a7aa8bd-bf5c-4940-8c1f-8d43b1eb362e": {"__data__": {"id_": "3a7aa8bd-bf5c-4940-8c1f-8d43b1eb362e", "embedding": null, "metadata": {"page_label": "434", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3bcc6aab-fcd7-4305-8940-5912e3b97fce", "node_type": "4", "metadata": {"page_label": "434", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "337a40941ad4b0c7483cee059ad739a83df0772bcf6968660101f5e3c408ab7d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "434 CHAPTER 13 Refactoring to microservices\nthird strategy, because it\u2019s how functionalit y is migrated from the monolith into the\nstrangler application.\n Let\u2019s take a look at each of these stra tegies, starting with implementing new fea-\ntures as services.\n13.2.1 Implement new features as services\nThe Law of Holes states that \u201cif you fi nd yourself in a hole, stop digging\u201d ( https://\nen.m.wikipedia.org/wiki/Law_of_holes). This is great advice to follow when your mono-\nlithic application has become unmanageable. In other words, if you have a large, com-\nplex monolithic application, don\u2019t implemen t new features by adding code to the\nmonolith. That will make your monolith even larger and more unmanageable. Instead,\nyou should implement new features as services.\n This is a great way to begin migrating yo ur monolithic application to a microser-\nvice architecture. It reduces the growth rate  of the monolith. It accelerates the devel-\nopment of the new features, because you\u2019re doing development in a brand new code\nbase. It also quickly demonstrates the value of adopting the microservice architecture.\nINTEGRATING THE NEW SERVICE WITH THE MONOLITH\nFigure 13.2 shows the application\u2019s architecture after implementing a new feature as a\nservice. Besides the new service and monolith, the architecture includes two other ele-\nments that integrate the service into the application:\n\uf0a1 API gateway \u2014Routes requests for new functionality to the new service and\nroutes legacy requests to the monolith.\n\uf0a1 Integration glue code\u2014Integrates the service with the monolith. It enables the ser-\nvice to access data owned by the monoli th and to invoke functionality imple-\nmented by the monolith.\nThe integration glue code isn\u2019t a standalone component. Instead, it consists of adapt-\ners in the monolith and the service that use one or more interprocess communication\nmechanisms. For example, integration glue for Delayed Delivery Service, described\nin section 13.4.1, uses both REST and do main events. The service retrieves customer\ncontract information from the monolith by invoking a REST API. The monolith pub-\nlishes Order domain events so that Delayed Delivery Service can track the state of\nOrders and respond to orders that won\u2019t be delivered on time. Section 13.3.1 describes\nthe integration glue code in more detail.\nWHEN TO IMPLEMENT A NEW FEATURE AS A SERVICE\nIdeally, you should implement every new fe ature in the strangler application rather\nthan in the monolith. You\u2019ll implement a new feature as either a new service or as part\nof an existing service. This way you\u2019ll av oid ever having to touch the monolith code\nbase. Unfortunately, though, not every new feature can be implemented as a service.\n That\u2019s because the essence of a microservice architecture is a set of loosely coupled\nservices that are organized around business capabilities. A feature might, for instance,\nbe too small to be a meaningful service. You might, for example, just need to add a", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2972, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39b31b69-4478-45a8-8b8d-82f980b09ef8": {"__data__": {"id_": "39b31b69-4478-45a8-8b8d-82f980b09ef8", "embedding": null, "metadata": {"page_label": "435", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e32e2ee-c0f6-425c-beb7-19dbe0aadfea", "node_type": "4", "metadata": {"page_label": "435", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e7072203217156c563cbc9ce6078e2e4ec2cefdd6536d284d2c15d5cd2db2afe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "435Strategies for refactoring a monolith to microservices\nfew fields and methods to an existing clas s. Or the new feature might be too tightly\ncoupled to the code in the monolith. If yo u attempted to implement this kind of fea-\nture as a service you would typically find  that performance would suffer because of\nexcessive interprocess communication. You might also have problems maintaining\ndata consistency. If a new feature can\u2019t be implemented as a service, the solution is\noften to initially implement the new featur e in the monolith. Later on, you can then\nextract that feature along with other related features into their own service.\n Implementing new features as services accelerates the development of those fea-\ntures. It\u2019s a good way to quickly demonstr ate the value of the microservice architec-\nture. It also reduces the monolith\u2019s growth  rate. But ultimately, you need to break\napart the monolith using the two other strategies. You need to migrate functionality to\nthe strangler application by extracting func tionality from the monolith into services.\nYou might also be able to improve development velocity by splitting the monolith hor-\nizontally. Let\u2019s look at how to do that. \nMonolith\nOutbound\nadapter\nAPI gateway\nOld features New features\nIntegration\nglue\nInbound\nadapter\nInbound\nadapter\nDatabase\nadapter\nDatabase\nadapter\nInbound\nadapter\nEvent\nsubscriber\nadapter\nEvent\npublisher\nadapter\nService\ndatabase\nMonolith\ndatabase\n\u00abaggregate\u00bb\nDelayedDelivery\nService\n\u00abaggregate\u00bb\nOrder\n\u00abaggregate\u00bb\nNotification\nService\nimplementing\nnew feature\nFigure 13.2 A new feature is implemented as a serv ice that\u2019s part of the strangler application. The \nintegration glue integrates the service with the monolith and consists of adapters that implement \nsynchronous and asynchronous APIs. An API gateway routes requests that invoke new functionality \nto the service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1874, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1636f41-45c4-4fa8-ba89-8158cc12d2a7": {"__data__": {"id_": "e1636f41-45c4-4fa8-ba89-8158cc12d2a7", "embedding": null, "metadata": {"page_label": "436", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "775796ac-6812-4f25-ad6d-88135de35fe4", "node_type": "4", "metadata": {"page_label": "436", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "261eede4032264be92578b6304af62b025c1eeaa9afddad92b768795ece73e5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "436 CHAPTER 13 Refactoring to microservices\n13.2.2 Separate presentation tier from the backend\nOne strategy for shrinking a monolithic applic ation is to split the presentation layer\nfrom the business logic and data access layers. A typical enterprise application consists\nof the following layers:\n\uf0a1 Presentation logic\u2014This consists of modules that handle HTTP requests and gener-\nate HTML pages that implement a web UI. In an application that has a sophisti-\ncated user interface, the presentation tier is often a substantial body of code.\n\uf0a1 Business logic\u2014This consists of modules that implement the business rules, which\ncan be complex in an enterprise application.\n\uf0a1 Data access logic \u2014This consists of modules that  access infrastructure services\nsuch as databases and message brokers.\nThere is usually a clean separation betwee n the presentation logic and the business\nand data access logic. The business tier has a coarse-grained API consisting of one or\nmore facades that encapsulate the business logic. This API is a natural seam along\nwhich you can split the monolith into two smaller applications, as shown in figure 13.3.\nBusiness logic Business logic\nREST\nAPIREST\nclient\nWeb\napp\nBrowserBrowser\nHTML pages\nHTML pages\nMonolith containing\npresentation logic and\nbackend business logic\nSmaller, independently\ndeployable presentation\nlogic monolith\nMySQL\nDatabase\nadapter\nMySQL\nDatabase\nadapter\nWeb\napplication\nSplit\nSmaller, independently\ndeployable backend\nmonolith\nAn API that is callable\nby any future services\nFigure 13.3 Splitting the frontend from the backend enables each to be deployed independently. It also exposes \nan API for services to invoke.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1666, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "982e97c2-412b-4ca6-a7d8-2ac2d1d3dc46": {"__data__": {"id_": "982e97c2-412b-4ca6-a7d8-2ac2d1d3dc46", "embedding": null, "metadata": {"page_label": "437", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60ee0b31-b3b8-49b3-9ba5-0a5f2daa6381", "node_type": "4", "metadata": {"page_label": "437", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c61dabe9319e0aaa4533f94e0fb12e2d6753b7191c1ff1d33d9d7f805edfda54", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "437Strategies for refactoring a monolith to microservices\nOne application contains the presentation layer, and the other contains the business\nand data access logic. After the split, the presentation logic application makes remote\ncalls to the business logic application.\n Splitting the monolith in this way has two main benefits. It enables you to develop,\ndeploy, and scale the two applications independently of one another. In particular, it\nallows the presentation layer developers to  rapidly iterate on the user interface and\neasily perform A/B testing, for example,  without having to deploy the backend.\nAnother benefit of this approach is that it exposes a remote API that can be called by\nthe microservices you develop later.\n But this strategy is only a partial solution. It\u2019s very likely that at least one or both of\nthe resulting applications will still be an unmanageable monolith. You need to use the\nthird strategy to replace the monolith with services. \n13.2.3 Extract business capabilities into services\nImplementing new features as services an d splitting the frontend web application\nfrom the backend will only get you so far. You\u2019ll still end up doing a lot of develop-\nment in the monolithic code base. If you want to significantly improve your applica-\ntion\u2019s architecture and increase your deve lopment velocity, you need to break apart\nthe monolith by incrementally migrating bu siness capabilities from the monolith to\nservices. For example, section 13.5 descri bes how to extract delivery management\nfrom the FTGO monolith into a new Delivery Service. When you use this strategy,\nover time the number of business capabilities implemented by the services grows, and\nthe monolith gradually shrinks.\n The functionality you want extract into a service is a vertical slice through the\nmonolith. The slice consists of the following:\n\uf0a1 Inbound adapters that implement API endpoints\n\uf0a1 Domain logic\n\uf0a1 Outbound adapters such as database access logic\n\uf0a1 The monolith\u2019s database schema\nAs figure 13.4 shows, this code is extracted from the monolith and moved into a stand-\nalone service. An API gateway routes requests that invoke the extracted business capa-\nbility to the service and routes the other re quests to the monolith. The monolith and\nthe service collaborate via the integration glue code. As described in section 13.3.1,\nthe integration glue consists of adapters in the service and monolith that use one or\nmore interprocess communication (IPC) mechanisms.\n Extracting services is challenging. You need to determine how to split the mono-\nlith\u2019s domain model into two separate domain models, one of which becomes the ser-\nvice\u2019s domain model. You need to break dependencies such as object references. You\nmight even need to split classes in order to  move functionality into the service. You\nalso need to refactor the database.\n Extracting a service is often time cons uming, especially because the monolith\u2019s\ncode base is likely to be messy. Consequently, you need to carefully think about which", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3023, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b04e926c-1f54-4888-9f95-1ee4db211a2c": {"__data__": {"id_": "b04e926c-1f54-4888-9f95-1ee4db211a2c", "embedding": null, "metadata": {"page_label": "438", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfffde44-0ee5-486d-8dd0-daa28b762696", "node_type": "4", "metadata": {"page_label": "438", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "210022121a7eff94a124509a42992078b697114d5e19bf0dde8037804127005d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "438 CHAPTER 13 Refactoring to microservices\nservices to extract. It\u2019s important to focus on refactoring those parts of the application\nthat provide a lot of value. Before extracting a service, ask yourself what the benefit is\nof doing that.\n F o r  e x a m p l e ,  i t \u2019 s  w o r t h w h i l e  t o  e x t r a ct a service that implements functionality\nthat\u2019s critical to the business and constantly evolving. It\u2019s not valuable to invest effort\nin extracting services when there\u2019s not much benefit from doing so. Later in this sec-\ntion I describe some strategies for determ ining what to extract and when. But first,\nlet\u2019s look in more detail at some of the challenges you\u2019ll face when extracting a service\nand how to address them.\n You\u2019ll encounter a couple of challenges when extracting a service:\n\uf0a1 Splitting the domain model\n\uf0a1 Refactoring the database\nLet\u2019s look at each one, starting with splitting the domain model.\nOutbound\nadapter\nAPI gateway\nService containing\nextracted code\nIntegration\nglue\nInbound\nadapter\nInbound\nadapter\nDatabase\nadapter\nDatabase\nadapter\nInbound\nadapter\nOutbound\nadapter\nInbound\nadapter\nService\ndatabase\nMonolith\ndatabase\nInbound\nadapter\nDatabase\nadapter\nMonolith\ndatabase\n\u00ab\u00bb service\nOrder Service\n\u00abaggregate\u00bb\nCourier\n\u00abaggregate\u00bb\nPlan\n\u00abservice\u00bb\nOrder Service\n\u00abaggregate\u00bb\nCourier\n\u00abaggregate\u00bb\nPlan\nCode to\nextract into\na serviceMonolith\n\u00ab\u00bb service\nOrder Service\n\u00abaggregate\u00bb\nOrder\n\u00ab\u00bb aggregate\nOrder\nGlue code integrating\nservice with monolith\nFigure 13.4 Break apart the monolith by extracting services. You identify a slice of functionality, which consists \nof business logic and adapters, to extract into a service. You move that code into the service. The newly extracted \nservice and the monolith collaborate via the APIs provided by the integration glue.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1789, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1f406034-ebac-4ed3-bc6a-156780ea99a5": {"__data__": {"id_": "1f406034-ebac-4ed3-bc6a-156780ea99a5", "embedding": null, "metadata": {"page_label": "439", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "55a72620-cea3-4965-9643-8572132be2b8", "node_type": "4", "metadata": {"page_label": "439", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "71e9fa4ee65219de2948eb23a22841ffb075bb3a3772dae3e6bbc059135cf661", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "439Strategies for refactoring a monolith to microservices\nSPLITTING THE DOMAIN MODEL\nIn order to extract a service, you need to extract its domain model out of the monolith\u2019s\ndomain model. You\u2019ll need to perform major surgery to split the domain models. One\nchallenge you\u2019ll encounter is eliminating object references that would otherwise span\nservice boundaries. It\u2019s possible that classes that remain in the monolith will reference\nclasses that have been moved to the service or vice versa. For example, imagine that, as\nfigure 13.5 shows, you extract Order Service, and as a result its Order class references\nthe monolith\u2019s Restaurant class. Because a service instan ce is typically a process, it\ndoesn\u2019t make sense to have object references that cross service boundaries. Somehow\nyou need to eliminate these types of object reference.\nOne good way to solve this problem is to think in terms of DDD aggregates, described\nin chapter 5. Aggregates reference each other using primary keys rather than object ref-\nerences. You would, therefore, think of the Order and Restaurant classes as aggre-\ngates and, as figure 13.6 shows, replace the reference to Restaurant in the Order class\nwith a restaurantId field that stores the primary key value.\nFTGO monolith\nExtracted service\n\u00abEntity\u00bb\nRestaurant\nObject reference that spans\nservice boundaries\n\u00abEntity\u00bb\nOrder\nDelivery Service FTGO monolith\n? \u00abEntity\u00bb\nRestaurant\n\u00abEntity\u00bb\nOrder\nFigure 13.5 The Order domain class has a reference to a Restaurant class. If we extract \nOrder into a separate service, we need to do something about its reference to Restaurant, \nbecause object references between processes don\u2019t make sense.\nReplace with primary key.\nDelivery Service FTGO monolith\n\u00abEntity\u00bb\nRestaurant\n\u00abEntity\u00bb\nOrder\nrestaurantId\nObject reference that spans\nservice boundaries\nDelivery Service FTGO monolith\n? \u00abEntity\u00bb\nRestaurant\n\u00abEntity\u00bb\nOrder\nFigure 13.6 The Order class\u2019s reference to Restaurant is replaced with the Restaurant's \nprimary key in order to eliminate an object that would span process boundaries.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2057, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa124e6f-4c29-42d7-bd51-d8c3b7ffef1e": {"__data__": {"id_": "aa124e6f-4c29-42d7-bd51-d8c3b7ffef1e", "embedding": null, "metadata": {"page_label": "440", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84541aba-10a4-493a-a7e7-3d532b689f13", "node_type": "4", "metadata": {"page_label": "440", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c2d93f7f157bdb0ca03df9d7d74f3bee0351c81ed9a5301039e8b1067291d3dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "440 CHAPTER 13 Refactoring to microservices\nOne issue with replacing object references with primary keys is that although this is a\nminor change to the class, it can potentially  have a large impact on the clients of the\nclass, which expect an object reference. Later in this section, I describe how to reduce\nthe scope of the change by replicating data between the service and monolith. Delivery\nService, for example, could define a Restaurant class that\u2019s a replica of the mono-\nlith\u2019s Restaurant class.\n Extracting a service is often much more involved than moving entire classes into a\nservice. An even greater challenge with splitting a domain model is extracting func-\ntionality that\u2019s embedded in a class that has other responsibilities. This problem often\noccurs in god classes, described in chapter 2, that have an excessive number of responsi-\nbilities. For example, the Order class is one of the god classes in the FTGO applica-\ntion. It implements multiple business ca pabilities, including order management,\ndelivery management, and so on. Later in se ction 13.5, I discuss how extracting the\ndelivery management into a service involves extracting a Delivery class from the\nOrder class. The Delivery entity implements the delivery management functionality\nthat was previously bundled with other functionality in the Order class. \nREFACTORING THE DATABASE\nSplitting a domain model involves more than  just changing code. Many classes in a\ndomain model are persistent. Their fields are mapped to a database schema. Conse-\nquently, when you extract a service from the monolith, you\u2019re also moving data. You\nneed to move tables from the monolith\u2019s database to the service\u2019s database.\n Also, when you split an entity you need to split the corresponding database table\nand move the new table to the service. For example, when extracting delivery manage-\nment into a service, you split the Order entity and extract a Delivery entity. At the\ndatabase level, you split the ORDERS table and define a new DELIVERY table. You then\nmove the DELIVERY table to the service.\n The book Refactoring Databases by Scott W. Ambler and Pramod J. Sadalage (Addison-\nWesley, 2011) describes a set of refactorin gs for a database schema. For example, it\ndescribes the Split Table  refactoring, which splits a table into two or more tables.\nMany of the technique in that book are us eful when extracting services from the\nmonolith. One such technique is the idea of  replicating data in order to allow you to\nincrementally update clients of the database to use the new schema. We can adapt\nthat idea to reduce the scope of the changes you must make to the monolith when\nextracting a service.\nREPLICATE DATA TO AVOID WIDESPREAD CHANGES\nAs mentioned, extracting a service requires  you to change to the monolith\u2019s domain\nmodel. For example, you replace object references with primary keys and split classes.\nThese types of changes can ripple through the code base and require you to make\nwidespread changes to the monolith.  For example, if you split the Order entity and\nextract a Delivery entity, you\u2019ll have to change every place in the code that references\nthe fields that have been moved. Making  these kinds of changes can be extremely\ntime consuming and can become a huge barrier to breaking up the monolith.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3300, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8121e107-c538-4cba-a48b-767863d3aefe": {"__data__": {"id_": "8121e107-c538-4cba-a48b-767863d3aefe", "embedding": null, "metadata": {"page_label": "441", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1eaf8799-0861-4876-a380-f5f582d6b08c", "node_type": "4", "metadata": {"page_label": "441", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a8b19362df2c018ae465e912a542cac2408679f43d315a3ec57c49cb2986e983", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "441Strategies for refactoring a monolith to microservices\n A great way to delay and possibly avoid making these kinds of expensive changes is\nto use an approach that\u2019s similar to the one described in Refactoring Databases. A major\nobstacle to refactoring a database is changing all the clients of that database to use the\nnew schema. The solution proposed in the book is to preserve the original schema for\na transition period and use triggers to synchronize the original and new schemas. You\nthen migrate clients from the old schema to the new schema over time.\n We can use a similar approach when extr acting services from the monolith. For\nexample, when extracting the Delivery entity, we leave the Order entity mostly\nunchanged for a transition period. As figure 13.7 shows, we make the delivery-related\nfields read-only and keep them up-to-date by replicating data from Delivery Service\nback to the monolith. As a result, we only need to find the places in the monolith\u2019s code\nthat update those fields and change them to invoke the new Delivery Service.\n Preserving the structure of the Order entity by replicating data from Delivery\nService significantly reduces the amount of work we need to do immediately. Over\ntime, we can migrate code that  uses the delivery-related Order entity fields or ORDERS\ntable columns to Delivery Service. What\u2019s more, it\u2019s possible that we never need to\nRead-only\ndelivery-related\n\ufb01elds\nORDER_ID\n...\nORDERtable\nRESTAURANT_ID\n...\nSCHEDULED_PICKUP_TIME\n...\nSCHEDULED_DELIVERY_TIME\n...\n...\n...\n\u00abEntity\u00bb\nOrder\nFTGO monolith\n...\nconsumerId\nscheduledPickupTime\nscheduledDeliveryTime\n...\nORDER_ID\n...\nORDERtable\nRESTAURANT_ID\n...\nSCHEDULED_PICKUP_TIME\n...\nSCHEDULED_DELIVERY_TIME\n...\n...\n...\n\u00abEntity\u00bb\nOrder\nFTGO monolith\n...\nconsumerId\nscheduledPickupTime\nscheduledDeliveryTime\n...\nORDER_ID\n...\nDELIVERYtable\nSCHEDULED_PICKUP_TIME\n...\nSCHEDULED_DELIVERY_TIME\n...\n...\n...\n\u00abEntity\u00bb\nDelivery\nDelivery Service\nExtract Order Service and move columns from\nORDER DELIVERYt a b l et oan e w t a b l e .\nReplicate data from Delivery Service to FTGO monolith.\n...\norderId\nscheduledPickupTime\nscheduledDeliveryTime\n...\nFigure 13.7 Minimize the scope of the changes to the FTGO monolith by replicating delivery-related data from the \nnewly extracted Delivery Service back to the monolith\u2019s database.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2318, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2be0e17-4b8a-48d4-a0dd-39fd07fd8951": {"__data__": {"id_": "f2be0e17-4b8a-48d4-a0dd-39fd07fd8951", "embedding": null, "metadata": {"page_label": "442", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "873de52e-ca45-4319-95fd-7413208a9c8e", "node_type": "4", "metadata": {"page_label": "442", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cfba05a1db8425bae5b40da408b954ff9a47bf387b3958b2d0284bf4c49f1cdd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "442 CHAPTER 13 Refactoring to microservices\nmake that change in the monolith. If that code is subsequently extracted into a ser-\nvice, then the service can access Delivery Service.\nWHAT SERVICES TO EXTRACT AND WHEN\nAs I mentioned, breaking apart the monolith is time consuming. It diverts effort away\nfrom implementing features. As a result, you must carefully decide the sequence in\nwhich you extract services. You need to focus on extracting services that give the larg-\nest benefit. What\u2019s more, you want to co ntinually demonstrate to the business that\nthere\u2019s value in migrating to a microservice architecture.\n On any journey, it\u2019s essential to know where you\u2019re going. A good way to start the\nmigration to microservices is with a time-b oxed architecture definition effort. You\nshould spend a short amount of time, such  as a couple of weeks, brainstorming your\nideal architecture and defining a set of se rvices. This gives you a destination to aim\nfor. It\u2019s important, though, to remember th at this architecture isn\u2019t set in stone. As\nyou break apart the monolith and gain experience, you should revise the architecture\nto take into account what you\u2019ve learned.\n Once you\u2019ve determined the approximate destination, the next step is to start\nbreaking apart the monolith. There are a couple of different strategies you can use to\ndetermine the sequence in which you extract services.\n One strategy is to effectively freeze de velopment of the monolith and extract ser-\nvices on demand. Instead of implementing features or fixing bugs in the monolith,\nyou extract the necessary service or service( s) and change those. One benefit of this\na p p r o a c h  i s  t h a t  i t  f o r c e s  y o u  t o  b r e a k  u p  t h e  m o n o l i t h .  O n e  d r a w b a c k  i s  t h a t  t h e\ne x t r a c t i o n  o f  s e r v i c e s  i s  d r i v e n  b y  s h o rt-term requirements rather than long-term\nneeds. For instance, it requires you to extr act services even if you\u2019re making a small\nchange to a relatively stable part of the system. As a result, you risk doing a lot of work\nfor minimal benefit.\n An alternative strategy is a more pla nned approach, where you rank the modules\nof an application by the benefit you antici pate getting from extracting them. There\nare a few reasons why extracting a service is beneficial:\n\uf0a1 Accelerates development\u2014If your application\u2019s roadmap suggests that a particular\npart of your application will undergo a lot of development over the next year,\nthen converting it to a service accelerates development.\n\uf0a1 Solves a performance, scaling, or reliability problem\u2014If a particular part of your appli-\ncation has a performance or scalability pr oblem or is unreliable, then it\u2019s valu-\nable to convert it to a service.\n\uf0a1 Enables the extraction of some other services \u2014Sometimes extracting one service sim-\nplifies the extraction of another service, due to dependencies between modules.\nYou can use these criteria to add refactor ing tasks to your application\u2019s backlog,\nranked by expected benefit. The benefit of this approach is that it\u2019s more strategic\nand much more closely aligned with the n eeds of the business. During sprint plan-\nning, you decide whether it\u2019s more valuable to implement features or extract services.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3265, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "35aa40df-4582-4aab-8773-48df6baa9275": {"__data__": {"id_": "35aa40df-4582-4aab-8773-48df6baa9275", "embedding": null, "metadata": {"page_label": "443", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa00f74b-f098-417a-9194-12980b352d73", "node_type": "4", "metadata": {"page_label": "443", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e617672d3323d1f13d73f5d239c55cfc82804a3e1867863571a64bf7e69186b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "443Designing how the service and the monolith collaborate\n13.3 Designing how the service and the monolith \ncollaborate\nA service is rarely standalone. It usually needs to collaborate with the monolith. Some-\ntimes a service needs to access data owned by the monolith or invoke its operations.\nFor example, Delayed Delivery Service, described in detail in section 13.4.1, requires\naccess to the monolith\u2019s orders and customer contact info. The monolith might also\nneed to access data owned by the service or  invoke its operations. For example, later\nin section 13.5, when discussing how to ex tract delivery management into a service, I\ndescribe how the monolith needs to invoke Delivery Service.\n One important concern is maintaining da ta consistency between the service and\nmonolith. In particular, when you extract a service from the monolith, you invariably\nsplit what were originally ACID transactions . You must be careful to ensure that data\nconsistency is still maintained. As described later in this section, sometimes you use\nsagas to maintain data consistency.\n The interaction between a service and the monolith is, as described earlier, facili-\ntated by integration glue code. Figure 13.8 shows the structure of the integration glue.\nIt consists of adapters in the service and monolith that communicate using some kind\nof IPC mechanism. Depending on the requ irements, the service and monolith might\ninteract over REST or they might use messaging. They might even communicate using\nmultiple IPC mechanisms.\nFor example, Delayed Delivery Service uses both REST and domain events. It\nretrieves customer contact info from the mo nolith using REST. It tracks the state of\nOrders by subscribing to domain events published by the monolith.\nMonolith Service\nInbound\nadapter\nIntegration\nglue\nAPI\nadapter\nAPI\nadapter\nOutbound\nadapter\nOutbound\nadapter\nInbound\nadapter\nFigure 13.8 When migrating a monolith to microservices , the services and monolith often need to access each \nother\u2019s data. This interaction is facilitated by the integration glue, which consists of adapters that implement APIs. \nSome APIs are messaging based. Other APIs are RPI based.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2158, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6cec9329-4045-47ab-889a-7a433673f519": {"__data__": {"id_": "6cec9329-4045-47ab-889a-7a433673f519", "embedding": null, "metadata": {"page_label": "444", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a3a5ba13-f5fe-4014-b299-f735becfd809", "node_type": "4", "metadata": {"page_label": "444", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9f62dd9edbbe0372772fabbadee2761f5da2488cddbdb956f0a084ec390fb9d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "444 CHAPTER 13 Refactoring to microservices\n In this section, I first describe the design of the integration glue. I talk about the prob-\nlems it solves and the different implementation options. After that I describe transaction\nmanagement strategies, including the use of sagas. I discuss how sometimes the require-\nment to maintain data consistency changes the order in which you extract services.\n Let\u2019s first look at the design of the integration glue.\n13.3.1 Designing the integration glue\nWhen implementing a feature as a service or extracting a service from the monolith,\nyou must develop the integration glue that enables a service to collaborate with the\nmonolith. It consists of code in both the service and monolith that uses some kind of\nIPC mechanism. The structure of the integr ation glue depends on the type of IPC\nmechanism that is used. If, for example, the service invokes the monolith using REST,\nthen the integration glue consists of a REST  client in the service and web controllers\nin the monolith. Alternatively, if the monolith subscribes to domain events published\nby the service, then the integration glue consists of an event-publishing adapter in the\nservice and event handlers in the monolith.\nDESIGNING THE INTEGRATION GLUE API\nThe first step in designing the integration gl ue is to decide what APIs it provides to\nthe domain logic. There are a couple of diff erent styles of interface to choose from,\ndepending on whether you\u2019re querying data or updating data. Let\u2019s say you\u2019re work-\ning on Delayed Delivery Service, which needs to retrieve customer contact info\nfrom the monolith. The service\u2019s business logic doesn\u2019t need to know the IPC mecha-\nnism that the integration glue uses to retrieve the information. Therefore, that mecha-\nnism should be encapsulated by an interface. Because Delayed Delivery Service is\nquerying data, it makes sense to define a CustomerContactInfoRepository:\ninterface CustomerContactInfoRepository {\nCustomerContactInfo findCustomerContactInfo(long customerId)\n}\nThe service\u2019s business logic can invoke this API without knowing how the integration\nglue retrieves the data.\n Let\u2019s consider a different service. Imagine that you\u2019re extracting delivery manage-\nment from the FTGO monolith. The monolith needs to invoke Delivery Service to\nschedule, reschedule, and cancel deliveries. Once again, the details of the underlying\nIPC mechanism aren\u2019t important to the business logic and should be encapsulated by\nan interface. In this scenario, the monolith must invoke a service operation, so using a\nrepository doesn\u2019t make sense. A better approach is to define a service interface, such\nas the following:\ninterface DeliveryService {\nvoid scheduleDelivery(...);\nvoid rescheduleDelivery(...);\nvoid cancelDelivery(...);\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2778, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e27af549-fead-4498-81f2-0486d29baa38": {"__data__": {"id_": "e27af549-fead-4498-81f2-0486d29baa38", "embedding": null, "metadata": {"page_label": "445", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9bec996f-4dcc-4172-9310-4be82a033488", "node_type": "4", "metadata": {"page_label": "445", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e6b14aa711d02e3b1c7d3e2451883799bb627b483638f83e2b6acd62cac20c38", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "445Designing how the service and the monolith collaborate\nThe monolith\u2019s business logic invokes this API without knowing how it\u2019s implemented\nby the integration glue.\n Now that we\u2019ve seen interface design, le t\u2019s look at interaction styles and IPC\nmechanisms. \nPICKING AN INTERACTION STYLE AND IPC MECHANISM\nAn important design decision you must make when designing the integration glue is\nselecting the interaction styles and IPC mechanisms that enable the service and the\nmonolith to collaborate. As described in chapter 3, there are several interaction\nstyles and IPC mechanisms to choose from. Which one you should use depends on\nwhat one party \u2014the service or monolith\u2014needs in order to query or update the\nother party.\n If one party needs to query data owned by the other party, there are several\noptions. One option is, as figure 13.9 shows, for the adapter that implements the\nrepository interface to invoke an API of the data provider. This API will typically use a\nrequest/response interaction style, su ch as REST or gRPC. For example, Delayed\nDelivery Service might retrieve the customer contact info by invoking a REST API\nimplemented by the FTGO monolith.\nIn this example, the Delayed Delivery Service\u2019s domain logic retrieves the customer\ncontact info by invoking the CustomerContactInfoRepository interface. The imple-\nmentation of this interface invokes the monolith\u2019s REST API.\n An important benefit of querying data by invoking a query API is its simplicity. The\nmain drawback is that it\u2019s potentially inef ficient. A consumer might need to make a\nlarge number of requests. A provider migh t return a large amount of data. Another\ndrawback is that it reduces availability be cause it\u2019s synchronous IPC. As a result, it\nmight not be practical to use a query API.\nDelayed\nDelivery Service\nCustomer\nContactInfo\nRepository\nGET/customers/{customerId}\nFTGO\nmonolith\nMonolith\ndatabase\nREST\nAPIREST\nclient\nFigure 13.9 The adapter that implements the CustomerContactInfoRepository interface invokes the \nmonolith\u2019s REST API to retrieve the customer information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2071, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b596ac02-b578-4d39-9d11-e9cf440c762a": {"__data__": {"id_": "b596ac02-b578-4d39-9d11-e9cf440c762a", "embedding": null, "metadata": {"page_label": "446", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03b49dee-78be-496c-9940-22c1d98b4484", "node_type": "4", "metadata": {"page_label": "446", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5d170265f8a5850494a1bd1dda65383f4ce7d8be4b66b17b0689cd6a6db906f7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "446 CHAPTER 13 Refactoring to microservices\n An alternative approach is for the data consumer to maintain a replica of the data,\nas shown in figure 13.10. The replica is essentially a CQRS view. The data consumer\nkeeps the replica up-to-date by subscribin g to domain events published by the data\nprovider.\nUsing a replica has several benefits. It avoids the overhead of repeatedly querying the\ndata provider. Instead, as discussed when  describing CQRS in chapter 7, you can\ndesign the replica to support efficient qu eries. One drawback of using a replica,\nthough, is the complexity of maintaining it . A potential challenge, as described later\nin this section, is the need to modify the monolith to publish domain events.\n Now that we\u2019ve discussed how to do queries, let\u2019s consider how to do updates. One\nchallenge with performing updates is the need to maintain data consistency across the\nservice and monolith. The party making the update request (the requestor) has\nupdated or needs to update its database. So  it\u2019s essential that both updates happen.\nThe solution is for the service and monolith to communicate using transactional mes-\nsaging implemented by a framework, such as Eventuate Tram. In simple scenarios, the\nrequestor can send a notification message or publish an event to trigger an update. In\nmore complex scenarios, the requestor must use a saga to maintain data consistency.\nSection 13.3.2 discusses the implications of using sagas. \nIMPLEMENTING AN ANTI-CORRUPTION LAYER\nImagine you\u2019re implementing a new feature as a brand new service. You\u2019re not con-\nstrained by the monolith\u2019s code base, so you can use modern development techniques\nDelayed\nDelivery Service FTGO\nmonolith\nMonolith\ndatabase\nService\ndatabase\nEvent\npublisher\nCustomer event channel\nCustomer\ndomain\neventEvent\nsubscriber\nDatabase\nadapter\nCustomer\nContactInfo\nRepository\nquery()\nupdate()\nFigure 13.10 The integration glue replicates data from the monolith to the service. The monolith publishes \ndomain events, and an event handler implemented by the service updates the service\u2019s database.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2079, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55800292-1a94-438a-a8c6-3aa69be21997": {"__data__": {"id_": "55800292-1a94-438a-a8c6-3aa69be21997", "embedding": null, "metadata": {"page_label": "447", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92580ef5-653e-4fe3-8322-31f4e43614b3", "node_type": "4", "metadata": {"page_label": "447", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4eab1e727f39a0c59338241749dd6ada58ef47a6d4dfdd14257bef0c8fdb7c1b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "447Designing how the service and the monolith collaborate\nsuch as DDD and develop a pristine ne w domain model. Also, because the FTGO\nmonolith\u2019s domain is poorly defined and somewhat out-of-date, you\u2019ll probably model\nconcepts differently. As a result, your serv ice\u2019s domain model will have different class\nnames, field names, and field values. For example, Delayed Delivery Service has a\nDelivery entity with narrowly focused responsibilities, whereas the FTGO monolith\nhas an Order entity with an excessive number of responsibilities. Because the two\ndomain models are different, you must implement what DDD calls an anti-corruption\nlayer (ACL) in order for the service to communicate with the monolith.\nThe goal of an ACL is to prevent a legacy  monolith\u2019s domain model from polluting a\nservice\u2019s domain model. It\u2019s a layer of co de that translates between the different\ndomain models. For example, as figure 13.11 shows, Delayed Delivery Service has a\nCustomerContactInfoRepository interface, which defines a findCustomerContact-\nInfo() method that returns CustomerContactInfo. The class that implements the\nCustomerContactInfoRepository interface must translate between the ubiquitous\nlanguage of Delayed Delivery Service and that of the FTGO monolith.\nThe implementation of findCustomerContactInfo() invokes the FTGO monolith to\nretrieve the customer information and translates the response to CustomerContact-\nInfo. In this example, the translation is quit e simple, but in other scenarios it could\nbe quite complex and involve, for example, mapping values such as status codes.\nPattern: Anti-corruption layer\nA software layer that translates between two different domain models in order to\nprevent concepts from one model polluting another. See https://microservices.io/\npatterns/refactoring/anti-corruption-layer.html.\nDelayed\nDelivery Service FTGO\nmonolith\nREST\nAPI\nAPI\nTranslation layer\nGET/user/{userId}\nMonolith layer\nREST client\nCustomer\nContactInfo\nRepository\nUbiquitous language of service\nUbiquitous language of monolith\nAnti-corruption layer\nFigure 13.11 A service adapter that invokes the monolit h must translate between the service\u2019s domain model \nand the monolith\u2019s domain model.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2203, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "05ebc796-0d29-4eff-952f-070d768e7478": {"__data__": {"id_": "05ebc796-0d29-4eff-952f-070d768e7478", "embedding": null, "metadata": {"page_label": "448", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4145a2f6-99f3-4c0d-bcb0-04920f83d521", "node_type": "4", "metadata": {"page_label": "448", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "5f25e0321aa84a898146a93a1e0408047d1fa1c803cc20e2acf1b2028e983a3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "448 CHAPTER 13 Refactoring to microservices\n An event subscriber, which consumes domain events, also has an ACL. Domain\nevents are part of the publisher\u2019s domain  model. An event handler must translate\ndomain events to the subscriber\u2019s domain model. For example, as figure 13.12 shows,\nthe FTGO monolith publishes Order domain events. Delivery Service has an event\nhandler that subscribes to those events.\nThe event handler must translate domain events from the monolith\u2019s domain lan-\nguage to that of Delivery Service. It might need to map class and attribute names\nand potentially attribute values.\n It\u2019s not just services that use an anti-corruption layer. A monolith also uses an ACL\nwhen invoking the service and when subscribing to domain events published by a ser-\nvice. For example, the FTGO monolith sche dules a delivery by sending a notification\nmessage to Delivery Service. It sends the notification by invoking a method on the\nDeliveryService interface. The implementation class translates its parameters into a\nmessage that Delivery Service understands. \nHOW THE MONOLITH PUBLISHES AND SUBSCRIBES TO DOMAIN EVENTS\nDomain events are an important collaboration mechanism. It\u2019s straightforward for a\nnewly developed service to publish and consume events. It can use one of the mech-\nanisms described in chapter 3, such as the Eventuate Tram framework. A service\nmight even publish events using event sour cing, described in chapter 6. It\u2019s poten-\ntially challenging, though, to change th e monolith to publish and consume events.\nLet\u2019s look at why.\n There are a couple of different ways that a monolith can publish domain events.\nOne approach is to use the same domain event publishing mechanism used by the\nDelayed\nDelivery\nService\nFTGO\nmonolith\nEvent handler\nTranslation layer\nMessaging client\nUbiquitous language of service\nUbiquitous language of monolith\nAnti-corruption layer\nEvent channel\nOrder\nevent\nEvent\npublisher\nFigure 13.12 An event handler must translate from the event publisher\u2019s domain model to the subscriber\u2019s domain \nmodel.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2053, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5fe15bcb-4739-4ac7-a1aa-24950d84519e": {"__data__": {"id_": "5fe15bcb-4739-4ac7-a1aa-24950d84519e", "embedding": null, "metadata": {"page_label": "449", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a505c314-64ef-47e2-bcfc-12280514c171", "node_type": "4", "metadata": {"page_label": "449", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b9fe8aadad025166abaf614c50a0bce5e375ce0e04a3a1d387fd37e1f8c0408d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "449Designing how the service and the monolith collaborate\nservices. You find all the places in the code that change a particular entity and insert a\ncall to an event publishing API. The proble m with this approach is that changing a\nmonolith isn\u2019t always easy. It might be time consuming and error prone to locate all\nthe places and insert calls to publish events. To make matters worse, some of the\nmonolith\u2019s business logic might consist of stored procedures that can\u2019t easily publish\ndomain events.\n Another approach is to publish domain ev ents at the database level. You can, for\nexample, use either transaction logic tailin g or polling, described in chapter 3. A key\nbenefit of using transaction tailing is that you don\u2019t have to change the monolith. The\nmain drawback of publishing events at the da tabase level is that it\u2019s often difficult to\nidentify the reason for the update and publish the appropriate high-level business\nevent. As a result, the service will typica lly publish events representing changes to\ntables rather than business entities.\n Fortunately, it\u2019s usually easier for the monolith to subscribe to domain events pub-\nlished as services. Quite often, you can wr ite event handlers using a framework, such\nas Eventuate Tram. But sometimes it\u2019s even challenging for the monolith to subscribe\nto events. For example, the monolith might be written in a language that doesn\u2019t have\na message broker client. In that situation, you need to write a sm all \u201chelper\u201d applica-\ntion that subscribes to events and updates the monolith\u2019s database directly.\n Now that we\u2019ve looked at how to design  the integration glue that enables a ser-\nvice and the monolith to collaborate, let\u2019 s look at another challenge you might face\nwhen migrating to microservices: maintain ing data consistency across a service and\na monolith. \n13.3.2 Maintaining data consistency across a service and a monolith\nWhen you develop a service, you might find it challenging to maintain data consis-\ntency across the service and the monolith. A service operation might need to update\ndata in the monolith, or a monolith operation might need to update data in the ser-\nvice. For example, imagine you extracted Kitchen Service from the monolith. You\nwould need to change the monolith\u2019s order-management operations, such as create-\nOrder() and cancelOrder(), to use sagas in order to keep the Ticket consistent with\nthe Order.\n The problem with using sagas, however, is that the monolith might not be a will-\ning participant. As described in chapter 4, sagas must use compensating transactions\nto undo changes. Create Order Saga, for example, includes a compensating transac-\ntion that marks an Order as rejected if it\u2019s rejected by Kitchen Service. The prob-\nlem with compensating transactions in the monolith is that you might need to make\nnumerous and time-consuming changes to the monolith in order to support them.\nThe monolith might also need to implement countermeasures to handle the lack of\nisolation between sagas. The cost of these code changes can be a huge obstacle to\nextracting a service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3086, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90b2dca1-2592-4623-a478-72f1cfc3c528": {"__data__": {"id_": "90b2dca1-2592-4623-a478-72f1cfc3c528", "embedding": null, "metadata": {"page_label": "450", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ab0136c-56a6-47f7-b4b1-55d7da1bad65", "node_type": "4", "metadata": {"page_label": "450", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e21ef2583af193b08cd17b40d055351d86a88835beefda2e58c1ee25782cbb07", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "450 CHAPTER 13 Refactoring to microservices\nFortunately, many sagas are straightforward to implement. As covered in chapter 4, if\nthe monolith\u2019s transactions are either pivot transactions  or retriable transactions , then\nimplementing sagas should be straightforw a r d .  Y o u  m a y  e v e n  b e  a b l e  t o  s i m p l i f y\nimplementation by carefully ordering the se quence of service extractions so that the\nmonolith\u2019s transactions never need to be compensatable. Or it may be relatively diffi-\ncult to change the monolith to support compensating transactions. To understand\nwhy implementing compensating transactions in the monolith is sometimes challeng-\ning, let\u2019s look at some examples, beginning with a particularly troublesome one.\nTHE CHALLENGE OF CHANGING THE MONOLITH TO SUPPORT COMPENSATABLE TRANSACTIONS\nLet\u2019s dig into the problem of compensating transactions that you\u2019ll need to solve when\nextracting Kitchen Service from the monolith. This refactoring involves splitting the\nOrder entity and creating a Ticket entity in Kitchen Service. It impacts numerous\ncommands implemented by the monolith, including createOrder().\n The monolith implements the createOrder() command as a single ACID transac-\ntion consisting of the following steps:\n1 Validate order details.\n2 Verify that the consumer can place an order.\n3 Authorize consumer\u2019s credit card.\n4 Create an Order.\nYou need to replace this ACID transaction with a saga consisting of the following steps:\n1 In the monolith\n\u2013 Create an Order in an APPROVAL_PENDING state.\n\u2013 Verify that the consumer can place an order.\nKey saga terminology\nI cover sagas in chapter 4. Here are some key terms:\n\uf0a1 Saga\u2014A sequence of local transactions  coordinated through asynchronous\nmessaging.\n\uf0a1 Compensating transaction\u2014A transaction that undoes the updates made by a\nlocal transaction.\n\uf0a1 Countermeasure \u2014A design technique used to handle the lack of isolation\nbetween sagas.\n\uf0a1 Semantic lock \u2014A countermeasure that sets a flag in a record that is being\nupdated by a saga.\n\uf0a1 Compensatable transaction\u2014A transaction that needs a compensating trans-\naction because one of the transactions that follows it in the saga can fail.\n\uf0a1 Pivot transaction \u2014A transaction that is the saga\u2019s go/no-go point. If it suc-\nceeds, then the saga will run to completion.\n\uf0a1 Retriable transaction\u2014A transaction that follows the pivot transaction and is\nguaranteed to succeed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2407, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e58e8865-299c-48e4-8ff2-3bc1650d98eb": {"__data__": {"id_": "e58e8865-299c-48e4-8ff2-3bc1650d98eb", "embedding": null, "metadata": {"page_label": "451", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d683b20-670d-4238-a9f3-28febd393585", "node_type": "4", "metadata": {"page_label": "451", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "3de16cca0cf1fedc17f86bbe1c2335b080995401d91554b6b6737110bdd0405a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "451Designing how the service and the monolith collaborate\n2 In the Kitchen Service\n\u2013 Validate order details.\n\u2013 Create a Ticket in the CREATE_PENDING state.\n3 In the monolith\n\u2013 Authorize consumer\u2019s credit card.\n\u2013 Change state of Order to APPROVED.\n4 In Kitchen Service\n\u2013 Change the state of the Ticket to AWAITING_ACCEPTANCE.\nThis saga is similar to CreateOrderSaga described in chapter 4. It consists of four local\ntransactions, two in the monolith and two in Kitchen Service. The first transaction\ncreates an Order in the APPROVAL_PENDING state. The second transaction creates a\nTicket in the CREATE_PENDING state. The third transaction authorizes the Consumer\ncredit card and changes the state of the order to APPROVED. The fourth and final trans-\naction changes the state of the Ticket to AWAITING_ACCEPTANCE.\n The challenge with implementing this saga is that the first step, which creates the\nOrder, must be compensatable. That\u2019s because the second local transaction, which\noccurs in Kitchen Service, might fail and require the monolith to undo the updates\nperformed by the first local transaction. As a result, the Order entity needs to have an\nAPPROVAL_PENDING, a semantic lock countermeasure , described in chapter 4, that\nindicates an Order is in the process of being created.\n The problem with introducing a new Order entity state is that it potentially requires\nwidespread changes to the monolith. You mi ght need to change every place in the\ncode that touches an Order entity. Making these kinds of widespread changes to the\nmonolith is time consuming and not the be st investment of development resources.\nIt\u2019s also potentially risky, because the monolith is often difficult to test. \nSAGAS DON\u2019T ALWAYS REQUIRE THE MONOLITH TO SUPPORT COMPENSATABLE TRANSACTIONS\nSagas are highly domain-specific. Some, such as the one we just looked at, require the\nmonolith to support compensating transactions. But it\u2019s quite possible that when you\nextract a service, you may be able to desi gn sagas that don\u2019t require the monolith to\nimplement compensating transactions. That\u2019s because a monolith only needs to sup-\nport compensating transactions if the transactions that follow the monolith\u2019s transac-\ntion can fail. If each of the monolith\u2019s tran sactions is either a pivot transaction or a\nretriable transaction, then the monolith never needs to execute a compensating trans-\naction. As a result, you only need to make  minimal changes to the monolith to sup-\nport sagas.\n For example, imagine that instead of extracting Kitchen Service, you extract Order\nService. This refactoring involves splitting the Order entity and creating a slimmed-\ndown Order entity in Order Service. It also impacts numerous commands, including\ncreateOrder(), which is moved from the monolith to Order Service. In order to\nextract Order Service, you need to change the createOrder() command to use a\nsaga, using the following steps:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2914, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9bed8450-f457-41fc-9d4b-e5a64d3a66fe": {"__data__": {"id_": "9bed8450-f457-41fc-9d4b-e5a64d3a66fe", "embedding": null, "metadata": {"page_label": "452", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "610e8761-1d00-4111-86c3-035b970331a1", "node_type": "4", "metadata": {"page_label": "452", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "96d6ebe07e3c5c1d305d4c35e40b42d036a097ff708c52c364f5f49c6bdc51c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "452 CHAPTER 13 Refactoring to microservices\n1 Order Service\n\u2013 Create an Order in an APPROVAL_PENDING state.\n2 Monolith\n\u2013 Verify that the consumer can place an order.\n\u2013 Validate order details and create a Ticket.\n\u2013 Authorize consumer\u2019s credit card.\n3 Order Service\n\u2013 Change state of Order to APPROVED.\nThis saga consists of three local tran sactions, one in the monolith and two in Order\nService. The first transaction, which is in Order Service, creates an Order in the\nAPPROVAL_PENDING state. The second transaction, which is in the monolith, verifies\nthat the consumer can place orders, auth orizes their credit card, and creates a\nTicket. The third transaction, which is in Order Service, changes the state of the\nOrder to APPROVED.\n The monolith\u2019s transaction is the saga\u2019s pivot transaction\u2014the point of no return\nfor the saga. If the monolith\u2019s transaction completes, then the saga will run until com-\npletion. Only the first and second steps of  this saga can fail. The third transaction\ncan\u2019t fail, so the second transaction in the monolith never needs to be rolled back. As\na result, all the complexity of support ing compensatable transactions is in Order\nService, which is much more testable than the monolith.\n If all the sagas that you need to write when extracting a service have this struc-\nture, you\u2019ll need to make far fewer changes to the monolith. What\u2019s more, it\u2019s possi-\nble to carefully sequence the extraction of  services to ensure that the monolith\u2019s\ntransactions are either pivot transactions or  retriable transactions. Let\u2019s look at how\nto do that. \nSEQUENCING THE EXTRACTION OF SERVICES TO AVOID IMPLEMENTING COMPENSATING TRANSACTIONS \nIN THE MONOLITH\nAs we just saw, extracting Kitchen Service requires the monolith to implement com-\npensating transactions, whereas extracting Order Service doesn\u2019t. This suggests that\nthe order in which you extract services matters. By carefully ordering the extraction of\nservices, you can potentially avoid having to make widespread modifications to the\nmonolith to support compensatable transact ions. We can ensure that the monolith\u2019s\ntransactions are either pivot transactions or  retriable transactions. For example, if we\nfirst extract Order Service from the FTGO monolith and then extract Consumer\nService, extracting Kitchen Service will be straightforward. Let\u2019s take a closer look\nat how to do that.\n Once we have extracted Consumer Service, the createOrder() command uses the\nfollowing saga:\n1 Order Service: create an Order in an APPROVAL_PENDING state.\n2 Consumer Service: verify that the consumer can place an order.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2596, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "265346ab-e0f8-44b9-9473-02bdc93c51dd": {"__data__": {"id_": "265346ab-e0f8-44b9-9473-02bdc93c51dd", "embedding": null, "metadata": {"page_label": "453", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61cfb685-b919-44bc-a70b-03ad8cede8ca", "node_type": "4", "metadata": {"page_label": "453", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "0e22bf7c95f91bfa93b24e8a5e393f4d9b9f78d63adf49e41be0c9c5deefd96f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "453Designing how the service and the monolith collaborate\n3 Monolith\n\u2013 Validate order details and create a Ticket.\n\u2013 Authorize consumer\u2019s credit card.\n4 Order Service: change state of Order to APPROVED.\nIn this saga, the monolith\u2019s transaction is the pivot transaction. Order Service imple-\nments the compensatable transaction.\n Now that we\u2019ve extracted Consumer Service, we can extract Kitchen Service. If we\nextract this service, the createOrder() command uses the following saga:\n1 Order Service: create an Order in an APPROVAL_PENDING state.\n2 Consumer Service: verify that the consumer can place an order.\n3 Kitchen Service: validate order details and create a PENDING Ticket.\n4 Monolith: authorize consumer\u2019s credit card.\n5 Kitchen Service: change state of Ticket to APPROVED.\n6 Order Service: change state of Order to APPROVED.\nIn this saga, the monolith\u2019s transaction is still the pivot transaction. Order Service and\nKitchen Service implement the compensatable transactions.\n We can even continue to refactor the monolith by extracting Accounting Service. If\nwe extract this service, the createOrder() command uses the following saga:\n1 Order Service: create an Order in an APPROVAL_PENDING state.\n2 Consumer Service: verify that the consumer can place an order.\n3 Kitchen Service: validate order details and create a PENDING Ticket.\n4 Accounting Service: authorize consumer\u2019s credit card.\n5 Kitchen Service: change state of Ticket to APPROVED.\n6 Order Service: change state of Order to APPROVED.\nAs you can see, by carefully sequencing the extractions, you can avoid using sagas that\nrequire making complex changes to the mo nolith. Let\u2019s now look at how to handle\nsecurity when migrating to a microservice architecture. \n13.3.3 Handling authentication and authorization\nAnother design issue you need to tackle when refactoring a monolithic application to\na microservice architecture is adapting the monolith\u2019s security mechanism to support\nthe services. Chapter 11 describes how to handle security in a microservice architec-\nture. A microservices-based application uses tokens, such as JSON Web tokens (JWT),\nto pass around user identity. That\u2019s quite different than a typical traditional, mono-\nlithic application that uses in-memory sessi on state and passes around the user iden-\ntity using a thread local. The challenge wh en transforming a monolithic application\nto a microservice architecture is that you need to support both the monolithic and\nJWT-based security mechanisms simultaneously.\n Fortunately, there\u2019s a straightforward way to solve this problem that only requires\nyou to make one small change to the mono lith\u2019s login request handler. Figure 13.13", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2677, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1092c4f-7937-42be-bf42-567000a0bf74": {"__data__": {"id_": "a1092c4f-7937-42be-bf42-567000a0bf74", "embedding": null, "metadata": {"page_label": "454", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d86c554b-9223-4162-b4b7-292af92f236b", "node_type": "4", "metadata": {"page_label": "454", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "7339e91d77c322edb46924c9a81c70c9278be0db6a12fe0e2c1b038f5b63014c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "454 CHAPTER 13 Refactoring to microservices\nshows how this works. The login handler returns an additional cookie, which in this\nexample I call USERINFO, that contains user information, such as the user ID and roles.\nThe browser includes that cookie in every request. The API gateway extracts the infor-\nmation from the cookie and includes it in the HTTP requests that it makes to a ser-\nvice. As a result, each service has access to the needed user information.\nThe sequence of events is as follows:\n1 The client makes a login request containing the user\u2019s credentials.\n2 API Gateway routes the login request to the FTGO monolith.\n3 The monolith returns a response containing the JSESSIONID session cookie\nand the USERINFO cookie, which contains the user information, such as ID\nand roles.\n4 The client makes a request, which includes the USERINFO cookie, in order to\ninvoke an operation.\n5 API Gateway validates the USERINFO cookie and includes it in the Authoriza-\ntion header of the request that it makes to the service. The service validates the\nUSERINFO token and extracts the user information.\nLet\u2019s look at LoginHandler and API Gateway in more detail.\nTHE MONOLITH\u2019S LOGINHANDLER SETS THE USERINFO COOKIE\nLoginHandler processes the POST of the user\u2019s credentials. It authenticates the user\nand stores information about the user in the session. It\u2019s often implemented by a\nFTGO Monolith\nOrder History Service\nPOST/login\nGET/orders\nAuthorization: TOKEN\n...\nHTTP/1.1 200 OK\nSet-cookie: JSESSIONID=...\nSet-cookie: USERINFO=TOKEN\n...\nGET/orders\nCookie: JSESSIONID=...\nCookie: USERINFO=TOKEN\n...\nBrowser-based\nSPA application\nLog in with user\nID and password.\nUser\ndatabase\nAPI\ngateway\nuserId: xxx\nroles:[a, b, c]\n...\nOrderHistory\nRequestHandler\nLogin\nhandler\nInitializes\nQuery\nPOST/login\nLog in with user\nID and password.\nReturn session cookie.\nProvide JWT.\nProvide session cookie.\nContains user information,\nsuch as ID and roles\nIn-memory\nsession\nFigure 13.13 The login handler is enhanced to set a USERINFO cookie, which is a JWT containing user \ninformation. API Gateway transfers the USERINFO cookie to an authorization header when it invokes a \nservice.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2160, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "792c7d96-ade5-406a-9ba0-ba46372d736b": {"__data__": {"id_": "792c7d96-ade5-406a-9ba0-ba46372d736b", "embedding": null, "metadata": {"page_label": "455", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "351a7438-6977-4b35-9d43-c9cbce8721ef", "node_type": "4", "metadata": {"page_label": "455", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "87ee502531fc17d9e6327f35bb1578041c85bbef29c78c2eadd7221a13d19de9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "455Implementing a new feature as a service: handling misdelivered orders\nsecurity framework, such as Spring Securi ty or Passport for NodeJS. If the applica-\ntion is configured to use the default in-memory session, the HTTP response sets a ses-\nsion cookie, such as JSESSIONID. In order to support the migration to microservices,\nLoginHandler must also set the USERINFO cookie containing the JWT that describes\nthe user. \nTHE API GATEWAY MAPS THE USERINFO COOKIE TO THE AUTHORIZATION HEADER\nThe API gateway, as described in chapter 8, is responsible for request routing and API\ncomposition. It handles each request by making one or more requests to the monolith\nand the services. When the API gateway invokes a service, it validates the USERINFO\ncookie and passes it to the se rvice in the HTTP request\u2019s Authorization header. By\nmapping the cookie to the Authorization header, the API gateway ensures that it\npasses the user identity to the service in a standard way that\u2019s independent of the type\nof client.\n Eventually, we\u2019ll most likely extract login and user management into services. But\nas you can see, by only making one small change to the monolith\u2019s login handler, it\u2019s\nnow possible for services to access user info rmation. This enables you focus on devel-\noping services that provide the greatest value to the business and delay extracting less\nvaluable services, such as user management.\n Now that we\u2019ve looked at how to handle  security when refactoring to microser-\nvices, let\u2019s see an example of implementing a new feature as a service. \n13.4 Implementing a new feature as a service: handling \nmisdelivered orders\nLet\u2019s say you\u2019ve been tasked with improving how FTGO handles misdelivered orders.\nA growing number of customers have b een complaining about how customer ser-\nvice handles orders not being delivered. The majority of orders are delivered on\ntime, but from time to time orders are eith er delivered late or not at all. For exam-\nple, the courier gets delayed by unexpected ly bad traffic, so the order is picked up\nand delivered late. Or perhaps by the time the courier arrives at the restaurant, it\u2019s\nclosed, and the delivery can\u2019t be made. To  make matters worse, the first time cus-\ntomer service hears about the misdelivery is  when they receive an angry email from\nan unhappy customer.\nA true story: My missing ice cream\nOne Saturday night I was feeling lazy an d placed an order using a well-known food\ndelivery app to have ice cream delivered from Smitten. It never showed up. The only\ncommunication from the company was an email the next morning saying my order had\nbeen canceled. I also got a voicemail from  a very confused customer service agent\nwho clearly didn\u2019t know what she was calling about. Perhaps the call was prompted\nby one of my tweets describing what happened. Clearly, the delivery company had not\nestablished any mechanisms for properly handling inevitable mistakes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2920, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2fb43ad-4318-4342-a277-0c0e694a4cff": {"__data__": {"id_": "c2fb43ad-4318-4342-a277-0c0e694a4cff", "embedding": null, "metadata": {"page_label": "456", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "88c832a7-06d8-4d47-9927-a6cc11109c1c", "node_type": "4", "metadata": {"page_label": "456", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "390573696de7c88f932280a97029110386ab2fe7b69db5fdcb580355732a700c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "456 CHAPTER 13 Refactoring to microservices\nThe root cause for many of these delivery problems is the primitive delivery schedul-\ning algorithm used by the FTGO application. A more sophisticated scheduler is under\ndevelopment but won\u2019t be finished for a few months. The interim solution is for\nFTGO to proactively handle delayed or ca nceled orders by apologizing to the cus-\ntomer, and in some cases offering compensation before the customer complains.\n Your job is to implement a new feature that will do the following:\n1 Notify the customer when their order won\u2019t be delivered on time.\n2 Notify the customer when their order can\u2019t be delivered because it can\u2019t be\npicked up before the restaurant closes.\n3 Notify customer service when an order ca n\u2019t be delivered on time so that they\ncan proactively rectify the situation by compensating the customer.\n4 Track delivery statistics.\nThis new feature is fairly simple. The new code must track the state of each Order, and\nif an Order can\u2019t be delivered as promised, the code must notify the customer and cus-\ntomer support, by, for example, sending an email.\n But how\u2014or perhap s more precisely, where\u2014should you implement this new fea-\nture? One approach is to implement a ne w module in the monolith. The problem\nthere is that developing and testing this code will be difficult. What\u2019s more, this\napproach increases the size of the monoli th and thereby makes monolith hell even\nworse. Remember the Law of Holes from earlier: when you\u2019re in a hole, it\u2019s best to stop\ndigging. Rather than make the monolith la rger, a much better approach is to imple-\nment these new features as a service.\n13.4.1 The design of Delayed Delivery Service\nWe\u2019ll implement this feature as a service called Delayed Order Service. Figure 13.14\nshows the FTGO application\u2019s architecture after implementing this service. The appli-\ncation consists of the FTGO monolith, the new Delayed Delivery Service, and an\nAPI Gateway. Delayed Delivery Service has an API that defines a single query opera-\ntion called getDelayedOrders(), which returns the currently delayed or undeliver-\nable orders. API Gateway routes the getDelayedOrders() request to the service and all\nother requests to the monolith. The integration glue provides Delayed Order Service\nwith access to the monolith\u2019s data.\n The Delayed Order Service\u2019s domain model consists of various entities, including\nDelayedOrderNotification, Order, and Restaurant. The core logic is implemented\nby the DelayedOrderService class. It\u2019s periodically invoked by a timer to find orders\nthat won\u2019t be delivered on time. It does that by querying Orders and Restaurants. If\nan Order can\u2019t be delivered on time, DelayedOrderService notifies the consumer and\ncustomer service.\n Delayed Order Service doesn\u2019t own the Order and Restaurant entities. Instead,\nthis data is replicated from the FTGO monolith. What\u2019s more, the service doesn\u2019t\nstore the customer contact information, but instead retrieves it from the monolith.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2986, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b708ac5d-9d55-4e29-bb95-9feff1c60dbe": {"__data__": {"id_": "b708ac5d-9d55-4e29-bb95-9feff1c60dbe", "embedding": null, "metadata": {"page_label": "457", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8828109d-af18-4733-84b5-0fbbdcdbd14e", "node_type": "4", "metadata": {"page_label": "457", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "36431f5961446049fc95e90639dbd55b841a85fe93c2312d11e625e0e68d7bec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "457Implementing a new feature as a service: handling misdelivered orders\nLet\u2019s look at the design of the integration glue that provides Delayed Order Service\naccess to the monolith\u2019s data. \n13.4.2 Designing the integration glue for Delayed Delivery Service\nEven though a service that implements a ne w feature defines its own entity classes, it\nusually accesses data that\u2019s owned by the monolith. Delayed Delivery Service is no\nexception. It has a DelayedOrderNotification entity, which represents a notification\nthat it has sent to the consumer. But as I just mentioned, its Order and Restaurant enti-\nties replicate data from the FTGO monolith. It also needs to query user contact infor-\nmation in order to notify the user. Conseq uently, we need to implement integration\nglue that enables Delivery Service to access the monolith\u2019s data.\n Figure 13.15 shows the design of the integration glue. The FTGO monolith pub-\nlishes Order and Restaurant domain events. Delivery Service consumes these events\nand updates its replicas of those entities . The FTGO monolith implements a REST\nMonolith\n???\nAPI gateway\nREST\nAPI\nIntegration\nglue\nDelayed\nOrder\nService\nGetDelayedOrders()\nREST\nAPI\nNoti\ufb01cation\nService\nCRM system\nCreate case.\nSend apology\nnoti\ufb01cation.\nNeed to design.\n???\n\u00abService\u00bb\nDelayedDelivery\nService\n\u00abstereotype\u00bb\nOrder\n\u00abentity\u00bb\nNoti\ufb01cation \u00abentity\u00bb\nRestaurant\n\u00abrepository\u00bb\nCustomer\nContactInfo\nRepository\n\u00abentity\u00bb\nOpeningHours\nFigure 13.14 The design of Delayed Delivery Service. The integration glue provides Delayed Delivery \nService access to data owned by the monolith, such as the Order and Restaurant entities, and the customer \ncontact information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1662, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf23cf7a-0121-4a8a-8b8e-7a267c8ea9b8": {"__data__": {"id_": "bf23cf7a-0121-4a8a-8b8e-7a267c8ea9b8", "embedding": null, "metadata": {"page_label": "458", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20ee968f-da2d-4018-a5b7-2ffe43387c9c", "node_type": "4", "metadata": {"page_label": "458", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "21e13a0d9a417da5203defb47cb760d670d4e9266247c6f3f89b6c1bfca64827", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "458 CHAPTER 13 Refactoring to microservices\nendpoint for querying the customer contact information. Delivery Service calls this\nendpoint when it needs to notify a user that their order cannot be delivered on time.\nLet\u2019s look at the design of each part of the integration, starting with the REST API for\nretrieving customer contact information.\nQUERYING CUSTOMER CONTACT INFORMATION USING CUSTOMERCONTACTINFOREPOSITORY\nAs described in section 13.3.1, there are a co uple of different ways that a service such\nas Delayed Delivery Service could read the monolith\u2019s data. The simplest option is\nfor Delayed Order Service to retrieve data using the monolith\u2019s query API. This\napproach makes sense when retrieving the User contact information. There aren\u2019t\nany latency or performance, issues because Delayed Delivery Service rarely needs to\nretrieve a user\u2019s contact information, and the amount of data is quite small.\n CustomerContactInfoRepository is an interface that enables Delayed Delivery\nService to retrieve a consumer\u2019s contact info. It\u2019s implemented by a Customer-\nContactInfoProxy, which retrieves the user information by invoking the monolith\u2019s\ngetCustomerContactInfo() REST endpoint. \nPUBLISHING AND CONSUMING ORDER AND RESTAURANT DOMAIN EVENTS\nUnfortunately, it isn\u2019t practical for Delayed Delivery Service to query the mono-\nlith for the state of all open Orders and Restaurant hours. That\u2019s because it\u2019s ineffi-\ncient to repeatedly transfer a large amount  of data over the network. Consequently,\nDelayed Delivery Service must use the second, more complex option and main-\ntain a replica of Orders and Restaurants by subscribing to events published by the\nmonolith. It\u2019s important to remember that the replica isn\u2019t a complete copy of the\ndata from the monolith\u2014it just stores a small subset of the attributes of Order and\nRestaurant entities.\nMonolith\nEvent\nsubscriber\nDelayed Order Service\nDomain\nevent\npublisher\nREST\nendpoint\nCustomer\nContactInfo\nProxy\n<Repository>\nCustomer\nContactInfo\nRepository\nRestaurant events\ngetCustomerContactInfo()\nOrder events\nRestaurant\nevents\nOrder\nevents\nFigure 13.15 The integration glue provides Delayed Delivery Service with access to the data owned by \nthe monolith.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2213, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4831cbed-675d-40f1-8cda-69191ba195b9": {"__data__": {"id_": "4831cbed-675d-40f1-8cda-69191ba195b9", "embedding": null, "metadata": {"page_label": "459", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4adb7ec9-e3a5-4365-9c45-84335d1d1bf9", "node_type": "4", "metadata": {"page_label": "459", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "24decbcbcfedb1c751ec3e1a2914729166331c3dd7978e7cc149991d9566ba40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "459Breaking apart the monolith: extracting delivery management\n As described earlier in section 13.3.1, th ere are a couple of different ways that we\ncan change the FTGO monolith so that it publishes Order and Restaurant domain\nevents. One option is to modify all the places in the monolith that update Orders and\nRestaurants to publish high-level domain events. The second option is to tail the\ntransaction log to replicate the changes as events. In this particular scenario, we need\nto synchronize the two databases. We do n\u2019t require the FTGO monolith to publish\nhigh-level domain events, so either approach is fine.\n Delayed Order Service implements event handlers th at subscribe to events from\nthe monolith and update its Order and Restaurant entities. The details of the event\nhandlers depend on whether the monolith publishes specific high-level events or low-\nlevel change events. In either case, you can think of an event handler as translating an\nevent in the monolith\u2019s bounded context to the update of an entity in the service\u2019s\nbounded context.\n An important benefit of using a replica is that it enables Delayed Order Service\nto efficiently query the orders and the restaurant opening hours. One drawback,\nhowever, is that it\u2019s more complex. Anothe r drawback is that it requires the mono-\nlith to publish the necessary Order and Restaurant events. Fortunately, because\nDelayed Delivery Service only needs what\u2019s essentiall y a subset of the columns of\nthe ORDERS and RESTAURANT tables, we shouldn\u2019t encounter the problems described\nin section 13.3.1.\n Implementing a new feature such as de layed order management as a standalone\nservice accelerates its development, testing, and deployment. What\u2019s more, it enables\nyou to implement the feature using a bran d new technology stack instead of the\nmonolith\u2019s older one. It also stops the monolith from growing. Delayed order man-\nagement is just one of many new features planned for the FTGO application. The\nFTGO team can implement many of these features as separate services.\n Unfortunately, you can\u2019t implement all changes as new services. Quite often you\nmust make extensive changes to the monolith to implement new features or change\nexisting features. Any development involving the monolith will mostly likely be slow\nand painful. If you want to accelerate the delivery of these features, you must break up\nthe monolith by migrating functionality from the monolith into services. Let\u2019s look at\nhow to do that. \n13.5 Breaking apart the monolith: extracting delivery \nmanagement\nTo accelerate the delivery of features th at are implemented by a monolith, you need\nto break up the monolith into services. For example, let\u2019s imagine that you want to\nenhance FTGO delivery management by im plementing a new routing algorithm. A\nmajor obstacle to developing delivery mana gement is that it\u2019s entangled with order\nmanagement and is part of the monolithic code base. Developing, testing, and deploy-\ning delivery management is likely to be sl ow. In order to accelerate its development,\nyou need to extract delivery management into a Delivery Service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3112, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "66ef0fcd-9991-4c7b-8dfb-14f42a1b0e65": {"__data__": {"id_": "66ef0fcd-9991-4c7b-8dfb-14f42a1b0e65", "embedding": null, "metadata": {"page_label": "460", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbc02846-0685-45d1-b076-880992c9aaf3", "node_type": "4", "metadata": {"page_label": "460", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "46e731a2db7b3a0dfbd448e044f5544804dd70a554f30172c7430fb73100503e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "460 CHAPTER 13 Refactoring to microservices\n I start this section by describing deli very management and how it\u2019s currently\nembedded within the monolith. Next I discuss the design of the new, standalone\nDelivery Service and its API. I then describe how Delivery Service and the FTGO\nmonolith collaborate. Finally I talk about some of the changes we need to make to the\nmonolith to support Delivery Service.\n Let\u2019s begin by reviewing the existing design.\n13.5.1 Overview of existing delivery management functionality\nDelivery management is responsible for scheduling the couriers that pick up orders at\nrestaurants and deliver them to consumers. Each courier has a plan that is a schedule\nof pickup and deliver actions. A pickup action tells the Courier to pick up an order\nfrom a restaurant at a particular time. A deliver action tells the Courier to deliver an\norder to a consumer. The plans are revised whenever orders are placed, canceled, or\nrevised, and as the location and availability of couriers changes.\n Delivery management is one of the oldest  parts of the FTGO application. As fig-\nure 13.16 shows, it\u2019s embedded within order management. Much of the code for man-\naging deliveries is in OrderService. What\u2019s more, there\u2019s no explicit representation of\na Delivery. It\u2019s embedded within the Order entity, which has various delivery-related\nfields, such as scheduledPickupTime and scheduledDeliveryTime.\n Numerous commands implemented by th e monolith invoke delivery manage-\nment, including the following:\n\uf0a1 acceptOrder()\u2014Invoked when a restaurant accepts an order and commits to\npreparing it by a certain time. This operation invokes delivery management to\nschedule a delivery.\n\uf0a1 cancelOrder()\u2014Invoked when a consumer canc els an order. If necessary, it\ncancels the delivery.\n\uf0a1 noteCourierLocationUpdated()\u2014Invoked by the courier\u2019s mobile application\nto update the courier\u2019s location. It triggers the rescheduling of deliveries.\n\uf0a1 noteCourierAvailabilityChanged()\u2014Invoked by the courier\u2019s mobile applica-\ntion to update the courier\u2019s availability. It triggers the rescheduling of deliveries.\nAlso, various queries retrieve data maintained by delivery management, including the\nfollowing:\n\uf0a1 getCourierPlan()\u2014Invoked by the courier\u2019s mobile application and returns\nthe courier\u2019s plan\n\uf0a1 getOrderStatus()\u2014Returns the order\u2019s status, which includes delivery-related\ninformation such as the assigned courier and the ETA\n\uf0a1 getOrderHistory()\u2014Returns similar information as getOrderStatus() except\nabout multiple orders\nQuite often what\u2019s extracted into a service is, as mentioned in section 13.2.3, an entire\nvertical slice, with controllers at the top and database tables at the bottom. We could", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2700, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7235596a-a8c3-43b5-b19a-e854988832dd": {"__data__": {"id_": "7235596a-a8c3-43b5-b19a-e854988832dd", "embedding": null, "metadata": {"page_label": "461", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e8b173d-b254-48ef-b105-c7856ccb139e", "node_type": "4", "metadata": {"page_label": "461", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "438e842fca757046b46b4eebcf634deef8d25335cbab7e4a9a3d1abff27fbe48", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "461Breaking apart the monolith: extracting delivery management\nconsider the Courier-related commands and queries to  be part of delivery manage-\nment. After all, delivery management creates the courier plans and is the primary con-\nsumer of the Courier location and availability information. But in order to minimize\nthe development effort, we\u2019ll leave those operations in the monolith and just extract\nthe core of the algorithm. Consequently, the first iteration of Delivery Service won\u2019t\nexpose a publicly accessible API. Instead, it will only be invoked by the monolith.\nNext, let\u2019s explore the design of Delivery Service. \nAPI\nFTGO monolith\n\u00abService\u00bb\nOrderService\n\u00abService\u00bb\nCourierService\n...\n\u00abdelivery management\u00bb\nscheduleDelivery()\nrescheduleDelivery()\ncancelDelivery()\nreviseSchedule()\n...\nacceptOrder()\ncancelOrder()\ngetOrderStatus()\ngetOrderHistory()\nupdateCourierLocation()\nupdateCourierAvailability()\ngetCourierPlan()\nOrder operations: Courier operations:\n\u00abentity\u00bb\nCourier\n\u00abvalue object\u00bb\nPlan\n\u00abentity\u00bb\nOrder\n\u00abentity\u00bb\nRestaurant \u00abvalue object\u00bb\nAction\n\u00abvalue object\u00bb\nDropoff\n\u00abvalue object\u00bb\nPickup\nFigure 13.16 Delivery management is entangled wit h order management within the FTGO monolith.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1200, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c89d7bb9-862e-4798-85c7-53b94e8d9285": {"__data__": {"id_": "c89d7bb9-862e-4798-85c7-53b94e8d9285", "embedding": null, "metadata": {"page_label": "462", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "98e90777-563a-4e3d-bd31-841bb3c31e20", "node_type": "4", "metadata": {"page_label": "462", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "80bae0fbea572329525e47dc147e728bba18ce23304c0ed4c1ec02dd90de5dda", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "462 CHAPTER 13 Refactoring to microservices\n13.5.2 Overview of Delivery Service\nThe proposed new Delivery Service is responsible for scheduling, rescheduling, and\ncanceling deliveries. Figure 13.17 shows a hi gh-level view of the architecture of the\nFTGO application after extracting Delivery Service. The architecture consists of\nthe FTGO monolith and Delivery Service. They collaborate using the integration\nglue, which consists of APIs in both the service and monolith. Delivery Service has\nits own domain model and database.\nIn order to flesh out this architecture an d determine the service\u2019s domain model, we\nneed to answer the following questions:\n\uf0a1 Which behavior and data are moved to Delivery Service?\n\uf0a1 What API does Delivery Service expose to the monolith?\n\uf0a1 What API does the monolith expose to Delivery Service?\nThese issues are interrelated because the dist ribution of responsibilities between the\nmonolith and the service affects the APIs. For instance, Delivery Service will need to\ninvoke an API provided by the monolith to access the data in the monolith\u2019s data-\nbase and vice versa. Later, I\u2019ll describe the design of the integration glue that enables\nMonolith\ndomain model\nIntegration glue\nWhat API does the Delivery Service\nexpose to the monolith?\nDelivery Service\ndomain model\nFTGO Monolith Delivery Service\nDelivery\nService\ndatabase\nMonolith\ndatabase\nAdapterAdapter\nWhat API does the monolith\nexpose to the Delivery Service?\nWhich behavior and\ndata is moved to the\nDelivery Service?\nFigure 13.17 The high-level view of the FTGO application after extracting Delivery Service. The FTGO \nmonolith and Delivery Service collaborate using the integration glue, which consists of APIs in each of them. \nThe two key decisions that need to be made are which functionality and data are moved to Delivery Service \nand how do the monolith and Delivery Service collaborate via APIs?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1894, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6263aa9-2988-48ba-9eb3-73bbe00f9db9": {"__data__": {"id_": "a6263aa9-2988-48ba-9eb3-73bbe00f9db9", "embedding": null, "metadata": {"page_label": "463", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d03b90c-f7c8-4cf6-a91f-244de49fd37b", "node_type": "4", "metadata": {"page_label": "463", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "900dff1a945da0755fa2f29d59283f40b9f872112fbfb1834cf8bf7bc3ddd34b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "463Breaking apart the monolith: extracting delivery management\nDelivery Service and the FTGO monolith to collabor ate. But first, let\u2019s look at the\ndesign of Delivery Service\u2019s domain model. \n13.5.3 Designing the Delivery Service domain model\nTo be able to extract delivery management, we first need to identify the classes that\nimplement it. Once we\u2019ve done that, we can decide which classes to move to Delivery\nService to form its domain logic. In some cases, we\u2019ll need to split classes. We\u2019ll\nalso need to decide which data to repl icate between the service and the monolith.\n Let\u2019s start by identifying the classes that implement delivery management.\nIDENTIFYING WHICH ENTITIES AND THEIR FIELDS ARE PART OF DELIVERY MANAGEMENT\nThe first step in the process of designing Delivery Service is to carefully review the\ndelivery management code and identify the participating entities and their fields. Fig-\nure 13.18 shows the entities and fields that are part of delivery management. Some\nfields are inputs to the delivery-scheduling algorithm, and others are the outputs. The\nfigure shows which of those fields are also used by other functionality implemented by\nthe monolith.\nThe delivery scheduling algorithm reads various attributes including the Order\u2019s\nrestaurant, promisedDeliveryTime, and deliveryAddress, and the Courier\u2019s location,\navailability, and current plans. It updates the Courier\u2019s plans, the Order\u2019s scheduled-\nPickupTime, and scheduledDeliveryTime. As you can see, the fields used by delivery\nmanagement are also used by the monolith. \nOrder\n\u00abMonolith Read/Write\u00bb\n\u00abService Read\u00bb\nstate\ndeliveryAddress\npromisedDeliveryTime\npreparedByTime\n\u00abService Read/Write\u00bb\n\u00abMonolith Read\u00bb\nscheduledPickupTime\nscheduledDeliveryTime\nRestaurant\n\u00abRead\u00bb\naddress\nCourier\n\u00abMonolith Read/Write\u00bb\n\u00abService Read\u00bb\nLocation\navailability\n\u00abService Read/Write\u00bb\n\u00abMonolith Read\u00bb\nPlan\nTask\nFigure 13.18 The entities and fields th at are accessed by delivery management \nand other functionality implemented by the monolith. A field can be read or written \nor both. It can be accessed by delivery management, the monolith, or both.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2116, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b642531-35c4-465a-9e09-89f35333ebee": {"__data__": {"id_": "4b642531-35c4-465a-9e09-89f35333ebee", "embedding": null, "metadata": {"page_label": "464", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b1d9adb-402a-460f-b02f-4ab0452c03f3", "node_type": "4", "metadata": {"page_label": "464", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "c45a963f859d1d67b4137e8812f8efb1bd34d8b60321c02d53bfb7fd0764d0a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "464 CHAPTER 13 Refactoring to microservices\nDECIDING WHICH DATA TO MIGRATE TO DELIVERY SERVICE\nNow that we\u2019ve identified which entities an d fields participate in delivery manage-\nment, the next step is to decide which of them we should move to the service. In an\nideal scenario, the data accessed by the service is used exclusively by the service, so we\ncould simply move that data to the service and be done. Sadly, it\u2019s rarely that simple,\nand this situation is no exception. All the entities and fields used by the delivery man-\nagement are also used by other functionality implemented by the monolith.\n As a result, when determining which data to move to the service, we need to keep\nin mind two issues. The first is: how does the service access the data that remains in\nthe monolith? The second is: how does the monolith access data that\u2019s moved to the\nservice? Also, as described earlier in section 13.3, we need to carefully consider how to\nmaintain data consistency between the service and the monolith.\n The essential responsibility of Delivery Service is managing courier plans and\nupdating the Order\u2019s scheduledPickupTime and scheduledDeliveryTime fields. It\nmakes sense, therefore, for it to own those fields. We could also move the Cou-\nrier.location and Courier.availability fields to Delivery Service. But because\nwe\u2019re trying to make the smallest possible change, we\u2019ll leave those fields in the mono-\nlith for now. \nTHE DESIGN OF THE DELIVERY SERVICE DOMAIN LOGIC\nFigure 13.19 shows the design of the Delivery Service\u2019s domain model. The core of\nthe service consists of domain classes such as Delivery and Courier. The Delivery-\nServiceImpl class is the entry point into the de livery management business logic. It\nimplements the DeliveryService and CourierService interfaces, which are invoked\nby DeliveryServiceEventsHandler and DeliveryServiceNotificationsHandlers,\ndescribed later in this section.\n The delivery management business logic is mostly code copied from the monolith.\nFor example, we\u2019ll copy the Order entity from the monolith to Delivery Service,\nrename it to Delivery, and delete all fields except those used by delivery manage-\nment. We\u2019ll also copy the Courier entity and delete most of its fields. In order to\ndevelop the domain logic for Delivery Service, we will need to untangle the code\nfrom the monolith. We\u2019ll need to break numerous dependencies, which is likely to be\ntime consuming. Once again, it\u2019s a lot easi er to refactor code when using a statically\ntyped language, because the compiler will be your friend.\n Delivery Service is not a standalone service. Let\u2019s look at the design of the inte-\ngration glue that enables Delivery Service and the FTGO monolith to collaborate.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2724, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "952db052-77ec-40d2-8e9e-b9bbb6d79379": {"__data__": {"id_": "952db052-77ec-40d2-8e9e-b9bbb6d79379", "embedding": null, "metadata": {"page_label": "465", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ce13e7d-8f9b-41fd-98ea-eb85f56538e5", "node_type": "4", "metadata": {"page_label": "465", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "064555c5f158ddbfda3985d0cd2f8d9fca98af8bda0acdaf02d1afc33636504e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "465Breaking apart the monolith: extracting delivery management\n13.5.4 The design of the Delivery Service integration glue\nThe FTGO monolith needs to invoke Delivery Service t o m a n a g e d e li v er i es .  T h e\nmonolith also needs to exchange data with Delivery Service. This collaboration is\nenabled by the integration glue. Figu re 13.20 shows the design of the Delivery Ser-\nvice integration glue. Delivery Service has a delivery management API. It also pub-\nlishes Delivery and Courier domain events. The FTGO monolith publishes Courier\ndomain events.\n Let\u2019s look at the design of each part of the integration glue, starting with Delivery\nService\u2019s API for managing deliveries.\nTHE DESIGN OF THE DELIVERY SERVICE API\nDelivery Service must provide an API that enables the monolith to schedule, revise,\nand cancel deliveries. As you\u2019ve seen throughout this book, the preferred approach is\nto use asynchronous messaging, because it  promotes loose coupling and increases\navailability. One approach is for Delivery Service to subscribe to Order domain\nevents published by the monolith. Dependin g on the type of the event, it creates,\nDelivery Service\nDeliveryServiceImpl\n\u00abinterface\u00bb\nDeliveryService\nvoid schedule(...)\nvoid reschedule(...)\nvoid cancel(...)\n\u00abinterface\u00bb\nCourierService\nnoteCourierLocationUpdated(...)\nnoteCourierAvailabilityUpdated(...) \u00abentity\u00bb\nCourier\u00abentity\u00bb\nDelivery\n\u00abvalue object\u00bb\nPlanDeliveryService\nEventsHandlers\nDeliveryService\nNoti\ufb01cationHandlers\nFigure 13.19 The design of the Delivery Service's domain model", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1538, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54bcdb0b-b74f-4235-87ee-0c993a696130": {"__data__": {"id_": "54bcdb0b-b74f-4235-87ee-0c993a696130", "embedding": null, "metadata": {"page_label": "466", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "087a45d7-3b79-426a-8a4e-daebd2421271", "node_type": "4", "metadata": {"page_label": "466", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "960fb28e2afb28bcbbc7f7f45cf08cd96eddb25e449e8dd15a50608510711aa3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "466 CHAPTER 13 Refactoring to microservices\nrevises, and cancels a Delivery. A benefit of this approach is that the monolith doesn\u2019t\nneed to explicitly invoke Delivery Service. The drawback of relying on domain events\nis that it requires Delivery Service to know how each Order event impacts the corre-\nsponding Delivery.\n A better approach is for Delivery Service to implement a notification-based API\nthat enables the monolith to explicitly tell Delivery Service to create, revise, and\ncancel deliveries. Delivery Service\u2019s API consists of a message notification channel\nand three message types: ScheduleDelivery, ReviseDelivery, or CancelDelivery. A\nnotification message contains Order information needed by Delivery Service. For\nexample, a ScheduleDelivery notification contains the pickup time and location and\nthe delivery time and location. An important benefit of this approach is that Delivery\nService doesn\u2019t have detailed knowledge of the Order lifecycle. It\u2019s entirely focused\non managing deliveries and has no knowledge of orders.\n This API isn\u2019t the only way that Delivery Service and the FTGO monolith collab-\norate. They also need to exchange data. \nHOW THE DELIVERY SERVICE ACCESSES THE FTGO MONOLITH\u2019S DATA\nDelivery Service needs to access the Courier location and availability data, which is\nowned by the monolith. Because that\u2019s potentially a large amount of data, it\u2019s not practi-\ncal for the service to repeatedly query the monolith. Instead, a better approach is for the\nmonolith to replicate the data to Delivery Service by publishing Courier domain\nevents, CourierLocationUpdated and CourierAvailabilityUpdated. Delivery Service\nhas a CourierEventSubscriber that subscribes to the do main events and updates its\nversion of the Courier. It might also trigger the rescheduling of deliveries. \nDelivery\nService\nFTGO\nmonolith\nCourier events\nCourier events\nDelivery events\nDelivery Service\nnoti\ufb01cations\nDelivery events\nCourier events\nCourier\nevent\nsubscriber\nDelivery\nevent\nsubscriber\nDelivery\nService\nproxy\nMessaging\nadapter\nMessaging\nadapter\nDelivery\nService\nnoti\ufb01cations\nhandlers\n\u00abinterface\u00bb\nDeliveryService\u00abinterface\u00bb\nDeliveryService\n\u00abinterface\u00bb\nCourierService\nFigure 13.20 The design of the Delivery Service integration glue. Delivery Service has a delivery \nmanagement API. The service and the FTGO monolith synchronize data by exchanging domain events.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2379, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01ed84a6-05fa-405d-961c-21b9179ee579": {"__data__": {"id_": "01ed84a6-05fa-405d-961c-21b9179ee579", "embedding": null, "metadata": {"page_label": "467", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c8f1ca2-429d-4174-afd8-4ac4915ae494", "node_type": "4", "metadata": {"page_label": "467", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "ba7da0e9d1d15dc51f494f9009a891c55848f464728dca8657bafbe821e4c25a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "467Breaking apart the monolith: extracting delivery management\nHOW THE FTGO MONOLITH ACCESSES THE DELIVERY SERVICE DATA\nThe FTGO monolith needs to read the data that\u2019s been moved to Delivery Service,\nsuch as the Courier plans. In theory, the monolith could query the service, but that\nrequires extensive changes to the monolith. For the time being, it\u2019s easier to leave the\nmonolith\u2019s domain model and database schema unchanged and replicate data from\nthe service back to the monolith.\n The easiest way to accomplish that is for Delivery Service to publish Courier and\nDelivery domain events. The service publishes a CourierPlanUpdated event when it\nupdates a Courier\u2019s plan, and a DeliveryScheduleUpdate event when it updates a\nDelivery. The monolith consumes these domain events and updates its database.\n Now that we\u2019ve looked at how the FTGO monolith and Delivery Service interact,\nlet\u2019s see how to change the monolith. \n13.5.5 Changing the FTGO monolith to interact with Delivery Service\nIn many ways, implementing Delivery Service is the easier part of the extraction\nprocess. Modifying the FTGO monolith is much  more difficult. Fortunately, replicat-\ning data from the service back to the monolith reduces the size of the change. But we\nstill need to change the monolith to manage deliveries by invoking Delivery Service.\nLet\u2019s look at how to do that.\nDEFINING A DELIVERYSERVICE INTERFACE\nThe first step is to encapsulate the delive ry management code with a Java interface\ncorresponding to the messaging-based API defined earlier. This interface, shown in\nfigure 13.21, defines methods for schedulin g, rescheduling, and canceling deliveries.\n\u00abinterface\u00bb\nDeliveryService\nDeliveryServiceImpl\nvoid schedule(...)\nvoid reschedule(...)\nvoid cancel(...)\nDelivery\nmanagement\nDelivery\nmanagement\nclient\nFigure 13.21 The first step is to define DeliveryService, which \nis a coarse-grained, remotable API for invoking the delivery \nmanagement logic.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1948, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "37d7bb2f-8066-4994-b5bb-8414f969891c": {"__data__": {"id_": "37d7bb2f-8066-4994-b5bb-8414f969891c", "embedding": null, "metadata": {"page_label": "468", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "92e6de4c-b1f7-4e5e-a559-5ac0f4fa3ca0", "node_type": "4", "metadata": {"page_label": "468", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "83eae96d233d7651572aab4af7c7d7c7368b50d611da7d25faf3892bc218e4ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "468 CHAPTER 13 Refactoring to microservices\nEventually, we\u2019ll implement this interface with a proxy that sends messages to the\ndelivery service. But initially, we\u2019ll implement this API with a class that calls the deliv-\nery management code.\n The DeliveryService interface is a coarse-grained interface that\u2019s well suited to\nbeing implemented by an IPC mechanism. It defines schedule(), reschedule(), and\ncancel() methods, which correspond to the notification message types defined earlier. \nREFACTORING THE MONOLITH TO CALL THE DELIVERYSERVICE INTERFACE\nNext, as figure 13.22 shows, we need to id entify all the places in the FTGO monolith\nthat invoke delivery management and change them to use the DeliveryService inter-\nface. This may take some time and is one of the most challenging aspects of extracting\na service from the monolith.\nIt certainly helps if the monolith is written in a statically typed language, such as Java,\nbecause the tools do a better job of identify ing dependencies. If not, then hopefully\nyou have some automated tests with sufficie nt coverage of the parts of the code that\nneed to be changed. \nIMPLEMENTING THE DELIVERYSERVICE INTERFACE\nThe final step is to replace the DeliveryServiceImpl class with a proxy that sends\nnotification messages to the standalone Delivery Service. But rather than discard\nthe existing implementation right away, we\u2019ll use a design, shown in figure 13.23, that\nenables the monolith to dynamically switch between the existing implementation and\nDelivery Service. We\u2019ll implement the DeliveryService interface with a class that\nuses a dynamic feature toggle to determine whether to invoke the existing implemen-\ntation or Delivery Service.\n\u00abinterface\u00bb\nDeliveryService\nDeliveryServiceImpl\nvoid schedule(...)\nvoid reschedule(...)\nvoid cancel(...)\nDelivery\nmanagement\nDelivery\nmanagement\nclient\nFigure 13.22 The second step is to change the FTGO monolith to \ninvoke delivery management via the DeliveryService interface.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1974, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6a9ebdef-b63a-4d70-a798-bc87f21f4a9b": {"__data__": {"id_": "6a9ebdef-b63a-4d70-a798-bc87f21f4a9b", "embedding": null, "metadata": {"page_label": "469", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "faf50b3c-76d6-4fa0-a38f-7bd84b8f9859", "node_type": "4", "metadata": {"page_label": "469", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "a192d09f58b3a24700ecbbfb75f83098a4aa5fe696048c23d33192308d96daaf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "469Breaking apart the monolith: extracting delivery management\nUsing a feature toggle significantly reduces the risk of rolling out Delivery Service. We\ncan deploy Delivery Service and test it. And then, once we\u2019re sure it works, we can flip\nthe toggle to route traffic to it. If we then discover that Delivery Service isn\u2019t working\nas expected, we can switch back to the old implementation.\nOnce we\u2019re sure that Delivery Service is working as expected, we can then remove\nthe delivery management code from the monolith.\n Delivery Service and Delayed Order Service are examples of the services that\nthe FTGO team will develop during their journey to the microservice architecture.\nWhere they go next after implementing these services depends on the priorities of the\nbusiness. One possible path is to extract Order History Service, described in chap-\nter 7. Extracting this service partially eliminates the need for Delivery Service to\nreplicate data back to the monolith.\nAbout feature toggles\nFeature toggles , or feature flags , let you deploy code changes without necessarily\nreleasing them to users. They also  enable you to dynamically change the behavior\nof the application by deploying new code. This article by Martin Fowler provides an\nexcellent overview of the topic: https://martinfowler.com/articles/feature-toggles\n.html.\n\u00abinterface\u00bb\nDeliveryService\nvoid schedule(...)\nvoid reschedule(...)\nvoid cancel(...)\nFeatureToggleBased\nDeliveryServiceImpl\nDeliveryServiceImpl\nDeliveryServiceProxy\nDelivery\nmanagement\nInvokes\nInvokes\nSends\nmessage\nDelivery\nmanagement\nclient\nDelivery noti\ufb01cations\nFigure 13.23 The final step is to implement DeliveryService with a proxy class that sends \nmessages Delivery Service. A feature toggle controls whether the FTGO monolith uses the old \nimplementation or the new Delivery Service.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1827, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f2d41ae-d01e-4f84-a6e4-ba27f0730580": {"__data__": {"id_": "6f2d41ae-d01e-4f84-a6e4-ba27f0730580", "embedding": null, "metadata": {"page_label": "470", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8896a29-9f67-4b72-9f1c-04b54179c16e", "node_type": "4", "metadata": {"page_label": "470", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "2d992dac00204b7a633fec9a95e4c17efde7e0d882a20f597cec929cd4a37a14", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "470 CHAPTER 13 Refactoring to microservices\n After implementing Order History Service, the FTGO team can then extract the\nservices in the order described in section 13.3.2: Order Service, Consumer Service,\nKitchen Service, and so on. As the FTGO team extracts each service, the maintain-\nability and testability of their applicatio n gradually improves, and their development\nvelocity increases. \nSummary\n\uf0a1 Before migrating to a microservice archit ecture, it\u2019s important to be sure that\nyour software delivery problems are a re sult of having outgrown your mono-\nlithic architecture. You might be able to  accelerate delivery by improving your\nsoftware development process.\n\uf0a1 It\u2019s important to migrate to microservices by incrementally developing a stran-\ngler application. A strangler applicat ion is a new application consisting of\nmicroservices that you build around the existing monolithic application. You\nshould demonstrate value early and often in order to ensure that the business\nsupports the migration effort.\n\uf0a1 A great way to introduce microservices in to your architecture is to implement\nnew features as services. Doing so enab les you to quickly and easily develop a\nfeature using a modern technology and development process. It\u2019s a good way to\nquickly demonstrate the value of migrating to microservices.\n\uf0a1 One way to break up the monolith is to separate the presentation tier from the\nbackend, which results in two smaller monoliths. Although it\u2019s not a huge\nimprovement, it does mean that you can deploy each monolith independently.\nThis allows, for example, the UI team to iterate more easily on the UI design\nwithout impacting the backend.\n\uf0a1 The main way to break up the monolith is by incrementally migrating function-\nality from the monolith into services. It\u2019s important to focus on extracting the\nservices that provide the most benefit.  For example, you\u2019ll accelerate develop-\nment if you extract a service that implem ents functionality that\u2019s being actively\ndeveloped.\n\uf0a1 Newly developed services almost always have to interact with the monolith. A\nservice often needs to access a monolith\u2019s data and invoke its functionality. The\nmonolith sometimes needs to access a service\u2019s data and invoke its functionality.\nTo implement this collaboration, develo p integration glue, which consists of\ninbound and outbound adapters in the monolith.\n\uf0a1 To prevent the monolith\u2019s domain model from polluting the service\u2019s domain\nmodel, the integration glue should use an anti-corruption layer, which is a layer\nof software that translates between domain models.\n\uf0a1 One way to minimize the impact on the monolith of extracting a service is to\nreplicate the data that was moved to th e service back to the monolith\u2019s data-\nbase. Because the monolith\u2019s schema is left unchanged, this eliminates the\nneed to make potentially widespread changes to the monolith code base.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2877, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "889440d5-a5a6-48e4-a48f-ed450d7f3b40": {"__data__": {"id_": "889440d5-a5a6-48e4-a48f-ed450d7f3b40", "embedding": null, "metadata": {"page_label": "471", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca4955ce-ca9e-4f89-8fca-0abf48d6d3c6", "node_type": "4", "metadata": {"page_label": "471", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "721e3042b240680dadd6f5fa106945b57282b7870f81f6f35a434dd0b60447fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "471Summary\n\uf0a1 Developing a service often requires yo u to implement sagas that involve the\nmonolith. But it can be challenging to implement a compensatable transaction\nthat requires making widespread changes to the monolith. Consequently, you\nsometimes need to carefully sequence the extraction of services to avoid imple-\nmenting compensatable transactions in the monolith.\n\uf0a1 When refactoring to a microservice architecture, you need to simultaneously\nsupport the monolithic application\u2019s existing security mechanism, which is often\nbased on an in-memory session, and the token-based security mechanism used\nby the services. Fortunately, a simple solution is to modify the monolith\u2019s login\nhandler to generate a cookie containing  a  s e c u r i t y  t o k e n ,  w h i c h  i s  t h e n  f o r -\nwarded to the services by the API gateway.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 839, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c33c98f9-2c1f-4c89-ac03-640c737997d9": {"__data__": {"id_": "c33c98f9-2c1f-4c89-ac03-640c737997d9", "embedding": null, "metadata": {"page_label": "473", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5a2fa32-172a-4ca2-bd0a-497147bc8f10", "node_type": "4", "metadata": {"page_label": "473", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d2b30c7e8925196dd48b89ac6460b404bd47b78a21fd345e8d6e1eb49692e192", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "473\nindex\nNumerics\n2PC (two-phase commit) 112\n3rd party registration pattern 84\u201385, 108\n4+1 view model of software architecture 35\u201337\n500 status code, HTTP 367\nA\nAbstractAutowiringHttpRequestHandler class 423\nAbstractHttpHandler class 423\naccept() method 165, 172\nacceptance tests 335\u2013338\ndefining 336\nexecuting specifications using Cucumber 338\nwriting using Gherkin 337\u2013338\nacceptOrder() method 460\nAccess Token 28, 354, 357\nACD (Atomicity, Consistency, Durability) 111\nACID (Atomicity, Consistency, Isolation, Dur-\nability) transactions 98, 110\nACLs (access control lists) 350\nActiveMQ message broker 92\nadd() method 310\naddOrder() method 249\u2013250\nAggregateRepository class 206\u2013208\naggregates 147, 374, 439\nconsistency boundaries 155\ncreating, finding, and updating 207\u2013208\ndefining aggregate commands 207\ndefining with ReflectiveMutableCommand-\nProcessingAggregate class 206\u2013207\ndesigning business logic with 159\u2013160\nevent sourcing\naggregate history 186, 199\u2013200\naggregate methods and events 189\u2013191\nevent sourcing-based Order aggregate\n191\u2013193\npersisting aggregates using events 186\u2013188\nevent sourcing and aggregate history 199\u2013200\nexplicit boundaries 154\u2013155\ngranularity 158\nidentifying 155\nOrder aggregate 175\u2013180\nmethods 177\u2013180\nstate machine 176\u2013177\nstructure of 175\u2013176\nrules for 155\u2013157\nTicket aggregate 169\u2013173\nbehavior of 170\u2013171\nKitchenService domain service 171\u2013172\nKitchenServiceCommandHandler class\n172\u2013173\nstructure of Ticket class 170\ntraditional persistence and aggregate \nhistory 186\naliases 285\nAlternative pattern 22\nAMI (Amazon Machine Image) 390\nanomalies 126\nAnti-corruption layer pattern 447\nAOP (aspect-oriented programming) 373, 378\nApache Flume 370\nApache Kafka 92\nApache Openwhisk 416\nApache Shiro 351\nAPI composition pattern 221\u2013228\nbenefits and drawbacks of 227\u2013228\nincreased overhead 227\nlack of transactional data consistency\n228\nrisk of reduced availability 227\u2013228", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1900, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9ac8a93-4bb2-4f62-9221-4da95d98709b": {"__data__": {"id_": "b9ac8a93-4bb2-4f62-9221-4da95d98709b", "embedding": null, "metadata": {"page_label": "474", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4def5dc3-5b13-432e-9e0e-eb8cb7233b36", "node_type": "4", "metadata": {"page_label": "474", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e969f473cdb81814ea0bf791b7f8461ae736e49a487f6316e738c01b0ae1d8b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX474\nAPI composition pattern (continued)\ndesign issues 225\u2013227\nreactive programming model 227\nrole of API composer 225\u2013227\nfindOrder() query operation 221\u2013222, 224\noverview of 222\u2013224\nAPI gateway 259\u2013291\nauthentication 354\u2013355\nbenefits of 267\ndesign issues 268\u2013271\nbeing good citizen in architecture 270\u2013271\nhandling partial failures 270\nperformance and scalability 268\u2013269\nreactive programming abstractions 269\u2013270\ndrawbacks of 267\nimplementation using GraphQL 279\u2013291\nconnecting schema to data 285\u2013287\ndefining schema 282\u2013284\nexecuting queries 284\u2013285\nintegrating Apollo GraphQL server with \nExpress 289\u2013290\noptimizing loading using batching and \ncaching 288\nwriting client 290\u2013291\nimplementation using Netflix Zuul 273\nimplementation using off-the-shelf products/\nservices 271\u2013272\nAPI gateway products 272\nAWS API gateway service 271\u2013272\nAWS Application Load Balancer service 272\nimplementation using Spring Cloud \nGateway 273\u2013275\nApiGatewayApplication class 279\nOrderConfiguration class 275\u2013276\nOrderHandlers class 276\u2013278\nOrderService class 278\u2013279\nmapping USERINFO cookie to Authorization \nheader 455\nNetflix example 267\u2013268\noverview of 259\u2013266\nAPI composition 261\narchitecture 263\u2013264\nBackends for frontends pattern 264\u2013266\nclient-specific API 262\nedge functions 262\u2013263\nownership model 264\nprotocol translation 262\nrequest routing 260\nApiGatewayApplication class 279\nApiGatewayMain package 274\nAPIGatewayProxyRequestEvent 417, 421\u2013422\nAPIGatewayProxyResponseEvent 417, 422\nAPIs\ndefining in microservice architecture 68\u201369\ninterprocess communication 69\u201371\ncreating specification for messaging-based \nservice API 89\u201390\nmajor, breaking changes 70\u201371\nminor, backward-compatible changes 70\nsemantic versioning 70\nspecifying REST APIs 74\nrefactoring to microservices 444\u2013445, 465\u2013466\ntesting microservices\nconsumer contract tests for messaging \nAPIs 305\nconsumer-side integration test for API gate-\nway\u2019s OrderServiceProxy 325\u2013326\nexample contract for REST API 324\nSee also API gateways\nApplication architecture patterns\nMicroservice architecture 8\u201318, 40\nMonolithic architecture 2\u20137, 22\u201334, 40\napplication infrastructure 24\napplication metrics 28, 366, 373\u2013376\ncollecting service-level metrics 374\u2013375\ndelivering metrics to metrics service 375\u2013376\napplication modernization 23\u201324, 430\u2013432\napplication security 349\napply() method 188, 193\narchitectural styles 37\u201340\nhexagonal 38\u201340\nlayered 37\u201338\nmicroservice architecture 40\u201343\nloose coupling, defined 42\u201343\nrelative unimportance of size of service 43\nrole of shared libraries 43\nservices, defined 41\u201342\naspect-oriented programming (AOP) 373, 378\nasynchronous (nonblocking) I/O model 268\nasynchronous interactions 67\nAsynchronous messaging pattern 85\u2013103\ncompeting receivers and message ordering\n94\u201395\ncreating API specification 89\u201390\ndocumenting asynchronous operations 90\ndocumenting published events 90\nduplicate messages 95\u201397\ntracking messages and discarding \nduplicates 96\u201397\nwriting idempotent message handlers 96\nimproving availability 103\u2013108\neliminating synchronous interaction\n104\u2013108\nsynchronous communication and \navailability 103\u2013104\ninteraction styles 87\u201389\none-way notifications 89\npublish/subscribe 89\nrequest/response and asynchronous request/\nresponse 87\u201388", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3232, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce669f7a-7676-479a-9e90-4072f03b9392": {"__data__": {"id_": "ce669f7a-7676-479a-9e90-4072f03b9392", "embedding": null, "metadata": {"page_label": "475", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab3ffdee-67e8-4b3e-9235-b8403e21efd2", "node_type": "4", "metadata": {"page_label": "475", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "f237212c4a4c17695a8ea0c33a1b149dc043310dfd43478a3736a65720cb5e31", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 475\nAsynchronous messaging pattern (continued)\nlibraries and frameworks for 100\u2013103\nbasic messaging 101\ncommand/reply-based messaging 102\u2013103\ndomain event publishing 102\nmessage brokers 90\u201394\nbenefits and drawbacks of 93\u201394\nbrokerless messaging 91\u201392\nimplementing message channels using 93\noverview of 92\noverview of 86\u201387\ntransactional messaging 97\u2013100\npublishing events using Polling publisher \npattern 98\u201399\npublishing events using Transaction log tail-\ning pattern 99\u2013100\nusing database table as message queue\n97\u201398\nasynchronous request/response interactions\nimplementing 87\u201388\nintegration tests for\nconsumer-side contract tests 332\u2013335\ncontract tests 330\u2013335\nexample contract 331\u2013332\nAtomicity, Consistency, Durability (ACD) 111\nAtomicity, Consistency, Isolation, Durability \n(ACID) transactions 98, 110\nattribute value 245\naudit logging 28, 186, 366, 377\u2013378\nadding code to business logic 378\naspect-oriented programming 378\nevent sourcing 378\nauditing 350\nauthentication and authorization\nrefactoring to microservices 453\u2013455\nAPI gateway maps USERINFO cookie to \nAuthorization header 455\nLoginHandler sets USERINFO cookie\n454\u2013455\nsecurity in microservice architecture\nhandling authentication 354\u2013355\nhandling authorization 356\nAuthorization Server concept 357\nautomated testing 28, 293, 295\u2013296\nautomatic sidecar injection 411\nAvro 72\nAWS API gateway service 271\u2013272\nAWS Application Load Balancer service 272\nAWS DynamoDB 242\u2013252\ndata modeling and query design 244\u2013249\ndetecting duplicate events 248\u2013249\nfindOrderHistory query 245\u2013247\nFTGO-order-history table 245\npaginating query results 247\nupdating orders 247\u2013248\nOrderHistoryDaoDynamoDb class 249\u2013252\naddOrder() method 249\u2013250\nfindOrderHistory() method 251\u2013252\nidempotentUpdate() method 250\u2013251\nnotePickedUp() method 250\nOrderHistoryEventHandlers module 243\u2013244\nAWS Gateway, deploying RESTful services \nusing 419\u2013426\ndeploying lambda functions using Serverless \nframework 425\u2013426\ndesign of Restaurant Service 419\u2013423\npackaging service as ZIP file 424\nAWS Lambda\nbenefits of lambda functions 418\ndeveloping lambda functions 417\ndrawbacks of lambda functions 419\ninvoking lambda functions 417\u2013418\ndefining scheduled lambda functions 418\nhandling events 418\nhandling HTTP requests 417\ninvoking lambda functions using web service \nrequests 418\noverview of 416\nRESTful services 419\u2013426\ndeploying lambda functions using Serverless \nframework 425\u2013426\ndesign of Restaurant Service 419\u2013423\npackaging service as ZIP file 424\naws.region property 363\nAxon 202\nAzure functions, Microsoft 416\nB\nBackends for frontends (BFF) pattern 264\u2013266\nbatching 288\n@Before setUp() method 309\nbeforeHandling() method 423\nBig Ball of Mud pattern 2\nbig bang rewrite 430\nbinary message formats 72\nbounded context 55\nbroker-based messaging 90\u201394\nbenefits and drawbacks of 93\u201394\nimplementing message channels using 93\noverview of 92\nbrokerless messaging 91\u201392\nBrowser API module 264\nbusiness capability 40\nbusiness logic 146\u2013219\nadding audit logging code to 378\ndomain events 160\u2013168\nconsuming 167\u2013168\ndefined 161\nevent enrichment 161\u2013162", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3073, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6acd465-0f12-4c83-b8c5-7b86ecde1110": {"__data__": {"id_": "c6acd465-0f12-4c83-b8c5-7b86ecde1110", "embedding": null, "metadata": {"page_label": "476", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dbcdec27-0895-4167-a75e-ba88da43d804", "node_type": "4", "metadata": {"page_label": "476", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9fc226d06987d58fa115e7ff226603ebb770973fa51cbae53c9748c2a6e0d368", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX476\nbusiness logic (continued)\ngenerating 164\u2013165\nidentifying 162\u2013163\npublishing 166\u2013167\nreasons to publish 160\u2013161\ndomain model design 152\u2013160\naggregates 154\u2013160\nproblem with fuzzy boundaries 153\u2013154\nevent sourcing 184\u2013202\nbenefits of 199\u2013200\ndrawbacks of 200\u2013202\nevent publishing 194\u2013195\nevolving domain events 198\u2013199\nhandling concurrent updates using optimis-\ntic locking 193\u2013194\nidempotent message processing 197\noverview of 186\u2013193\nsnapshots, improving performance with\n195\u2013196\ntraditional persistence 185\u2013186\nevent store implementation 202\u2013209\nEventuate client framework for Java 205\u2013209\nEventuate Local event store 203\u2013205\nKitchen Service business logic 168\u2013173\nOrder Service business logic 173\u2013182\nOrder aggregate 175\u2013180\nOrderService class 180\u2013182\norganization patterns 147\u2013152\nDomain model pattern 150\u2013151\ndomain-driven design 151\u2013152\nTransaction script pattern 149\u2013150\nsagas and event sourcing together 209\u2013218\ncreating orchestration-based saga 211\u2013212\nimplementing choreography-based sagas \nusing event sourcing 210\nimplementing event sourcing-based saga \nparticipant 213\u2013216\nimplementing saga orchestrators using event \nsourcing 216\u2013218\nBusiness logic design patterns\nAggregate 147, 152\u2013160\nDomain event 160\nDomain model 150\u2013151\nEvent sourcing 184\nTransaction script 149\u2013150\nbusiness logic layer 38, 436\nby value countermeasure 131\u2013132\nC\ncaching 262, 288\ncancel() operation 177\ncancelOrder() method 460\nCAP theorem 113\nCCP (Common Closure Principle) 56\ncentralized sessions 354\nchange failure rate 31\nchoreography 111\nchoreography-based sagas 118\u2013121\nbenefits and drawbacks of 121\nimplementing Create Order saga 118\u2013119\nimplementing using event sourcing 210\nreliable event-based communication 120\u2013121\nCI (Continuous Integration) 6, 306, 357\nCircuit breaker pattern 77\u201380\ndeveloping robust RPI proxies 79\nrecovering from unavailable services 79\u201380\nClient concept 358\nClient-side discovery pattern 82\u201383\ncommand message 86\nCommand query responsibility segregation. See \nCQRS pattern\ncommand/reply-based messaging 102\u2013103\ncommands 41\ncommit tests stage 306\ncommitted records 130\nCommon Closure Principle (CCP) 56\u201357\ncommunication\nflexible 93\nsecure interprocess 350\ncommunication patterns 23\u201325\ncommutative update countermeasure 130\ncompensatable transactions 116, 128, 450\ncompensating transaction 450\ncompile-time tests 297\ncomponent tests 306, 339\u2013340\nfor FTGO Order Service\nOrderServiceComponentTestStepDefinitions \nclass 341\u2013344\nrunning 344\u2013345\nwriting 340\u2013345\nin-process component tests 339\nout-of-process component tests 339\u2013340\ncondition expression 248\nConduit 381\nConfigMap 402\nconfigurable services 360\u2013364\npull-based externalized configuration 363\u2013364\npush-based externalized configuration 362\u2013363\n@ConfigurationProperties class 276\nconsumer contract testing 301\u2013303\nfor asynchronous request/response \ninteraction 332\u2013335\nfor messaging APIs 305\nfor publish/subscribe-style interactions\n328\u2013330\nfor REST-based request/response style \ninteractions 324\u2013326\nconsumer group 94\nconsumer-driven contract test 28, 302", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3036, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9362b2a4-064c-4c74-950a-d32640d4fb0e": {"__data__": {"id_": "9362b2a4-064c-4c74-950a-d32640d4fb0e", "embedding": null, "metadata": {"page_label": "477", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "88f4c355-a8be-4989-b23f-177670652c4b", "node_type": "4", "metadata": {"page_label": "477", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "390a461d97e6819db43a2ca2e360ba754c66182f641dae7914279312e05d68c6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 477\nconsumerId parameter 229\nconsumer-provider relationship 301\nconsumer-side contract test 28, 302\ncontainers\ncontainer image 395\nDeploy a service as a container 22, 393\nDocker 395\u2013398\ncontinuous deployment 5\ndeployment pipeline 305\u2013307\nContinuous Integration (CI) 6, 306, 357\ncontrollers, unit tests for 313\u2013315\nConway, Melvin 30\nConway\u2019s law 30\ncorrelation ID 88\u201389, 120\ncountermeasures 111, 126, 450\nCQRS (Command query responsibility \nsegregation) 26, 63, 160, 228\u2013236\nbenefits of 235\u2013236\nefficient implementation 235\nimproved separation of concerns 235\u2013236\nquerying in event sourcing-based \napplication 235\ndrawbacks of 236\nmore complex architecture 236\nreplication lag 236\nmotivations for using 229\u2013232\nfindAvailableRestaurants() query \noperation 231\nfindOrderHistory() query operation 229\u2013231\nneed to separate concerns 231\u2013232\noverview of 232\u2013235\nquery-only services 233\u2013235\nseparating commands from queries 232\u2013233\nviews\nadding and updating 241\u2013242\ndesigning 236\u2013242\nimplementing with AWS DynamoDB\n242\u2013252\nCreate Order saga 114\u2013115, 135\u2013142\nCreateOrderSaga orchestrator 136\u2013138\nCreateOrderSagaState class 138\nEventuate Tram Saga framework 140\u2013142\nimplementing using choreography 118\u2013119\nimplementing using orchestration 122\u2013123\nKitchenServiceProxy class 139\ncreate, update, and delete (CRUD) \noperations 232\ncreate() method 171, 204\ncreateOrder() operation 114\nCreateOrderSaga orchestrator 136\u2013138\nCreateOrderSagaState class 138\nCreateOrderSagaTest class 312\nCross-cutting concerns patterns\nExternalized configuration 28, 361\nMicroservice chassis 28, 378\u2013382\nCRUD (create, update, and delete) \noperations 232\nCucumber framework 338\nCustomerContactInfoRepository interface 445, \n458\nD\nDAO (data access object) 39, 149, 239\ndata access logic layer 436\ndata consistency 449\u2013453\nAPI composition pattern and 228\nmaintaining across services 58\nrefactoring to microservices\nsagas and compensatable transactions\n451\u2013452\nsequencing extraction of services 452\u2013453\nsupporting compensatable transactions\n450\u2013451\nSaga pattern 25\u201326, 114\u2013117\ndata consistency patterns 25\nSaga pattern 25\u201326, 114\u2013117\nDataLoader module 288\nDDD (domain-driven design) 24, 34\nDDD aggregate pattern 152\u2013160\nDebezium 100\nDecompose by business capability pattern 51\u201354\ndecomposition 52\u201354\nidentifying business capabilities 51\u201352\npurpose of business capabilities 51\ndecomposition 33\u201364\nDecompose by subdomain 54\ndefining application\u2019s microservice \narchitecture 44\u201364\ndefining service APIs 61\u201364\nguidelines for decomposition 56\u201357\nidentifying system operations 45\u201350\nobstacles to decomposition 57\u201361\nservice definition with Decompose by business \ncapability pattern 51\u201354\nservice definition with Decompose by sub-\ndomain pattern 54\u201355\nguidelines for 56\u201357\nCommon Closure Principle 56\u201357\nSingle Responsibility Principle 56\nobstacles to 57\u201361\ngod classes 58\u201361\nmaintaining data consistency across \nservices 58\nnetwork latency 57\nobtaining consistent view of data 58\nsynchronous interprocess communication 57\npatterns\nDecompose by business capability 24, 51\u201354\nDecompose by subdomain 24, 54", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3063, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1f7e9bb0-52ef-43ce-95b8-9081d649ab38": {"__data__": {"id_": "1f7e9bb0-52ef-43ce-95b8-9081d649ab38", "embedding": null, "metadata": {"page_label": "478", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ef90fc1-2c70-4a3d-b6ac-7e2b17235ef9", "node_type": "4", "metadata": {"page_label": "478", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "19a218f15b01e9f6d786c70cf70ed5f4b40ca6dee132c368de946c53ad34e950", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX478\nDelayed Delivery Service\nchanging FTGO monolith to interact with\n467\u2013470\ndefining interface 467\u2013468\nimplementing interface 468\u2013470\nrefactoring monolith to call interface\n468\ndesign for 456\u2013457\ndomain model 463\u2013464\ndeciding which data to migrate 464\ndesign of domain logic 464\nidentifying which entities and fields are \npart of delivery management 463\nexisting delivery functionality 460\u2013461\nintegration glue for 457\u2013459, 465\u2013467\nCustomerContactInfoRepository \ninterface 458\ndesign of API 465\u2013466\nhow Delivery Service accesses FTGO \ndata 466\nhow FTGO accesses data 467\npublishing and consuming Order and Restau-\nrant domain events 458\u2013459\noverview of 462\u2013463\ndeleted flag 201\ndeliver action 460\nDeliveryServiceImpl class 468\ndependencies 125\ndeploy stage 306\ndeployment 383\u2013427\nLanguage-specific packaging format \npattern 386\u2013390\nbenefits of 388\u2013389\ndrawbacks of 389\u2013390\nRESTful services using AWS Lambda and AWS \nGateway 419\u2013426\ndeploying lambda functions using Serverless \nframework 425\u2013426\ndesign of Restaurant Service 419\u2013423\npackaging service as ZIP file 424\nServerless deployment pattern 415\u2013419\nbenefits of lambda functions 418\ndeveloping lambda functions 417\ndrawbacks of lambda functions 419\ninvoking lambda functions 417\u2013418\noverview of 416\nService as container pattern 393\u2013399\nbenefits of 398\nDocker 395\u2013398\ndrawbacks of 399\nService as virtual machine pattern 390\u2013393\nbenefits of 392\ndrawbacks of 392\u2013393\nService mesh pattern 380\nSidecar pattern 410\nwith Kubernetes 399\u2013415\ndeploying API gateway 405\u2013406\ndeploying Restaurant Service 402\u2013405\noverview of 399\u2013402\nservice meshes 407\u2013415\nzero-downtime deployments 406\u2013407\ndeployment frequency 31\nDeployment patterns\nDeploy a service as a container 22, 393\nDeploy a service as a VM 390, 392\nLanguage-specific packaging format 386, 390\nServerless deployment 415\u2013419\nService mesh 380\nSidecar 410\ndeployment pipeline 305\u2013307\nDeployment view 36\nDestinationRule 413\ndirty reads 127\nDistributed tracing pattern 28, 366, 370\u2013373\ndistributed tracing server 373\ninstrumentation libraries 373\nDistributed Transaction Processing (DTP) 112\nDocker 395\u2013398\nbuilding images 395\u2013396\npushing images to registry 396\u2013397\nrunning containers 397\u2013398\ndocker build command 396\nDocker containers 267\ndocker push command 397\ndocker run command 397\ndocker tag command 396\ndocument message 86\ndomain event publishing 102\ndomain events 160\u2013168, 198\u2013199\nconsuming 167\u2013168, 458\u2013459\ndefined 161\ndefining 207\nevent enrichment 161\u2013162\nevent schema evolution 198\u2013199\ngenerating 164\u2013165\nidentifying 162\u2013163\nmanaging schema changes through \nupcasting 199\npublishing 102, 166\u2013167, 448\u2013449, 458\u2013459\nreasons to publish 160\u2013161\nsubscribing to 208\u2013209, 448\u2013449\ndomain model 54, 150\u2013160\naggregates\nconsistency boundaries 155\ndesigning business logic with 159\u2013160\nexplicit boundaries 154\u2013155\ngranularity 158\nidentifying aggregates 155\nrules for 155\u2013157\ncreating high-level domain model 46\u201348", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2912, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90d5db8f-a65a-4e23-8419-d254a015cc94": {"__data__": {"id_": "90d5db8f-a65a-4e23-8419-d254a015cc94", "embedding": null, "metadata": {"page_label": "479", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97c61370-209b-45f3-99ce-885421b06dca", "node_type": "4", "metadata": {"page_label": "479", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "76efd7f59079b31d1268c8ea30ecd78a936227d35f07ea7c99acbfe49a3eaf6d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 479\ndomain model (continued)\nDelivery Service 463\u2013464\ndeciding which data to migrate 464\ndesign of domain logic 464\nidentifying which entities and fields are part \nof delivery management 463\nproblem with fuzzy boundaries 153\u2013154\nsplitting 439\u2013440\ndomain services\nKitchenService 171\u2013172\nunit tests for 312\u2013313\ndomain-driven design (DDD) 24, 34\nDSL (domain-specific language) 303\nDTP (Distributed Transaction Processing)\n112\ndumb pipes 14\nduplicate messages 95\u201397\ntracking messages and discarding \nduplicates 96\u201397\nwriting idempotent message handlers 96\nDynamoDB streams 100\nE\nedge functions 271\nElastic Beanstalk 391\nElasticsearch 370\n@EnableGateway annotation 279\nend-to-end tests 345\u2013346\ndesigning 345\nrunning 346\nwriting 346\nEnterprise Service Bus (ESB) 264\nentities, unit tests for 309\u2013310\nEntity object, DDD 151\nenums 283\nESB (Enterprise Service Bus) 264\nevent. See Domain events\nevent handlers\nevents generated by AWS services 418\nidempotent 240\u2013241\nunit tests for 315\u2013317\nevent message 86\nevent publishing 194\u2013195\nAsynchronous messaging pattern 89\u201390, \n98\u2013100, 102\ndomain events 160\u2013168\nconsuming 167\u2013168\ndefined 161\nevent enrichment 161\u2013162\ngenerating and publishing 164\u2013167\nidentifying 162\u2013163\nreasons for 160\u2013161\nevent sourcing 194\u2013195, 199\ntraditional persistence and 186\nusing polling 194\u2013195\nusing transaction log tailing 195\nevent sourcing 184\u2013202\naudit logging 378\nbenefits of 199\u2013200\navoids O/R impedance mismatch \nproblem 200\npreserves aggregate history 199\u2013200\nreliable domain event publishing 199\ntime machine for developers 200\nconcurrent updates and optimistic locking\n193\u2013194\ndrawbacks of 200\u2013202\ncomplexity 200\ndeleting data 201\nevolving events 201\nlearning curve 200\nquerying event store 202\nevent publishing 194\u2013195\nusing polling 194\u2013195\nusing transaction log tailing 195\nevolving domain events 198\u2013199\nevent schema evolution 198\u2013199\nmanaging schema changes through \nupcasting 199\nidempotent message processing 197\nwith NoSQL-based event store 197\nwith RDBMS-based event store 197\noverview of 186\u2013193\naggregate methods required to generate \nevents 189\u2013191\nevent sourcing-based Order aggregate191\u2013193\nevents representing state changes 188\npersisting aggregates using events 186\u2013188\nsagas and 209\u2013218\ncreating orchestration-based saga 211\u2013212\nimplementing choreography-based sagas \nusing event sourcing 210\nimplementing event sourcing-based saga \nparticipant 213\u2013216\nimplementing saga orchestrators using event \nsourcing 216\u2013218\nsnapshots and performance improvement\n195\u2013196\ntrouble with traditional persistence 185\u2013186\naudit logging 186\nevent publishing bolted to business logic 186\nlack of aggregate history 186\nObject-Relational impedance mismatch\n185\u2013186\nEvent Store 202\nevent store implementation 202\u2013209\nEventuate client framework for Java 205\u2013209\nAggregateRepository class 207\u2013208\ndefining aggregate commands 207", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2847, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bed9af0c-d653-445d-bf6a-e88a0c537a3d": {"__data__": {"id_": "bed9af0c-d653-445d-bf6a-e88a0c537a3d", "embedding": null, "metadata": {"page_label": "480", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d3a55b3-f032-49bb-81db-f4d5c0ec5488", "node_type": "4", "metadata": {"page_label": "480", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "78d77282180751517d10a3afc36d218a97ef44e7d9b26dde0f32aeb58bcb266f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX480\nevent store implementation (continued)\ndefining aggregates with ReflectiveMutable-\nCommandProcessingAggregate \nclass 206\u2013207\ndefining domain events 207\nsubscribing to domain events 208\u2013209\nEventuate Local event store 203\u2013205\nconsuming events by subscribing to event \nbroker 205\nevent relay propagates events from database \nto message broker 205\nschema 203\u2013205\nevent storming 162\nevent-driven I/O 269\n@EventHandlerMethod annotation 208\nevents. See Domain events\n@EventSubscriber annotation 208\nEventuate framework 101, 202, 205\u2013209\nand updating aggregates with the Aggregate-\nRepository class 207\u2013208\ndefining aggregate commands 207\ndefining aggregates with ReflectiveMutable-\nCommandProcessingAggregate class\n206\u2013207\ndefining domain events 207\nsubscribing to domain events 208\u2013209\nEventuate Local event store 203\u2013205\nconsuming events by subscribing to event \nbroker 205\nevent relay propagates events from database to \nmessage broker 205\nschema 203\u2013205\nEventuate Tram 100, 166\nEventuate Tram Saga framework 140\u2013142\nException tracking pattern 28, 366, 376\u2013377\nExpress framework 289\u2013290\nexternal API patterns 253\u2013291\nAPI gateway 76, 227, 254, 259\u2013272\nAPI gateway implementation 271\u2013291\nusing GraphQL 279\u2013291\nusing Netflix Zuul 273\nusing off-the-shelf products/services 271\u2013272\nusing Spring Cloud Gateway 273\u2013275\nAPI gateway pattern 76, 227, 254, 259\u2013271\nbenefits of 267\ndesign issues 268\u2013271\ndrawbacks of 267\nNetflix example 267\u2013268\noverview of 259\u2013266\nBackends for frontends 254, 262, 264\u2013266\ndesign issues 254\u2013259\nbrowser-based JavaScript applications 258\nFTGO mobile client 255\u2013258\nthird-party applications 258\u2013259\nweb applications 258\nexternalized configuration 361\npull-based 363\u2013364\npush-based 262\u2013263\nExternalized Configuration pattern 28, 361\nF\nFactory object, DDD 151\nfault isolation 6\nfeature flags 469\nfeature toggles 469\nfilter expression 247\nfilter parameter 229\nfind() operation 204\nfindAvailableRestaurants() query operation 231\nfindCustomerContactInfo() method 447\nfindOrder() operation 221\u2013222, 224\nfindOrderHistory() query operation 229\u2013231, \n251\u2013252\ndefining index for 245\u2013247\nimplementing 247\nFindRestaurantRequestHandler class 421\u2013422\nFission framework 416\nFluentd 370\nFlume 370\nfold operation 187\nFTGO application\nAPI design issues for mobile client 255\u2013258\nchanging monolith to interact with Delivery \nService 467\u2013470\ncomponent tests for Order Service 340\u2013345\ndeploying with Kubernetes 399\u2013415\nAPI gateway 405\u2013406\nRestaurant Service 402\u2013405\nservice meshes 407\u2013415\nzero-downtime deployments 406\u2013407\nmicroservice architecture of 12\u201313\nmonolithic architecture of 3\u20134\nftgo-db-secret 404\nFtgoGraphQLClient class 290\nfunctional decomposition 10\nfuzzy boundaries 153\u2013154\nG\nGDPR (General Data Protection Regulation) 201\ngeneralization pattern 22\nGET REST endpoint 271\ngetDelayedOrders() method 456\ngetOrderDetails() query 368\nGherkin\nexecuting specifications using Cucumber 338\nwriting acceptance tests 337\u2013338\nGo Kit 380\ngod classes 58\u201361", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2960, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "297fd5ef-f2b8-4f7c-8fbd-d3d83668ec86": {"__data__": {"id_": "297fd5ef-f2b8-4f7c-8fbd-d3d83668ec86", "embedding": null, "metadata": {"page_label": "481", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d51f8ba-665a-43f3-885d-800f57c93517", "node_type": "4", "metadata": {"page_label": "481", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "22d292545be1ae8f87f633e99f41d061dc586c4d58cb734f29c48c776634464e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 481\nGoLang (Go language) 4, 380\nGoogle Cloud functions 416\ngraph-based schema 280\nGraphQL 279, 281\u2013291\nconnecting schema to data 285\u2013287\ndefining schema 282\u2013284\nexecuting queries 284\u2013285\nintegrating Apollo GraphQL server with \nExpress 289\u2013290\nload optimization using batching and caching288\nwriting client 290\u2013291\ngRPC 76\u201377\nH\nhandleHttpRequest() method 421\nhandleRequest() method 417\nhealth check 82, 365\nHealth check API pattern 27, 366\u2013368\nimplementing endpoint 367\u2013368\ninvoking endpoint 368\nhexagonal architecture 3, 38\u201340\nhigh-level design patterns 20\nHoneybadger 377\nHttpServletResponse 422\nHumble, Jez 30\nI\nidempotent message processing 96, 197\nCQRS views 240\u2013241\nevent sourcing-based saga participant 213\nwith NoSQL-based event store 197\nwith RDBMS-based event store 197\nidempotentUpdate() method 250\u2013251\nIDL (interface definition language) 69\n-ilities 8, 34, 37\nImplementation view 35\ninbound adapters 3, 38\ninfrastructure patterns 23\u201324\ninit system, Linux 390\nin-memory security context 353\ninstrumentation libraries 373\nintegration glue 444\u2013449\ndesigning API for 444\u2013445\nfor Delayed Delivery Service 457\u2013459, 465\u2013467\nCustomerContactInfoRepository \ninterface 458\ndesign of API 465\u2013466\nhow Delivery Service accesses FTGO data 466\nhow FTGO accesses data 467\npublishing and consuming Order and \nRestaurant domain events 458\u2013459\nhow monolith publishes and subscribes to \ndomain events 448\u2013449\nimplementing anti-corruption layer 446\u2013448\npicking interaction style and IPC \nmechanism 445\u2013446\nintegration tests 319\u2013335\nasynchronous request/response \ninteractions 330\u2013335\nexample contract 331\u2013332\ntests for asynchronous request/response \ninteraction 332\u2013335\npersistence integration tests 321\u2013322\npublish/subscribe-style interactions 326\u2013330\ncontract for publishing OrderCreated \nevent 327\u2013328\ntests for Order History Service 329\u2013330\ntests for Order Service 328\u2013329\nREST-based request/response style \ninteractions 322\u2013326\nexample contract 324\ntests for API gateway OrderServiceProxy\n325\u2013326\ntests for Order Service 324\u2013325\ninteraction styles 67\u201368, 87\u201389\nasynchronous 104\u2013105\none-way notifications 89\npublish/async responses 89\npublish/subscribe 89\nrequest/response and asynchronous request/\nresponse 87\u201388\nselecting 445\u2013446\ninterface definition language (IDL) 69\ninvariants 153\nIPC (interprocess communication) 24, 65, \n93\u2013109\noverview of 66\u201372\ndefining APIs 68\u201369\nevolving APIs 69\u201371\ninteraction styles 67\u201368\nmessage formats 71\u201372\nusing asynchronous Messaging pattern 85\u2013103\ncompeting receivers and message \nordering 94\u201395\ncreating API specification 89\u201390\nduplicate messages 95\u201397\nimproving availability 103\u2013108\ninteraction styles 87\u201389\nlibraries and frameworks for 100\u2013103\nmessage brokers 90\u201394\noverview of 86\u201387\ntransactional messaging 97\u2013100\nusing synchronous Remote procedure invoca-\ntion pattern 72\u201385\nCircuit breaker pattern 77\u201380\ngRPC 76\u201377\nREST 73\u201376\nservice discovery 80\u201385", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2890, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a70159f4-c5cf-49e6-a0ef-8c0cb4d15c39": {"__data__": {"id_": "a70159f4-c5cf-49e6-a0ef-8c0cb4d15c39", "embedding": null, "metadata": {"page_label": "482", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a47d883-9901-4000-9e04-39172f58948d", "node_type": "4", "metadata": {"page_label": "482", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "4ae39ca785e142a49ef17d25832df339f1887da785701ffaa2f50a7348daa29e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX482\nIstio 381\ndeploying services 410\u2013412\nEnvoy proxy 410\nservice meshes 408\u2013410\nJ\njava -jar command 395\nJenkins 306\nJSESSIONID cookie 351\nJSON message 71\nJUL (java.util.logging) 369\nJWT (JSON Web Token) 28, 356\u2013357\nK\nKafka 92\nkey condition expression 247\nKibana 370\nKitchen Service\nbusiness logic 168\u2013173\nTicket aggregate 169\u2013173\nKitchenServiceCommandHandler class 172\u2013173\nKitchenServiceProxy class 139\nKong package 272\nkubectl apply command 404\nkubectl apply -f command 406\nKubernetes 399\u2013415\ndeploying API gateway 405\u2013406\ndeploying Restaurant Service 402\u2013405\noverview of 399\u2013402\narchitecture 400\u2013402\nkey concepts 402\nservice meshes 407\u2013415\ndeploying services 410\u2013412\ndeploying v2 of Consumer Service 414\nIstio 408\u2013412\nrouting production traffic to v2 415\nrouting rules to route to v1 version\n412\u2013413\nrouting test traffic to v2 414\nzero-downtime deployments 406\u2013407\nL\nLagom 202\nlambda functions 271, 416\nbenefits of 418\ndeploying using Serverless framework 425\u2013426\ndeveloping 417\ndrawbacks of 419\ninvoking 417\u2013418\ndefining scheduled lambda functions 418\nhandling events generated by AWS \nservices 418\nhandling HTTP requests 417\nusing web service request 418\nLanguage-specific packaging format pattern\n386\u2013390\nbenefits of 388\u2013389\nefficient resource utilization 389\nfast deployment 389\ndrawbacks of 389\u2013390\nautomatically determining where to place ser-\nvice instances 390\nlack of encapsulation of technology stack 389\nlack of isolation 390\nno ability to constrain resources \nconsumed 389\nlatency 419\nlayered architectural style 37\u201338\nlayered file system 397\nlead time 31, 293\nlines of code (LOC) application 5\nLinkedIn Databus 100\nLinkerd 381\nlivenessProbe 404\nLoadBalancer service 405\nLOC (lines of code) application 5\nLog aggregation pattern 27, 365, 368\u2013370\nlog aggregation infrastructure 370\nlog generation 369\u2013370\nlog4j 369\nLogback 369\nLogical view 35\nLoginHandler 352, 454\u2013455\nLogstash 370\nloose coupling 93, 121\nlost updates 127\nM\nMAJOR part, Semvers 70\nmakeContextWithDependencies() function 290\nmanual sidecar injection 411\nMartin, Robert C. 57\nmaster machine 400\nmean time to recover 31\nMemento pattern 196\nmessage brokers 85, 90\u201394\nbenefits and drawbacks of 93\u201394\nimplementing message channels using 93\noverview of 92\nmessage buffering 93\nmessage channels 86\u201387, 93\nmessage handler adapter class 86\nmessage handlers, unit tests for 315\u2013317\nmessage identifier 88\nmessage ordering 94\u201395\nmessage sender adapter class 86", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2431, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aeee8dfd-44ab-4c92-bc5d-7a0b23f6664c": {"__data__": {"id_": "aeee8dfd-44ab-4c92-bc5d-7a0b23f6664c", "embedding": null, "metadata": {"page_label": "483", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8584dab7-eb53-4bc9-a9f1-3d5c6595a821", "node_type": "4", "metadata": {"page_label": "483", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "56448cc671bec6d5ee781f51db9c7c4d4595bcffe3f86f70cf58c8f08095fe15", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 483\nmessaging. See Asynchronous messaging pattern\nMessaging style patterns. See Asynchronous messag-\ning pattern\nmetrics collection 262\nMicro framework 380\nmicrometer-registry-prometheus library 375\nmicroservice architecture 8\u201314, 34, 43\nas form of modularity 11\u201312\nbenefits of 14\u201317\ncontinuous delivery and deployment of large, \ncomplex applications 15\nfault isolation improvement 16\nindependently scalable services 16\nnew technology experimentation and \nadoption 16\u201317\nsmall, easily maintained services 15\ndefining 44\u201364\ndecomposition guidelines 56\u201357\ndefining service APIs 61\u201364\nidentifying system operations 45\u201350\nobstacles to decomposing an application into \nservices 57\u201361\nservice definition with Decompose by business \ncapability pattern 51\u201354\nservice definition with Decompose by sub-\ndomain pattern 54\u201355\ndrawbacks of 17\u201319\nadoption timing 18\u201319\nchallenge of finding right services 17\ncomplex distributed systems 17\u201318\ndeployment coordination 18\neach service has own database 12\nFTGO application 12\u201313\nloose coupling, defined 42\u201343\nnot silver bullet 19\u201320\nrelationships between process, organization, \nand 29\u201332\nhuman side of adopting microservices\n31\u201332\nsoftware development and delivery \norganization 29\u201330\nsoftware development and delivery \nprocess 30\u201331\nrelative unimportance of size of service 43\nrole of shared libraries 43\nscale cube 8\u201311\nX-axis scaling 9\nY-axis scaling 10\u201311\nZ-axis scaling 9\u201310\nservice-oriented architecture versus 13\u201314\nservices, defined 41\u201342\nsoftware architecture 34\u201337\n4+1 view model of 35\u201337\ndefinition of 35\nrelevance of 37\ntransaction management 111\u2013117\nmaintaining data consistency 114\u2013117\nneed for distributed transactions 112\ntrouble with distributed transactions 112\u2013114\nMicroservice chassis pattern 28, 378\u2013382\nservice meshes 380\u2013382\nusing 379\u2013380\nMINOR part, Semvers 70\nMixer 409\nMobile API module 264\nMockito 305\nmocks 296\nmodularity, microservice architecture as form \nof 11\u201312\nMono abstraction 277\nmonolithic architecture 1\u201332, 40\nbenefits of 4\ncauses of monolithic hell 4\u20137\nintimidation due to complexity 4\u20135\nlong and arduous path from commit to \ndeployment 5\u20136\nreliability challenges 6\nscaling challenges 6\nslow development 5\ntechnology stack obsolescence 6\u20137\nFTGO monolithic architecture 3\u20134\nmultiply() method 310\nMyBATIS 185\nN\nNetflix Falcor 281\nNetflix Hystrix 79\nNetflix Zuul 273\nNetflix, as API gateway 267\u2013268\nnetwork latency 57\nnetwork timeouts 79\nNodePort service 406\nnodes 280, 400\nnonblocking I/O 268\nnonfunctional requirements 8\nnon-key attributes 246\nNoSQL-based event store\ncreating saga orchestrator when using 211\u2013212\nidempotent message processing when using 197\nSQL versus 237\u2013238\nnotePickedUp() method 250\nO\nO/R (Object-Relational) impedance \nmismatch 185\u2013186, 200\nOAuth 2.0 protocol 357\u2013360\nobject-oriented design pattern 20\nobject-oriented programming (OOP) 149", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2839, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2465bdc7-74cc-4f4e-9e0d-69aef6a3c365": {"__data__": {"id_": "2465bdc7-74cc-4f4e-9e0d-69aef6a3c365", "embedding": null, "metadata": {"page_label": "484", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68d22fda-75bf-41bb-b259-37d778e3ab0d", "node_type": "4", "metadata": {"page_label": "484", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "cee8ef3becc47aeecc4e04740bbaaa84d23a6184b3c4e3e06227154007eee84b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX484\nObject-Relational (O/R) impedance \nmismatch 185\u2013186, 200\nobservability 349\nobservability patterns 27\u201328\nApplication metrics 373\u2013376\nAudit logging 377\u2013378\nDistributed tracing 370\u2013373\nException tracking 376\u2013377\nHealth check API 366\u2013368\nLog aggregation 366, 368\u2013370\nobservable services 364\u2013378\nApplication metrics pattern 373\u2013376\ncollecting service-level metrics 374\u2013375\ndelivering metrics to metrics service 375\u2013376\nAudit logging pattern 377\u2013378\nadding code to business logic 378\naspect-oriented programming 378\nevent sourcing 378\nDistributed tracing pattern 370\u2013373\ndistributed tracing server 373\ninstrumentation libraries 373\nException tracking pattern 376\u2013377\nHealth check API pattern 366\u2013368\nimplementing endpoint 367\u2013368\ninvoking endpoint 368\nLog aggregation pattern 368\u2013370\nlog generation 369\u2013370\nlogging aggregation infrastructure 370\nole-based authorization 353\none-size-fits-all (OSFA) 262\none-to-many interaction 67\none-to-one interaction 67\none-way notifications 68, 89\none-way notification-style API 90\nOOP (object-oriented programming) 149\nopaque tokens 356\nOpenwhisk 416\noptimistic locking 193\u2013194\nOptimistic Offline Lock pattern 131\norchestration 111, 399\norchestration-based sagas 121\u2013125\nbenefits and drawbacks of 125\ncreating 211\u2013212\nimplementing Create Order saga 122\u2013123\nimplementing using event sourcing 216\u2013218\nmodeling saga orchestrators as state \nmachines 123\u2013124\ntransactional messaging and 125\nOrder aggregate 175\u2013180\nevent sourcing-based 191\u2013193\nmethods 177\u2013180\nstate machine 176\u2013177\nstructure of 175\u2013176\nOrder domain events, publishing and \nconsuming 458\u2013459\nOrder History Service 329\u2013330\nOrder Service\nbusiness logic 173\u2013182\nOrder aggregate 175\u2013180\nOrderService class 180\u2013182\nconsumer-driven contract integration tests \nfor 324\u2013325\nconsumer-driven contract tests for 328\u2013329\nOrderCommandHandlers class 142\u2013143\nOrderService class 133\u2013134\nOrderServiceConfiguration class 143\u2013145\nOrderCommandHandlers class 142\u2013143\nOrderConfiguration class 275\u2013276\nOrderCreated event 327\u2013328\nOrderDetailsRequestHandler 352\nOrderHandlers class 276\u2013278\nOrderHistoryDaoDynamoDb class 249\u2013252\naddOrder() method 249\u2013250\nfindOrderHistory() method 251\u2013252\nidempotentUpdate() method 250\u2013251\nnotePickedUp() method 250\nOrderHistoryEventHandlers module 243\u2013244\nOrderService class 133\u2013134, 180\u2013182, 278\u2013279\nOrderServiceComponentTestStepDefinitions \nclass 341\u2013344\nOrderServiceConfiguration class 143\u2013145\nOrderServiceProxy 325\u2013326\nOSFA (one-size-fits-all) 262\noutbound adapters 3, 38, 147\noutstanding requests 79\nP\npagination parameter 229\npartition key 246\nPassport framework 351\nPATCH part, Semvers 70\npatterns and pattern language 20\u201323\nby name\n3rd party registration 85\nAccess token 354\nAggregate 150\nAnti-corruption layer 447\nAPI composition 223\nAPI gateway 259\nApplication metrics 373\nAudit logging 377\nBackends for frontends 265\nCircuit breaker 78\nClient-side discovery 83\nCommand query responsibility \nsegregation 228\nConsumer-driven contract test 302\nConsumer-side contract test 303\nDecompose by business capability 51", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3029, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d0101154-b4a4-4ce1-ab49-2d165c650a06": {"__data__": {"id_": "d0101154-b4a4-4ce1-ab49-2d165c650a06", "embedding": null, "metadata": {"page_label": "485", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48e9773b-1dcd-4b60-a857-db32cc477b77", "node_type": "4", "metadata": {"page_label": "485", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "46555bbb3a3a3113374f7080387521efccd101aabdd44dce7e383e99b3976e76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 485\npatterns and pattern language (continued)\nDecompose by subdomain 54\nDeploy a service as a container 393\nDeploy a service as a VM 390\nDistributed tracing 370\nDomain event 160\nDomain model 150\nEvent sourcing 184\nException tracking 376\nExternalized configuration 361\nHealth check API 366\nLanguage-specific packaging format 387\nLog aggregation 368\nMessaging 85\nMicroservice architecture 40\nMicroservice chassis 379\nMonolithic architecture 40\nPolling publisher 98\nRemote procedure invocation 72\nSaga 114\nSelf registration 82\nServerless deployment 416\nServer-side discovery 85\nService component test 335\nService mesh 380\nSidecar 410\nStrangler application 432\nTransaction log tailing 99\nTransaction script 149\nTransactional outbox 98\ngroups of patterns 23\u201329\ncommunication patterns 24\u201325\ndata consistency patterns 25\nfor automated testing of services 28\nfor decomposing applications into \nservices 24\nfor handling cross-cutting concerns 28\nfor querying data 25\u201326\nobservability patterns 27\u201328\nsecurity patterns 28\u201329\nservice deployment patterns 26\nsections of patterns\nforces 21\nrelated patterns 21\u201323\nresulting context 21\npending state 176\npersistence\npersisting aggregates using events 186\u2013188\ntraditional approach to 185\u2013186\naudit logging 186\nevent publishing bolted to business \nlogic 186\nlack of aggregate history 186\nobject-relational impedance mismatch\n185\u2013186\npersistence integration tests 321\u2013322\nPersistence layer 38\npessimistic view countermeasure 130\u2013131\npickup action 460\nPilot 409\npivot transaction 128, 450\npods 402\npoint-to-point channel 87\npolicy enforcement 409\npolling 194\u2013195\nPolling publisher pattern 98\u201399\nports 38\npre-commit tests stage 306\npredecessor pattern 21\nPresentation layer 38\npresentation logic 436\nprimary key-based queries 235\nProcess view 36\nprocess() method 190, 193\nproduction-ready service development\n348\u2013382\nconfigurable services 360\u2013364\npull-based externalized configuration\n363\u2013364\npush-based externalized configuration\n362\u2013363\nMicroservice chassis pattern 378\u2013382\nservice meshes 380\u2013382\nusing 379\u2013380\nobservable services 364\u2013378\nApplication metrics pattern 373\u2013376\nAudit logging pattern 377\u2013378\nDistributed tracing pattern 370\u2013373\nException tracking pattern 376\u2013377\nHealth check API pattern 366\u2013368\nLog aggregation pattern 368\u2013370\nsecure services 349\u2013360\nhandling authentication in API gateway\n354\u2013355\nhandling authorization 356\nin traditional monolithic application\n350\u2013353\nusing JWTs to pass user identity and \nroles 356\u2013357\nusing OAuth 2.0 357\u2013360\nPrometheus 375\nproperties, graph-based schema 280\nProtocol Buffers 72\nprovider service 223\nproxy classes 274\nproxy interface 72\npseudonymization 201\nPublic API module 264\npublish() method 166\npublish/async responses 89", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2716, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae913f99-1973-4867-ac00-d23b576c650d": {"__data__": {"id_": "ae913f99-1973-4867-ac00-d23b576c650d", "embedding": null, "metadata": {"page_label": "486", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7264c60-f93c-4232-8a69-7563d7a60223", "node_type": "4", "metadata": {"page_label": "486", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "b316d6fa50d05806a53f3db6e45306ba1c6be7b3b1c5e762f2a0c96e0a665c27", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX486\npublish/subscribe-style interaction\nimplementing 89\nintegration tests for 326\u2013330\ncontract for publishing OrderCreated \nevent 327\u2013328\ntests for Order History Service 329\u2013330\ntests for Order Service 328\u2013329\npublish-subscribe channel 87\npull model of externalized configuration 361, 375\npush model of externalized configuration 361, \n375\nQ\nquality attributes 8, 34, 37\nquality of service 8, 37\nqueries 41\nquery arguments 286\nquery() operation 246, 249\nquerying patterns 220\u2013252\nAPI composition pattern 26, 64, 79, 221\u2013228\nbenefits and drawbacks of 227\u2013228\ndesign issues 225\u2013227\nfindOrder() query operation 221\u2013222, 224\noverview of 222\u2013224\nCQRS pattern 26, 63, 160, 184, 221, 228\u2013236\nbenefits of 235\u2013236\ndrawbacks of 236\nmotivations for using 229\u2013232\noverview of 232\u2013235\nR\nRabbitMQ 92\nrate limiting 262\nRDBMS-based event store\ncreating saga orchestrator when using 211\nidempotent message processing with 197\nreactive programming model 227\nreadinessProbe 404, 407\nreceiving port interface 86\nreduce operation 187\nrefactoring 428\u2013471\napplication modernization 430\u2013432\ndemonstrating value 432\ndesigning how service and monolith \ncollaborate 443\u2013455\nauthentication and authorization 453\u2013455\ndata consistency 449\u2013453\nintegration glue 444\u2013449\nextracting delivery management 459\u2013470\nchanging FTGO monolith to interact with \nDelivery Service 467\u2013470\ndesigning Delivery Service domain \nmodel 463\u2013464\ndesigning Delivery Service integration \nglue 465\u2013467\nexisting delivery functionality 460\u2013461\noverview of Delivery Service 462\u2013463\nimplementing new features as services 455\u2013459\ndesign for Delayed Delivery Service 456\u2013457\nintegration glue for Delayed Delivery \nService 457\u2013459\nminimizing changes 432\u2013433\noverview of 429\u2013433\nreasons for 429\u2013430\nstrategies for 433\u2013442\nextracting business capabilities into \nservices 437\u2013442\nimplementing new features as services\n434\u2013435\nseparating presentation tier from \nbackend 436\u2013437\ntechnical deployment infrastructure 433\nRefactoring to microservices patterns\nAnti-corruption layer 446\u2013447\nStrangler application 431\u2013432\nReflectiveMutableCommandProcessingAggregate \nclass 206\u2013207\nRefresh Token concept 358\nReleasing services 408\nReliable communications pattern\nCircuit breaker 77\u201380, 108\nRemote procedure invocation (RPI) pattern\n72\u201385\nCircuit breaker pattern 77\u201380\ndeveloping robust RPI proxies 79\nrecovering from unavailable services 79\u201380\ngRPC 76\u201377\nREST 73\u201376\nbenefits and drawbacks of 75\u201376\nfetching multiple resources in single \nrequest 74\u201375\nmapping operations to HTTP verbs 75\nREST maturity model 74\nspecifying REST APIs 74\nservice discovery 80\u201385\noverview of 81\nusing application-level service discovery \npatterns 81\u201383\nusing platform-provided service discovery \npatterns 83\u201385\nreply channel header 88\u201389\nRepository object, DDD 152\nrequest attribute 10\nrequest logging 262\nrequest/async response-style API 90\nrequest/response interactions 87\u201389\nasynchronous 87\u201388\nintegration tests for REST-based 322\u2013326", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2945, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9bfca89-ae74-4843-ae9e-4a358825c3b2": {"__data__": {"id_": "e9bfca89-ae74-4843-ae9e-4a358825c3b2", "embedding": null, "metadata": {"page_label": "487", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90f29860-6702-4711-a3a3-aa7cfcacb050", "node_type": "4", "metadata": {"page_label": "487", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "98886c4b5b504a1357a8ad6fe5fa8c8da4a787e38e72e817e0138b151f6f7d5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 487\nRequestHandler interface 417\nreread value countermeasure 131\nResource Server concept 358\nREST 73\u201376\nbenefits and drawbacks of 75\u201376\nfetching multiple resources in single \nrequest 74\u201375\nmapping operations to HTTP verbs 75\nREST maturity model 74\nspecifying REST APIs 74\nRest Assured Mock MVC 314\nRestaurant domain events 458\u2013459\nRestaurant Service\ncreating services 404\u2013405\ndeploying 402\u2013405\ndesign of 419\u2013423\nAbstractAutowiringHttpRequestHandler \nclass 423\nAbstractHttpHandler class 423\nFindRestaurantRequestHandler class\n421\u2013422\nREST-based request/response style interactions, \nintegration tests for 322\u2013326\nexample contract 324\ntests for API gateway OrderServiceProxy\n325\u2013326\ntests for Order Service 324\u2013325\nRESTful services 419\u2013426\ndeploying lambda functions using Serverless \nframework 425\u2013426\ndesign of Restaurant Service 419\u2013423\npackaging service as ZIP file 424\nretriable transactions 117, 129, 450\nrevise() method 179\nS\nSaas (Software-as-a-Service) 5\nsaga orchestration package 140\nSaga pattern 26\nSagaOrchestratorCreated event 216\nSagaOrchestratorUpdated event 216\nSagaReplyRequested pseudo event 213\nsagas 17, 58, 106, 110\u2013145, 209\u2013218, 450\ncoordinating 117\u2013125\nchoreography-based sagas 118\u2013121\norchestration-based sagas 121\u2013125\nCreate Order saga 135\u2013142\nCreateOrderSaga orchestrator 136\u2013138\nCreateOrderSagaState class 138\nEventuate Tram Saga framework 140\u2013142\nKitchenServiceProxy class 139\ncreating orchestration-based saga 211\u2013212\nwith a NoSQL-based event store 211\u2013212\nwith RDBMS-based event store 211\nimplementing choreography-based sagas using \nevent sourcing 210\nimplementing event sourcing-based saga \nparticipant 213\u2013216\nimplementing saga orchestrators using event \nsourcing 216\u2013218\npersisting using event sourcing 216\nprocessing replies exactly once 218\nsending command messages reliably\n216\u2013218\nlack of isolation 126\u2013132\nanomalies caused by 127\ncountermeasures for handling 128\u2013132\nOrder Service\nOrderCommandHandlers class 142\u2013143\nOrderService class 133\u2013134\nOrderServiceConfiguration class 143\u2013145\ntransaction management 111\u2013117\nmaintaining data consistency 114\u2013117\nneed for distributed transactions 112\ntrouble with distributed transactions 112\u2013114\nunit tests for 310\u2013312\nSATURN conference 34\nsave() method 207\nscalability 430\nscale cube 8\u201311\nX-axis scaling 9\nY-axis scaling 10\u201311\nZ-axis scaling 9\u201310\nsecure services 349\u2013360\nauthentication in API gateway 354\u2013355\nauthorization 356\nin traditional monolithic application 350\u2013353\nusing JWTs to pass user identity and roles\n356\u2013357\nusing OAuth 2.0 357\u2013360\nsecurity patterns 28\u201329\nAccess token 28, 38, 354\nSELECT statements 188\nSelf registration pattern 82\nsemantic lock 450\nsemantic lock countermeasure 129\u2013130\nsending port interface 86\nServerless deployment with lambda 415\u2013419\nbenefits of lambda functions 418\ndeveloping lambda functions 417\ndrawbacks of lambda functions 419\ninvoking lambda functions 417\u2013418\ndefining scheduled lambda functions\n418\nhandling events generated by AWS \nservices 418\nhandling HTTP requests 417\nusing web service request 418\noverview of 416", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3047, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a31c948a-b8ad-4ede-a14e-0f64ad8f036c": {"__data__": {"id_": "a31c948a-b8ad-4ede-a14e-0f64ad8f036c", "embedding": null, "metadata": {"page_label": "488", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2dae169e-e13b-4428-902e-39c854ca8173", "node_type": "4", "metadata": {"page_label": "488", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "9a30bc0fab53f993c3926bd638cf1d1d6e12235b3f7357e445fdc1c37ec5ca9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX488\nServerless framework 425\u2013426\nserver-side discovery pattern 84\u201385\nservice API definition 61\u201364\nassigning system operations to services\n61\u201362\ndetermining APIs required to support \ncollaboration between services\n62\u201364\nService as a container pattern 393\u2013399\nbenefits of 398\nDocker 395\u2013398\nbuilding Docker images 395\u2013396\npushing Docker images to registry\n396\u2013397\nrunning Docker containers 397\u2013398\ndrawbacks of 399\nService as a virtual machine pattern\n390\u2013393\nbenefits of 392\nmature cloud infrastructure 392\nservice instances are isolated 392\nVM image encapsulates technology \nstack 392\ndrawbacks of 392\u2013393\nless-efficient resource utilization 393\nrelatively slow deployments 393\nsystem administration overhead 393\nservice component test 28, 335\nservice configurability 349\nservice definition 76\nDecompose by business capability pattern\n51\u201354\ndecomposition 52\u201354\nidentifying business capabilities 51\u201352\npurpose of business capabilities 51\nDecompose by sub-domain pattern\n54\u201355\nservice deployment patterns 26\nservice discovery 80\u201385\n3rd party registration 84\u201385, 108\nClient-side discovery 82\u201383\noverview of 81\nSelf registration 82\nServer-side discovery 84\u201385\nservice meshes 380\u2013382, 407\u2013415\ndeploying v2 of Consumer Service 414\nIstio 408\u2013412\nrouting production traffic to v2 415\nrouting rules to route to v1 version\n412\u2013413\nrouting test traffic to v2 414\nService object, DDD 152\nservice() method 422\nservice-oriented architecture (SOA)\n13\u201314\nSES (Simple Email Service) 2\nSessionBasedSecurityInterceptor 352\nsessions 351\nsetUp() method 313\nsharded channel 94\nShiro 351\nSidecar pattern 410\nSimple Email Service (SES) 2\nSingle persistence layer 38\nSingle presentation layer 38\nSingle Responsibility Principle (SRP) 56\nsmart pipes 14\nsnapshots 195\u2013196, 201\nSOA (service-oriented architecture) 13\nsociable unit test 308\nsoftware architecture 34\u201337\n4+1 view model of 35\u201337\ndefinition of 35\nrelevance of 37\nsoftware pattern 20\nSoftware-as-a-Service (SaaS) 5\nsolitary unit test 308\nSoundCloud 265\nspecialization pattern 22\nSpring Cloud Contract 303\u2013305\nSpring Cloud Gateway 273\u2013275\nApiGatewayApplication class 279\nOrderConfiguration class 275\u2013276\nOrderHandlers class 276\u2013278\nOrderService class 278\u2013279\nSpring Mock MVC 314\nSpring Security 351\nSPRING_APPLICATION_JSON variable\n363\nSQL 237\u2013238\nSRP (Single Responsibility Principle) 56\nstate machines\nmodeling saga orchestrators as\n123\u2013124\nOrder aggregate 176\u2013177\nStrangler Application pattern 431\u2013432\nStrategy pattern 20\nstubs 296, 339\u2013340\nsuccessor pattern 21\nSUT (system under test) 294\nsynchronous I/O model 268\nsynchronous interactions 67\nsystem operations 45\nassigning to services 61\u201362\ncreating high-level domain model 46\u201348\ndefining 48\u201350\nidentifying 45\u201350\nsystem under test (SUT) 294\nSystem.getenv() method 362", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2759, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a1d864a-c2f6-4573-8bdd-a2d68cc341e1": {"__data__": {"id_": "9a1d864a-c2f6-4573-8bdd-a2d68cc341e1", "embedding": null, "metadata": {"page_label": "489", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bdf1b317-bc7e-48fd-a7cc-60be63a4d67d", "node_type": "4", "metadata": {"page_label": "489", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "e7573eeab7114af77383c71b680ef2cdfa8097ede300c655202be4057799759f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX 489\nT\ntelemetry 409\ntest cases 294\ntest double 296\ntest pyramid 298\u2013299\ntest quadrant 297\u2013298\n@Test shouldCalculateTotal() method 309\n@Test shouldCreateOrder() method 312\ntest suites 294\ntesting 292\u2013347\nacceptance tests 335\u2013338\ndefining 336\nwriting using Gherkin 337\u2013338\nchallenge of 299\u2013305\nconsumer contract testing 301\u2013303\nconsumer contract testing for messaging \nAPIs 305\nSpring Cloud Contract 303\u2013305\ncomponent tests 339\u2013340\nfor FTGO Order Service 340\u2013345\nin-process component tests 339\nout-of-process component tests\n339\u2013340\nConsumer-driven contract test 28, \n301\u2013302\nConsumer-side contract test 28, 303\ndeployment pipeline 305\u2013307\nend-to-end tests 345\u2013346\ndesigning 345\nrunning 346\nwriting 346\nintegration tests 319\u2013335\ncontract tests for asynchronous request/\nresponse interactions 330\u2013335\npersistence integration tests 321\u2013322\npublish/subscribe-style interactions\n326\u2013330\nREST-based request/response style \ninteractions 322\u2013326\noverview of 294\u2013299\nautomated tests 295\u2013296\ndifferent types of tests 297\nmocks and stubs 296\ntest pyramid 298\u2013299\ntest quadrant 297\u2013298\nService component test 28, 335\nunit tests 307\u2013317\nfor controllers 313\u2013315\nfor domain services 312\u2013313\nfor entities 309\u2013310\nfor event and message handlers 315\u2013317\nfor sagas 310\u2013312\nfor value objects 310\ntestuser header 414\ntext-based message formats 71\u201372\nTicket aggregate 169\u2013173\nbehavior of 170\u2013171\nKitchenService domain service 171\u2013172\nKitchenServiceCommandHandler class\n172\u2013173\nstructure of Ticket class 170\ntight coupling 121\ntimeouts 79\nTLS (Transport Layer Security) 350\ntokens 356\nTraefik 272\ntraffic management 408\ntransaction log tailing 99\u2013100, 195\ntransaction management 111\u2013117\nmaintaining data consistency 114\u2013117\nneed for distributed transactions 112\ntrouble with distributed transactions\n112\u2013114\nSee also sagas\nTransaction script pattern 149\u2013150\n@Transactional annotation 111\ntransactional messaging 97\u2013100\nPolling publisher pattern 98\u201399\nTransaction log tailing pattern 99\u2013100\nTransactional outbox pattern 97\u201398, 109\nusing database table as message queue\n97\u201398\ntransparent tokens 356\nTransport Layer Security (TLS) 350\ntwo-phase commit (2PC) 112\nU\nUbiquitous Language 54\nunit tests 307\u2013317\nfor controllers 313\u2013315\nfor domain services 312\u2013313\nfor entities 309\u2013310\nfor event and message handlers 315\u2013317\nfor sagas 310\u2013312\nfor value objects 310\nupcasting 199\nUPDATE statement 193\nupdate() method 204, 207, 215\nUpdateItem() operation 248\nUSERINFO cookie\nLoginHandler and 454\u2013455\nmapping to Authorization header 455\nV\nValue object, DDD 151\nvalue objects, unit tests for 310\nversion file countermeasure 131", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2595, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "baf20abb-d6ab-475e-a6d4-76a207c5d57a": {"__data__": {"id_": "baf20abb-d6ab-475e-a6d4-76a207c5d57a", "embedding": null, "metadata": {"page_label": "490", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c614bde-3c71-449f-987a-0ed6c6d09fc8", "node_type": "4", "metadata": {"page_label": "490", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "23f0f96719ef472975ec00c8d398793b23ddfd94f8bea4769e0f659ed1069ef6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INDEX490\nVIP (virtual IP) address 83\nVirtualService 413\nVMs (virtual machines) 26\nW\nWAR (Web Application Archive) file 2\nWebSockets 257\nX\nXML message 71\nZ\nZeroMQ 91\nZipkin 373", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 175, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2c11c584-9c65-4dc5-96c0-56d121d86182": {"__data__": {"id_": "2c11c584-9c65-4dc5-96c0-56d121d86182", "embedding": null, "metadata": {"page_label": "IBC", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a56a22d3-a5eb-4c5d-a49e-503304b5cd22", "node_type": "4", "metadata": {"page_label": "IBC", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "d0c9b9b55fb23614d380228f8c98a65245f57f55fe44297c48017c5863bb1e45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Enables\nEnables\nArchitecture:\nMicroservice\narchitecture\nOrganization:\nSmall, autonomous,\ncross-functional teams\nProcess:\nDevOps/continuous delivery/deployment\nEnables\nRapid, frequent,\nand reliable delivery\nof software\nThe rapid, frequent, and reliable delivery of large, complex applications requires \na combination of DevOps, which includes continuous delivery/deployment, small, \nautonomous teams, and the microservice architecture.\nSmall, autonomous,\nloosely coupled teams\nEach service has\nits own source\ncode repository.\nEach service has\nits own automated\ndeployment pipeline.\nSmall, simple,\nreliable, easy to\nmaintain services\nOrder management team\nRestaurant management team\nDelivery management team\nFTGO development\nProduction\nJenkins Cl\nDeployment pipeline\nOrder Service\nsource code\nrepository\nOrder Service\nJenkins Cl\nDeployment pipeline\nRestaurant Service\nsource code\nrepository\nRestaurant Service\nJenkins Cl\nDeployment pipeline\nDelivery Service\nsource code\nrepository\nDelivery Service\nThe microservice architecture structures an application as a set of loosely coupled services that are \norganized around business capabilities. Each team develops, tests, and deploys their services \nindependently.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1208, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "49af0546-c58e-4e34-9e95-7215dff878f5": {"__data__": {"id_": "49af0546-c58e-4e34-9e95-7215dff878f5", "embedding": null, "metadata": {"page_label": "Back cover", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6777253-428f-4f0e-adba-49475bb275ed", "node_type": "4", "metadata": {"page_label": "Back cover", "file_name": "Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_path": "/Users/marcocalamo/Downloads/micro/Chris Richardson - Microservices Patterns_ With examples in Java-Manning Publications (2018).pdf", "file_type": "application/pdf", "file_size": 7930716, "creation_date": "2025-05-26", "last_modified_date": "2025-05-05"}, "hash": "751a77661e98a40756435e801e6e2adf7d341571ec1008bddde9ff7770d44988", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Chris Richardson\nS\nuccessfully developing microservices-based applications \nrequires mastering a new set of architectural insights and \npractices. In this unique book, microservice architecture \npioneer and Java Champion Chris Richardson collects, cata-\nlogues, and explains 44 patterns that solve problems such as \nservice decomposition, transaction management, querying, \nand inter-service communication.\nMicroservices Patterns  teaches you how to develop and deploy \nproduction-quality microservices-based applications. This \ninvaluable set of design patterns builds on decades of dis-\ntributed system experience, adding new patterns for writing \nservices and composing them into systems that scale and \nperform reliably under real-world conditions. More than just \na patterns catalog, this practical guide offers experience-driven \nadvice to help you design, implement, test, and deploy your \nmicroservices-based application. \nWhat\u2019s Inside\n\u25cf  How (and why!) to use the microservice architecture\n\u25cf  Service decomposition strategies\n\u25cf  T ransaction management and querying patterns\n\u25cf  Effective testing strategies\n\u25cf  Deployment patterns including containers and serverless\nWritten for enterprise developers familiar with standard enter-\nprise application architecture. Examples are in Java.\nChris Richardson  is a Java Champion, a JavaOne rock star, \nauthor of Manning\u2019s POJOs in Action, and the creator of the \noriginal CloudFoundry.com.\nTo download their free eBook in PDF, ePub, and Kindle formats, owners \nof this book should visit manning.com/books/microservices-patterns\n$49.99 / Can $65.99  [INCLUDING eBOOK]\nMicroservices Patterns\nSOFTWARE DEVELOPMENT\nMANNING\n\u201c\nA comprehensive overview \nof the challenges teams face \nwhen moving to microservices, \nwith industry-tested solutions \nto these problems.\n\u201d\n \n\u2014Tim Moore, Lightbend\n\u201c\nPragmatic treatment of \nan important new \n architectural landscape.\n\u201d\n \n\u2014Simeon Leyzerzon\nExcelsior Software\n\u201c\nA solid compendium of \ninformation that will quicken \nyour migration to this modern \ncloud-based architecture.\n\u201d\u2014John Guthrie, Dell/EMC \n\u201c\nHow to understand the \nmicroservices approach, and \nhow to use it in real life.\n\u201d\n \n\u2014Potito Coluccelli\nBizmatica Econocom\nSee first page", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2225, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}